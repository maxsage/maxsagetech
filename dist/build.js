!function(e){function t(a){if(n[a])return n[a].exports;var o=n[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,t,n){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/dist/",t(t.s=881)}([function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var a={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(a[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&a[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(e,t){function n(e,t){for(var n=0;n<e.length;n++){var a=e[n],o=d[a.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](a.parts[i]);for(;i<a.parts.length;i++)o.parts.push(r(a.parts[i],t))}else{for(var s=[],i=0;i<a.parts.length;i++)s.push(r(a.parts[i],t));d[a.id]={id:a.id,refs:1,parts:s}}}}function a(e){for(var t=[],n={},a=0;a<e.length;a++){var o=e[a],i=o[0],s=o[1],r=o[2],l=o[3],c={css:s,media:r,sourceMap:l};n[i]?n[i].parts.push(c):t.push(n[i]={id:i,parts:[c]})}return t}function o(e,t){var n=u(),a=m[m.length-1];if("top"===e.insertAt)a?a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),m.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function i(e){e.parentNode.removeChild(e);var t=m.indexOf(e);t>=0&&m.splice(t,1)}function s(e){var t=document.createElement("style");return t.type="text/css",o(e,t),t}function r(e,t){var n,a,o;if(t.singleton){var r=g++;n=v||(v=s(t)),a=l.bind(null,n,r,!1),o=l.bind(null,n,r,!0)}else n=s(t),a=c.bind(null,n),o=function(){i(n)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else o()}}function l(e,t,n,a){var o=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function c(e,t){var n=t.css,a=t.media,o=t.sourceMap;if(a&&e.setAttribute("media",a),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var d={},p=function(e){var t;return function(){return"undefined"==typeof t&&(t=e.apply(this,arguments)),t}},h=p(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),u=p(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,g=0,m=[];e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");t=t||{},"undefined"==typeof t.singleton&&(t.singleton=h()),"undefined"==typeof t.insertAt&&(t.insertAt="bottom");var o=a(e);return n(o,t),function(e){for(var i=[],s=0;s<o.length;s++){var r=o[s],l=d[r.id];l.refs--,i.push(l)}if(e){var c=a(e);n(c,t)}for(var s=0;s<i.length;s++){var l=i[s];if(0===l.refs){for(var p=0;p<l.parts.length;p++)l.parts[p]();delete d[l.id]}}}};var f=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t,n){(function(e,a){function o(e,t){this._id=e,this._clearFn=t}var i=n(744).nextTick,s=Function.prototype.apply,r=Array.prototype.slice,l={},c=0;t.setTimeout=function(){return new o(s.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new o(s.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},t.setImmediate="function"==typeof e?e:function(e){var n=c++,a=!(arguments.length<2)&&r.call(arguments,1);return l[n]=!0,i(function(){l[n]&&(a?e.apply(null,a):e.call(null),t.clearImmediate(n))}),n},t.clearImmediate="function"==typeof a?a:function(e){delete l[e]}}).call(t,n(2).setImmediate,n(2).clearImmediate)},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-024.png?e25f2b27f46b8d79adcf5989229be586"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-087.png?e0b49b89a5946eac4f724a5e2d9cf704"},function(e,t,n){var a,o,i=n(834);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){"use strict";var a=n(745),o=n.n(a),i=n(5),s=n.n(i),r=n(751),l=n.n(r),c=n(752),d=n.n(c),p=n(753),h=n.n(p),u=n(754),v=n.n(u),g=n(755),m=n.n(g),f=n(756),_=n.n(f),w=n(757),y=n.n(w),b=n(758),C=n.n(b),x=n(759),I=n.n(x),k=n(760),S=n.n(k),T=n(761),D=n.n(T),F=n(766),V=n.n(F),P=n(767),M=n.n(P),A=n(768),j=n.n(A),B=n(769),L=n.n(B),N=n(770),E=n.n(N),W=n(771),O=n.n(W),R=n(762),G=n.n(R),H=n(763),U=n.n(H),z=n(764),$=n.n(z),X=n(765),q=n.n(X),Y=n(772),Z=n.n(Y),J=n(773),K=n.n(J),Q=n(774),ee=n.n(Q),te=n(775),ne=n.n(te),ae=n(776),oe=n.n(ae),ie=n(777),se=n.n(ie),re=n(778),le=n.n(re),ce=n(779),de=n.n(ce),pe=n(780),he=n.n(pe),ue=n(781),ve=n.n(ue),ge=n(782),me=n.n(ge),fe=n(783),_e=n.n(fe),we=n(784),ye=n.n(we),be=n(785),Ce=n.n(be),xe=n(786),Ie=n.n(xe),ke=n(787),Se=n.n(ke),Te=n(788),De=n.n(Te),Fe=n(789),Ve=n.n(Fe),Pe=n(790),Me=n.n(Pe),Ae=n(750),je=n.n(Ae),Be=n(746),Le=n.n(Be),Ne=n(748),Ee=n.n(Ne),We=n(747),Oe=n.n(We),Re=n(749),Ge=n.n(Re);n.d(t,"a",function(){return He});var He=[{path:"",name:"home",components:{default:o.a,"header-top":s.a}},{path:"/vuejs",components:{default:l.a,"header-top":s.a}},{path:"/vuejsessentials-00-course-contents",components:{default:d.a,"header-top":s.a}},{path:"/vuejsessentials-01-an-introduction-to-vue",components:{default:h.a,"header-top":s.a}},{path:"/vuejsessentials-02-moving-on-with-vue-cli",components:{default:v.a,"header-top":s.a}},{path:"/vuejsessentials-03-writing-effective-apps",components:{default:m.a,"header-top":s.a}},{path:"/vuejsessentials-04-handling-state-with-vuex",components:{default:_.a,"header-top":s.a}},{path:"/vuejsessentials-05-authentication-in-vue-with-oauth2",components:{default:y.a,"header-top":s.a}},{path:"/vuejsessentials-06-navigation-with-vue-router",components:{default:C.a,"header-top":s.a}},{path:"/vuejsessentials-07-design-of-vuex-modules",components:{default:I.a,"header-top":s.a}},{path:"/vuejsessentials-08-handling-image-upload",components:{default:S.a,"header-top":s.a}},{path:"/wpf",components:{default:D.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-00-course-contents",components:{default:V.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-01-course-overview",components:{default:M.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-02-databinding-overview",components:{default:j.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-03-data-sources",components:{default:L.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-04-binding-core-concepts",components:{default:E.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-05-unleashing-the-full-power-of-bindings",components:{default:O.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-06-deep-dive-into-data-templates",components:{default:G.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-07-design-time-data-binding",components:{default:U.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-08-containers-and-collection-controls",components:{default:$.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-09-data-input-validation",components:{default:q.a,"header-top":s.a}},{path:"/wpf-databinding-in-depth-09-data-input-validation",components:{default:q.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-00-course-contents",components:{default:Z.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-01-mvvm-pattern-fundamentals",components:{default:K.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-02-first-taste-of-mvvm",components:{default:ee.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-03-hooking-up-views-and-viewmodels-in-mvvm",components:{default:ne.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-04-view-viewmodel-communication-in-wpf",components:{default:oe.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-05-applied-mvvm-part-1-hierarchies-and-navigation",components:{default:se.a,"header-top":s.a}},{path:"/wpf-mvvm-in-depth-06-applied-mvvm-part-2-validation-and-dependency-injection",components:{default:le.a,"header-top":s.a}},{path:"/xamarin",components:{default:de.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-00-course-contents",components:{default:he.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-01-getting-started",components:{default:ve.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-02-xaml-essentials",components:{default:me.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-03-layouts",components:{default:_e.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-04-images",components:{default:ye.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-05-lists",components:{default:Ce.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-06-navigation",components:{default:Ie.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-07-forms-and-settings-pages",components:{default:Se.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-08-data-access",components:{default:De.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-09-model-view-viewmodel-architectural-pattern",components:{default:Ve.a,"header-top":s.a}},{path:"/xamarin-forms-cross-platform-10-beyond-the-basics",components:{default:Me.a,"header-top":s.a}},{path:"/sqlite",components:{default:je.a,"header-top":s.a}},{path:"/editors",components:{default:Le.a,"header-top":s.a}},{path:"/editors/visual-studio",components:{default:Ee.a,"header-top":s.a}},{path:"/editors/visual-studio-code",components:{default:Oe.a,"header-top":s.a}},{path:"/editors/webstorm",components:{default:Ge.a,"header-top":s.a}},{path:"/redirect-me",redirect:{name:"home"}},{path:"*",redirect:"/"}]},function(e,t,n){var a,o;n(878),a=n(10);var i=n(837);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){"use strict";function a(e,t){}function o(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function i(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0}}function s(e,t){for(var n in t)e[n]=t[n];return e}function r(e,t,n){void 0===t&&(t={});var a,o=n||l;try{a=o(e||"")}catch(e){a={}}for(var i in t)a[i]=t[i];return a}function l(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach(function(e){var n=e.replace(/\+/g," ").split("="),a=Oe(n.shift()),o=n.length>0?Oe(n.join("=")):null;void 0===t[a]?t[a]=o:Array.isArray(t[a])?t[a].push(o):t[a]=[t[a],o]}),t):t}function c(e){var t=e?Object.keys(e).map(function(t){var n=e[t];if(void 0===n)return"";if(null===n)return We(t);if(Array.isArray(n)){var a=[];return n.forEach(function(e){void 0!==e&&(null===e?a.push(We(t)):a.push(We(t)+"="+We(e)))}),a.join("&")}return We(t)+"="+We(n)}).filter(function(e){return e.length>0}).join("&"):null;return t?"?"+t:""}function d(e,t,n,a){var o=a&&a.options.stringifyQuery,i=t.query||{};try{i=p(i)}catch(e){}var s={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:i,params:t.params||{},fullPath:u(t,o),matched:e?h(e):[]};return n&&(s.redirectedFrom=u(n,o)),Object.freeze(s)}function p(e){if(Array.isArray(e))return e.map(p);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=p(e[n]);return t}return e}function h(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function u(e,t){var n=e.path,a=e.query;void 0===a&&(a={});var o=e.hash;void 0===o&&(o="");var i=t||c;return(n||"/")+i(a)+o}function v(e,t){return t===Ge?e===t:!!t&&(e.path&&t.path?e.path.replace(Re,"")===t.path.replace(Re,"")&&e.hash===t.hash&&g(e.query,t.query):!(!e.name||!t.name)&&(e.name===t.name&&e.hash===t.hash&&g(e.query,t.query)&&g(e.params,t.params)))}function g(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e),a=Object.keys(t);return n.length===a.length&&n.every(function(n){var a=e[n],o=t[n];return"object"==typeof a&&"object"==typeof o?g(a,o):String(a)===String(o)})}function m(e,t){return 0===e.path.replace(Re,"/").indexOf(t.path.replace(Re,"/"))&&(!t.hash||e.hash===t.hash)&&f(e.query,t.query)}function f(e,t){for(var n in t)if(!(n in e))return!1;return!0}function _(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function w(e){if(e)for(var t,n=0;n<e.length;n++){if(t=e[n],"a"===t.tag)return t;if(t.children&&(t=w(t.children)))return t}}function y(e){if(!y.installed||je!==e){y.installed=!0,je=e;var t=function(e){return void 0!==e},n=function(e,n){var a=e.$options._parentVnode;t(a)&&t(a=a.data)&&t(a=a.registerRouteInstance)&&a(e,n)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,n(this,this)},destroyed:function(){n(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("router-view",Be),e.component("router-link",ze);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}}function b(e,t,n){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return t+e;var o=t.split("/");n&&o[o.length-1]||o.pop();for(var i=e.replace(/^\//,"").split("/"),s=0;s<i.length;s++){var r=i[s];".."===r?o.pop():"."!==r&&o.push(r)}return""!==o[0]&&o.unshift(""),o.join("/")}function C(e){var t="",n="",a=e.indexOf("#");a>=0&&(t=e.slice(a),e=e.slice(0,a));var o=e.indexOf("?");return o>=0&&(n=e.slice(o+1),e=e.slice(0,o)),{path:e,query:n,hash:t}}function x(e){return e.replace(/\/\//g,"/")}function I(e,t){for(var n,a=[],o=0,i=0,s="",r=t&&t.delimiter||"/";null!=(n=Qe.exec(e));){var l=n[0],c=n[1],d=n.index;if(s+=e.slice(i,d),i=d+l.length,c)s+=c[1];else{var p=e[i],h=n[2],u=n[3],v=n[4],g=n[5],m=n[6],f=n[7];s&&(a.push(s),s="");var _=null!=h&&null!=p&&p!==h,w="+"===m||"*"===m,y="?"===m||"*"===m,b=n[2]||r,C=v||g;a.push({name:u||o++,prefix:h||"",delimiter:b,optional:y,repeat:w,partial:_,asterisk:!!f,pattern:C?V(C):f?".*":"[^"+F(b)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&a.push(s),a}function k(e,t){return D(I(e,t))}function S(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function T(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function D(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,a){for(var o="",i=n||{},s=a||{},r=s.pretty?S:encodeURIComponent,l=0;l<e.length;l++){var c=e[l];if("string"!=typeof c){var d,p=i[c.name];if(null==p){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(Xe(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var h=0;h<p.length;h++){if(d=r(p[h]),!t[l].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");o+=(0===h?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?T(p):r(p),!t[l].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');o+=c.prefix+d}}else o+=c}return o}}function F(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function V(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function P(e,t){return e.keys=t,e}function M(e){return e.sensitive?"":"i"}function A(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var a=0;a<n.length;a++)t.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return P(e,t)}function j(e,t,n){for(var a=[],o=0;o<e.length;o++)a.push(N(e[o],t,n).source);var i=new RegExp("(?:"+a.join("|")+")",M(n));return P(i,t)}function B(e,t,n){return L(I(e,n),t,n)}function L(e,t,n){Xe(t)||(n=t||n,t=[]),n=n||{};for(var a=n.strict,o=n.end!==!1,i="",s=0;s<e.length;s++){var r=e[s];if("string"==typeof r)i+=F(r);else{var l=F(r.prefix),c="(?:"+r.pattern+")";t.push(r),r.repeat&&(c+="(?:"+l+c+")*"),c=r.optional?r.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")",i+=c}}var d=F(n.delimiter||"/"),p=i.slice(-d.length)===d;return a||(i=(p?i.slice(0,-d.length):i)+"(?:"+d+"(?=$))?"),i+=o?"$":a&&p?"":"(?="+d+"|$)",P(new RegExp("^"+i,M(n)),t)}function N(e,t,n){return Xe(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?A(e,t):Xe(e)?j(e,t,n):B(e,t,n)}function E(e,t,n){try{var a=et[e]||(et[e]=qe.compile(e));return a(t||{},{pretty:!0})}catch(e){return""}}function W(e,t,n,a){var o=t||[],i=n||Object.create(null),s=a||Object.create(null);e.forEach(function(e){O(o,i,s,e)});for(var r=0,l=o.length;r<l;r++)"*"===o[r]&&(o.push(o.splice(r,1)[0]),l--,r--);return{pathList:o,pathMap:i,nameMap:s}}function O(e,t,n,a,o,i){var s=a.path,r=a.name,l=a.pathToRegexpOptions||{},c=G(s,o,l.strict);"boolean"==typeof a.caseSensitive&&(l.sensitive=a.caseSensitive);var d={path:c,regex:R(c,l),components:a.components||{default:a.component},instances:{},name:r,parent:o,matchAs:i,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};if(a.children&&a.children.forEach(function(a){var o=i?x(i+"/"+a.path):void 0;O(e,t,n,a,d,o)}),void 0!==a.alias){var p=Array.isArray(a.alias)?a.alias:[a.alias];p.forEach(function(i){var s={path:i,children:a.children};O(e,t,n,s,o,d.path||"/")})}t[d.path]||(e.push(d.path),t[d.path]=d),r&&(n[r]||(n[r]=d))}function R(e,t){var n=qe(e,[],t);return n}function G(e,t,n){return n||(e=e.replace(/\/$/,"")),"/"===e[0]?e:null==t?e:x(t.path+"/"+e)}function H(e,t,n,a){var o="string"==typeof e?{path:e}:e;if(o.name||o._normalized)return o;if(!o.path&&o.params&&t){o=U({},o),o._normalized=!0;var i=U(U({},t.params),o.params);if(t.name)o.name=t.name,o.params=i;else if(t.matched.length){var s=t.matched[t.matched.length-1].path;o.path=E(s,i,"path "+t.path)}return o}var l=C(o.path||""),c=t&&t.path||"/",d=l.path?b(l.path,c,n||o.append):c,p=r(l.query,o.query,a&&a.options.parseQuery),h=o.hash||l.hash;return h&&"#"!==h.charAt(0)&&(h="#"+h),{_normalized:!0,path:d,query:p,hash:h}}function U(e,t){for(var n in t)e[n]=t[n];return e}function z(e,t){function n(e){W(e,l,c,p)}function a(e,n,a){var o=H(e,n,!1,t),i=o.name;if(i){var r=p[i];if(!r)return s(null,o);var d=r.regex.keys.filter(function(e){return!e.optional}).map(function(e){return e.name});if("object"!=typeof o.params&&(o.params={}),n&&"object"==typeof n.params)for(var h in n.params)!(h in o.params)&&d.indexOf(h)>-1&&(o.params[h]=n.params[h]);if(r)return o.path=E(r.path,o.params,'named route "'+i+'"'),s(r,o,a)}else if(o.path){o.params={};for(var u=0;u<l.length;u++){var v=l[u],g=c[v];if($(g.regex,o.path,o.params))return s(g,o,a)}}return s(null,o)}function o(e,n){var o=e.redirect,i="function"==typeof o?o(d(e,n,null,t)):o;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return s(null,n);var r=i,l=r.name,c=r.path,h=n.query,u=n.hash,v=n.params;if(h=r.hasOwnProperty("query")?r.query:h,u=r.hasOwnProperty("hash")?r.hash:u,v=r.hasOwnProperty("params")?r.params:v,l){p[l];return a({_normalized:!0,name:l,query:h,hash:u,params:v},void 0,n)}if(c){var g=X(c,e),m=E(g,v,'redirect route with path "'+g+'"');return a({_normalized:!0,path:m,query:h,hash:u},void 0,n)}return s(null,n)}function i(e,t,n){var o=E(n,t.params,'aliased route with path "'+n+'"'),i=a({_normalized:!0,path:o});if(i){var r=i.matched,l=r[r.length-1];return t.params=i.params,s(l,t)}return s(null,t)}function s(e,n,a){return e&&e.redirect?o(e,a||n):e&&e.matchAs?i(e,n,e.matchAs):d(e,n,a,t)}var r=W(e),l=r.pathList,c=r.pathMap,p=r.nameMap;return{match:a,addRoutes:n}}function $(e,t,n){var a=t.match(e);if(!a)return!1;if(!n)return!0;for(var o=1,i=a.length;o<i;++o){var s=e.keys[o-1],r="string"==typeof a[o]?decodeURIComponent(a[o]):a[o];s&&(n[s.name]=r)}return!0}function X(e,t){return b(e,t.parent?t.parent.path:"/",!0)}function q(){window.history.replaceState({key:ie()},""),window.addEventListener("popstate",function(e){Z(),e.state&&e.state.key&&se(e.state.key)})}function Y(e,t,n,a){if(e.app){var o=e.options.scrollBehavior;o&&e.app.$nextTick(function(){var e=J(),i=o(t,n,a?e:null);i&&("function"==typeof i.then?i.then(function(t){ae(t,e)}).catch(function(e){}):ae(i,e))})}}function Z(){var e=ie();e&&(tt[e]={x:window.pageXOffset,y:window.pageYOffset})}function J(){var e=ie();if(e)return tt[e]}function K(e,t){var n=document.documentElement,a=n.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-a.left-t.x,y:o.top-a.top-t.y}}function Q(e){return ne(e.x)||ne(e.y)}function ee(e){return{x:ne(e.x)?e.x:window.pageXOffset,y:ne(e.y)?e.y:window.pageYOffset}}function te(e){return{x:ne(e.x)?e.x:0,y:ne(e.y)?e.y:0}}function ne(e){return"number"==typeof e}function ae(e,t){var n="object"==typeof e;if(n&&"string"==typeof e.selector){var a=document.querySelector(e.selector);if(a){var o=e.offset&&"object"==typeof e.offset?e.offset:{};o=te(o),t=K(a,o)}else Q(e)&&(t=ee(e))}else n&&Q(e)&&(t=ee(e));t&&window.scrollTo(t.x,t.y)}function oe(){return at.now().toFixed(3)}function ie(){return ot}function se(e){ot=e}function re(e,t){Z();var n=window.history;try{t?n.replaceState({key:ot},"",e):(ot=oe(),n.pushState({key:ot},"",e))}catch(n){window.location[t?"replace":"assign"](e)}}function le(e){re(e,!0)}function ce(e,t,n){var a=function(o){o>=e.length?n():e[o]?t(e[o],function(){a(o+1)}):a(o+1)};a(0)}function de(e){return function(t,n,a){var i=!1,s=0,r=null;pe(e,function(e,t,n,l){if("function"==typeof e&&void 0===e.cid){i=!0,s++;var c,d=ve(function(t){ue(t)&&(t=t.default),e.resolved="function"==typeof t?t:je.extend(t),n.components[l]=t,s--,s<=0&&a()}),p=ve(function(e){var t="Failed to resolve async component "+l+": "+e;r||(r=o(e)?e:new Error(t),a(r))});try{c=e(d,p)}catch(e){p(e)}if(c)if("function"==typeof c.then)c.then(d,p);else{var h=c.component;h&&"function"==typeof h.then&&h.then(d,p)}}}),i||a()}}function pe(e,t){return he(e.map(function(e){return Object.keys(e.components).map(function(n){return t(e.components[n],e.instances[n],e,n)})}))}function he(e){return Array.prototype.concat.apply([],e)}function ue(e){return e.__esModule||it&&"Module"===e[Symbol.toStringTag]}function ve(e){var t=!1;return function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(!t)return t=!0,e.apply(this,n)}}function ge(e){if(!e)if($e){var t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^https?:\/\/[^\/]+/,"")}else e="/";return"/"!==e.charAt(0)&&(e="/"+e),e.replace(/\/$/,"")}function me(e,t){var n,a=Math.max(e.length,t.length);for(n=0;n<a&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}function fe(e,t,n,a){var o=pe(e,function(e,a,o,i){var s=_e(e,t);if(s)return Array.isArray(s)?s.map(function(e){return n(e,a,o,i)}):n(s,a,o,i)});return he(a?o.reverse():o)}function _e(e,t){return"function"!=typeof e&&(e=je.extend(e)),e.options[t]}function we(e){return fe(e,"beforeRouteLeave",be,!0)}function ye(e){return fe(e,"beforeRouteUpdate",be)}function be(e,t){if(t)return function(){return e.apply(t,arguments)}}function Ce(e,t,n){return fe(e,"beforeRouteEnter",function(e,a,o,i){return xe(e,o,i,t,n)})}function xe(e,t,n,a,o){return function(i,s,r){return e(i,s,function(e){r(e),"function"==typeof e&&a.push(function(){Ie(e,t.instances,n,o)})})}}function Ie(e,t,n,a){t[n]?e(t[n]):a()&&setTimeout(function(){Ie(e,t,n,a)},16)}function ke(e){var t=window.location.pathname;return e&&0===t.indexOf(e)&&(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}function Se(e){var t=ke(e);if(!/^\/#/.test(t))return window.location.replace(x(e+"/#"+t)),!0}function Te(){var e=De();return"/"===e.charAt(0)||(Pe("/"+e),!1)}function De(){var e=window.location.href,t=e.indexOf("#");return t===-1?"":e.slice(t+1)}function Fe(e){var t=window.location.href,n=t.indexOf("#"),a=n>=0?t.slice(0,n):t;return a+"#"+e}function Ve(e){nt?re(Fe(e)):window.location.hash=e}function Pe(e){nt?le(Fe(e)):window.location.replace(Fe(e))}function Me(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function Ae(e,t,n){var a="hash"===n?"#"+t:t;return e?x(e+"/"+a):a}var je,Be={name:"router-view",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,a=t.children,o=t.parent,r=t.data;r.routerView=!0;for(var l=o.$createElement,c=n.name,d=o.$route,p=o._routerViewCache||(o._routerViewCache={}),h=0,u=!1;o&&o._routerRoot!==o;)o.$vnode&&o.$vnode.data.routerView&&h++,o._inactive&&(u=!0),o=o.$parent;if(r.routerViewDepth=h,u)return l(p[c],r,a);var v=d.matched[h];if(!v)return p[c]=null,l();var g=p[c]=v.components[c];r.registerRouteInstance=function(e,t){var n=v.instances[c];(t&&n!==e||!t&&n===e)&&(v.instances[c]=t)},(r.hook||(r.hook={})).prepatch=function(e,t){v.instances[c]=t.componentInstance};var m=r.props=i(d,v.props&&v.props[c]);if(m){m=r.props=s({},m);var f=r.attrs=r.attrs||{};for(var _ in m)g.props&&_ in g.props||(f[_]=m[_],delete m[_])}return l(g,r,a)}},Le=/[!'()*]/g,Ne=function(e){return"%"+e.charCodeAt(0).toString(16)},Ee=/%2C/g,We=function(e){return encodeURIComponent(e).replace(Le,Ne).replace(Ee,",")},Oe=decodeURIComponent,Re=/\/?$/,Ge=d(null,{path:"/"}),He=[String,Object],Ue=[String,Array],ze={name:"router-link",props:{to:{type:He,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:Ue,default:"click"}},render:function(e){var t=this,n=this.$router,a=this.$route,o=n.resolve(this.to,a,this.append),i=o.location,s=o.route,r=o.href,l={},c=n.options.linkActiveClass,p=n.options.linkExactActiveClass,h=null==c?"router-link-active":c,u=null==p?"router-link-exact-active":p,g=null==this.activeClass?h:this.activeClass,f=null==this.exactActiveClass?u:this.exactActiveClass,y=i.path?d(null,i,null,n):s;l[f]=v(a,y),l[g]=this.exact?l[f]:m(a,y);var b=function(e){_(e)&&(t.replace?n.replace(i):n.push(i))},C={click:_};Array.isArray(this.event)?this.event.forEach(function(e){C[e]=b}):C[this.event]=b;var x={class:l};if("a"===this.tag)x.on=C,x.attrs={href:r};else{var I=w(this.$slots.default);if(I){I.isStatic=!1;var k=je.util.extend,S=I.data=k({},I.data);S.on=C;var T=I.data.attrs=k({},I.data.attrs);T.href=r}else x.on=C}return e(this.tag,x,this.$slots.default)}},$e="undefined"!=typeof window,Xe=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},qe=N,Ye=I,Ze=k,Je=D,Ke=L,Qe=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");qe.parse=Ye,qe.compile=Ze,qe.tokensToFunction=Je,qe.tokensToRegExp=Ke;var et=Object.create(null),tt=Object.create(null),nt=$e&&function(){var e=window.navigator.userAgent;return(e.indexOf("Android 2.")===-1&&e.indexOf("Android 4.0")===-1||e.indexOf("Mobile Safari")===-1||e.indexOf("Chrome")!==-1||e.indexOf("Windows Phone")!==-1)&&(window.history&&"pushState"in window.history)}(),at=$e&&window.performance&&window.performance.now?window.performance:Date,ot=oe(),it="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,st=function(e,t){this.router=e,this.base=ge(t),this.current=Ge,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};st.prototype.listen=function(e){this.cb=e},st.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},st.prototype.onError=function(e){this.errorCbs.push(e)},st.prototype.transitionTo=function(e,t,n){var a=this,o=this.router.match(e,this.current);this.confirmTransition(o,function(){a.updateRoute(o),t&&t(o),a.ensureURL(),a.ready||(a.ready=!0,a.readyCbs.forEach(function(e){e(o)}))},function(e){n&&n(e),e&&!a.ready&&(a.ready=!0,a.readyErrorCbs.forEach(function(t){t(e)}))})},st.prototype.confirmTransition=function(e,t,n){var i=this,s=this.current,r=function(e){o(e)&&(i.errorCbs.length?i.errorCbs.forEach(function(t){t(e)}):(a(!1,"uncaught error during route navigation:"),console.error(e))),n&&n(e)};if(v(e,s)&&e.matched.length===s.matched.length)return this.ensureURL(),r();var l=me(this.current.matched,e.matched),c=l.updated,d=l.deactivated,p=l.activated,h=[].concat(we(d),this.router.beforeHooks,ye(c),p.map(function(e){return e.beforeEnter}),de(p));this.pending=e;var u=function(t,n){if(i.pending!==e)return r();try{t(e,s,function(e){e===!1||o(e)?(i.ensureURL(!0),r(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(r(),"object"==typeof e&&e.replace?i.replace(e):i.push(e)):n(e)})}catch(e){r(e)}};ce(h,u,function(){var n=[],a=function(){return i.current===e},o=Ce(p,n,a),s=o.concat(i.router.resolveHooks);ce(s,u,function(){return i.pending!==e?r():(i.pending=null,t(e),void(i.router.app&&i.router.app.$nextTick(function(){n.forEach(function(e){e()})})))})})},st.prototype.updateRoute=function(e){var t=this.current;this.current=e,this.cb&&this.cb(e),this.router.afterHooks.forEach(function(n){n&&n(e,t)})};var rt=function(e){function t(t,n){var a=this;e.call(this,t,n);var o=t.options.scrollBehavior;o&&q();var i=ke(this.base);window.addEventListener("popstate",function(e){var n=a.current,s=ke(a.base);a.current===Ge&&s===i||a.transitionTo(s,function(e){o&&Y(t,e,n,!0)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var a=this,o=this,i=o.current;this.transitionTo(e,function(e){re(x(a.base+e.fullPath)),Y(a.router,e,i,!1),t&&t(e)},n)},t.prototype.replace=function(e,t,n){var a=this,o=this,i=o.current;this.transitionTo(e,function(e){le(x(a.base+e.fullPath)),Y(a.router,e,i,!1),t&&t(e)},n)},t.prototype.ensureURL=function(e){if(ke(this.base)!==this.current.fullPath){var t=x(this.base+this.current.fullPath);e?re(t):le(t)}},t.prototype.getCurrentLocation=function(){return ke(this.base)},t}(st),lt=function(e){function t(t,n,a){e.call(this,t,n),a&&Se(this.base)||Te()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this,t=this.router,n=t.options.scrollBehavior,a=nt&&n;a&&q(),window.addEventListener(nt?"popstate":"hashchange",function(){var t=e.current;Te()&&e.transitionTo(De(),function(n){a&&Y(e.router,n,t,!0),nt||Pe(n.fullPath)})})},t.prototype.push=function(e,t,n){var a=this,o=this,i=o.current;
this.transitionTo(e,function(e){Ve(e.fullPath),Y(a.router,e,i,!1),t&&t(e)},n)},t.prototype.replace=function(e,t,n){var a=this,o=this,i=o.current;this.transitionTo(e,function(e){Pe(e.fullPath),Y(a.router,e,i,!1),t&&t(e)},n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;De()!==t&&(e?Ve(t):Pe(t))},t.prototype.getCurrentLocation=function(){return De()},t}(st),ct=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var a=this;this.transitionTo(e,function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,t&&t(e)},n)},t.prototype.replace=function(e,t,n){var a=this;this.transitionTo(e,function(e){a.stack=a.stack.slice(0,a.index).concat(e),t&&t(e)},n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var a=this.stack[n];this.confirmTransition(a,function(){t.index=n,t.updateRoute(a)})}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(st),dt=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=z(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!nt&&e.fallback!==!1,this.fallback&&(t="hash"),$e||(t="abstract"),this.mode=t,t){case"history":this.history=new rt(this,e.base);break;case"hash":this.history=new lt(this,e.base,this.fallback);break;case"abstract":this.history=new ct(this,e.base)}},pt={currentRoute:{configurable:!0}};dt.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},pt.currentRoute.get=function(){return this.history&&this.history.current},dt.prototype.init=function(e){var t=this;if(this.apps.push(e),!this.app){this.app=e;var n=this.history;if(n instanceof rt)n.transitionTo(n.getCurrentLocation());else if(n instanceof lt){var a=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),a,a)}n.listen(function(e){t.apps.forEach(function(t){t._route=e})})}},dt.prototype.beforeEach=function(e){return Me(this.beforeHooks,e)},dt.prototype.beforeResolve=function(e){return Me(this.resolveHooks,e)},dt.prototype.afterEach=function(e){return Me(this.afterHooks,e)},dt.prototype.onReady=function(e,t){this.history.onReady(e,t)},dt.prototype.onError=function(e){this.history.onError(e)},dt.prototype.push=function(e,t,n){this.history.push(e,t,n)},dt.prototype.replace=function(e,t,n){this.history.replace(e,t,n)},dt.prototype.go=function(e){this.history.go(e)},dt.prototype.back=function(){this.go(-1)},dt.prototype.forward=function(){this.go(1)},dt.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map(function(e){return Object.keys(e.components).map(function(t){return e.components[t]})})):[]},dt.prototype.resolve=function(e,t,n){var a=H(e,t||this.history.current,n,this),o=this.match(a,t),i=o.redirectedFrom||o.fullPath,s=this.history.base,r=Ae(s,i,this.mode);return{location:a,route:o,href:r,normalizedTo:a,resolved:o}},dt.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==Ge&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(dt.prototype,pt),dt.install=y,dt.version="2.8.1",$e&&window.Vue&&window.Vue.use(dt),t.a=dt},function(e,t,n){(function(t,n){/*!
 * Vue.js v2.5.16
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
!function(t,n){e.exports=n()}(this,function(){"use strict";function e(e){return void 0===e||null===e}function a(e){return void 0!==e&&null!==e}function o(e){return e===!0}function i(e){return e===!1}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function r(e){return null!==e&&"object"==typeof e}function l(e){return Vi.call(e).slice(8,-1)}function c(e){return"[object Object]"===Vi.call(e)}function d(e){return"[object RegExp]"===Vi.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function h(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function u(e){var t=parseFloat(e);return isNaN(t)?e:t}function v(e,t){for(var n=Object.create(null),a=e.split(","),o=0;o<a.length;o++)n[a[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function g(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function m(e,t){return Ai.call(e,t)}function f(e){var t=Object.create(null);return function(n){var a=t[n];return a||(t[n]=e(n))}}function _(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function w(e,t){return e.bind(t)}function y(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function b(e,t){for(var n in t)e[n]=t[n];return e}function C(e){for(var t={},n=0;n<e.length;n++)e[n]&&b(t,e[n]);return t}function x(e,t,n){}function I(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function k(e,t){if(e===t)return!0;var n=r(e),a=r(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every(function(e,n){return k(e,t[n])});if(o||i)return!1;var s=Object.keys(e),l=Object.keys(t);return s.length===l.length&&s.every(function(n){return k(e[n],t[n])})}catch(e){return!1}}function S(e,t){for(var n=0;n<e.length;n++)if(k(e[n],t))return n;return-1}function T(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function D(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function F(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}function V(e){if(!$i.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function P(e){return"function"==typeof e&&/native code/.test(e.toString())}function M(e){ys.target&&bs.push(ys.target),ys.target=e}function A(){ys.target=bs.pop()}function j(e){return new Cs(void 0,void 0,void 0,String(e))}function B(e){var t=new Cs(e.tag,e.data,e.children,e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.isCloned=!0,t}function L(e){Fs=e}function N(e,t,n){e.__proto__=t}function E(e,t,n){for(var a=0,o=n.length;a<o;a++){var i=n[a];F(e,i,t[i])}}function W(e,t){if(r(e)&&!(e instanceof Cs)){var n;return m(e,"__ob__")&&e.__ob__ instanceof Vs?n=e.__ob__:Fs&&!ls()&&(Array.isArray(e)||c(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Vs(e)),t&&n&&n.vmCount++,n}}function O(e,t,n,a,o){var i=new ys,s=Object.getOwnPropertyDescriptor(e,t);if(!s||s.configurable!==!1){var r=s&&s.get;r||2!==arguments.length||(n=e[t]);var l=s&&s.set,c=!o&&W(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=r?r.call(e):n;return ys.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(t)&&H(t))),t},set:function(t){var s=r?r.call(e):n;t===s||t!==t&&s!==s||(a&&a(),l?l.call(e,t):n=t,c=!o&&W(t),i.notify())}})}}function R(t,n,a){if((e(t)||s(t))&&ps("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(n))return t.length=Math.max(t.length,n),t.splice(n,1,a),a;if(n in t&&!(n in Object.prototype))return t[n]=a,a;var o=t.__ob__;return t._isVue||o&&o.vmCount?(ps("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),a):o?(O(o.value,n,a),o.dep.notify(),a):(t[n]=a,a)}function G(t,n){if((e(t)||s(t))&&ps("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(n))return void t.splice(n,1);var a=t.__ob__;return t._isVue||a&&a.vmCount?void ps("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):void(m(t,n)&&(delete t[n],a&&a.dep.notify()))}function H(e){for(var t=void 0,n=0,a=e.length;n<a;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&H(t)}function U(e,t){if(!t)return e;for(var n,a,o,i=Object.keys(t),s=0;s<i.length;s++)n=i[s],a=e[n],o=t[n],m(e,n)?c(a)&&c(o)&&U(a,o):R(e,n,o);return e}function z(e,t,n){return n?function(){var a="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return a?U(a,o):o}:t?e?function(){return U("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function $(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function X(e,t,n,a){var o=Object.create(e||null);return t?(Q(a,t,n),b(o,t)):o}function q(e){for(var t in e.components)Y(t)}function Y(e){/^[a-zA-Z][\w-]*$/.test(e)||ps('Invalid component name: "'+e+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.'),(Pi(e)||zi.isReservedTag(e))&&ps("Do not use built-in or reserved HTML elements as component id: "+e)}function Z(e,t){var n=e.props;if(n){var a,o,i,s={};if(Array.isArray(n))for(a=n.length;a--;)o=n[a],"string"==typeof o?(i=Bi(o),s[i]={type:null}):ps("props must be strings when using array syntax.");else if(c(n))for(var r in n)o=n[r],i=Bi(r),s[i]=c(o)?o:{type:o};else ps('Invalid value for option "props": expected an Array or an Object, but got '+l(n)+".",t);e.props=s}}function J(e,t){var n=e.inject;if(n){var a=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)a[n[o]]={from:n[o]};else if(c(n))for(var i in n){var s=n[i];a[i]=c(s)?b({from:i},s):{from:s}}else ps('Invalid value for option "inject": expected an Array or an Object, but got '+l(n)+".",t)}}function K(e){var t=e.directives;if(t)for(var n in t){var a=t[n];"function"==typeof a&&(t[n]={bind:a,update:a})}}function Q(e,t,n){c(t)||ps('Invalid value for option "'+e+'": expected an Object, but got '+l(t)+".",n)}function ee(e,t,n){function a(a){var o=Ps[a]||js;l[a]=o(e[a],t[a],n,a)}q(t),"function"==typeof t&&(t=t.options),Z(t,n),J(t,n),K(t);var o=t.extends;if(o&&(e=ee(e,o,n)),t.mixins)for(var i=0,s=t.mixins.length;i<s;i++)e=ee(e,t.mixins[i],n);var r,l={};for(r in e)a(r);for(r in t)m(e,r)||a(r);return l}function te(e,t,n,a){if("string"==typeof n){var o=e[t];if(m(o,n))return o[n];var i=Bi(n);if(m(o,i))return o[i];var s=Li(i);if(m(o,s))return o[s];var r=o[n]||o[i]||o[s];return a&&!r&&ps("Failed to resolve "+t.slice(0,-1)+": "+n,e),r}}function ne(e,t,n,a){var o=t[e],i=!m(n,e),s=n[e],r=le(Boolean,o.type);if(r>-1)if(i&&!m(o,"default"))s=!1;else if(""===s||s===Ei(e)){var l=le(String,o.type);(l<0||r<l)&&(s=!0)}if(void 0===s){s=ae(a,o,e);var c=Fs;L(!0),W(s),L(c)}return oe(o,e,s,a,i),s}function ae(e,t,n){if(m(t,"default")){var a=t.default;return r(a)&&ps('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof a&&"Function"!==se(t.type)?a.call(e):a}}function oe(e,t,n,a,o){if(e.required&&o)return void ps('Missing required prop: "'+t+'"',a);if(null!=n||e.required){var i=e.type,s=!i||i===!0,r=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!s;c++){var d=ie(n,i[c]);r.push(d.expectedType||""),s=d.valid}}if(!s)return void ps('Invalid prop: type check failed for prop "'+t+'". Expected '+r.map(Li).join(", ")+", got "+l(n)+".",a);var p=e.validator;p&&(p(n)||ps('Invalid prop: custom validator check failed for prop "'+t+'".',a))}}function ie(e,t){var n,a=se(t);if(Bs.test(a)){var o=typeof e;n=o===a.toLowerCase(),n||"object"!==o||(n=e instanceof t)}else n="Object"===a?c(e):"Array"===a?Array.isArray(e):e instanceof t;return{valid:n,expectedType:a}}function se(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function re(e,t){return se(e)===se(t)}function le(e,t){if(!Array.isArray(t))return re(t,e)?0:-1;for(var n=0,a=t.length;n<a;n++)if(re(t[n],e))return n;return-1}function ce(e,t,n){if(t)for(var a=t;a=a.$parent;){var o=a.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var s=o[i].call(a,e,t,n)===!1;if(s)return}catch(e){de(e,a,"errorCaptured hook")}}de(e,t,n)}function de(e,t,n){if(zi.errorHandler)try{return zi.errorHandler.call(null,e,t,n)}catch(e){pe(e,null,"config.errorHandler")}pe(e,t,n)}function pe(e,t,n){if(ps("Error in "+n+': "'+e.toString()+'"',t),!qi&&!Yi||"undefined"==typeof console)throw e;console.error(e)}function he(){Ns=!1;var e=Ls.slice(0);Ls.length=0;for(var t=0;t<e.length;t++)e[t]()}function ue(e){return e._withTask||(e._withTask=function(){Es=!0;var t=e.apply(null,arguments);return Es=!1,t})}function ve(e,t){var n;if(Ls.push(function(){if(e)try{e.call(t)}catch(e){ce(e,t,"nextTick")}else n&&n(t)}),Ns||(Ns=!0,Es?As():Ms()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}function ge(e){me(e,Qs),Qs.clear()}function me(e,t){var n,a,o=Array.isArray(e);if(!(!o&&!r(e)||Object.isFrozen(e)||e instanceof Cs)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o)for(n=e.length;n--;)me(e[n],t);else for(a=Object.keys(e),n=a.length;n--;)me(e[a[n]],t)}}function fe(e){function t(){var e=arguments,n=t.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var a=n.slice(),o=0;o<a.length;o++)a[o].apply(null,e)}return t.fns=e,t}function _e(t,n,a,o,i){var s,r,l,c,d;for(s in t)r=l=t[s],c=n[s],d=er(s),e(l)?ps('Invalid handler for event "'+d.name+'": got '+String(l),i):e(c)?(e(l.fns)&&(l=t[s]=fe(l)),a(d.name,l,d.once,d.capture,d.passive,d.params)):l!==c&&(c.fns=l,t[s]=c);for(s in n)e(t[s])&&(d=er(s),o(d.name,n[s],d.capture))}function we(t,n,i){function s(){i.apply(this,arguments),g(r.fns,s)}t instanceof Cs&&(t=t.data.hook||(t.data.hook={}));var r,l=t[n];e(l)?r=fe([s]):a(l.fns)&&o(l.merged)?(r=l,r.fns.push(s)):r=fe([l,s]),r.merged=!0,t[n]=r}function ye(t,n,o){var i=n.options.props;if(!e(i)){var s={},r=t.attrs,l=t.props;if(a(r)||a(l))for(var c in i){var d=Ei(c),p=c.toLowerCase();c!==p&&r&&m(r,p)&&hs('Prop "'+p+'" is passed to component '+vs(o||n)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+d+'" instead of "'+c+'".'),be(s,l,c,d,!0)||be(s,r,c,d,!1)}return s}}function be(e,t,n,o,i){if(a(t)){if(m(t,n))return e[n]=t[n],i||delete t[n],!0;if(m(t,o))return e[n]=t[o],i||delete t[o],!0}return!1}function Ce(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function xe(e){return s(e)?[j(e)]:Array.isArray(e)?ke(e):void 0}function Ie(e){return a(e)&&a(e.text)&&i(e.isComment)}function ke(t,n){var i,r,l,c,d=[];for(i=0;i<t.length;i++)r=t[i],e(r)||"boolean"==typeof r||(l=d.length-1,c=d[l],Array.isArray(r)?r.length>0&&(r=ke(r,(n||"")+"_"+i),Ie(r[0])&&Ie(c)&&(d[l]=j(c.text+r[0].text),r.shift()),d.push.apply(d,r)):s(r)?Ie(c)?d[l]=j(c.text+r):""!==r&&d.push(j(r)):Ie(r)&&Ie(c)?d[l]=j(c.text+r.text):(o(t._isVList)&&a(r.tag)&&e(r.key)&&a(n)&&(r.key="__vlist"+n+"_"+i+"__"),d.push(r)));return d}function Se(e,t){return(e.__esModule||ds&&"Module"===e[Symbol.toStringTag])&&(e=e.default),r(e)?t.extend(e):e}function Te(e,t,n,a,o){var i=Is();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:a,tag:o},i}function De(t,n,i){if(o(t.error)&&a(t.errorComp))return t.errorComp;if(a(t.resolved))return t.resolved;if(o(t.loading)&&a(t.loadingComp))return t.loadingComp;if(!a(t.contexts)){var s=t.contexts=[i],l=!0,c=function(){for(var e=0,t=s.length;e<t;e++)s[e].$forceUpdate()},d=T(function(e){t.resolved=Se(e,n),l||c()}),p=T(function(e){ps("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),a(t.errorComp)&&(t.error=!0,c())}),h=t(d,p);return r(h)&&("function"==typeof h.then?e(t.resolved)&&h.then(d,p):a(h.component)&&"function"==typeof h.component.then&&(h.component.then(d,p),a(h.error)&&(t.errorComp=Se(h.error,n)),a(h.loading)&&(t.loadingComp=Se(h.loading,n),0===h.delay?t.loading=!0:setTimeout(function(){e(t.resolved)&&e(t.error)&&(t.loading=!0,c())},h.delay||200)),a(h.timeout)&&setTimeout(function(){e(t.resolved)&&p("timeout ("+h.timeout+"ms)")},h.timeout))),l=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(i)}function Fe(e){return e.isComment&&e.asyncFactory}function Ve(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Fe(n)))return n}}function Pe(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&je(e,t)}function Me(e,t,n){n?Ks.$once(e,t):Ks.$on(e,t)}function Ae(e,t){Ks.$off(e,t)}function je(e,t,n){Ks=e,_e(t,n||{},Me,Ae,e),Ks=void 0}function Be(e){var t=/^hook:/;e.prototype.$on=function(e,n){var a=this,o=this;if(Array.isArray(e))for(var i=0,s=e.length;i<s;i++)a.$on(e[i],n);else(o._events[e]||(o._events[e]=[])).push(n),t.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,t){function n(){a.$off(e,n),t.apply(a,arguments)}var a=this;return n.fn=t,a.$on(e,n),a},e.prototype.$off=function(e,t){var n=this,a=this;if(!arguments.length)return a._events=Object.create(null),a;if(Array.isArray(e)){for(var o=0,i=e.length;o<i;o++)n.$off(e[o],t);return a}var s=a._events[e];if(!s)return a;if(!t)return a._events[e]=null,a;if(t)for(var r,l=s.length;l--;)if(r=s[l],r===t||r.fn===t){s.splice(l,1);break}return a},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&hs('Event "'+n+'" is emitted in component '+vs(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+Ei(e)+'" instead of "'+e+'".');var a=t._events[e];if(a){a=a.length>1?y(a):a;for(var o=y(arguments,1),i=0,s=a.length;i<s;i++)try{a[i].apply(t,o)}catch(n){ce(n,t,'event handler for "'+e+'"')}}return t}}function Le(e,t){var n={};if(!e)return n;for(var a=0,o=e.length;a<o;a++){var i=e[a],s=i.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,i.context!==t&&i.fnContext!==t||!s||null==s.slot)(n.default||(n.default=[])).push(i);else{var r=s.slot,l=n[r]||(n[r]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in n)n[c].every(Ne)&&delete n[c];return n}function Ne(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Ee(e,t){t=t||{};for(var n=0;n<e.length;n++)Array.isArray(e[n])?Ee(e[n],t):t[e[n].key]=e[n].fn;return t}function We(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function Oe(e){e.prototype._update=function(e,t){var n=this;n._isMounted&&$e(n,"beforeUpdate");var a=n.$el,o=n._vnode,i=tr;tr=n,n._vnode=e,o?n.$el=n.__patch__(o,e):(n.$el=n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),tr=i,a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){$e(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||g(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),$e(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}function Re(e,t,n){e.$el=t,e.$options.render||(e.$options.render=Is,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?ps("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):ps("Failed to mount component: template or render function not defined.",e)),$e(e,"beforeMount");var a;return a=zi.performance&&Gs?function(){var t=e._name,a=e._uid,o="vue-perf-start:"+a,i="vue-perf-end:"+a;Gs(o);var s=e._render();Gs(i),Hs("vue "+t+" render",o,i),Gs(o),e._update(s,n),Gs(i),Hs("vue "+t+" patch",o,i)}:function(){e._update(e._render(),n)},new hr(e,a,x,null,!0),n=!1,null==e.$vnode&&(e._isMounted=!0,$e(e,"mounted")),e}function Ge(e,t,n,a,o){nr=!0;var i=!!(o||e.$options._renderChildren||a.data.scopedSlots||e.$scopedSlots!==Fi);if(e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a),e.$options._renderChildren=o,e.$attrs=a.data.attrs||Fi,e.$listeners=n||Fi,t&&e.$options.props){L(!1);for(var s=e._props,r=e.$options._propKeys||[],l=0;l<r.length;l++){var c=r[l],d=e.$options.props;s[c]=ne(c,d,t,e)}L(!0),e.$options.propsData=t}n=n||Fi;var p=e.$options._parentListeners;e.$options._parentListeners=n,je(e,n,p),i&&(e.$slots=Le(o,a.context),e.$forceUpdate()),nr=!1}function He(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Ue(e,t){if(t){if(e._directInactive=!1,He(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Ue(e.$children[n]);$e(e,"activated")}}function ze(e,t){if(!(t&&(e._directInactive=!0,He(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)ze(e.$children[n]);$e(e,"deactivated")}}function $e(e,t){M();var n=e.$options[t];if(n)for(var a=0,o=n.length;a<o;a++)try{n[a].call(e)}catch(n){ce(n,e,t+" hook")}e._hasHookEvent&&e.$emit("hook:"+t),A()}function Xe(){dr=or.length=ir.length=0,sr={},rr={},lr=cr=!1}function qe(){cr=!0;var e,t;for(or.sort(function(e,t){return e.id-t.id}),dr=0;dr<or.length;dr++)if(e=or[dr],t=e.id,sr[t]=null,e.run(),null!=sr[t]&&(rr[t]=(rr[t]||0)+1,rr[t]>ar)){ps("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=ir.slice(),a=or.slice();Xe(),Je(n),Ye(a),cs&&zi.devtools&&cs.emit("flush")}function Ye(e){for(var t=e.length;t--;){var n=e[t],a=n.vm;a._watcher===n&&a._isMounted&&$e(a,"updated")}}function Ze(e){e._inactive=!1,ir.push(e)}function Je(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Ue(e[t],!0)}function Ke(e){var t=e.id;if(null==sr[t]){if(sr[t]=!0,cr){for(var n=or.length-1;n>dr&&or[n].id>e.id;)n--;or.splice(n+1,0,e)}else or.push(e);lr||(lr=!0,ve(qe))}}function Qe(e,t,n){ur.get=function(){return this[t][n]},ur.set=function(e){this[t][n]=e},Object.defineProperty(e,n,ur)}function et(e){e._watchers=[];var t=e.$options;t.props&&tt(e,t.props),t.methods&&rt(e,t.methods),t.data?nt(e):W(e._data={},!0),t.computed&&ot(e,t.computed),t.watch&&t.watch!==as&&lt(e,t.watch)}function tt(e,t){var n=e.$options.propsData||{},a=e._props={},o=e.$options._propKeys=[],i=!e.$parent;i||L(!1);var s=function(i){o.push(i);var s=ne(i,t,n,e),r=Ei(i);(Mi(r)||zi.isReservedAttr(r))&&ps('"'+r+'" is a reserved attribute and cannot be used as component prop.',e),O(a,i,s,function(){e.$parent&&!nr&&ps("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)}),i in e||Qe(e,"_props",i)};for(var r in t)s(r);L(!0)}function nt(e){var t=e.$options.data;t=e._data="function"==typeof t?at(t,e):t||{},c(t)||(t={},ps("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var n=Object.keys(t),a=e.$options.props,o=e.$options.methods,i=n.length;i--;){var s=n[i];o&&m(o,s)&&ps('Method "'+s+'" has already been defined as a data property.',e),a&&m(a,s)?ps('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',e):D(s)||Qe(e,"_data",s)}W(t,!0)}function at(e,t){M();try{return e.call(t,t)}catch(e){return ce(e,t,"data()"),{}}finally{A()}}function ot(e,t){var n=e._computedWatchers=Object.create(null),a=ls();for(var o in t){var i=t[o],s="function"==typeof i?i:i.get;null==s&&ps('Getter is missing for computed property "'+o+'".',e),a||(n[o]=new hr(e,s||x,x,vr)),o in e?o in e.$data?ps('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&ps('The computed property "'+o+'" is already defined as a prop.',e):it(e,o,i)}}function it(e,t,n){var a=!ls();"function"==typeof n?(ur.get=a?st(t):n,ur.set=x):(ur.get=n.get?a&&n.cache!==!1?st(t):n.get:x,ur.set=n.set?n.set:x),ur.set===x&&(ur.set=function(){ps('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,ur)}function st(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ys.target&&t.depend(),t.value}}function rt(e,t){var n=e.$options.props;for(var a in t)null==t[a]&&ps('Method "'+a+'" has an undefined value in the component definition. Did you reference the function correctly?',e),n&&m(n,a)&&ps('Method "'+a+'" has already been defined as a prop.',e),a in e&&D(a)&&ps('Method "'+a+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[a]=null==t[a]?x:Wi(t[a],e)}function lt(e,t){for(var n in t){var a=t[n];if(Array.isArray(a))for(var o=0;o<a.length;o++)ct(e,n,a[o]);else ct(e,n,a)}}function ct(e,t,n,a){return c(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}function dt(e){var t={};t.get=function(){return this._data};var n={};n.get=function(){return this._props},t.set=function(e){ps("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){ps("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=R,e.prototype.$delete=G,e.prototype.$watch=function(e,t,n){var a=this;if(c(t))return ct(a,e,t,n);n=n||{},n.user=!0;var o=new hr(a,e,t,n);return n.immediate&&t.call(a,o.value),function(){o.teardown()}}}function pt(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}function ht(e){var t=ut(e.$options.inject,e);t&&(L(!1),Object.keys(t).forEach(function(n){O(e,n,t[n],function(){ps('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)})}),L(!0))}function ut(e,t){if(e){for(var n=Object.create(null),a=ds?Reflect.ownKeys(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}):Object.keys(e),o=0;o<a.length;o++){for(var i=a[o],s=e[i].from,r=t;r;){if(r._provided&&m(r._provided,s)){n[i]=r._provided[s];break}r=r.$parent}if(!r)if("default"in e[i]){var l=e[i].default;n[i]="function"==typeof l?l.call(t):l}else ps('Injection "'+i+'" not found',t)}return n}}function vt(e,t){var n,o,i,s,l;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),o=0,i=e.length;o<i;o++)n[o]=t(e[o],o);else if("number"==typeof e)for(n=new Array(e),o=0;o<e;o++)n[o]=t(o+1,o);else if(r(e))for(s=Object.keys(e),n=new Array(s.length),o=0,i=s.length;o<i;o++)l=s[o],n[o]=t(e[l],l,o);return a(n)&&(n._isVList=!0),n}function gt(e,t,n,a){var o,i=this.$scopedSlots[e];if(i)n=n||{},a&&(r(a)||ps("slot v-bind without argument expects an Object",this),n=b(b({},a),n)),o=i(n)||t;else{var s=this.$slots[e];s&&(s._rendered&&ps('Duplicate presence of slot "'+e+'" found in the same render tree - this will likely cause render errors.',this),s._rendered=!0),o=s||t}var l=n&&n.slot;return l?this.$createElement("template",{slot:l},o):o}function mt(e){return te(this.$options,"filters",e,!0)||Ri}function ft(e,t){return Array.isArray(e)?e.indexOf(t)===-1:e!==t}function _t(e,t,n,a,o){var i=zi.keyCodes[t]||n;return o&&a&&!zi.keyCodes[t]?ft(o,a):i?ft(i,e):a?Ei(a)!==t:void 0}function wt(e,t,n,a,o){if(n)if(r(n)){Array.isArray(n)&&(n=C(n));var i,s=function(s){if("class"===s||"style"===s||Mi(s))i=e;else{var r=e.attrs&&e.attrs.type;i=a||zi.mustUseProp(t,r,s)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}if(!(s in i)&&(i[s]=n[s],o)){var l=e.on||(e.on={});l["update:"+s]=function(e){n[s]=e}}};for(var l in n)s(l)}else ps("v-bind without argument expects an Object or Array value",this);return e}function yt(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t?a:(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),Ct(a,"__static__"+e,!1),a)}function bt(e,t,n){return Ct(e,"__once__"+t+(n?"_"+n:""),!0),e}function Ct(e,t,n){if(Array.isArray(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&xt(e[a],t+"_"+a,n);else xt(e,t,n)}function xt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function It(e,t){if(t)if(c(t)){var n=e.on=e.on?b({},e.on):{};for(var a in t){var o=n[a],i=t[a];n[a]=o?[].concat(o,i):i}}else ps("v-on without argument expects an Object value",this);return e}function kt(e){e._o=bt,e._n=u,e._s=h,e._l=vt,e._t=gt,e._q=k,e._i=S,e._m=yt,e._f=mt,e._k=_t,e._b=wt,e._v=j,e._e=Is,e._u=Ee,e._g=It}function St(e,t,n,a,i){var s,r=i.options;m(a,"_uid")?(s=Object.create(a),s._original=a):(s=a,a=a._original);var l=o(r._compiled),c=!l;this.data=e,this.props=t,this.children=n,this.parent=a,this.listeners=e.on||Fi,this.injections=ut(r.inject,a),this.slots=function(){return Le(n,a)},l&&(this.$options=r,this.$slots=this.slots(),this.$scopedSlots=e.scopedSlots||Fi),r._scopeId?this._c=function(e,t,n,o){var i=jt(s,e,t,n,o,c);return i&&!Array.isArray(i)&&(i.fnScopeId=r._scopeId,i.fnContext=a),i}:this._c=function(e,t,n,a){return jt(s,e,t,n,a,c)}}function Tt(e,t,n,o,i){var s=e.options,r={},l=s.props;if(a(l))for(var c in l)r[c]=ne(c,l,t||Fi);else a(n.attrs)&&Ft(r,n.attrs),a(n.props)&&Ft(r,n.props);var d=new St(n,r,i,o,e),p=s.render.call(null,d._c,d);if(p instanceof Cs)return Dt(p,n,d.parent,s);if(Array.isArray(p)){for(var h=xe(p)||[],u=new Array(h.length),v=0;v<h.length;v++)u[v]=Dt(h[v],n,d.parent,s);return u}}function Dt(e,t,n,a){var o=B(e);return o.fnContext=n,o.fnOptions=a,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Ft(e,t){for(var n in t)e[Bi(n)]=t[n]}function Vt(t,n,i,s,l){if(!e(t)){var c=i.$options._base;if(r(t)&&(t=c.extend(t)),"function"!=typeof t)return void ps("Invalid Component definition: "+String(t),i);var d;if(e(t.cid)&&(d=t,t=De(d,c,i),void 0===t))return Te(d,n,i,s,l);n=n||{},Gt(t),a(n.model)&&At(t.options,n);var p=ye(n,t,l);if(o(t.options.functional))return Tt(t,p,n,i,s);var h=n.on;if(n.on=n.nativeOn,o(t.options.abstract)){var u=n.slot;n={},u&&(n.slot=u)}Mt(n);var v=t.options.name||l,g=new Cs("vue-component-"+t.cid+(v?"-"+v:""),n,void 0,void 0,void 0,i,{Ctor:t,propsData:p,listeners:h,tag:l,children:s},d);return g}}function Pt(e,t,n,o){var i={_isComponent:!0,parent:t,_parentVnode:e,_parentElm:n||null,_refElm:o||null},s=e.data.inlineTemplate;return a(s)&&(i.render=s.render,i.staticRenderFns=s.staticRenderFns),new e.componentOptions.Ctor(i)}function Mt(e){for(var t=e.hook||(e.hook={}),n=0;n<mr.length;n++){var a=mr[n];t[a]=gr[a]}}function At(e,t){var n=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(t.props||(t.props={}))[n]=t.model.value;var i=t.on||(t.on={});a(i[o])?i[o]=[t.model.callback].concat(i[o]):i[o]=t.model.callback}function jt(e,t,n,a,i,r){return(Array.isArray(n)||s(n))&&(i=a,a=n,n=void 0),o(r)&&(i=_r),Bt(e,t,n,a,i)}function Bt(e,t,n,o,i){if(a(n)&&a(n.__ob__))return ps("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),Is();if(a(n)&&a(n.is)&&(t=n.is),!t)return Is();a(n)&&a(n.key)&&!s(n.key)&&ps("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(o)&&"function"==typeof o[0]&&(n=n||{},n.scopedSlots={default:o[0]},o.length=0),i===_r?o=xe(o):i===fr&&(o=Ce(o));var r,l;if("string"==typeof t){var c;l=e.$vnode&&e.$vnode.ns||zi.getTagNamespace(t),r=zi.isReservedTag(t)?new Cs(zi.parsePlatformTagName(t),n,o,void 0,void 0,e):a(c=te(e.$options,"components",t))?Vt(c,n,e,o,t):new Cs(t,n,o,void 0,void 0,e)}else r=Vt(t,n,e,o);return Array.isArray(r)?r:a(r)?(a(l)&&Lt(r,l),a(n)&&Nt(n),r):Is()}function Lt(t,n,i){if(t.ns=n,"foreignObject"===t.tag&&(n=void 0,i=!0),a(t.children))for(var s=0,r=t.children.length;s<r;s++){var l=t.children[s];a(l.tag)&&(e(l.ns)||o(i)&&"svg"!==l.tag)&&Lt(l,n,i)}}function Nt(e){r(e.style)&&ge(e.style),r(e.class)&&ge(e.class)}function Et(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,a=n&&n.context;e.$slots=Le(t._renderChildren,a),e.$scopedSlots=Fi,e._c=function(t,n,a,o){return jt(e,t,n,a,o,!1)},e.$createElement=function(t,n,a,o){return jt(e,t,n,a,o,!0)};var o=n&&n.data;O(e,"$attrs",o&&o.attrs||Fi,function(){!nr&&ps("$attrs is readonly.",e)},!0),O(e,"$listeners",t._parentListeners||Fi,function(){!nr&&ps("$listeners is readonly.",e)},!0)}function Wt(e){kt(e.prototype),e.prototype.$nextTick=function(e){return ve(e,this)},e.prototype._render=function(){var e=this,t=e.$options,n=t.render,a=t._parentVnode;for(var o in e.$slots)e.$slots[o]._rendered=!1;a&&(e.$scopedSlots=a.data.scopedSlots||Fi),e.$vnode=a;var i;try{i=n.call(e._renderProxy,e.$createElement)}catch(t){if(ce(t,e,"render"),e.$options.renderError)try{i=e.$options.renderError.call(e._renderProxy,e.$createElement,t)}catch(t){ce(t,e,"renderError"),i=e._vnode}else i=e._vnode}return i instanceof Cs||(Array.isArray(i)&&ps("Multiple root nodes returned from render function. Render function should return a single root node.",e),i=Is()),i.parent=a,i}}function Ot(e){e.prototype._init=function(e){var t=this;t._uid=wr++;var n,a;zi.performance&&Gs&&(n="vue-perf-start:"+t._uid,a="vue-perf-end:"+t._uid,Gs(n)),t._isVue=!0,e&&e._isComponent?Rt(t,e):t.$options=ee(Gt(t.constructor),e||{},t),zs(t),t._self=t,We(t),Pe(t),Et(t),$e(t,"beforeCreate"),ht(t),et(t),pt(t),$e(t,"created"),zi.performance&&Gs&&(t._name=vs(t,!1),Gs(a),Hs("vue "+t._name+" init",n,a)),t.$options.el&&t.$mount(t.$options.el)}}function Rt(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a,n._parentElm=t._parentElm,n._refElm=t._refElm;var o=a.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Gt(e){var t=e.options;if(e.super){var n=Gt(e.super),a=e.superOptions;if(n!==a){e.superOptions=n;var o=Ht(e);o&&b(e.extendOptions,o),t=e.options=ee(n,e.extendOptions),t.name&&(t.components[t.name]=e)}}return t}function Ht(e){var t,n=e.options,a=e.extendOptions,o=e.sealedOptions;for(var i in n)n[i]!==o[i]&&(t||(t={}),t[i]=Ut(n[i],a[i],o[i]));return t}function Ut(e,t,n){if(Array.isArray(e)){var a=[];n=Array.isArray(n)?n:[n],t=Array.isArray(t)?t:[t];for(var o=0;o<e.length;o++)(t.indexOf(e[o])>=0||n.indexOf(e[o])<0)&&a.push(e[o]);return a}return e}function zt(e){this instanceof zt||ps("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function $t(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=y(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}function Xt(e){e.mixin=function(e){return this.options=ee(this.options,e),this}}function qt(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,o=e._Ctor||(e._Ctor={});if(o[a])return o[a];var i=e.name||n.options.name;i&&Y(i);var s=function(e){this._init(e)};return s.prototype=Object.create(n.prototype),
s.prototype.constructor=s,s.cid=t++,s.options=ee(n.options,e),s.super=n,s.options.props&&Yt(s),s.options.computed&&Zt(s),s.extend=n.extend,s.mixin=n.mixin,s.use=n.use,Hi.forEach(function(e){s[e]=n[e]}),i&&(s.options.components[i]=s),s.superOptions=n.options,s.extendOptions=e,s.sealedOptions=b({},s.options),o[a]=s,s}}function Yt(e){var t=e.options.props;for(var n in t)Qe(e.prototype,"_props",n)}function Zt(e){var t=e.options.computed;for(var n in t)it(e.prototype,n,t[n])}function Jt(e){Hi.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&Y(e),"component"===t&&c(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}function Kt(e){return e&&(e.Ctor.options.name||e.tag)}function Qt(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!d(e)&&e.test(t)}function en(e,t){var n=e.cache,a=e.keys,o=e._vnode;for(var i in n){var s=n[i];if(s){var r=Kt(s.componentOptions);r&&!t(r)&&tn(n,i,a,o)}}}function tn(e,t,n,a){var o=e[t];!o||a&&o.tag===a.tag||o.componentInstance.$destroy(),e[t]=null,g(n,t)}function nn(e){var t={};t.get=function(){return zi},t.set=function(){ps("Do not replace the Vue.config object, set individual fields instead.")},Object.defineProperty(e,"config",t),e.util={warn:ps,extend:b,mergeOptions:ee,defineReactive:O},e.set=R,e.delete=G,e.nextTick=ve,e.options=Object.create(null),Hi.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,b(e.options.components,Cr),$t(e),Xt(e),qt(e),Jt(e)}function an(e){for(var t=e.data,n=e,o=e;a(o.componentInstance);)o=o.componentInstance._vnode,o&&o.data&&(t=on(o.data,t));for(;a(n=n.parent);)n&&n.data&&(t=on(t,n.data));return sn(t.staticClass,t.class)}function on(e,t){return{staticClass:rn(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function sn(e,t){return a(e)||a(t)?rn(e,ln(t)):""}function rn(e,t){return e?t?e+" "+t:e:t||""}function ln(e){return Array.isArray(e)?cn(e):r(e)?dn(e):"string"==typeof e?e:""}function cn(e){for(var t,n="",o=0,i=e.length;o<i;o++)a(t=ln(e[o]))&&""!==t&&(n&&(n+=" "),n+=t);return n}function dn(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}function pn(e){return Hr(e)?"svg":"math"===e?"math":void 0}function hn(e){if(!qi)return!0;if(zr(e))return!1;if(e=e.toLowerCase(),null!=$r[e])return $r[e];var t=document.createElement(e);return e.indexOf("-")>-1?$r[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:$r[e]=/HTMLUnknownElement/.test(t.toString())}function un(e){if("string"==typeof e){var t=document.querySelector(e);return t?t:(ps("Cannot find element: "+e),document.createElement("div"))}return e}function vn(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)}function gn(e,t){return document.createElementNS(Rr[e],t)}function mn(e){return document.createTextNode(e)}function fn(e){return document.createComment(e)}function _n(e,t,n){e.insertBefore(t,n)}function wn(e,t){e.removeChild(t)}function yn(e,t){e.appendChild(t)}function bn(e){return e.parentNode}function Cn(e){return e.nextSibling}function xn(e){return e.tagName}function In(e,t){e.textContent=t}function kn(e,t){e.setAttribute(t,"")}function Sn(e,t){var n=e.data.ref;if(a(n)){var o=e.context,i=e.componentInstance||e.elm,s=o.$refs;t?Array.isArray(s[n])?g(s[n],i):s[n]===i&&(s[n]=void 0):e.data.refInFor?Array.isArray(s[n])?s[n].indexOf(i)<0&&s[n].push(i):s[n]=[i]:s[n]=i}}function Tn(t,n){return t.key===n.key&&(t.tag===n.tag&&t.isComment===n.isComment&&a(t.data)===a(n.data)&&Dn(t,n)||o(t.isAsyncPlaceholder)&&t.asyncFactory===n.asyncFactory&&e(n.asyncFactory.error))}function Dn(e,t){if("input"!==e.tag)return!0;var n,o=a(n=e.data)&&a(n=n.attrs)&&n.type,i=a(n=t.data)&&a(n=n.attrs)&&n.type;return o===i||Xr(o)&&Xr(i)}function Fn(e,t,n){var o,i,s={};for(o=t;o<=n;++o)i=e[o].key,a(i)&&(s[i]=o);return s}function Vn(t){function n(e){return new Cs(L.tagName(e).toLowerCase(),{},[],void 0,e)}function i(e,t){function n(){0===--n.listeners&&r(e)}return n.listeners=t,n}function r(e){var t=L.parentNode(e);a(t)&&L.removeChild(t,e)}function l(e,t){return!t&&!e.ns&&!(zi.ignoredElements.length&&zi.ignoredElements.some(function(t){return d(t)?t.test(e.tag):t===e.tag}))&&zi.isUnknownElement(e.tag)}function c(e,t,n,i,s,r,c){if(a(e.elm)&&a(r)&&(e=r[c]=B(e)),e.isRootInsert=!s,!p(e,t,n,i)){var d=e.data,h=e.children,u=e.tag;a(u)?(d&&d.pre&&N++,l(e,N)&&ps("Unknown custom element: <"+u+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?L.createElementNS(e.ns,u):L.createElement(u,e),w(e),m(e,h,t),a(d)&&_(e,t),g(n,e.elm,i),d&&d.pre&&N--):o(e.isComment)?(e.elm=L.createComment(e.text),g(n,e.elm,i)):(e.elm=L.createTextNode(e.text),g(n,e.elm,i))}}function p(e,t,n,i){var s=e.data;if(a(s)){var r=a(e.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(e,!1,n,i),a(e.componentInstance))return h(e,t),o(r)&&u(e,t,n,i),!0}}function h(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,f(e)?(_(e,t),w(e)):(Sn(e),t.push(e))}function u(e,t,n,o){for(var i,s=e;s.componentInstance;)if(s=s.componentInstance._vnode,a(i=s.data)&&a(i=i.transition)){for(i=0;i<A.activate.length;++i)A.activate[i](Zr,s);t.push(s);break}g(n,e.elm,o)}function g(e,t,n){a(e)&&(a(n)?n.parentNode===e&&L.insertBefore(e,t,n):L.appendChild(e,t))}function m(e,t,n){if(Array.isArray(t)){k(t);for(var a=0;a<t.length;++a)c(t[a],n,e.elm,null,!0,t,a)}else s(e.text)&&L.appendChild(e.elm,L.createTextNode(String(e.text)))}function f(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function _(e,t){for(var n=0;n<A.create.length;++n)A.create[n](Zr,e);P=e.data.hook,a(P)&&(a(P.create)&&P.create(Zr,e),a(P.insert)&&t.push(e))}function w(e){var t;if(a(t=e.fnScopeId))L.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&L.setStyleScope(e.elm,t),n=n.parent;a(t=tr)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&L.setStyleScope(e.elm,t)}function y(e,t,n,a,o,i){for(;a<=o;++a)c(n[a],i,e,t,!1,n,a)}function b(e){var t,n,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<A.destroy.length;++t)A.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)b(e.children[n])}function C(e,t,n,o){for(;n<=o;++n){var i=t[n];a(i)&&(a(i.tag)?(x(i),b(i)):r(i.elm))}}function x(e,t){if(a(t)||a(e.data)){var n,o=A.remove.length+1;for(a(t)?t.listeners+=o:t=i(e.elm,o),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&x(n,t),n=0;n<A.remove.length;++n)A.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else r(e.elm)}function I(t,n,o,i,s){var r,l,d,p,h=0,u=0,v=n.length-1,g=n[0],m=n[v],f=o.length-1,_=o[0],w=o[f],b=!s;for(k(o);h<=v&&u<=f;)e(g)?g=n[++h]:e(m)?m=n[--v]:Tn(g,_)?(T(g,_,i),g=n[++h],_=o[++u]):Tn(m,w)?(T(m,w,i),m=n[--v],w=o[--f]):Tn(g,w)?(T(g,w,i),b&&L.insertBefore(t,g.elm,L.nextSibling(m.elm)),g=n[++h],w=o[--f]):Tn(m,_)?(T(m,_,i),b&&L.insertBefore(t,m.elm,g.elm),m=n[--v],_=o[++u]):(e(r)&&(r=Fn(n,h,v)),l=a(_.key)?r[_.key]:S(_,n,h,v),e(l)?c(_,i,t,g.elm,!1,o,u):(d=n[l],Tn(d,_)?(T(d,_,i),n[l]=void 0,b&&L.insertBefore(t,d.elm,g.elm)):c(_,i,t,g.elm,!1,o,u)),_=o[++u]);h>v?(p=e(o[f+1])?null:o[f+1].elm,y(t,p,o,u,f,i)):u>f&&C(t,n,h,v)}function k(e){for(var t={},n=0;n<e.length;n++){var o=e[n],i=o.key;a(i)&&(t[i]?ps("Duplicate keys detected: '"+i+"'. This may cause an update error.",o.context):t[i]=!0)}}function S(e,t,n,o){for(var i=n;i<o;i++){var s=t[i];if(a(s)&&Tn(e,s))return i}}function T(t,n,i,s){if(t!==n){var r=n.elm=t.elm;if(o(t.isAsyncPlaceholder))return void(a(n.asyncFactory.resolved)?F(t.elm,n,i):n.isAsyncPlaceholder=!0);if(o(n.isStatic)&&o(t.isStatic)&&n.key===t.key&&(o(n.isCloned)||o(n.isOnce)))return void(n.componentInstance=t.componentInstance);var l,c=n.data;a(c)&&a(l=c.hook)&&a(l=l.prepatch)&&l(t,n);var d=t.children,p=n.children;if(a(c)&&f(n)){for(l=0;l<A.update.length;++l)A.update[l](t,n);a(l=c.hook)&&a(l=l.update)&&l(t,n)}e(n.text)?a(d)&&a(p)?d!==p&&I(r,d,p,i,s):a(p)?(a(t.text)&&L.setTextContent(r,""),y(r,null,p,0,p.length-1,i)):a(d)?C(r,d,0,d.length-1):a(t.text)&&L.setTextContent(r,""):t.text!==n.text&&L.setTextContent(r,n.text),a(c)&&a(l=c.hook)&&a(l=l.postpatch)&&l(t,n)}}function D(e,t,n){if(o(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}function F(e,t,n,i){var s,r=t.tag,l=t.data,c=t.children;if(i=i||l&&l.pre,t.elm=e,o(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!V(e,t,i))return!1;if(a(l)&&(a(s=l.hook)&&a(s=s.init)&&s(t,!0),a(s=t.componentInstance)))return h(t,n),!0;if(a(r)){if(a(c))if(e.hasChildNodes())if(a(s=l)&&a(s=s.domProps)&&a(s=s.innerHTML)){if(s!==e.innerHTML)return"undefined"==typeof console||E||(E=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",s),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var d=!0,p=e.firstChild,u=0;u<c.length;u++){if(!p||!F(p,c[u],n,i)){d=!1;break}p=p.nextSibling}if(!d||p)return"undefined"==typeof console||E||(E=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,c)),!1}else m(t,c,n);if(a(l)){var v=!1;for(var g in l)if(!W(g)){v=!0,_(t,n);break}!v&&l.class&&ge(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}function V(e,t,n){return a(t.tag)?0===t.tag.indexOf("vue-component")||!l(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}var P,M,A={},j=t.modules,L=t.nodeOps;for(P=0;P<Jr.length;++P)for(A[Jr[P]]=[],M=0;M<j.length;++M)a(j[M][Jr[P]])&&A[Jr[P]].push(j[M][Jr[P]]);var N=0,E=!1,W=v("attrs,class,staticClass,staticStyle,key");return function(t,i,s,r,l,d){if(e(i))return void(a(t)&&b(t));var p=!1,h=[];if(e(t))p=!0,c(i,h,l,d);else{var u=a(t.nodeType);if(!u&&Tn(t,i))T(t,i,h,r);else{if(u){if(1===t.nodeType&&t.hasAttribute(Gi)&&(t.removeAttribute(Gi),s=!0),o(s)){if(F(t,i,h))return D(i,h,!0),t;ps("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}t=n(t)}var v=t.elm,g=L.parentNode(v);if(c(i,h,v._leaveCb?null:g,L.nextSibling(v)),a(i.parent))for(var m=i.parent,_=f(i);m;){for(var w=0;w<A.destroy.length;++w)A.destroy[w](m);if(m.elm=i.elm,_){for(var y=0;y<A.create.length;++y)A.create[y](Zr,m);var x=m.data.hook.insert;if(x.merged)for(var I=1;I<x.fns.length;I++)x.fns[I]()}else Sn(m);m=m.parent}a(g)?C(g,[t],0,0):a(t.tag)&&b(t)}}return D(i,h,p),i.elm}}function Pn(e,t){(e.data.directives||t.data.directives)&&Mn(e,t)}function Mn(e,t){var n,a,o,i=e===Zr,s=t===Zr,r=An(e.data.directives,e.context),l=An(t.data.directives,t.context),c=[],d=[];for(n in l)a=r[n],o=l[n],a?(o.oldValue=a.value,Bn(o,"update",t,e),o.def&&o.def.componentUpdated&&d.push(o)):(Bn(o,"bind",t,e),o.def&&o.def.inserted&&c.push(o));if(c.length){var p=function(){for(var n=0;n<c.length;n++)Bn(c[n],"inserted",t,e)};i?we(t,"insert",p):p()}if(d.length&&we(t,"postpatch",function(){for(var n=0;n<d.length;n++)Bn(d[n],"componentUpdated",t,e)}),!i)for(n in r)l[n]||Bn(r[n],"unbind",e,e,s)}function An(e,t){var n=Object.create(null);if(!e)return n;var a,o;for(a=0;a<e.length;a++)o=e[a],o.modifiers||(o.modifiers=Qr),n[jn(o)]=o,o.def=te(t.$options,"directives",o.name,!0);return n}function jn(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Bn(e,t,n,a,o){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,a,o)}catch(a){ce(a,n.context,"directive "+e.name+" "+t+" hook")}}function Ln(t,n){var o=n.componentOptions;if(!(a(o)&&o.Ctor.options.inheritAttrs===!1||e(t.data.attrs)&&e(n.data.attrs))){var i,s,r,l=n.elm,c=t.data.attrs||{},d=n.data.attrs||{};a(d.__ob__)&&(d=n.data.attrs=b({},d));for(i in d)s=d[i],r=c[i],r!==s&&Nn(l,i,s);(Ki||es)&&d.value!==c.value&&Nn(l,"value",d.value);for(i in c)e(d[i])&&(Er(i)?l.removeAttributeNS(Nr,Wr(i)):Br(i)||l.removeAttribute(i))}}function Nn(e,t,n){e.tagName.indexOf("-")>-1?En(e,t,n):Lr(t)?Or(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Br(t)?e.setAttribute(t,Or(n)||"false"===n?"false":"true"):Er(t)?Or(n)?e.removeAttributeNS(Nr,Wr(t)):e.setAttributeNS(Nr,t,n):En(e,t,n)}function En(e,t,n){if(Or(n))e.removeAttribute(t);else{if(Ki&&!Qi&&"TEXTAREA"===e.tagName&&"placeholder"===t&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}function Wn(t,n){var o=n.elm,i=n.data,s=t.data;if(!(e(i.staticClass)&&e(i.class)&&(e(s)||e(s.staticClass)&&e(s.class)))){var r=an(n),l=o._transitionClasses;a(l)&&(r=rn(r,ln(l))),r!==o._prevClass&&(o.setAttribute("class",r),o._prevClass=r)}}function On(e){function t(){(s||(s=[])).push(e.slice(v,o).trim()),v=o+1}var n,a,o,i,s,r=!1,l=!1,c=!1,d=!1,p=0,h=0,u=0,v=0;for(o=0;o<e.length;o++)if(a=n,n=e.charCodeAt(o),r)39===n&&92!==a&&(r=!1);else if(l)34===n&&92!==a&&(l=!1);else if(c)96===n&&92!==a&&(c=!1);else if(d)47===n&&92!==a&&(d=!1);else if(124!==n||124===e.charCodeAt(o+1)||124===e.charCodeAt(o-1)||p||h||u){switch(n){case 34:l=!0;break;case 39:r=!0;break;case 96:c=!0;break;case 40:u++;break;case 41:u--;break;case 91:h++;break;case 93:h--;break;case 123:p++;break;case 125:p--}if(47===n){for(var g=o-1,m=void 0;g>=0&&(m=e.charAt(g)," "===m);g--);m&&al.test(m)||(d=!0)}}else void 0===i?(v=o+1,i=e.slice(0,o).trim()):t();if(void 0===i?i=e.slice(0,o).trim():0!==v&&t(),s)for(o=0;o<s.length;o++)i=Rn(i,s[o]);return i}function Rn(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var a=t.slice(0,n),o=t.slice(n+1);return'_f("'+a+'")('+e+(")"!==o?","+o:o)}function Gn(e){console.error("[Vue compiler]: "+e)}function Hn(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Un(e,t,n){(e.props||(e.props=[])).push({name:t,value:n}),e.plain=!1}function zn(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n}),e.plain=!1}function $n(e,t,n){e.attrsMap[t]=n,e.attrsList.push({name:t,value:n})}function Xn(e,t,n,a,o,i){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:a,arg:o,modifiers:i}),e.plain=!1}function qn(e,t,n,a,o,i){a=a||Fi,i&&a.prevent&&a.passive&&i("passive and prevent can't be used together. Passive handler can't prevent default event."),a.capture&&(delete a.capture,t="!"+t),a.once&&(delete a.once,t="~"+t),a.passive&&(delete a.passive,t="&"+t),"click"===t&&(a.right?(t="contextmenu",delete a.right):a.middle&&(t="mouseup"));var s;a.native?(delete a.native,s=e.nativeEvents||(e.nativeEvents={})):s=e.events||(e.events={});var r={value:n.trim()};a!==Fi&&(r.modifiers=a);var l=s[t];Array.isArray(l)?o?l.unshift(r):l.push(r):l?s[t]=o?[r,l]:[l,r]:s[t]=r,e.plain=!1}function Yn(e,t,n){var a=Zn(e,":"+t)||Zn(e,"v-bind:"+t);if(null!=a)return On(a);if(n!==!1){var o=Zn(e,t);if(null!=o)return JSON.stringify(o)}}function Zn(e,t,n){var a;if(null!=(a=e.attrsMap[t]))for(var o=e.attrsList,i=0,s=o.length;i<s;i++)if(o[i].name===t){o.splice(i,1);break}return n&&delete e.attrsMap[t],a}function Jn(e,t,n){var a=n||{},o=a.number,i=a.trim,s="$$v",r=s;i&&(r="(typeof "+s+" === 'string'? "+s+".trim(): "+s+")"),o&&(r="_n("+r+")");var l=Kn(t,r);e.model={value:"("+t+")",expression:'"'+t+'"',callback:"function ("+s+") {"+l+"}"}}function Kn(e,t){var n=Qn(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Qn(e){if(e=e.trim(),xr=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<xr-1)return Sr=e.lastIndexOf("."),Sr>-1?{exp:e.slice(0,Sr),key:'"'+e.slice(Sr+1)+'"'}:{exp:e,key:null};for(Ir=e,Sr=Tr=Dr=0;!ta();)kr=ea(),na(kr)?oa(kr):91===kr&&aa(kr);return{exp:e.slice(0,Tr),key:e.slice(Tr+1,Dr)}}function ea(){return Ir.charCodeAt(++Sr)}function ta(){return Sr>=xr}function na(e){return 34===e||39===e}function aa(e){var t=1;for(Tr=Sr;!ta();)if(e=ea(),na(e))oa(e);else if(91===e&&t++,93===e&&t--,0===t){Dr=Sr;break}}function oa(e){for(var t=e;!ta()&&(e=ea(),e!==t););}function ia(e,t,n){Fr=n;var a=t.value,o=t.modifiers,i=e.tag,s=e.attrsMap.type;if("input"===i&&"file"===s&&Fr("<"+e.tag+' v-model="'+a+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.'),e.component)return Jn(e,a,o),!1;if("select"===i)la(e,a,o);else if("input"===i&&"checkbox"===s)sa(e,a,o);else if("input"===i&&"radio"===s)ra(e,a,o);else if("input"===i||"textarea"===i)ca(e,a,o);else{if(!zi.isReservedTag(i))return Jn(e,a,o),!1;Fr("<"+e.tag+' v-model="'+a+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.")}return!0}function sa(e,t,n){var a=n&&n.number,o=Yn(e,"value")||"null",i=Yn(e,"true-value")||"true",s=Yn(e,"false-value")||"false";Un(e,"checked","Array.isArray("+t+")?_i("+t+","+o+")>-1"+("true"===i?":("+t+")":":_q("+t+","+i+")")),qn(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+i+"):("+s+");if(Array.isArray($$a)){var $$v="+(a?"_n("+o+")":o)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Kn(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Kn(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Kn(t,"$$c")+"}",null,!0)}function ra(e,t,n){var a=n&&n.number,o=Yn(e,"value")||"null";o=a?"_n("+o+")":o,Un(e,"checked","_q("+t+","+o+")"),qn(e,"change",Kn(t,o),null,!0)}function la(e,t,n){var a=n&&n.number,o='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(a?"_n(val)":"val")+"})",i="$event.target.multiple ? $$selectedVal : $$selectedVal[0]",s="var $$selectedVal = "+o+";";s=s+" "+Kn(t,i),qn(e,"change",s,null,!0)}function ca(e,t,n){var a=e.attrsMap.type,o=e.attrsMap["v-bind:value"]||e.attrsMap[":value"],i=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];if(o&&!i){var s=e.attrsMap["v-bind:value"]?"v-bind:value":":value";Fr(s+'="'+o+'" conflicts with v-model on the same element because the latter already expands to a value binding internally')}var r=n||{},l=r.lazy,c=r.number,d=r.trim,p=!l&&"range"!==a,h=l?"change":"range"===a?ol:"input",u="$event.target.value";d&&(u="$event.target.value.trim()"),c&&(u="_n("+u+")");var v=Kn(t,u);p&&(v="if($event.target.composing)return;"+v),Un(e,"value","("+t+")"),qn(e,h,v,null,!0),(d||c)&&qn(e,"blur","$forceUpdate()")}function da(e){if(a(e[ol])){var t=Ki?"change":"input";e[t]=[].concat(e[ol],e[t]||[]),delete e[ol]}a(e[il])&&(e.change=[].concat(e[il],e.change||[]),delete e[il])}function pa(e,t,n){var a=Vr;return function o(){var i=e.apply(null,arguments);null!==i&&ua(t,o,n,a)}}function ha(e,t,n,a,o){t=ue(t),n&&(t=pa(t,e,a)),Vr.addEventListener(e,t,os?{capture:a,passive:o}:a)}function ua(e,t,n,a){(a||Vr).removeEventListener(e,t._withTask||t,n)}function va(t,n){if(!e(t.data.on)||!e(n.data.on)){var a=n.data.on||{},o=t.data.on||{};Vr=n.elm,da(a),_e(a,o,ha,ua,n.context),Vr=void 0}}function ga(t,n){if(!e(t.data.domProps)||!e(n.data.domProps)){var o,i,s=n.elm,r=t.data.domProps||{},l=n.data.domProps||{};a(l.__ob__)&&(l=n.data.domProps=b({},l));for(o in r)e(l[o])&&(s[o]="");for(o in l){if(i=l[o],"textContent"===o||"innerHTML"===o){if(n.children&&(n.children.length=0),i===r[o])continue;1===s.childNodes.length&&s.removeChild(s.childNodes[0])}if("value"===o){s._value=i;var c=e(i)?"":String(i);ma(s,c)&&(s.value=c)}else s[o]=i}}}function ma(e,t){return!e.composing&&("OPTION"===e.tagName||fa(e,t)||_a(e,t))}function fa(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}function _a(e,t){var n=e.value,o=e._vModifiers;if(a(o)){if(o.lazy)return!1;if(o.number)return u(n)!==u(t);if(o.trim)return n.trim()!==t.trim()}return n!==t}function wa(e){var t=ya(e.style);return e.staticStyle?b(e.staticStyle,t):t}function ya(e){return Array.isArray(e)?C(e):"string"==typeof e?ll(e):e}function ba(e,t){var n,a={};if(t)for(var o=e;o.componentInstance;)o=o.componentInstance._vnode,o&&o.data&&(n=wa(o.data))&&b(a,n);(n=wa(e.data))&&b(a,n);for(var i=e;i=i.parent;)i.data&&(n=wa(i.data))&&b(a,n);return a}function Ca(t,n){var o=n.data,i=t.data;if(!(e(o.staticStyle)&&e(o.style)&&e(i.staticStyle)&&e(i.style))){var s,r,l=n.elm,c=i.staticStyle,d=i.normalizedStyle||i.style||{},p=c||d,h=ya(n.data.style)||{};n.data.normalizedStyle=a(h.__ob__)?b({},h):h;var u=ba(n,!0);for(r in p)e(u[r])&&pl(l,r,"");for(r in u)s=u[r],s!==p[r]&&pl(l,r,null==s?"":s)}}function xa(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Ia(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");n=n.trim(),n?e.setAttribute("class",n):e.removeAttribute("class")}}function ka(e){if(e){if("object"==typeof e){var t={};return e.css!==!1&&b(t,gl(e.name||"v")),b(t,e),t}return"string"==typeof e?gl(e):void 0}}function Sa(e){xl(function(){xl(e)})}function Ta(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),xa(e,t))}function Da(e,t){e._transitionClasses&&g(e._transitionClasses,t),Ia(e,t)}function Fa(e,t,n){var a=Va(e,t),o=a.type,i=a.timeout,s=a.propCount;if(!o)return n();var r=o===fl?yl:Cl,l=0,c=function(){e.removeEventListener(r,d),n()},d=function(t){t.target===e&&++l>=s&&c()};setTimeout(function(){l<s&&c()},i+1),e.addEventListener(r,d)}function Va(e,t){var n,a=window.getComputedStyle(e),o=a[wl+"Delay"].split(", "),i=a[wl+"Duration"].split(", "),s=Pa(o,i),r=a[bl+"Delay"].split(", "),l=a[bl+"Duration"].split(", "),c=Pa(r,l),d=0,p=0;t===fl?s>0&&(n=fl,d=s,p=i.length):t===_l?c>0&&(n=_l,d=c,p=l.length):(d=Math.max(s,c),n=d>0?s>c?fl:_l:null,p=n?n===fl?i.length:l.length:0);var h=n===fl&&Il.test(a[wl+"Property"]);return{type:n,timeout:d,propCount:p,hasTransform:h}}function Pa(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Ma(t)+Ma(e[n])}))}function Ma(e){return 1e3*Number(e.slice(0,-1))}function Aa(t,n){var o=t.elm;a(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var i=ka(t.data.transition);if(!e(i)&&!a(o._enterCb)&&1===o.nodeType){for(var s=i.css,l=i.type,c=i.enterClass,d=i.enterToClass,p=i.enterActiveClass,h=i.appearClass,v=i.appearToClass,g=i.appearActiveClass,m=i.beforeEnter,f=i.enter,_=i.afterEnter,w=i.enterCancelled,y=i.beforeAppear,b=i.appear,C=i.afterAppear,x=i.appearCancelled,I=i.duration,k=tr,S=tr.$vnode;S&&S.parent;)S=S.parent,k=S.context;var D=!k._isMounted||!t.isRootInsert;if(!D||b||""===b){var F=D&&h?h:c,V=D&&g?g:p,P=D&&v?v:d,M=D?y||m:m,A=D&&"function"==typeof b?b:f,j=D?C||_:_,B=D?x||w:w,L=u(r(I)?I.enter:I);null!=L&&Ba(L,"enter",t);var N=s!==!1&&!Qi,E=Na(A),W=o._enterCb=T(function(){N&&(Da(o,P),Da(o,V)),W.cancelled?(N&&Da(o,F),B&&B(o)):j&&j(o),o._enterCb=null});t.data.show||we(t,"insert",function(){var e=o.parentNode,n=e&&e._pending&&e._pending[t.key];n&&n.tag===t.tag&&n.elm._leaveCb&&n.elm._leaveCb(),A&&A(o,W)}),M&&M(o),N&&(Ta(o,F),Ta(o,V),Sa(function(){Da(o,F),W.cancelled||(Ta(o,P),E||(La(L)?setTimeout(W,L):Fa(o,l,W)))})),t.data.show&&(n&&n(),A&&A(o,W)),N||E||W()}}}function ja(t,n){function o(){x.cancelled||(t.data.show||((i.parentNode._pending||(i.parentNode._pending={}))[t.key]=t),v&&v(i),y&&(Ta(i,d),Ta(i,h),Sa(function(){Da(i,d),x.cancelled||(Ta(i,p),b||(La(C)?setTimeout(x,C):Fa(i,c,x)))})),g&&g(i,x),y||b||x())}var i=t.elm;a(i._enterCb)&&(i._enterCb.cancelled=!0,i._enterCb());var s=ka(t.data.transition);if(e(s)||1!==i.nodeType)return n();if(!a(i._leaveCb)){var l=s.css,c=s.type,d=s.leaveClass,p=s.leaveToClass,h=s.leaveActiveClass,v=s.beforeLeave,g=s.leave,m=s.afterLeave,f=s.leaveCancelled,_=s.delayLeave,w=s.duration,y=l!==!1&&!Qi,b=Na(g),C=u(r(w)?w.leave:w);a(C)&&Ba(C,"leave",t);var x=i._leaveCb=T(function(){i.parentNode&&i.parentNode._pending&&(i.parentNode._pending[t.key]=null),y&&(Da(i,p),Da(i,h)),x.cancelled?(y&&Da(i,d),f&&f(i)):(n(),m&&m(i)),i._leaveCb=null});_?_(o):o()}}function Ba(e,t,n){"number"!=typeof e?ps("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&ps("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function La(e){return"number"==typeof e&&!isNaN(e)}function Na(t){if(e(t))return!1;var n=t.fns;return a(n)?Na(Array.isArray(n)?n[0]:n):(t._length||t.length)>1}function Ea(e,t){t.data.show!==!0&&Aa(t)}function Wa(e,t,n){Oa(e,t,n),(Ki||es)&&setTimeout(function(){Oa(e,t,n)},0)}function Oa(e,t,n){var a=t.value,o=e.multiple;if(o&&!Array.isArray(a))return void ps('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(a).slice(8,-1),n);for(var i,s,r=0,l=e.options.length;r<l;r++)if(s=e.options[r],o)i=S(a,Ga(s))>-1,s.selected!==i&&(s.selected=i);else if(k(Ga(s),a))return void(e.selectedIndex!==r&&(e.selectedIndex=r));o||(e.selectedIndex=-1)}function Ra(e,t){return t.every(function(t){return!k(t,e)})}function Ga(e){return"_value"in e?e._value:e.value}function Ha(e){e.target.composing=!0}function Ua(e){e.target.composing&&(e.target.composing=!1,za(e.target,"input"))}function za(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function $a(e){return!e.componentInstance||e.data&&e.data.transition?e:$a(e.componentInstance._vnode)}function Xa(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Xa(Ve(t.children)):e}function qa(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var o=n._parentListeners;for(var i in o)t[Bi(i)]=o[i];return t}function Ya(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}function Za(e){for(;e=e.parent;)if(e.data.transition)return!0}function Ja(e,t){return t.key===e.key&&t.tag===e.tag}function Ka(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Qa(e){e.data.newPos=e.elm.getBoundingClientRect()}function eo(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,o=t.top-n.top;if(a||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+a+"px,"+o+"px)",i.transitionDuration="0s"}}function to(e,t){var n=t?Ol(t):El;if(n.test(e)){for(var a,o,i,s=[],r=[],l=n.lastIndex=0;a=n.exec(e);){o=a.index,o>l&&(r.push(i=e.slice(l,o)),s.push(JSON.stringify(i)));var c=On(a[1].trim());s.push("_s("+c+")"),r.push({"@binding":c}),l=o+a[0].length}return l<e.length&&(r.push(i=e.slice(l)),s.push(JSON.stringify(i))),{expression:s.join("+"),tokens:r}}}function no(e,t){var n=t.warn||Gn,a=Zn(e,"class");if(a){var o=to(a,t.delimiters);o&&n('class="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.')}a&&(e.staticClass=JSON.stringify(a));var i=Yn(e,"class",!1);i&&(e.classBinding=i)}function ao(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function oo(e,t){var n=t.warn||Gn,a=Zn(e,"style");if(a){var o=to(a,t.delimiters);o&&n('style="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.'),e.staticStyle=JSON.stringify(ll(a))}var i=Yn(e,"style",!1);i&&(e.styleBinding=i)}function io(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}function so(e,t){var n=t?_c:fc;return e.replace(n,function(e){return mc[e]})}function ro(e,t){function n(t){h+=t,e=e.substring(t)}function a(){var t=e.match(Zl);if(t){var a={tagName:t[1],attrs:[],start:h};n(t[0].length);for(var o,i;!(o=e.match(Jl))&&(i=e.match(Xl));)n(i[0].length),a.attrs.push(i);if(o)return a.unarySlash=o[1],n(o[0].length),a.end=h,a}}function o(e){var n=e.tagName,a=e.unarySlash;c&&("p"===r&&$l(n)&&i(r),p(n)&&r===n&&i(n));for(var o=d(n)||!!a,s=e.attrs.length,h=new Array(s),u=0;u<s;u++){var v=e.attrs[u];nc&&v[0].indexOf('""')===-1&&(""===v[3]&&delete v[3],""===v[4]&&delete v[4],""===v[5]&&delete v[5]);var g=v[3]||v[4]||v[5]||"",m="a"===n&&"href"===v[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;h[u]={name:v[1],value:so(g,m)}}o||(l.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:h}),r=n),t.start&&t.start(n,h,o,e.start,e.end)}function i(e,n,a){var o,i;if(null==n&&(n=h),null==a&&(a=h),e&&(i=e.toLowerCase()),e)for(o=l.length-1;o>=0&&l[o].lowerCasedTag!==i;o--);else o=0;if(o>=0){for(var s=l.length-1;s>=o;s--)(s>o||!e)&&t.warn&&t.warn("tag <"+l[s].tag+"> has no matching end tag."),t.end&&t.end(l[s].tag,n,a);l.length=o,r=o&&l[o-1].tag}else"br"===i?t.start&&t.start(e,[],!0,n,a):"p"===i&&(t.start&&t.start(e,[],!1,n,a),t.end&&t.end(e,n,a))}for(var s,r,l=[],c=t.expectHTML,d=t.isUnaryTag||Oi,p=t.canBeLeftOpenTag||Oi,h=0;e;){if(s=e,r&&vc(r)){var u=0,v=r.toLowerCase(),g=gc[v]||(gc[v]=new RegExp("([\\s\\S]*?)(</"+v+"[^>]*>)","i")),m=e.replace(g,function(e,n,a){return u=a.length,vc(v)||"noscript"===v||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),yc(v,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});h+=e.length-m.length,e=m,i(v,h-u,h)}else{var f=e.indexOf("<");if(0===f){if(ec.test(e)){var _=e.indexOf("-->");if(_>=0){t.shouldKeepComment&&t.comment(e.substring(4,_)),n(_+3);continue}}if(tc.test(e)){var w=e.indexOf("]>");if(w>=0){n(w+2);continue}}var y=e.match(Ql);if(y){n(y[0].length);continue}var b=e.match(Kl);if(b){var C=h;n(b[0].length),i(b[1],C,h);continue}var x=a();if(x){o(x),yc(r,e)&&n(1);continue}}var I=void 0,k=void 0,S=void 0;if(f>=0){for(k=e.slice(f);!(Kl.test(k)||Zl.test(k)||ec.test(k)||tc.test(k)||(S=k.indexOf("<",1),S<0));)f+=S,k=e.slice(f);I=e.substring(0,f),n(f)}f<0&&(I=e,e=""),t.chars&&I&&t.chars(I)}if(e===s){t.chars&&t.chars(e),!l.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"');break}}i()}function lo(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:Do(t),parent:n,children:[]}}function co(e,t){function n(e){d||(d=!0,ac(e))}function a(e){e.pre&&(l=!1),lc(e.tag)&&(c=!1);for(var n=0;n<rc.length;n++)rc[n](e,t)}ac=t.warn||Gn,lc=t.isPreTag||Oi,cc=t.mustUseProp||Oi,dc=t.getTagNamespace||Oi,ic=Hn(t.modules,"transformNode"),sc=Hn(t.modules,"preTransformNode"),rc=Hn(t.modules,"postTransformNode"),oc=t.delimiters;var o,i,s=[],r=t.preserveWhitespace!==!1,l=!1,c=!1,d=!1;return ro(e,{warn:ac,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,start:function(e,r,d){function p(e){"slot"!==e.tag&&"template"!==e.tag||n("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes."),e.attrsMap.hasOwnProperty("v-for")&&n("Cannot use v-for on stateful component root element because it renders multiple elements.")}var h=i&&i.ns||dc(e);Ki&&"svg"===h&&(r=Po(r));var u=lo(e,r,i);h&&(u.ns=h),Vo(u)&&!ls()&&(u.forbidden=!0,ac("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed."));for(var v=0;v<sc.length;v++)u=sc[v](u,t)||u;if(l||(po(u),u.pre&&(l=!0)),lc(u.tag)&&(c=!0),l?ho(u):u.processed||(mo(u),_o(u),Co(u),uo(u,t)),o?s.length||(o.if&&(u.elseif||u.else)?(p(u),bo(o,{exp:u.elseif,block:u})):n("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.")):(o=u,p(o)),i&&!u.forbidden)if(u.elseif||u.else)wo(u,i);else if(u.slotScope){
i.plain=!1;var g=u.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[g]=u}else i.children.push(u),u.parent=i;d?a(u):(i=u,s.push(u))},end:function(){var e=s[s.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&!c&&e.children.pop(),s.length-=1,i=s[s.length-1],a(e)},chars:function(t){if(!i)return void(t===e?n("Component template requires a root element, rather than just text."):(t=t.trim())&&n('text "'+t+'" outside root element will be ignored.'));if(!Ki||"textarea"!==i.tag||i.attrsMap.placeholder!==t){var a=i.children;if(t=c||t.trim()?Fo(i)?t:Fc(t):r&&a.length?" ":""){var o;!l&&" "!==t&&(o=to(t,oc))?a.push({type:2,expression:o.expression,tokens:o.tokens,text:t}):" "===t&&a.length&&" "===a[a.length-1].text||a.push({type:3,text:t})}}},comment:function(e){i.children.push({type:3,text:e,isComment:!0})}}),o}function po(e){null!=Zn(e,"v-pre")&&(e.pre=!0)}function ho(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),a=0;a<t;a++)n[a]={name:e.attrsList[a].name,value:JSON.stringify(e.attrsList[a].value)};else e.pre||(e.plain=!0)}function uo(e,t){vo(e),e.plain=!e.key&&!e.attrsList.length,go(e),xo(e),Io(e);for(var n=0;n<ic.length;n++)e=ic[n](e,t)||e;ko(e)}function vo(e){var t=Yn(e,"key");t&&("template"===e.tag&&ac("<template> cannot be keyed. Place the key on real elements instead."),e.key=t)}function go(e){var t=Yn(e,"ref");t&&(e.ref=t,e.refInFor=So(e))}function mo(e){var t;if(t=Zn(e,"v-for")){var n=fo(t);n?b(e,n):ac("Invalid v-for expression: "+t)}}function fo(e){var t=e.match(xc);if(t){var n={};n.for=t[2].trim();var a=t[1].trim().replace(kc,""),o=a.match(Ic);return o?(n.alias=a.replace(Ic,""),n.iterator1=o[1].trim(),o[2]&&(n.iterator2=o[2].trim())):n.alias=a,n}}function _o(e){var t=Zn(e,"v-if");if(t)e.if=t,bo(e,{exp:t,block:e});else{null!=Zn(e,"v-else")&&(e.else=!0);var n=Zn(e,"v-else-if");n&&(e.elseif=n)}}function wo(e,t){var n=yo(t.children);n&&n.if?bo(n,{exp:e.elseif,block:e}):ac("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.")}function yo(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&ac('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.'),e.pop()}}function bo(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Co(e){var t=Zn(e,"v-once");null!=t&&(e.once=!0)}function xo(e){if("slot"===e.tag)e.slotName=Yn(e,"name"),e.key&&ac("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.");else{var t;"template"===e.tag?(t=Zn(e,"scope"),t&&ac('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',!0),e.slotScope=t||Zn(e,"slot-scope")):(t=Zn(e,"slot-scope"))&&(e.attrsMap["v-for"]&&ac("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",!0),e.slotScope=t);var n=Yn(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,"template"===e.tag||e.slotScope||zn(e,"slot",n))}}function Io(e){var t;(t=Yn(e,"is"))&&(e.component=t),null!=Zn(e,"inline-template")&&(e.inlineTemplate=!0)}function ko(e){var t,n,a,o,i,s,r,l=e.attrsList;for(t=0,n=l.length;t<n;t++)if(a=o=l[t].name,i=l[t].value,Cc.test(a))if(e.hasBindings=!0,s=To(a),s&&(a=a.replace(Dc,"")),Tc.test(a))a=a.replace(Tc,""),i=On(i),r=!1,s&&(s.prop&&(r=!0,a=Bi(a),"innerHtml"===a&&(a="innerHTML")),s.camel&&(a=Bi(a)),s.sync&&qn(e,"update:"+Bi(a),Kn(i,"$event"))),r||!e.component&&cc(e.tag,e.attrsMap.type,a)?Un(e,a,i):zn(e,a,i);else if(bc.test(a))a=a.replace(bc,""),qn(e,a,i,s,!1,ac);else{a=a.replace(Cc,"");var c=a.match(Sc),d=c&&c[1];d&&(a=a.slice(0,-(d.length+1))),Xn(e,a,o,i,d,s),"model"===a&&Mo(e,i)}else{var p=to(i,oc);p&&ac(a+'="'+i+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.'),zn(e,a,JSON.stringify(i)),!e.component&&"muted"===a&&cc(e.tag,e.attrsMap.type,a)&&Un(e,a,"true")}}function So(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function To(e){var t=e.match(Dc);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function Do(e){for(var t={},n=0,a=e.length;n<a;n++)!t[e[n].name]||Ki||es||ac("duplicate attribute: "+e[n].name),t[e[n].name]=e[n].value;return t}function Fo(e){return"script"===e.tag||"style"===e.tag}function Vo(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function Po(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];Vc.test(a.name)||(a.name=a.name.replace(Pc,""),t.push(a))}return t}function Mo(e,t){for(var n=e;n;)n.for&&n.alias===t&&ac("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.'),n=n.parent}function Ao(e,t){if("input"===e.tag){var n=e.attrsMap;if(!n["v-model"])return;var a;if((n[":type"]||n["v-bind:type"])&&(a=Yn(e,"type")),n.type||a||!n["v-bind"]||(a="("+n["v-bind"]+").type"),a){var o=Zn(e,"v-if",!0),i=o?"&&("+o+")":"",s=null!=Zn(e,"v-else",!0),r=Zn(e,"v-else-if",!0),l=jo(e);mo(l),$n(l,"type","checkbox"),uo(l,t),l.processed=!0,l.if="("+a+")==='checkbox'"+i,bo(l,{exp:l.if,block:l});var c=jo(e);Zn(c,"v-for",!0),$n(c,"type","radio"),uo(c,t),bo(l,{exp:"("+a+")==='radio'"+i,block:c});var d=jo(e);return Zn(d,"v-for",!0),$n(d,":type",a),uo(d,t),bo(l,{exp:o,block:d}),s?l.else=!0:r&&(l.elseif=r),l}}}function jo(e){return lo(e.tag,e.attrsList.slice(),e.parent)}function Bo(e,t){t.value&&Un(e,"textContent","_s("+t.value+")")}function Lo(e,t){t.value&&Un(e,"innerHTML","_s("+t.value+")")}function No(e,t){e&&(pc=Lc(t.staticKeys||""),hc=t.isReservedTag||Oi,Wo(e),Oo(e,!1))}function Eo(e){return v("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function Wo(e){if(e.static=Ro(e),1===e.type){if(!hc(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var a=e.children[t];Wo(a),a.static||(e.static=!1)}if(e.ifConditions)for(var o=1,i=e.ifConditions.length;o<i;o++){var s=e.ifConditions[o].block;Wo(s),s.static||(e.static=!1)}}}function Oo(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,a=e.children.length;n<a;n++)Oo(e.children[n],t||!!e.for);if(e.ifConditions)for(var o=1,i=e.ifConditions.length;o<i;o++)Oo(e.ifConditions[o].block,t)}}function Ro(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||Pi(e.tag)||!hc(e.tag)||Go(e)||!Object.keys(e).every(pc))))}function Go(e){for(;e.parent;){if(e=e.parent,"template"!==e.tag)return!1;if(e.for)return!0}return!1}function Ho(e,t,n){var a=t?"nativeOn:{":"on:{";for(var o in e)a+='"'+o+'":'+Uo(o,e[o])+",";return a.slice(0,-1)+"}"}function Uo(e,t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return Uo(e,t)}).join(",")+"]";var n=Ec.test(t.value),a=Nc.test(t.value);if(t.modifiers){var o="",i="",s=[];for(var r in t.modifiers)if(Gc[r])i+=Gc[r],Wc[r]&&s.push(r);else if("exact"===r){var l=t.modifiers;i+=Rc(["ctrl","shift","alt","meta"].filter(function(e){return!l[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else s.push(r);s.length&&(o+=zo(s)),i&&(o+=i);var c=n?"return "+t.value+"($event)":a?"return ("+t.value+")($event)":t.value;return"function($event){"+o+c+"}"}return n||a?t.value:"function($event){"+t.value+"}"}function zo(e){return"if(!('button' in $event)&&"+e.map($o).join("&&")+")return null;"}function $o(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Wc[e],a=Oc[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(a)+")"}function Xo(e,t){t.modifiers&&ps("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}}function qo(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}}function Yo(e,t){var n=new Uc(t),a=e?Zo(e,n):'_c("div")';return{render:"with(this){return "+a+"}",staticRenderFns:n.staticRenderFns}}function Zo(e,t){if(e.staticRoot&&!e.staticProcessed)return Jo(e,t);if(e.once&&!e.onceProcessed)return Ko(e,t);if(e.for&&!e.forProcessed)return ti(e,t);if(e.if&&!e.ifProcessed)return Qo(e,t);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return vi(e,t);var n;if(e.component)n=gi(e.component,e,t);else{var a=e.plain?void 0:ni(e,t),o=e.inlineTemplate?null:li(e,t,!0);n="_c('"+e.tag+"'"+(a?","+a:"")+(o?","+o:"")+")"}for(var i=0;i<t.transforms.length;i++)n=t.transforms[i](e,n);return n}return li(e,t)||"void 0"}function Jo(e,t){return e.staticProcessed=!0,t.staticRenderFns.push("with(this){return "+Zo(e,t)+"}"),"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Ko(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Qo(e,t);if(e.staticInFor){for(var n="",a=e.parent;a;){if(a.for){n=a.key;break}a=a.parent}return n?"_o("+Zo(e,t)+","+t.onceId++ +","+n+")":(t.warn("v-once can only be used inside v-for that is keyed. "),Zo(e,t))}return Jo(e,t)}function Qo(e,t,n,a){return e.ifProcessed=!0,ei(e.ifConditions.slice(),t,n,a)}function ei(e,t,n,a){function o(e){return n?n(e,t):e.once?Ko(e,t):Zo(e,t)}if(!e.length)return a||"_e()";var i=e.shift();return i.exp?"("+i.exp+")?"+o(i.block)+":"+ei(e,t,n,a):""+o(i.block)}function ti(e,t,n,a){var o=e.for,i=e.alias,s=e.iterator1?","+e.iterator1:"",r=e.iterator2?","+e.iterator2:"";return t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+i+" in "+o+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',!0),e.forProcessed=!0,(a||"_l")+"(("+o+"),function("+i+s+r+"){return "+(n||Zo)(e,t)+"})"}function ni(e,t){var n="{",a=ai(e,t);a&&(n+=a+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var o=0;o<t.dataGenFns.length;o++)n+=t.dataGenFns[o](e);if(e.attrs&&(n+="attrs:{"+mi(e.attrs)+"},"),e.props&&(n+="domProps:{"+mi(e.props)+"},"),e.events&&(n+=Ho(e.events,!1,t.warn)+","),e.nativeEvents&&(n+=Ho(e.nativeEvents,!0,t.warn)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=ii(e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=oi(e,t);i&&(n+=i+",")}return n=n.replace(/,$/,"")+"}",e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function ai(e,t){var n=e.directives;if(n){var a,o,i,s,r="directives:[",l=!1;for(a=0,o=n.length;a<o;a++){i=n[a],s=!0;var c=t.directives[i.name];c&&(s=!!c(e,i,t.warn)),s&&(l=!0,r+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return l?r.slice(0,-1)+"]":void 0}}function oi(e,t){var n=e.children[0];if(1===e.children.length&&1===n.type||t.warn("Inline-template components must have exactly one child element."),1===n.type){var a=Yo(n,t.options);return"inlineTemplate:{render:function(){"+a.render+"},staticRenderFns:["+a.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function ii(e,t){return"scopedSlots:_u(["+Object.keys(e).map(function(n){return si(n,e[n],t)}).join(",")+"])"}function si(e,t,n){if(t.for&&!t.forProcessed)return ri(e,t,n);var a="function("+String(t.slotScope)+"){return "+("template"===t.tag?t.if?t.if+"?"+(li(t,n)||"undefined")+":undefined":li(t,n)||"undefined":Zo(t,n))+"}";return"{key:"+e+",fn:"+a+"}"}function ri(e,t,n){var a=t.for,o=t.alias,i=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,"_l(("+a+"),function("+o+i+s+"){return "+si(e,t,n)+"})"}function li(e,t,n,a,o){var i=e.children;if(i.length){var s=i[0];if(1===i.length&&s.for&&"template"!==s.tag&&"slot"!==s.tag)return(a||Zo)(s,t);var r=n?ci(i,t.maybeComponent):0,l=o||pi;return"["+i.map(function(e){return l(e,t)}).join(",")+"]"+(r?","+r:"")}}function ci(e,t){for(var n=0,a=0;a<e.length;a++){var o=e[a];if(1===o.type){if(di(o)||o.ifConditions&&o.ifConditions.some(function(e){return di(e.block)})){n=2;break}(t(o)||o.ifConditions&&o.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}function di(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function pi(e,t){return 1===e.type?Zo(e,t):3===e.type&&e.isComment?ui(e):hi(e)}function hi(e){return"_v("+(2===e.type?e.expression:fi(JSON.stringify(e.text)))+")"}function ui(e){return"_e("+JSON.stringify(e.text)+")"}function vi(e,t){var n=e.slotName||'"default"',a=li(e,t),o="_t("+n+(a?","+a:""),i=e.attrs&&"{"+e.attrs.map(function(e){return Bi(e.name)+":"+e.value}).join(",")+"}",s=e.attrsMap["v-bind"];return!i&&!s||a||(o+=",null"),i&&(o+=","+i),s&&(o+=(i?"":",null")+","+s),o+")"}function gi(e,t,n){var a=t.inlineTemplate?null:li(t,n,!0);return"_c("+e+","+ni(t,n)+(a?","+a:"")+")"}function mi(e){for(var t="",n=0;n<e.length;n++){var a=e[n];t+='"'+a.name+'":'+fi(a.value)+","}return t.slice(0,-1)}function fi(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function _i(e){var t=[];return e&&wi(e,t),t}function wi(e,t){if(1===e.type){for(var n in e.attrsMap)if(Cc.test(n)){var a=e.attrsMap[n];a&&("v-for"===n?bi(e,'v-for="'+a+'"',t):bc.test(n)?yi(a,n+'="'+a+'"',t):xi(a,n+'="'+a+'"',t))}if(e.children)for(var o=0;o<e.children.length;o++)wi(e.children[o],t)}else 2===e.type&&xi(e.expression,e.text,t)}function yi(e,t,n){var a=e.replace(Xc,""),o=a.match($c);o&&"$"!==a.charAt(o.index-1)&&n.push('avoid using JavaScript unary operator as property name: "'+o[0]+'" in expression '+t.trim()),xi(e,t,n)}function bi(e,t,n){xi(e.for||"",t,n),Ci(e.alias,"v-for alias",t,n),Ci(e.iterator1,"v-for iterator",t,n),Ci(e.iterator2,"v-for iterator",t,n)}function Ci(e,t,n,a){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(o){a.push("invalid "+t+' "'+e+'" in expression: '+n.trim())}}function xi(e,t,n){try{new Function("return "+e)}catch(o){var a=e.replace(Xc,"").match(zc);a?n.push('avoid using JavaScript keyword as property name: "'+a[0]+'"\n  Raw expression: '+t.trim()):n.push("invalid expression: "+o.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n")}}function Ii(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),x}}function ki(e){var t=Object.create(null);return function(n,a,o){a=b({},a);var i=a.warn||ps;delete a.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&i("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var s=a.delimiters?String(a.delimiters)+n:n;if(t[s])return t[s];var r=e(n,a);r.errors&&r.errors.length&&i("Error compiling template:\n\n"+n+"\n\n"+r.errors.map(function(e){return"- "+e}).join("\n")+"\n",o),r.tips&&r.tips.length&&r.tips.forEach(function(e){return hs(e,o)});var l={},c=[];return l.render=Ii(r.render,c),l.staticRenderFns=r.staticRenderFns.map(function(e){return Ii(e,c)}),r.errors&&r.errors.length||!c.length||i("Failed to generate render function:\n\n"+c.map(function(e){var t=e.err,n=e.code;return t.toString()+" in\n\n"+n+"\n"}).join("\n"),o),t[s]=l}}function Si(e){return function(t){function n(n,a){var o=Object.create(t),i=[],s=[];if(o.warn=function(e,t){(t?s:i).push(e)},a){a.modules&&(o.modules=(t.modules||[]).concat(a.modules)),a.directives&&(o.directives=b(Object.create(t.directives||null),a.directives));for(var r in a)"modules"!==r&&"directives"!==r&&(o[r]=a[r])}var l=e(n,o);return i.push.apply(i,_i(l.ast)),l.errors=i,l.tips=s,l}return{compile:n,compileToFunctions:ki(n)}}}function Ti(e){return uc=uc||document.createElement("div"),uc.innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',uc.innerHTML.indexOf("&#10;")>0}function Di(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var Fi=Object.freeze({}),Vi=Object.prototype.toString,Pi=v("slot,component",!0),Mi=v("key,ref,slot,slot-scope,is"),Ai=Object.prototype.hasOwnProperty,ji=/-(\w)/g,Bi=f(function(e){return e.replace(ji,function(e,t){return t?t.toUpperCase():""})}),Li=f(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),Ni=/\B([A-Z])/g,Ei=f(function(e){return e.replace(Ni,"-$1").toLowerCase()}),Wi=Function.prototype.bind?w:_,Oi=function(e,t,n){return!1},Ri=function(e){return e},Gi="data-server-rendered",Hi=["component","directive","filter"],Ui=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],zi={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:Oi,isReservedAttr:Oi,isUnknownElement:Oi,getTagNamespace:x,parsePlatformTagName:Ri,mustUseProp:Oi,_lifecycleHooks:Ui},$i=/[^\w.$]/,Xi="__proto__"in{},qi="undefined"!=typeof window,Yi="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Zi=Yi&&WXEnvironment.platform.toLowerCase(),Ji=qi&&window.navigator.userAgent.toLowerCase(),Ki=Ji&&/msie|trident/.test(Ji),Qi=Ji&&Ji.indexOf("msie 9.0")>0,es=Ji&&Ji.indexOf("edge/")>0,ts=(Ji&&Ji.indexOf("android")>0||"android"===Zi,Ji&&/iphone|ipad|ipod|ios/.test(Ji)||"ios"===Zi),ns=Ji&&/chrome\/\d+/.test(Ji)&&!es,as={}.watch,os=!1;if(qi)try{var is={};Object.defineProperty(is,"passive",{get:function(){os=!0}}),window.addEventListener("test-passive",null,is)}catch(e){}var ss,rs,ls=function(){return void 0===ss&&(ss=!qi&&!Yi&&"undefined"!=typeof t&&"server"===t.process.env.VUE_ENV),ss},cs=qi&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,ds="undefined"!=typeof Symbol&&P(Symbol)&&"undefined"!=typeof Reflect&&P(Reflect.ownKeys);rs="undefined"!=typeof Set&&P(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return this.set[e]===!0},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ps=x,hs=x,us=x,vs=x,gs="undefined"!=typeof console,ms=/(?:^|[-_])(\w)/g,fs=function(e){return e.replace(ms,function(e){return e.toUpperCase()}).replace(/[-_]/g,"")};ps=function(e,t){var n=t?us(t):"";zi.warnHandler?zi.warnHandler.call(null,e,t,n):gs&&!zi.silent&&console.error("[Vue warn]: "+e+n)},hs=function(e,t){gs&&!zi.silent&&console.warn("[Vue tip]: "+e+(t?us(t):""))},vs=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e||{},a=n.name||n._componentTag,o=n.__file;if(!a&&o){var i=o.match(/([^\/\\]+)\.vue$/);a=i&&i[1]}return(a?"<"+fs(a)+">":"<Anonymous>")+(o&&t!==!1?" at "+o:"")};var _s=function(e,t){for(var n="";t;)t%2===1&&(n+=e),t>1&&(e+=e),t>>=1;return n};us=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var a=t[t.length-1];if(a.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[a,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map(function(e,t){return""+(0===t?"---> ":_s(" ",5+2*t))+(Array.isArray(e)?vs(e[0])+"... ("+e[1]+" recursive calls)":vs(e))}).join("\n")}return"\n\n(found in "+vs(e)+")"};var ws=0,ys=function(){this.id=ws++,this.subs=[]};ys.prototype.addSub=function(e){this.subs.push(e)},ys.prototype.removeSub=function(e){g(this.subs,e)},ys.prototype.depend=function(){ys.target&&ys.target.addDep(this)},ys.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},ys.target=null;var bs=[],Cs=function(e,t,n,a,o,i,s,r){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=r,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},xs={child:{configurable:!0}};xs.child.get=function(){return this.componentInstance},Object.defineProperties(Cs.prototype,xs);var Is=function(e){void 0===e&&(e="");var t=new Cs;return t.text=e,t.isComment=!0,t},ks=Array.prototype,Ss=Object.create(ks),Ts=["push","pop","shift","unshift","splice","sort","reverse"];Ts.forEach(function(e){var t=ks[e];F(Ss,e,function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];var o,i=t.apply(this,n),s=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&s.observeArray(o),s.dep.notify(),i})});var Ds=Object.getOwnPropertyNames(Ss),Fs=!0,Vs=function(e){if(this.value=e,this.dep=new ys,this.vmCount=0,F(e,"__ob__",this),Array.isArray(e)){var t=Xi?N:E;t(e,Ss,Ds),this.observeArray(e)}else this.walk(e)};Vs.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)O(e,t[n])},Vs.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)W(e[t])};var Ps=zi.optionMergeStrategies;Ps.el=Ps.propsData=function(e,t,n,a){return n||ps('option "'+a+'" can only be used during instance creation with the `new` keyword.'),js(e,t)},Ps.data=function(e,t,n){return n?z(e,t,n):t&&"function"!=typeof t?(ps('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):z(e,t)},Ui.forEach(function(e){Ps[e]=$}),Hi.forEach(function(e){Ps[e+"s"]=X}),Ps.watch=function(e,t,n,a){if(e===as&&(e=void 0),t===as&&(t=void 0),!t)return Object.create(e||null);if(Q(a,t,n),!e)return t;var o={};b(o,e);for(var i in t){var s=o[i],r=t[i];s&&!Array.isArray(s)&&(s=[s]),o[i]=s?s.concat(r):Array.isArray(r)?r:[r]}return o},Ps.props=Ps.methods=Ps.inject=Ps.computed=function(e,t,n,a){if(t&&Q(a,t,n),!e)return t;var o=Object.create(null);return b(o,e),t&&b(o,t),o},Ps.provide=z;var Ms,As,js=function(e,t){return void 0===t?e:t},Bs=/^(String|Number|Boolean|Function|Symbol)$/,Ls=[],Ns=!1,Es=!1;if("undefined"!=typeof n&&P(n))As=function(){n(he)};else if("undefined"==typeof MessageChannel||!P(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())As=function(){setTimeout(he,0)};else{var Ws=new MessageChannel,Os=Ws.port2;Ws.port1.onmessage=he,As=function(){Os.postMessage(1)}}if("undefined"!=typeof Promise&&P(Promise)){var Rs=Promise.resolve();Ms=function(){Rs.then(he),ts&&setTimeout(x)}}else Ms=As;var Gs,Hs,Us=qi&&window.performance;Us&&Us.mark&&Us.measure&&Us.clearMarks&&Us.clearMeasures&&(Gs=function(e){return Us.mark(e)},Hs=function(e,t,n){Us.measure(e,t,n),Us.clearMarks(t),Us.clearMarks(n),Us.clearMeasures(e)});var zs,$s=v("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Xs=function(e,t){ps('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},qs="undefined"!=typeof Proxy&&P(Proxy);if(qs){var Ys=v("stop,prevent,self,ctrl,shift,alt,meta,exact");zi.keyCodes=new Proxy(zi.keyCodes,{set:function(e,t,n){return Ys(t)?(ps("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var Zs={has:function e(t,n){var e=n in t,a=$s(n)||"_"===n.charAt(0);return e||a||Xs(t,n),e||!a}},Js={get:function(e,t){return"string"!=typeof t||t in e||Xs(e,t),e[t]}};zs=function(e){if(qs){var t=e.$options,n=t.render&&t.render._withStripped?Js:Zs;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Ks,Qs=new rs,er=f(function(e){var t="&"===e.charAt(0);e=t?e.slice(1):e;var n="~"===e.charAt(0);e=n?e.slice(1):e;var a="!"===e.charAt(0);return e=a?e.slice(1):e,{name:e,once:n,capture:a,passive:t}}),tr=null,nr=!1,ar=100,or=[],ir=[],sr={},rr={},lr=!1,cr=!1,dr=0,pr=0,hr=function(e,t,n,a,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++pr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new rs,this.newDepIds=new rs,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=V(t),this.getter||(this.getter=function(){},ps('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};hr.prototype.get=function(){M(this);var e,t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;ce(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ge(e),A(),this.cleanupDeps()}return e},hr.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},hr.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var a=this.depIds;this.depIds=this.newDepIds,this.newDepIds=a,this.newDepIds.clear(),a=this.deps,this.deps=this.newDeps,this.newDeps=a,this.newDeps.length=0},hr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Ke(this)},hr.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||r(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){ce(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},hr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},hr.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},hr.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);this.active=!1}};var ur={enumerable:!0,configurable:!0,get:x,set:x},vr={lazy:!0};kt(St.prototype);var gr={init:function(e,t,n,a){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var o=e;gr.prepatch(o,o)}else{var i=e.componentInstance=Pt(e,tr,n,a);i.$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions,a=t.componentInstance=e.componentInstance;Ge(a,n.propsData,n.listeners,t,n.children)},insert:function(e){var t=e.context,n=e.componentInstance;n._isMounted||(n._isMounted=!0,$e(n,"mounted")),e.data.keepAlive&&(t._isMounted?Ze(n):Ue(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?ze(t,!0):t.$destroy())}},mr=Object.keys(gr),fr=1,_r=2,wr=0;Ot(zt),dt(zt),Be(zt),Oe(zt),Wt(zt);var yr=[String,RegExp,Array],br={name:"keep-alive",abstract:!0,props:{include:yr,exclude:yr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){var e=this;for(var t in e.cache)tn(e.cache,t,e.keys)},mounted:function(){var e=this;this.$watch("include",function(t){en(e,function(e){return Qt(t,e)})}),this.$watch("exclude",function(t){en(e,function(e){return!Qt(t,e)})})},render:function(){var e=this.$slots.default,t=Ve(e),n=t&&t.componentOptions;if(n){var a=Kt(n),o=this,i=o.include,s=o.exclude;if(i&&(!a||!Qt(i,a))||s&&a&&Qt(s,a))return t;var r=this,l=r.cache,c=r.keys,d=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;l[d]?(t.componentInstance=l[d].componentInstance,g(c,d),c.push(d)):(l[d]=t,c.push(d),this.max&&c.length>parseInt(this.max)&&tn(l,c[0],c,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},Cr={KeepAlive:br};nn(zt),Object.defineProperty(zt.prototype,"$isServer",{get:ls}),Object.defineProperty(zt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(zt,"FunctionalRenderContext",{value:St}),zt.version="2.5.16";var xr,Ir,kr,Sr,Tr,Dr,Fr,Vr,Pr,Mr=v("style,class"),Ar=v("input,textarea,option,select,progress"),jr=function(e,t,n){return"value"===n&&Ar(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Br=v("contenteditable,draggable,spellcheck"),Lr=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Nr="http://www.w3.org/1999/xlink",Er=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Wr=function(e){return Er(e)?e.slice(6,e.length):""},Or=function(e){return null==e||e===!1},Rr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gr=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Hr=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ur=function(e){return"pre"===e},zr=function(e){return Gr(e)||Hr(e)},$r=Object.create(null),Xr=v("text,number,password,search,email,tel,url"),qr=Object.freeze({createElement:vn,createElementNS:gn,createTextNode:mn,createComment:fn,insertBefore:_n,removeChild:wn,appendChild:yn,parentNode:bn,nextSibling:Cn,tagName:xn,setTextContent:In,setStyleScope:kn}),Yr={create:function(e,t){Sn(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Sn(e,!0),Sn(t))},destroy:function(e){Sn(e,!0)}},Zr=new Cs("",{},[]),Jr=["create","activate","update","remove","destroy"],Kr={create:Pn,update:Pn,destroy:function(e){Pn(e,Zr)}},Qr=Object.create(null),el=[Yr,Kr],tl={create:Ln,update:Ln},nl={create:Wn,update:Wn},al=/[\w).+\-_$\]]/,ol="__r",il="__c",sl={create:va,update:va},rl={create:ga,update:ga},ll=f(function(e){var t={},n=/;(?![^(]*\))/g,a=/:(.+)/;return e.split(n).forEach(function(e){if(e){var n=e.split(a);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}),cl=/^--/,dl=/\s*!important$/,pl=function(e,t,n){if(cl.test(t))e.style.setProperty(t,n);else if(dl.test(n))e.style.setProperty(t,n.replace(dl,""),"important");else{var a=ul(t);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)e.style[a]=n[o];else e.style[a]=n}},hl=["Webkit","Moz","ms"],ul=f(function(e){if(Pr=Pr||document.createElement("div").style,e=Bi(e),"filter"!==e&&e in Pr)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<hl.length;n++){var a=hl[n]+t;if(a in Pr)return a}}),vl={create:Ca,update:Ca},gl=f(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",
leaveActiveClass:e+"-leave-active"}}),ml=qi&&!Qi,fl="transition",_l="animation",wl="transition",yl="transitionend",bl="animation",Cl="animationend";ml&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(wl="WebkitTransition",yl="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(bl="WebkitAnimation",Cl="webkitAnimationEnd"));var xl=qi?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()},Il=/\b(transform|all)(,|$)/,kl=qi?{create:Ea,activate:Ea,remove:function(e,t){e.data.show!==!0?ja(e,t):t()}}:{},Sl=[tl,nl,sl,rl,vl,kl],Tl=Sl.concat(el),Dl=Vn({nodeOps:qr,modules:Tl});Qi&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&za(e,"input")});var Fl={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?we(n,"postpatch",function(){Fl.componentUpdated(e,t,n)}):Wa(e,t,n.context),e._vOptions=[].map.call(e.options,Ga)):("textarea"===n.tag||Xr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Ha),e.addEventListener("compositionend",Ua),e.addEventListener("change",Ua),Qi&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Wa(e,t,n.context);var a=e._vOptions,o=e._vOptions=[].map.call(e.options,Ga);if(o.some(function(e,t){return!k(e,a[t])})){var i=e.multiple?t.value.some(function(e){return Ra(e,o)}):t.value!==t.oldValue&&Ra(t.value,o);i&&za(e,"change")}}}},Vl={bind:function(e,t,n){var a=t.value;n=$a(n);var o=n.data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&o?(n.data.show=!0,Aa(n,function(){e.style.display=i})):e.style.display=a?i:"none"},update:function(e,t,n){var a=t.value,o=t.oldValue;if(!a!=!o){n=$a(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,a?Aa(n,function(){e.style.display=e.__vOriginalDisplay}):ja(n,function(){e.style.display="none"})):e.style.display=a?e.__vOriginalDisplay:"none"}},unbind:function(e,t,n,a,o){o||(e.style.display=e.__vOriginalDisplay)}},Pl={model:Fl,show:Vl},Ml={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]},Al={name:"transition",props:Ml,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag||Fe(e)}),n.length)){n.length>1&&ps("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var a=this.mode;a&&"in-out"!==a&&"out-in"!==a&&ps("invalid <transition> mode: "+a,this.$parent);var o=n[0];if(Za(this.$vnode))return o;var i=Xa(o);if(!i)return o;if(this._leaving)return Ya(e,o);var r="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?r+"comment":r+i.tag:s(i.key)?0===String(i.key).indexOf(r)?i.key:r+i.key:i.key;var l=(i.data||(i.data={})).transition=qa(this),c=this._vnode,d=Xa(c);if(i.data.directives&&i.data.directives.some(function(e){return"show"===e.name})&&(i.data.show=!0),d&&d.data&&!Ja(i,d)&&!Fe(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var p=d.data.transition=b({},l);if("out-in"===a)return this._leaving=!0,we(p,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),Ya(e,o);if("in-out"===a){if(Fe(i))return c;var h,u=function(){h()};we(l,"afterEnter",u),we(l,"enterCancelled",u),we(p,"delayLeave",function(e){h=e})}}return o}}},jl=b({tag:String,moveClass:String},Ml);delete jl.mode;var Bl={props:jl,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],s=qa(this),r=0;r<o.length;r++){var l=o[r];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))i.push(l),n[l.key]=l,(l.data||(l.data={})).transition=s;else{var c=l.componentOptions,d=c?c.Ctor.options.name||c.tag||"":l.tag;ps("<transition-group> children must be keyed: <"+d+">")}}if(a){for(var p=[],h=[],u=0;u<a.length;u++){var v=a[u];v.data.transition=s,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?p.push(v):h.push(v)}this.kept=e(t,null,p),this.removed=h}return e(t,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ka),e.forEach(Qa),e.forEach(eo),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,a=n.style;Ta(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(yl,n._moveCb=function e(a){a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(yl,e),n._moveCb=null,Da(n,t))})}}))},methods:{hasMove:function(e,t){if(!ml)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){Ia(n,e)}),xa(n,t),n.style.display="none",this.$el.appendChild(n);var a=Va(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}},Ll={Transition:Al,TransitionGroup:Bl};zt.config.mustUseProp=jr,zt.config.isReservedTag=zr,zt.config.isReservedAttr=Mr,zt.config.getTagNamespace=pn,zt.config.isUnknownElement=hn,b(zt.options.directives,Pl),b(zt.options.components,Ll),zt.prototype.__patch__=qi?Dl:x,zt.prototype.$mount=function(e,t){return e=e&&qi?un(e):void 0,Re(this,e,t)},qi&&setTimeout(function(){zi.devtools&&(cs?cs.emit("init",zt):ns&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),zi.productionTip!==!1&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var Nl,El=/\{\{((?:.|\n)+?)\}\}/g,Wl=/[-.*+?^${}()|[\]\/\\]/g,Ol=f(function(e){var t=e[0].replace(Wl,"\\$&"),n=e[1].replace(Wl,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),Rl={staticKeys:["staticClass"],transformNode:no,genData:ao},Gl={staticKeys:["staticStyle"],transformNode:oo,genData:io},Hl={decode:function(e){return Nl=Nl||document.createElement("div"),Nl.innerHTML=e,Nl.textContent}},Ul=v("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),zl=v("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),$l=v("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Xl=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ql="[a-zA-Z_][\\w\\-\\.]*",Yl="((?:"+ql+"\\:)?"+ql+")",Zl=new RegExp("^<"+Yl),Jl=/^\s*(\/?)>/,Kl=new RegExp("^<\\/"+Yl+"[^>]*>"),Ql=/^<!DOCTYPE [^>]+>/i,ec=/^<!\--/,tc=/^<!\[/,nc=!1;"x".replace(/x(.)?/g,function(e,t){nc=""===t});var ac,oc,ic,sc,rc,lc,cc,dc,pc,hc,uc,vc=v("script,style,textarea",!0),gc={},mc={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t"},fc=/&(?:lt|gt|quot|amp);/g,_c=/&(?:lt|gt|quot|amp|#10|#9);/g,wc=v("pre,textarea",!0),yc=function(e,t){return e&&wc(e)&&"\n"===t[0]},bc=/^@|^v-on:/,Cc=/^v-|^@|^:/,xc=/([^]*?)\s+(?:in|of)\s+([^]*)/,Ic=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,kc=/^\(|\)$/g,Sc=/:(.*)$/,Tc=/^:|^v-bind:/,Dc=/\.[^.]+/g,Fc=f(Hl.decode),Vc=/^xmlns:NS\d+/,Pc=/^NS\d+:/,Mc={preTransformNode:Ao},Ac=[Rl,Gl,Mc],jc={model:ia,text:Bo,html:Lo},Bc={expectHTML:!0,modules:Ac,directives:jc,isPreTag:Ur,isUnaryTag:Ul,mustUseProp:jr,canBeLeftOpenTag:zl,isReservedTag:zr,getTagNamespace:pn,staticKeys:I(Ac)},Lc=f(Eo),Nc=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Ec=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Wc={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Oc={esc:"Escape",tab:"Tab",enter:"Enter",space:" ",up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete"]},Rc=function(e){return"if("+e+")return null;"},Gc={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Rc("$event.target !== $event.currentTarget"),ctrl:Rc("!$event.ctrlKey"),shift:Rc("!$event.shiftKey"),alt:Rc("!$event.altKey"),meta:Rc("!$event.metaKey"),left:Rc("'button' in $event && $event.button !== 0"),middle:Rc("'button' in $event && $event.button !== 1"),right:Rc("'button' in $event && $event.button !== 2")},Hc={on:Xo,bind:qo,cloak:x},Uc=function(e){this.options=e,this.warn=e.warn||Gn,this.transforms=Hn(e.modules,"transformCode"),this.dataGenFns=Hn(e.modules,"genData"),this.directives=b(b({},Hc),e.directives);var t=e.isReservedTag||Oi;this.maybeComponent=function(e){return!t(e.tag)},this.onceId=0,this.staticRenderFns=[]},zc=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),$c=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),Xc=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g,qc=Si(function(e,t){var n=co(e.trim(),t);t.optimize!==!1&&No(n,t);var a=Yo(n,t);return{ast:n,render:a.render,staticRenderFns:a.staticRenderFns}}),Yc=qc(Bc),Zc=Yc.compileToFunctions,Jc=!!qi&&Ti(!1),Kc=!!qi&&Ti(!0),Qc=f(function(e){var t=un(e);return t&&t.innerHTML}),ed=zt.prototype.$mount;return zt.prototype.$mount=function(e,t){if(e=e&&un(e),e===document.body||e===document.documentElement)return ps("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var a=n.template;if(a)if("string"==typeof a)"#"===a.charAt(0)&&(a=Qc(a),a||ps("Template element not found or is empty: "+n.template,this));else{if(!a.nodeType)return ps("invalid template option:"+a,this),this;a=a.innerHTML}else e&&(a=Di(e));if(a){zi.performance&&Gs&&Gs("compile");var o=Zc(a,{shouldDecodeNewlines:Jc,shouldDecodeNewlinesForHref:Kc,delimiters:n.delimiters,comments:n.comments},this),i=o.render,s=o.staticRenderFns;n.render=i,n.staticRenderFns=s,zi.performance&&Gs&&(Gs("compile end"),Hs("vue "+this._name+" compile","compile","compile end"))}}return ed.call(this,e,t)},zt.compile=Zc,zt})}).call(t,n(880),n(2).setImmediate)},function(e,t,n){"use strict";var a=n(5),o=n.n(a);t.default={components:{appHeader:o.a}}},function(e,t,n){"use strict";t.default={name:"Editors"}},function(e,t,n){"use strict";t.default={name:"VisualStudioCode"}},function(e,t,n){"use strict";t.default={name:"VisualStudio"}},function(e,t,n){"use strict";t.default={name:"Webstorm.vue"}},function(e,t,n){"use strict";t.default={name:"sqlite"}},function(e,t,n){"use strict";t.default={name:"Vuejs"}},function(e,t,n){"use strict";t.default={name:"VuejsEssentials00CourseContents.vue"}},function(e,t,n){"use strict";t.default={name:"VuejsEssentials01AnIntroductionToVue"}},function(e,t,n){"use strict";t.default={name:"VuejsEssentials02MovingOnWithVueCLI.vue"}},function(e,t,n){"use strict";t.default={name:"VuejsEssentialsWritingEffectiveApps.vue"}},function(e,t,n){"use strict";t.default={name:"VuejsEssentialsHandlingStateWithVuex.vue"}},function(e,t,n){"use strict";t.default={name:"wpf"}},function(e,t,n){"use strict";t.default={name:"WPFDataBindingInDepth05DeepDiveIntoDataTemplates.vue"}},function(e,t,n){"use strict";t.default={name:"WPFDataBindingInDepth07DesignTimeDatabinding.vue"}},function(e,t,n){"use strict";t.default={name:"WPFDataBindingInDepth08ContainersAndCollectionsControls.vue"}},function(e,t,n){"use strict";t.default={name:"WPFDataBindingInDepth09DataInputValidation.vue"}},function(e,t,n){"use strict";t.default={name:"wpf"}},function(e,t,n){"use strict";t.default={name:"WPFDataBindingInDepth01CourseOverview"}},function(e,t,n){"use strict";t.default={name:"WPFDatabindingInDepth03DataSources"}},function(e,t,n){"use strict";t.default={name:"WPFDatabindingInDepth03DataSources.vue"}},function(e,t,n){"use strict";t.default={name:"WPFDatabindingInDepth04BindingCoreConcepts.vue"}},function(e,t,n){"use strict";t.default={name:"WPFDatabindingInDepth05UnleashingTheFullPowerOfBindings.vue"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth00CourseContents"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth01MVVMPatternFundamentals"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth02FirstTasteOfMVVM"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth03HookingUpViewsAndViewModelsInMVVM"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth04ViewViewModelCommunicationInWPF"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth05AppliedMVVMPart1HierarchiesAndNavigation"}},function(e,t,n){"use strict";t.default={name:"WPFMVVMInDepth06AppliedMVVMPart2ValidationAQndDependencyInjection"}},function(e,t,n){"use strict";t.default={name:"wpf"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform00CourseContents"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform01GettingStarted"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform02XamlEssentials"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform03Layouts"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform04Images"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform05Lists"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform06Navigation"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform07FormsAndSettingsPages"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform08DataAccess"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform09ModelViewViewModelArchitecturalPattern"}},function(e,t,n){"use strict";t.default={name:"XamarinFormsCrossPlatform10BeyondTheBasics"}},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,".filename[data-v-c4119834]{font-family:Consolas;font-weight:700}.terminal[data-v-c4119834]{font-size:small;color:#fff;font-family:Consolas;background-color:#000;padding:2px 5px 4px;border-radius:4px}.table-striped>tbody>tr:nth-child(2n+0)>td[data-v-c4119834],.table-striped>tbody>tr:nth-child(2n+0)>th[data-v-c4119834]{background-color:#aeaeae}.thead-dark[data-v-c4119834]{background-color:#88888f}table.table-bordered[data-v-c4119834]{border:1px solid #000;margin-top:20px}table.table-bordered>tbody>tr>td[data-v-c4119834],table.table-bordered>thead>tr>th[data-v-c4119834]{border:1px solid #000}",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"figcaption{font-weight:700;padding:10px 0 20px}",""])},function(e,t,n){t=e.exports=n(0)(),t.push([e.i,"",""])},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/bower.png?05939ef567eb23edfa7cbf93bbb09aa4"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/codehint.png?2f334f21e329566b404bbdcf1d1504f8"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/codehintmessage.png?95968ff996307e55ecf2e9dbef5cffad"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/debugger.png?b9ea65a0e9f2f279fbe942c17c2f3961"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/emmet.png?01d0123d3430053ed17cad4c2e1e5cd7"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/explorer.png?5362eb85feb7faf83a9ba2b55a0e61dd"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/git.png?87cbd06d4966ea9a5d634d1d071b772e"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/gulp.png?52dae7667016cceb32c5551033356be7"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/npm.png?2234be723e138e18b372fe20c5b3007a"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/preview.png?5c81158ca1b3c10c53651451098f1dcc"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/search.png?0995ab0320c76590aeef3e508e9bc3ee"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/sourceview.png?b8a25b3e16d3a2e98304ff11cbbd6ea6"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/statusbar.png?d704c7e7c83493c2ee56db43f217a1ca"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/typescript.png?8b0a322906175264c42b4ac663ef7851"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/viewbar.png?9eeef4dc7ce8b6cedee9a26e24d9c5ec"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio-code/images/yeoman.png?060d9cdca989b38f28245d51e416c5d5"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio/images/VSCommandsZoom.png?9847b9744ec2748df3125195f85a5488"},function(e,t,n){e.exports=n.p+"src/components/editors/visual-studio/images/WordNextKeyboardShortcut.png?958a8f91832d08d0a8353b98a5dc4b38"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-009.png?ca849429e3a1e076a23764e1eb7271d5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-010.png?8e5dca962609963ae15b9aee2286bb0c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-021.png?5f29387d9b6732c3ac7ec0118388e4b2"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-023.png?8a2239600fb50827be56702ccd37f978"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-031.png?f632c355c86f41aa936766d1aeb0bffe"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig01-037.png?b2ef3e16d75f0954a7925a23c85311f1"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-001.png?a920857487663e74980388e8c9854499"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-002.png?82dae66b06b9bca883286a0c8ec53566"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-003.png?a61f02e52518952fae5b5048068db116"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-004.png?9fabd8f40b2fa3f1d554cadff6176f23"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-005.png?42050a7cf07a987d52b0c520b9512ab3"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-006.png?0cf2c57f169632a6416c2e286e81f99c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-007.png?a52011ca148935e2c44faea5a6907ba9"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-010.png?4af67b1ecb7f6d9e39290da0c147b0a1"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-011.png?d7c8173b7d9d8fd195353368fab16377"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-013.png?6be758d3c5729243010e581f8b0a0821"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-014.png?908df47ff76a61dfcda29b991c63f7fb"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-015.png?0a35032163a966b4bac94fe0b40d1b07"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-020.png?8fef361932b71e2c450358eaaecad5c8"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-021.png?62804b3b34f8ea1e7363cda52f5bf7b5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig02-022.png?e0b49b89a5946eac4f724a5e2d9cf704"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-001.png?d81e998b123180d64954f0f2dba234d7"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-002.png?c001bf6cccdcc3eefe5f6eeb42914361"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-009.png?9a502f57b8d2c55544f337e85e0e46a3"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-038.png?01aaec5a71f88c9b53abfbe678e76839"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-039.png?e0b49b89a5946eac4f724a5e2d9cf704"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-040.png?b2aa3fec3c05c58fbd27a7c1ce529df5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-048.png?ca8c2a712f1a8b5a0ffc9b16a908f124"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-049.png?e06de726b4e7bf0830bb22a7cc5a86f7"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-053.png?8729a3da4c0e34d5a44a4897be8151b0"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-054.png?f02fd3e47379eabbe6c9519f58f46e0c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-055.png?ea2ddd1a0d8aba14907823c29cd05435"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-056.png?d11fbff90a321e866d79032b7c0de161"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-070.png?31d4fb25374cb4b46ffe34c1ec2aa4bb"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-081.png?36e6e98b313fb564efee4ae3f0eafe88"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-083.png?000030955816d4f2bbe16070ed59f462"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-085.png?8e1130fa24b8f492fca95612b1e098eb"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-086.png?62804b3b34f8ea1e7363cda52f5bf7b5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-102.png?fc6fea434335c6bf1a6b234916f4a63c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-106.png?d62d3d9e4c0efd0bd404d6483a4166bf"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-112.png?62f3f6af9e0fb4dbae5c067247870ccb"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-113.png?c5d4e4f0fe3810e81b946a06d506ce87"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-114.png?718ea680b42509b8e8f6d7d88d6fa90f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-116.png?6aa0892180d9b2e0a9402d17282b5bc6"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-122.png?b2aa3fec3c05c58fbd27a7c1ce529df5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-123.png?0dfc36adc34a26653a509d21444e8362"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig03-124.png?01c5db0ba87b521288125366eefc14d6"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig04-001.png?5d9e6097a94a9632ac1a9478b798618d"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig04-002.png?6402951972dfe5c4fd1ee112784c8874"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig04-003.png?e88daba2d4236c816b326940b882e932"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig04-008.png?d4eefbbcd6e6b9c7a772ab9cf4b34ef6"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig04-013.png?9907c3e9568439ba3e91a663c7d5531a"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig04-016.png?3351a176f4bfda7f3742a61eaec0e2a7"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-001.png?e97c4775efc936a5b3a6b31afe0f13fc"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-002.png?e45f07a261c4689a7c0ad6b2638e2abc"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-003.png?47d754008050b8eabe752fd77f6f7131"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-004.png?9846bd56b73a5746999405b172ac32b0"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-005.png?bbb13f649934bd0c5245f68c869d9824"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-006.png?2374eeb8eb673db84b3345cc8d34130f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-007.png?2370068fd1ceb407d75813d7c387932f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-008.png?5fcdcafdd6a9d99b2a7adf018afc8a15"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-009.png?27416dc70316f7201e382a03acb5bacb"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-010.png?3d5e4d23a0201cb0d8d0f4cb57247468"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-011.png?6e9067f109f8d94430871c0acbaa8398"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-015.png?2ab1625e250a679397e79284cedcebfb"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-016.png?ce15b078406d2173fa4a86c6a928b133"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-017.png?544df7629759ce9fa8416550d2714fe3"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-018.png?1ac99c0126734359f3707562b4128c7f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-019.png?590bc3319e81ea8799b656188a76f90f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-020.png?0bc4c37a72923237cc015e36d2ca93c8"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-021.png?667fdb5129589832f63bdf79a5b56a65"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-022.png?17b147212f3acf497c818de96e3f1cfd"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-023.png?a991e4133fce4f4d84efa29c9ee12fb5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-036.png?e59c29dd3b79c68fa52fa2d3ebb6d4fc"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-037.png?057c1703b85e0530a135a41cc82e24c7"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-047.png?9207b0dba925115983fdaa1bb431234d"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-048.png?03142512ea6bc44393540fa6811fbda9"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-049.png?ede82a6ffe1f9c37ec56e2059c93370f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig05-062.png?f508378f4d93e097e55f40b6dfc51ca9"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-001.png?910913ff87611b883b8f6dc56c54ff7c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-009.png?cabb7b25ccdbed4e4c918e007c8f5b78"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-012.png?910913ff87611b883b8f6dc56c54ff7c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-014.png?ddb1a6d00389a687665c8ba2eba2f067"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-015.png?374d1fb50bca8f88c2c36c33c23716e0"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-030.png?ede82a6ffe1f9c37ec56e2059c93370f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-036.png?0ad64bbbf915557cae092e70232ef02c"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-037.png?ac2287505a09e219fba32e35834d97f5"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-043.png?953c5717e0ab78512ecc96747e8bafd0"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-045.png?31bbc85561ff3a4bc1c85325738a69a6"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-047.png?968b4c4752e4d87aca2ce7df7b0d3990"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-058.png?f508378f4d93e097e55f40b6dfc51ca9"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-060.png?ef6ac44e5e30638503e28ac5158500a7"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig06-061.png?51451e5d3e834b2664da948e6c1f1aaa"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-001.png?01ada762ce6603a6081204bdbd811f5f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-002.png?a7735af2dd74b11aaeea59f4512bec7e"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-003.png?dcc0e319d3818a246f529b31f133f673"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-004.png?3949af799b91d84e0e78ec5d1141a6a1"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-005.png?010e10723c2add981821eec845e8ae2a"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-011.png?75f5548e9de081b1a37b5d391b931c85"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-027.png?1082470caca44d7718d83a35adea2b2b"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-028.png?eecddf8e5ad7a39c35f1e7393405ce73"},function(e,t,n){
e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-029.png?69f69936bd395013adbbe3fed38fd2d2"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig07-035.png?925b57cde66cfc82bf4d68a4c8a59ac7"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig08-001.png?1c90dc9de6a9392381094b807f1b5c0f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig08-002.png?4c0264f902868a2975eef7ba58165b53"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig08-005.png?d4e762569d31decd2d51a0a21861f068"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig08-008.png?aceef6755c2b7e80555a331327bf9f1a"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig08-015.png?5e1d7318f8a7e89954e6abe11fd4593f"},function(e,t,n){e.exports=n.p+"src/components/vuejs/images/vuejsessentials/Fig08-018.png?afd522eefa12888a0f4f223c5993defa"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig00-001.png?3e467ff8efa623f4bb1d1bd326b091b2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-001.png?219f280f009c4da241bea69809a0fe61"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-002.png?562cd2dd8ea8c64c4524395cbae104c0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-003.png?32cb48d484137fa59cc551292ae3165f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-004.png?7895db3034e861fe11e91496d56cf541"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-005.png?4d3a8bef0bcc4496e4670a85cbabcea5"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-006.png?961dce65e0b3eaba901a81bc69cf02a6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-007.png?1badf87f18586cf3da90fd6194267740"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-008.png?e42240d16fbf5a81346e456ca945bd9e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-009.png?adb9073aadc1a75b0031d5eddc71cc20"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-010.png?8ed3f8567fcc9bfba12bb1d2705bd8be"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-011.png?b2513ee98dc36f7596689f11334e657d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-012.png?12a8848749ffa64f5588520f53279859"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-013.png?5dd33ff4093feb011e9e792a04d15ba1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-014.png?87f603e2cc530de3099df0f9002dbb82"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-015.png?b7d0329d955590ec584c5639e06663e2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-016.png?f338f75845312ae07303b1b6fcca9320"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-023.png?e998141c8c30f20d9ec1e27647fbdac7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-033.png?a859124b58bcb6dae4f181fd2f7f40c6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-037.png?414fea7e0214ac54d989acb24f95114f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-047.png?6bc777cb18c2246059bb3b00f333e1c6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig01-051.png?fe40d0db6dfab25d7f0c7ccb139025ae"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-001.png?c8b833549a4a84ca88ac5c794a172bb9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-002.png?5892385dbaced32cedeafc8087f3b1ba"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-003.png?a58bc7f3ac6a21fc8ce39856992167ec"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-014.png?94f1c71d0925dedb15d16e24e94febd2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-015.png?f49617e05d9d2c9e69986cf2b3d3da59"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-016.png?03c71489c493fa448bdab8d24c0df706"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-017.png?6edcd3665f8e22c091685f25e4acc110"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-018.png?ea0ed39f63cff4b3aa6f6ee3fa171fc6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-019.png?12ce150e799656392e01666655ad3c90"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-034.png?295b539c4cc018ec3ecadcc04b8ddfb7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-035.png?79ee783452366a9f0f0ef6720393acd2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-044.png?b1a62776c78e22627dd3d379d42ec1c8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-049.png?c4422bc3def33b44d3500902ff0e285f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-054.png?57baeaed1754687c629b5bfbc99af628"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-055.png?f9fe8dc41fca49a44b209db2c7010ea4"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-066.png?ce18d700c4297e9666df1396320952fb"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-070.png?126914dba7ce3b4c89f63f4fa04550ed"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-071.png?1d24043ace8bbd462321718ee92b9c07"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-072.png?2a03c759acc1c4fc097b2a0abd5d3244"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-073.png?7459a369ab6b467cb9ef27c66a899dff"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-081.png?45e21bd89cb745c38a8ac1942a9d4302"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-085.png?273590f0e455cdde3469bf306f6e02dc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-086.png?c979f9f5b9b1deb4bf6a2ee9c36b9ae6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-087.png?3fc5eef0e4cbf3e515d7308969519610"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-093.png?f239a1cf8e9124b34249859eb3478669"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-096.png?8c9b8b96ef63fa4f09471d299beb51f6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-098.png?0a9baefa355eb9a5c9aee6f14343687b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig02-103.png?e3698303cfe2809f6c8c8ced2bbeeaff"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-001.png?877f07c12a64fbaef3b3846cf2d2b21a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-017.png?d6da73962a186d2110d8543cdc7932ba"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-025.png?c121c49321a146dea1fe5ae78b6416d9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-030.png?48c57576303bdf3fa7f72f370f23a1d9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-031.png?e80d1dd1e5e99ace67a65f9163fe4377"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-032.png?8501e613729dfea9af0f703ac1ffeb9c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-033.png?13371994f3001c9e87fc70ca64111c2b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-034.png?0020de7412f804aa344b4e864c0dddd8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-035.png?fa3f91347191def897990c10065d558d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-041.png?3463c0ec5aee92483588d7e5b2b868d9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-043.png?f5705e63d266b481d967fb6d09bfe91b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-044.png?3d432c11a87b722b010d059d693479d2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-045.png?fa7416f1dee871775361c6326b1e359b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-046.png?17285fc9927b0714774680bd24c82a0b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-047.png?81c78e1565e21c4e91523257942f4e44"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-053.png?26fa19c3c2e647e0243783edc10478ed"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-056.png?d9cf7a889b935c2281c5c3dc6f102dc1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-066.png?0c2171b10b85877782ca28eb42db20b6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig03-067.png?d9273a1c5e90aa066bb9c996dd0920d4"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-001.png?9d209787a58e53500085c3f30e001c38"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-006.png?08be03e37d8ab4436d76551ea170366c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-008.png?64271c114d4db7c0e55cb132b55abb6b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-010.png?32ce85f06c8985cd44d7de49b66d4161"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-019.png?8c4d8ead9190be541b0c853a3caacd5c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-020.png?6400d72bc3e63a230c6a963ab4b122c9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-021.png?0f9772b3e1bebcba50cac4d4f4811135"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-028.png?db149651eada9fdb206f7287778d6b39"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-035.png?1a4e4cacd0ae5eb2a3c7268b702b6b76"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-036.png?36736fd4cf9c83a015a05623806fa131"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-038.png?5c44b462c9c2208b300b4a30f2577675"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-039.png?8a82d165c859d84036bfd4333ab44fe7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-041.png?4a8d1677976017806852cd79e2171b61"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-044.png?164c293e8f78b96e60c020c25e67e598"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-047.png?cbb904956debc5977402de8fff9e810f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-048.png?836da9851ed235ff82cad54bd0f79d78"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-049.png?8f29bd74a7c133fa10ccb5924a95920b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-053.png?728a7bb8d0dd57f0da05b92997eb639f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-054.png?9d8cca5e69a8a05c14f46569672c2f39"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-055.png?06cc9c37dd0c0451d849769c975b5de7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-057.png?23c3eaeb4464e9ab6b8255ffce17eaad"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig04-058.png?89e35c8b9ea67ef0ad7fa70175620114"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-002.png?f549c039e266d38a2fcff862d2afb1c0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-004.png?190a7eeb5cf232260fb721c22290c99b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-007.png?f38db78d33867142f844e7c2f41f8718"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-008.png?a5b8ed36f466f2227741523a107c2b97"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-009.png?b4b6476aa62d8e072a2138e401fe7d50"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-011.png?4bb47a5f0951dcdaf0b29ea81b6ef344"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-012.png?33d07d5f3d3b1838259ad85f52b3ebaa"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-020.png?164eb502c4b710f2d5809b9472a84396"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-021.png?20f1f2363684adaf896c096505f2b571"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-027.png?3d567935fcfb336f74435f010399e7a8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-035.png?9d198c2bde8b3e7fffda8c079ccfe6ac"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-039.png?dec647d746b376424bb11656457abf5e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-042.png?9b387717f07efc22a1105557e3b3ddcd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-043.png?4f3ae785884ba57bd0e8d7ab1faf758f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-044.png?390a352959d747e851c4bd42f849dc3e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-045.png?95ef6cd63d9501c1b3fa5b287b812e1e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-048.png?cfbe5bea0ee16198e44a1125cdc3a83c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-062.png?76d3a20e148e6deb920bd1ae6fae05f8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-063.png?69f0331651afa70424a4bcd325294397"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-070.png?ccd29808682965a5e17ed89770e97ab4"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-083.png?debbf5d6091f89d2646b32bdc1c3b30c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-084.png?fd596a5bca8292368a2a4e09d4f990ba"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-085.png?a0b937d11bc3b76a9a135a94d3e746c5"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-086.png?5e3aefe04b23304de400686ec5cd87ff"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-090.png?aceb3693b1da6f224cea339ae56eaf07"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-091.png?39271f1e50069eca16c547eba502a821"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-096.png?78d79cf12c4e7651762bf3ee6a03a2a2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-100.png?9fc841fa9958799ab09639225d0ece35"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-104.png?45267c83cf83ed0844bc9f2328a7d04c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig05-110.png?5f83954478e7f0560ece0db9b4180555"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-001.png?0beb5be9adc80d9f3946e9630f3209bb"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-002.png?c2b6f6abc63aa0251d7709273270054b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-003.png?5a9860107ad73def3b4fd05e07046940"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-004.png?4503a91ee2f1ac0c39e3b44d273a3282"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-005.png?c1f67b130a5171f5e0d2536d8f719636"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-006.png?2779484b0057b359e24dce9a15e10a1c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-007.png?1ad87a17813343acd245846b1256f073"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-008.png?0fe87292c1ecca6309a89d639ecc823d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-010.png?bcbce2159f233e11110f06887cc90db9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-011.png?d22c109dfe1d929aa35395306e8e9810"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-012.png?81fd43fc45be6c48ebbc6523e2783f32"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-013.png?18871181bd3c4ae85254c3a4c4b6d1d8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-014.png?b2acaff0a30db6f856d5b96773708c06"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-022.png?1ddc925f5aa2a20317171a86a7951283"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-023.png?39ed805f53c12fbac8cfe1f8b2a3d6ec"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-024.png?ea298fa6ba4affdeec5320200af7b009"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-025.png?b03a6c087031d0d64de3b5835d1a927a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-026.png?6b15bedd2ab985b1e80783d145ab0dfe"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-027.png?e767faf86a2dbe524b0245a373c625b4"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-033.png?956896c291b4c92191fd190087a0fa98"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-034.png?5c6b02b580dcab8d68793ac6368285d9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-035.png?b57c2aa58727655b389809c328bd6d74"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-036.png?afa2402919fc4c04e21686d90003071a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-037.png?ed71f50f7f5a0b05f37a02cdad2730ee"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-038.png?1ab7088986d2300d4848193be2769348"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-039.png?54d5d74c8b2f0fac8f668d55cb2aa0cd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-040.png?7c2b0ce3577d3c3edad450fbda6d3d28"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-041.png?2017691b43ec9eef49114d42defb4322"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-043.png?e647213009b3d7157d70767b811aba19"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-044.png?3d58422c2fbc923cea55914143a6d745"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-045.png?7ddbf3f5637225c0adc6309416abfcfe"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-046.png?c914e09cf617748bfd853e8cbf253914"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-047.png?229d4a4221633759f0fd98a822692e4b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-048.png?195767e39b65c4bc0f18b01829ac3ef7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-051.png?05612e01231a814a09f33dda7470dba2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-052.png?93814bd7935dc35c65f70bdb413995cf"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-053.png?321f607a9dc99df3a02b65acdcc6aa38"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-054.png?b24006997efc8b46f8208b08d965ff6a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-055.png?28d18016ab0f552183a41a5eb0203667"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-056.png?95ae7c8398705f82b89d2a5d766a362c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-057.png?fbfb7c2d0b8f282597b4c5dff1bc018a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-058.png?2981d17d2c61bc590bf7d8142a3cbdf0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-059.png?599ca9b03acbd2474199cdb133ae444f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-060.png?c26f05d0c793d85cfd43c031f8cbdb7c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-061.png?0aaea341b71d66481076a593eb261612"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-065.png?9658707b5363a0b819b73d614e0f1186"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-067.png?1f0774b715280fab1d0aa568d2a86037"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-069.png?0d07f292ef96c0c7a290c9a74cfad302"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-070.png?079eff75e84f79e1cd0eee4731cac314"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-071.png?414c097bbf931a3a9fa9a0dbd70d25dd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-072.png?677d7a7bb2e64f0cab7e75f2e422bf7b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-073.png?9e81c4f420293f38bcf42d11bae74ec1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-074.png?e8ff6568234dbfd1aa3299e9beaa9ac3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-075.png?809e38acc680897c05505f5525e9c0f9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-076.png?f6b4f12f172c75fa653a3ce1e4ed1622"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-077.png?c658e96f1b0cc7877f0df26ed61ef00a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-078.png?ae66220a175b145bfc0c23b458791e43"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-079.png?6852cd2870bffaf6ded35ab25ca6d91f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-080.png?49e0dde87a43eccf8977d2a108b69d9f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-082.png?3dbc1f0a1637f173d62c3e8849109a15"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-083.png?a3f05ea7c49dfb47d77793b60ac9eccd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-084.png?df0f97367e7c55547f5537e6b17dd291"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-085.png?d5320591e59e7b3966498c99c234288c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-086.png?f289f6a30588e33a0de087449217afab"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-087.png?9df658261e61c47d17ad2659cc449d48"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-088.png?275794eaa475e0e77f4224037d40db17"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-089.png?3be4d61fda128c828efdc03d0e45d22f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-090.png?ae60bfe3130086734a1fa96f07e66f04"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-091.png?fc1c6a9544e1de046ce6d8cbb8a9755e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-092.png?fd2ee61de5e15f3f08b0363aad51bd0d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-093.png?4b2b17ba402916c68d88364bc24bfbaa"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-097.png?2b1a80bdb394ecb6dad1344bbaa6bb4a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-098.png?bb20a8767430d4356c8526fd95c2d384"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-099.png?7d98d3ffb003911b627f4479bf28f727"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-100.png?134bce49531436ca041a53585e62f743"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-101.png?69c49759fe3e75a51f823646280ca889"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-111.png?5f5f57b84dd333918d0c8cca0e38e238"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-117.png?d3b1bcb6a4144518a4d6aed12df6be42"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-120.png?4e036e2468d72d0f5515a63dc2ad5dfc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-121.png?fee54be63f5cc0886b90a46327a3e321"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-127.png?d3b60ed71c50d4817c4b4d2649e0bc07"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-128.png?6931a12d1e582dbc6de21118948293f3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-129.png?66719b024c2bfefdeaedc4bfacba92d6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-130.png?e7c32a3d5b0ca55f10765d3703f75513"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-131.png?74f8d08ea40ca0bdac9ae51ebf9f1e46"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-132.png?297b872c96803426dea42e89150f5d72"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-133.png?a7011790297d2a1c468cf208aa10c5b5"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-134.png?acaeab0016605f6a2b3b12c1a911b01f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-135.png?2fcbe780686d4e78d242d347cb54adae"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-136.png?8b3a3da55739d895077308851b31ffa0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-137.png?884768b4c95d77dd8bf54a749162151b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-138.png?f1429684ae0b4010a23608250e039ef1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-139.png?5c6d5013564fddf5304f76ed84aee359"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-140.png?a1876b4cba8ce7c515932bf6fe7bde4a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-149.png?716455511cee51d56a6d3f9fef065f8f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig06-150.png?1c663c659c7a772a9efcfe26ba43a7bc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-001.png?118d59b9c483a861dca3a1e22286f54b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-010.png?105102ce7d5df1f3eafeaa7f1012f194"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-013.png?ef4262ea8df7648fa9d54bbd524a6b6b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-015.png?6c0463dad982e95a2324cbbdae452902"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-016.png?0acd0acbda1a5367e86427f3a4087fd5"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-017.png?1514c4e9573064675b738ee9a63bae1c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-020.png?c11a5ccaad70fdf373aa0ef833284d8b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-021.png?8a2b7e446e376e50c1ba2d9890c9b8a6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-022.png?2f78a46dd8ab1232b991dc15b192e4d7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-027.png?94456d0262cfa5e5e5803242ed56c60d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-028.png?3b6a10b750695ad40460b9a673778b40"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-033.png?ff21cdffa5b131445881b465fe2ad62e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-034.png?75033b9064f3eaf826465f0a64f3b842"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-035.png?25b5d0e0e2275be81d428e958c9e6ecd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-036.png?b1bf173c46eaf792cd0810ccac48bd00"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-037.png?53b5a0b72b983d87d389761369cca7b0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-038.png?542570b178e4f4406d25070435f3af93"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-039.png?14f9996c469f582de705aab1fd6dd196"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-040.png?352dd73a09684bc7d76437f0afb2b88c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-041.png?997920280a12bbeadc92b282e9ffec66"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-042.png?4a5b937c7919daa76015f619c2d44371"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-043.png?7c5a64f6331f70def1d5600a7a6b4a01"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-045.png?ca7fd448b1c41a834896eaeaff5341a0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-046.png?ca9d4f59f228e987337848906ca85d00"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-047.png?32374af94cd56753d9b09762a13720bc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-048.png?51f1c543033f9148e1b155ff5989ace0";
},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-049.png?75985a4d6461434dbff1864aaae02d17"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-050.png?e81b448c25e1c91f13bc5f09ff85cab2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-051.png?f42b671b6a3a8825c462915c17ecde6f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-052.png?a2bd71157fe829ae9e25dde45105eda3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-053.png?d00a0d3585a7950becbeda5146b92d1c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-054.png?43c49c42572f50c950786019017fe645"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-055.png?8ab0b1cc8cfdf3ecede547472f79a0f2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-056.png?592d68bdb475184adefd7b1134bb5fe8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-057.png?5a4b347ebe0422b6c0c1b56cb263858e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-058.png?0c54972eb34b10a2a2e8b30a891c47d3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-059.png?2856659b359a2966c4bad2798df8aebd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-060.png?05b35be7fd245757a02db1c75bad6a09"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-061.png?bb1e380ed58f6e44a03bce747573fe7b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-064.png?1968db857089bc000089103ced202d1a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-068.png?00e5336735302eed30e77474bd59f6e7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-070.png?e802bc1626efcd1798d7d599b26e405f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-073.png?4dbd59c09bab52dfa22f8022c1ee685b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-077.png?8edcc1214448db5b4c7e275ba7ab7d63"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-081.png?38b67ff5fb1f9bb502e61890e0bd7bb9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-083.png?9d89e594392b38ac5c6decb512d1fcfc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-085.png?d4a561c07f534f68ab73fa4e25322b91"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-086.png?f3e6d87936bf8681e69676b9fd7ae10d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-095.png?d14320f27d86b33d7db0f63e389fcf92"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-096.png?b2b1829db1d2252069847aa77b96fd70"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-097.png?a02f48597aafc14116462423428c6866"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-110.png?f3bcbf88178a9d3857f1ddd2fc303383"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-115.png?cf0a6492716ec29a165c2f2729d94ac1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-116.png?5cb640dc719b6e840e4e08c14ffe0052"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-120.png?41dfaba416beac43fff25c1967ac5d37"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-121.png?92a2a4429b2073ea6c0b6478c936e0c2"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-122.png?160ed57ad00403b1e85638d933c639e9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-123.png?9a831e1b0d8e219dc2783210b57ba24b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-127.png?00bbd3c11bd66dc4767eff8b5a3c5dc8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-128.png?87ca3731dca443f43b56ad6ca3b7fc2b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-137.png?d049f6cacd36a13756f9c0b0b36171aa"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-138.png?ab35889b2164ef57d89e58fd4b31d436"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-139.png?c4e6948eeb283dcf6e24e3f7b066f855"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-145.png?2a819b80fd65699ed4071b9de3430784"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-146.png?8eff1ecb336dda6fead09d401d61bb59"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-150.png?feffe9139c275599750a2d6d2bb29b89"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-151.png?8946fd8590b51f89b729bd89cfd97a9a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-156.png?49110a7e05b095e245e0db6683a0004d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-157.png?64c96327af2897732d2ad7f9d641ffd1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-164.png?091e259329f6f9fd42a895aa41cbc88f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-169.png?b8478c8e9b69ef0811cf2d443651d8a5"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-172.png?99d7bb1a61822904fbb580d0fb02b445"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-174.png?46e15754a1357f96446c3a791ab89198"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-175.png?39a2007aad69d4963c6cbef9878e7095"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-178.png?52ef4c7f08ca1660939add9896af5792"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-179.png?79435850974a9c6ef89e53154670d60c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-180.png?a1f4eb7487ef570b6f81d3e54ce30d5a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-181.png?5ffadf81afb79371481e33bd1c73817a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-182.png?dd608babed75d15401e79b72af941cfd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-183.png?854d393c2c0b320c6a2dbebdb1230b76"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-184.png?4df65b70b6a8d2d8bf87148e67018be1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-185.png?2f6f505d698bcd98c6a2155da872eab4"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-187.png?002938cfc89360b62afb3cddfb3c7036"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-193.png?c0858708637f3eec9922bc0b518e7710"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-203.png?5a51c46796c218596c24a2a5c8c95c51"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-205.png?32e6156f94de352f75786053c287a638"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-206.png?89906b41ca66a4a0861360c4e1b70b35"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-208.png?c27d8b9743ea1e3f9810c892ef4a2c18"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-212.png?b2d218af67bcfff0382a0d214f07e3fa"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-218.png?90a75912293d11609dcb413ea8053a1c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-219.png?400b22bc22523be9f4996d4a23865859"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-230.png?cdfa91b5ced94c6b3b3556cb42e8128b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-231.png?e57c296e0aac36934b21c224699ebeef"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-247.png?a6e1260ff0269edc63b2de043b67ec6e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-257.png?ca73fb371232b4899dddb8588216654d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-258.png?bd56ac78cd8b37cd4a93a747b9357f5c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-264.png?c1c4888254748a7fbf1808daa9452d7f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-265.png?34451ac48dc8f159e331b2af50bed75c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-270.png?16fa68f0c3683cb07d28ee5770d877a9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-271.png?bb501d12b9111d741b6f56a55b494b4b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-272.png?942fd2c11fac94f9e10a581f1ed41d84"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-284.png?82477f566b4094f995afb371125fa7c6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-285.png?b2ae15166b4af156bf30bf7e9025b171"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfdatabindingindepth/Fig07-286.png?cc16a26fa480aa1cabb236bdf17b3006"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-001.png?56a1c91e0e377cd913ed15eb9bbcbe5e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-002.png?8a230de0a2a1319d16b8a8e1bea8c9c5"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-004.png?c1fc3f7f9aa2a16b82b7abb7fe966541"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-005.jpg?86cf37c3466c4d62afd11ce7364cab5e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-006.png?e7c3e6cc65282c7875a36104e8b1f7bf"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-007.png?eb97aaf6b2c596582c98d8c8bf2619ce"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-008.png?e31081da1851503795c83be77eb4a86e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-009.png?c8a6e66b6003b0daf1a31e3dd51f9628"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-010.png?7baeabb5911c4f879a9b29d18c55cefc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-011.png?5237edff7872181ed2edaf1b00de35f3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-012.png?e92c522442d4b83d702596fdfd85865f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-013.png?eff2461af20cd93bbd39e0b6fad40427"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig01-014.png?caeb2dc9dd58c329e03fcae523b50943"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig02-001.png?2ecb2a309d979d576b8fac84ecb51fcd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig02-002.png?78750163fd4842cdd4cf0abac8f0e25c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig02-003.png?039bb0586003eed3ba3ac84e00bb3440"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig02-006.png?84f44ef54f17749770ce8e269c86b932"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001AB.png?f9dc532bd3c9b9c9ec30a05ea6fc3814"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001AC.png?d2852ed09e6421c054d7da5e72060932"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001BA.png?fa4d6092cef942c3cd6c89e5783dd839"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001BB.png?29db59f1651dac86e609f8cf4e169759"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001BC.png?504644dee04844ce7f2748d85d94aa4a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001BD.png?1527ed6b87feffb600f56374a9e961c1"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001BE.png?64a34bbb96ffe996d3268315def1d4d9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-001BF.png?abb3ae70cc2dcba00936757ad9d4b209"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-005.png?641cc996bd70add8be8771328de487f8"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-014D.png?6bacab513837349d422feb25ed8fbae7"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-014DA.png?b25112d36089bd9796cfc65d67477708"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-014E.png?17993c460161f6488439dbbadde238fc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015L.png?66e14fac29e30ea81c027e16aa22e049"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015M.png?a1492bb75ee2edfa21d067594f2a118d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015N.png?7cbf516664733c8aead422481edea420"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015O.png?b733263066bade4fd5e6f9e413815e68"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015P.png?4d070420618491ff776c379045075e9e"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015R.png?514e7bc0c2d7acd945c072b76259cbf3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015S.png?dd32320f2cab79e236948834a5d34cae"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015T.png?c7caa928a9b8f0d8f2ae7ea5d825c47d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015U.png?9eb1b06fcadd80e0a100a774f09fa9e0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-015W.png?21b2499b8adf345313ea0a3234a90daa"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-018.png?68523cb8814af483d2464577ddcbe639"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-020A.png?6a1665739c477be832e85631c53d0eb6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-021C.png?f2be53bd16d11fcac0105812d886c89b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-021F.png?676facd09a679efa6de56d2cd9a9a48c"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig03-021G.png?97463b89601b9c6832c4084b30912ddd"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig04-001.png?9d091e4f5dba8a5cc1c2702944cc23c0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig04-020.png?ad965f437953320fadd39b83fe379459"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig04-036.png?d837b3ac85bd394f65e8829833f6f749"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000A.png?089060f580e0d6d0361a25a4b9b9fd8f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000AB.png?ec73c794ea18d035250c2c8521e77464"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000AC.png?a3a5c53ebbb9c9424a3053452232e8f3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000AD.png?3bc5ac0bfbcdb2821eee77958a72381b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000AE.png?6933b0ad78e3525eb70a6b2511ed0489"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000AF.png?ad65b49ecbed5bbf1121ab6565c0da1f"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000B.png?17c0a4b4076dd8db73aefaf164fe3663"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-000BA.png?ae0e66205328aacc150ba394853d1cce"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-014.png?157fb35ef17c7f9bda5e8aa3459e88a0"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-018A.png?dab03704858e26bff1169d0a939d2ba3"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-018B.png?609ccae051e1b8f238a2b768c0fd82dc"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-020.png?13291928ff69e3d685fcf01b15f6c665"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-023A.png?26cbe58b13c09337b91bbaf7d463dc2d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-030.png?01d8b62dfd692a6e4e7f4da60e28609b"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig05-044.png?bb309b6f2be65301ab7219afe6b34bf9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-001.png?d203166bc2d268a51bbf4d3f4d375f7d"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-002.png?2493e96a46ac510a21cc53553850b8f9"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-002A.png?7db359fe1b8b668ca09b1ab5b994ef1a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-002B.png?a2d2d26271a8bbe230941b9bfa17d811"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-010.png?e4d0c7c0c8721159e68ca913837f511a"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-011.png?ff30cbcd7dca1ba88ca79cc4941a0134"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-035.png?dcf4c78cf761dc1d2ac521bbad80a082"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-039.png?894c128e30a9f019fcf23a69e015afb6"},function(e,t,n){e.exports=n.p+"src/components/wpf/images/wpfmvvmindepth/Fig06-044.png?009d378f5b942f5dabc32276c7997d53"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-001.png?848d259a3759dd0c471f423459cf03e3"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-002.png?c09ac37bbeb4618c9107c28201f785f8"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-003.png?d3e076db908352041656196834052893"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-004.png?3e569148a2c49245bba1364b5ba0987c"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-005.png?bb4dbad53adde3791e13249c17bb989a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-006.png?a601761461fa8cc550daf54b367acd9c"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-007.png?c8a96386395a09127102ab36ab15f9e0"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-008.png?0e8b94e1a259bab8de0295fb2e834343"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-009.png?055b91be2cc0a8d0c6050b5e9a81dd53"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-010.png?787faec30768160ead0f520ae8b244c0"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-011.png?ffd292f0209cdf1779ed3cfa794bf5cd"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-012.png?66601beee3ec2acd7cefc6df132edd6a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-013.png?918ad73c5adb230b170e5c7a9774413c"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-014.png?accd414a93fd39592eb39cb083a30786"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-015.png?64dd70a49815c44210df57d9332e012e"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-022.png?1d426c76447e58a9db50df45f4fb056b"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-023.png?d035376304d817bf07f3925b1740916f"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-024.png?26940ceaf3f9d3988bc951a5dcb50cd0"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-025.png?bde40ae44c0a00add5570d79aac880f8"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/01/Fig01-026.png?250165237160770e17d62b450f56e47d"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-004.png?687ff7491c937aeed5f97fa2773ac46a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-007.png?2c5da435b1aee8ad6fe4b2845e0663b6"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-013.png?54b741d2964ff79c34bec5ebf7d212ad"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-018.png?25a3599afd6e1a1b35cfa233a004247d"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-020.png?7a3879742d7a4070d6be5921c6b005ce"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-022.png?fa409fa605e82f9baf1d99e90a2e7eed"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-024.png?746a900e660e4d0e49976283e8b84186"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-029.png?d6c351815cc4e8a37d4972760d777b9a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-033.png?bbe1b187d90cf6475808f2040add22c2"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-034.png?e1c76cdbe106c7987d4c2012eed07885"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-052.png?41a032e941616aa37157b0d0c8aa683e"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/02/Fig02-053.png?db34f2b2fface54bd38d963d1a1a0bcf"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-004.png?352bfbf5d066b2416f690bbb4113336c"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-006.png?27ca986ccbf22a1b75b3f0c15c7fcdb3"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-007.png?99d3e7d559f3e2edead49d0a3f11e324"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-009.png?44ee325626f4039d08735f32bc5059e7"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-011.png?7938ae411920a87bb61abd23d53eee14"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-014.png?67fb7b944d98ca0fad8471ab74ef1f3a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-017.png?e0c7e43c3074cc29b91f5397aafc2a55"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-028.png?fa2309643984070eef1a90c98bb88f75"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-031.png?37088bc5b522b7857f9a35007bed08d9"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-035.png?ef7c6352491aaf65bc977b227a095b46"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-036.png?6fcdefbe525531e07c9eba0ad28f5ae8"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-038.png?6cfc173c38f289c2065291965e3a160f"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-045.png?6ca9f4ae6536d6812cc22c3937c8a04f"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-046.png?8ea31de9025afb688fa805e3b46211ce"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-049.png?526da65cab4260df9e3d0cbd1fd505b8"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-051.png?a1dac513e8e9d23f54874c31ad551174"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-054.png?69f45059902b375fb7f6bf828f56539d"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-056.png?2c135807e143c46ea7bd8fb815428e31"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-058.png?8e83398d4728a1151cb60e97a502e144"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-060.png?61329b51e580bba868c91edfea38ee9f"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-061.png?d9fb6607fdaac17af2e7ee5bbdf4c662"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-062.png?bc1a140f4ed01b350b11ab92ac6be8ca"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-065.png?b141a77dc2790f4143b388dc4a6960b1"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-066.png?6c4ee87f753abd25c05f02082ea93648"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-071.png?87580129f93fbb66561bec9a6c4dad4b"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/03/Fig03-079.png?6fb432a66439bf2e6af437d069c0d60a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-004.png?01961c14b445d39829a0f2451c7b91ad"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-013.png?c49470da80635ac1c8a978c759bffdd2"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-015.png?a60672da570764e9de4e705a230ad522"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-016.png?e7970e8998b3e9dc1b375fec217255cc"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-022.png?652b9bd230d344d762f52c3615bd9e1a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-025.png?bdb6114f93e0d448b3ad7fc86afc3aad"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-027.png?15057d477483de7f50813d92fdceda97"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-030.png?a6ffe35c8d2430ee274abc7931a3d81d"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-034.png?14f65389aa8419e62ae471fd1ab6c436"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-048.png?13b4934db69a5f836780cc19999ee8da"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-062.png?8001be3d8e40060a130d00abe4fccb14"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-063.png?da2c18af811ffc09681598d0fa52e504"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/04/Fig04-064.png?e1e6c0f2a953dc713d1d26dfdf8b2b63"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-003.png?1225fcff8c1865d03ee2025b8b683bd6"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-008.png?2fce599c2ffa0896e0b9bb42367ed29b"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-010.png?cfdccaef4004248c27289f828e15421e"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-012.png?362a637e738f0225fa5b77c4d0450215"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-013.png?1042396e05325df233aa380786263709"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-015.png?6e7d7c589aca9bd568fdcae54e8b0cf8"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-016.png?fc0f26949349cd9d60e19233f9057f20"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-017.png?a9fcaad1da38eb4c2a28f91ca0a44c38"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-019.png?b7c74fae424e7d9d3daa08cd435f4390"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-020.png?1e7b109b73d1fe7565d86b9541d35a86"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-022.png?4b540465259b9e54fb8f5436fc0a8407"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-023.png?4744ff704f20312ad3135d5a3e413540"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-024.png?b05a36b09afed0de7ae43cf520aa86a1"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-028.png?c90b9db0ea0e27f1829a2e0388ab17f4"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-036.png?e4636aeefe632a872c69d7cca229362e"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/05/Fig05-043.png?b2ef9c7b3b4902813260b08c77b58fe7"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-001.png?eb99f785b79b68caedf8e241d37a995e"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-002.png?7d68b664ee4ad417b9e4d30a52761e6f"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-003.png?210fabbbe73304b2f0981a58d787d4c3"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-010.png?59d94f655be39964352aefd5c670ad86"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-011.png?81ad7fe9961bea73bd5e3b29c9a96ed5"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-013.png?df9cd31dac0c8c8853e78ab1645632b6"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-014.png?9aa9297693d3251e5523d4341f4cfcfc"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-015.png?71f706f91e36bab45865f3f99f679efa"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-017.png?c6327ebd35d4539d22940c529b2949c8"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-018.png?e7b6eb3867ada314d346ce55a3461d5e"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-020.png?0cf25599229dfacb2e5afa0bf0739560"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-022.png?61cf7a0f0da07ac9b330fdd2651e59ea"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-024.png?1c4f7c0825b9bf95252bcb81cd5c5477"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-025.png?95b5cdd3ea9b28baad8ec69b5928e3c2"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-029.png?21c89b38600dafa2c6557bc1f0d4b863"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-030.png?00cbcec3f91abb4da44aac2e64c06e45"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-038.png?580d3b17c6399594d776952819db8f25"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-039.png?8c4b9b32c421789e06e5c6b60252c489"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-042.png?294f7427c063d28c935476752f07af49"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-043.png?2eaba175fc517c565c62d8cd056bedbc"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-046.png?cfaaa165c22a70aa46de7a4bf7da9037"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-058.png?2a6386e021c6727489a5515ab73fc8ec"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-059.png?1fd1a89b26ddf33071cf9a4febe51a1d"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-061.png?5104ceab5a6b42bb51959b069ed74f77"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-062.png?0b8c23e13bfe6440d587b236b813c796"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-065.png?060b8e500ffc6dd1a5fcc2f04468e109"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-069.png?1da1647c429eafce4866e40d6bce1d78"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-072.png?ad5cbc8bed585768c12126dd4fe46f9a"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-074.png?b4b3a9e0b93d0a427d152e594f0a7f61"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-079.png?8eeb0fb4f80ce8bcf4f1c1e85d43a1d2"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-085.png?7ae3dbbf772434e64b6fb8be9af81896"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-086.png?4864c091c0c78f72a4f484112d9c1461";
},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-088.png?3d881794d815140aeb46bb732d424053"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-089.png?dc837ee4056b2b93227a65ae87a851df"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-091.png?3a0e89bc819a91844bb064297a1a984b"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-092.png?e2973bc68ba21bdda2d05c53f52e2b52"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-094.png?00982920f4ab1ed2c6feed0107df8e33"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-095.png?1db8009ac127ef350041dd3626b59da7"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-098.png?59fc159ed3450ca3afb5b684077e7fca"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-099.png?c505235a8b95e09db46db56c6c067ccf"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-100.png?84988f605d603ec518498a5571f25666"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-104.png?071ad19f494cd7a97dcfacee063316ec"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-105.png?5328cc3e2c8f904ba65915f02cdca0bd"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-106.png?47be8049ca207ae7cb6917cc4093cb94"},function(e,t,n){e.exports=n.p+"src/components/xamarin/images/06/Fig06-107.png?197299e0f0e459407770af48ae2be3a0"},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(e){if(d===setTimeout)return setTimeout(e,0);if((d===n||!d)&&setTimeout)return d=setTimeout,setTimeout(e,0);try{return d(e,0)}catch(t){try{return d.call(null,e,0)}catch(t){return d.call(this,e,0)}}}function i(e){if(p===clearTimeout)return clearTimeout(e);if((p===a||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function s(){g&&u&&(g=!1,u.length?v=u.concat(v):m=-1,v.length&&r())}function r(){if(!g){var e=o(s);g=!0;for(var t=v.length;t;){for(u=v,v=[];++m<t;)u&&u[m].run();m=-1,t=v.length}u=null,g=!1,i(e)}}function l(e,t){this.fun=e,this.array=t}function c(){}var d,p,h=e.exports={};!function(){try{d="function"==typeof setTimeout?setTimeout:n}catch(e){d=n}try{p="function"==typeof clearTimeout?clearTimeout:a}catch(e){p=a}}();var u,v=[],g=!1,m=-1;h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];v.push(new l(e,t)),1!==v.length||g||o(r)},l.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=c,h.addListener=c,h.once=c,h.off=c,h.removeListener=c,h.removeAllListeners=c,h.emit=c,h.prependListener=c,h.prependOnceListener=c,h.listeners=function(e){return[]},h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},function(e,t,n){var a,o,i=n(815);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){var a,o;n(861),a=n(11);var i=n(819);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-71eb9b40",e.exports=a},function(e,t,n){var a,o;n(866),a=n(12);var i=n(824);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-8c12a1fc",e.exports=a},function(e,t,n){var a,o;n(856),a=n(13);var i=n(810);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-4bb98db6",e.exports=a},function(e,t,n){var a,o;n(860),a=n(14);var i=n(818);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-70093876",e.exports=a},function(e,t,n){var a,o;n(844),a=n(15);var i=n(798);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-151875e8",e.exports=a},function(e,t,n){var a,o;n(876),a=n(16);var i=n(835);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-d387d31c",e.exports=a},function(e,t,n){var a,o;n(845),a=n(17);var i=n(799);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-18b91c6c",e.exports=a},function(e,t,n){var a,o;n(865),a=n(18);var i=n(823);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-7ed1e73c",e.exports=a},function(e,t,n){var a,o;n(875),a=n(19);var i=n(833);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-c4119834",e.exports=a},function(e,t,n){var a,o;n(869),a=n(20);var i=n(827);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-a4730dd2",e.exports=a},function(e,t,n){var a,o;n(848),a=n(21);var i=n(802);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-23866499",e.exports=a},function(e,t,n){var a,o,i=n(814);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){var a,o,i=n(816);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){var a,o,i=n(794);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){var a,o,i=n(812);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){var a,o;n(841),a=n(22);var i=n(793);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-0a94b8ee",e.exports=a},function(e,t,n){var a,o;n(858),a=n(23);var i=n(813);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-58340a08",e.exports=a},function(e,t,n){var a,o;n(843),a=n(24);var i=n(796);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-0f2a01f0",e.exports=a},function(e,t,n){var a,o;n(839),a=n(25);var i=n(791);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-00b26b42",e.exports=a},function(e,t,n){var a,o;n(870),a=n(26);var i=n(828);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-a7bb93a2",e.exports=a},function(e,t,n){var a,o;n(874),a=n(27);var i=n(832);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-b88deef4",e.exports=a},function(e,t,n){var a,o;n(850),a=n(28);var i=n(804);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-362295b4",e.exports=a},function(e,t,n){var a,o;n(842),a=n(29);var i=n(795);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-0cb9f81e",e.exports=a},function(e,t,n){var a,o;n(859),a=n(30);var i=n(817);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-6e3e606a",e.exports=a},function(e,t,n){var a,o;n(863),a=n(31);var i=n(821);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-7930e5ec",e.exports=a},function(e,t,n){var a,o;n(847),a=n(32);var i=n(801);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-235f3d3e",e.exports=a},function(e,t,n){var a,o;n(864),a=n(33);var i=n(822);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-7e7051d5",e.exports=a},function(e,t,n){var a,o;n(855),a=n(34);var i=n(809);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-48ced426",e.exports=a},function(e,t,n){var a,o;n(840),a=n(35);var i=n(792);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-0587dd20",e.exports=a},function(e,t,n){var a,o;n(867),a=n(36);var i=n(825);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-a02ccd78",e.exports=a},function(e,t,n){var a,o;n(873),a=n(37);var i=n(831);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-b67da206",e.exports=a},function(e,t,n){var a,o;n(849),a=n(38);var i=n(803);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-2a29b01e",e.exports=a},function(e,t,n){var a,o;n(854),a=n(39);var i=n(808);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-46a0d916",e.exports=a},function(e,t,n){var a,o;a=n(40);var i=n(797);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=a},function(e,t,n){var a,o;n(872),a=n(41);var i=n(830);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-b66fd8fe",e.exports=a},function(e,t,n){var a,o;n(868),a=n(42);var i=n(826);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-a39b4cec",e.exports=a},function(e,t,n){var a,o;n(862),a=n(43);var i=n(820);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-7218340a",e.exports=a},function(e,t,n){var a,o;n(879),a=n(44);var i=n(838);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-fc571fac",e.exports=a},function(e,t,n){var a,o;n(846),a=n(45);var i=n(800);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-1f219728",e.exports=a},function(e,t,n){var a,o;n(857),a=n(46);var i=n(811);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-4d519898",e.exports=a},function(e,t,n){var a,o;n(853),a=n(47);var i=n(807);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-461c0d74",e.exports=a},function(e,t,n){var a,o;n(852),a=n(48);var i=n(806);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-4177c576",e.exports=a},function(e,t,n){var a,o;n(851),a=n(49);var i=n(805);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-3aa51062",e.exports=a},function(e,t,n){var a,o;n(871),a=n(50);var i=n(829);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-b36456c4",e.exports=a},function(e,t,n){var a,o;n(877),a=n(51);var i=n(836);o=a=a||{},"object"!=typeof a.default&&"function"!=typeof a.default||(o=a=a.default),"function"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,o._scopeId="data-v-f0f756e8",e.exports=a},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Containers and Collection Controls")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Hi, this is Brian Noyes. In this module, we're going to dive into some of the containment scenarios\n                        and the dynamic generation of contained controls based on data binding.\n                    ")]),e._v(" "),a("p",[e._v(" We'll also look in more depth at the common collection controls, including ListBox, ComboBox,\n                        TabControl and DataGrid. And we'll finish off by talking a little bit more about collection views,\n                        which can be used to modify the collections you're data-bound to.\n                    ")]),e._v(" "),a("p",[e._v("So first up, we're going to dive into what's really going on at runtime when you have a data-driven\n                        control and the composition that happens with the UI elements that are generated based on the data.\n                        I'll quickly explain what's going on in concept with bullets, and then we'll dive into a demo that\n                        hopefully makes it all clear, since it is dynamic in nature.\n                    ")]),e._v(" "),a("p",[e._v("Next, we'll review ComboBoxes and ListBoxes and the key data binding properties and behaviors there.\n                        We've seen a lot of this in previous demos, but in those previous demos I just kind of glanced over\n                        it and didn't focus one at a time on the properties you'll care about.\n                    ")]),e._v(" "),a("p",[e._v("Next, we'll get into TabControls, which TabControls are more of a structural element, but they can be\n                        data-driven themselves. So we'll see a common scenario where you can use TabControls for child view\n                        containment that can be dynamically-driven through data binding.\n                    ")]),e._v(" "),a("p",[e._v("Next, we'll get into the Ubiquitous DataGrid and we'll focus on some of the key properties that\n                        you'll need to know to really drive a DataGrid in normal data binding scenarios. There are,\n                        naturally, all kinds of deep, dark corners in the DataGrid and lots of fancy customizations of\n                        appearance and things that are out of scope for this course. What I'm going to focus on are the\n                        things that really drive the behavior of the DataGrid, based on it being data-bound.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we'll finish out this module by revisiting Collection Views. I talked about the\n                        ICollectionView interface in an earlier module, and we looked at the notion of currency driven by\n                        Collection Views. Here we're going to focus on some other things it can do for you in terms of\n                        manipulating the collection that you're working with to do things like sorting, filtering, grouping,\n                        and master-details presentations.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Container Controls")]),e._v(" "),a("p",[e._v("Let's talk quickly, in concept, about the data-driven visual composition of data-bound controls, and\n                        then we'll see how it really works in the demo. So mainly what I'm focusing on here are\n                        ContentControls and ItemsControls. And these controls, when you're using data binding, can\n                        dynamically generate child elements.\n                    ")]),e._v(" "),a("p",[e._v("They do it based on the data-bound objects that they're pointed to. Generally, it's going to be based\n                        on DataTemplates, but in the case of ItemsControls, the derived types, such as ListBox and ComboBox,\n                        have other properties that can decide what to render just based on the data itself.\n                    ")]),e._v(" "),a("p",[e._v("When you're working with ContentControl, it's going to generate a ContentPresenter, and the\n                        ContentPresenter is going to become the container for the data-driven content, whatever you're\n                        setting as the Content property on the ContentControl through data binding.\n                    ")]),e._v(" "),a("p",[e._v("ContentPresenter is also going to show up in a lot of other controls. A Window has a root\n                        ContentPresenter it uses to show the child area, UserControls derive from ContentControl,\n                        TabControls contain multiple ContentControls, DataGridCells, and so on, they all use\n                        ContentPresenters to render out their data-driven content.\n                    ")]),e._v(" "),a("p",[e._v("And ultimately, the DataContext is going to be set on this element as the ContentObject that's being\n                        rendered out, and that's going to flow down the visual tree into something like a DataTemplate\n                        that's being rendered as the content.\n                    ")]),e._v(" "),a("p",[e._v("When you're working with ItemsControls, it's going to be an ItemsPresenter as opposed to a\n                        ContentPresenter. Similar concept, it's the single root container for each of the items rendered out\n                        by that ItemsControl. And that is going to be a specific Type based on the control that's actually\n                        rendering, so there's a ComboBoxItem Type, ListBoxItem Type, TabItem, and so on.\n                    ")]),e._v(" "),a("p",[e._v("When it goes and renders out one of those items, generally somewhere down the chain of that item\n                        there's going to be a ContentPresenter because that item represents a single piece of content, and\n                        the way a single piece of content gets rendered out in a data-bound scenario is through a\n                        ContentPresenter.\n                    ")]),e._v(" "),a("p",[e._v("And just like with a ContentPresenter inside a ContentControl, the DataContext on each item\n                        container, specifically, ComboBoxItem, ListBoxItem, and so on, is going to be set to the individual\n                        data object that's being rendered out within that ItemsControl.\n                    ")]),e._v(" "),a("p",[e._v("So that's a lot of words and lofty concepts. Let's drill into a demo that will make this more\n                        concrete by digging in to the visual tree and seeing what's going on when data binding is happening.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Inspecting the Visual Tree")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\ContentAndItemsControls\\ContentAndItemsControls.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\ContentAndItemsControls\\ContentAndItemsControls.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to get familiar with the dynamic generation of data-bound elements when you're\n                        working with ContentControls and ItemsControls in data binding scenarios. These controls generate\n                        the rendering of the data-bound objects dynamically, and that adds elements to the visual tree.\n                    ")]),e._v(" "),a("p",[e._v("Understanding what's going on down at that level can be very helpful in diagnosing and debugging\n                        problems when they occur in your UI and in data binding scenarios. But because none of those\n                        elements exist in design time, if you haven't seen it in action, you may not know where to go.\n                    ")]),e._v(" "),a("p",[e._v("Starting point for this demo is a simple WPF project:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(437)}}),e._v(" "),a("figcaption",[e._v("Fig 07-001")])]),e._v(" "),a("p",[e._v("That already has a little bit of code in the code-behind for going out and getting the Products\n                        Collection from our ZzaDBContext, similar to previous demos:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    CollectionViewSource productViewSource =\n        ((CollectionViewSource)(this.FindResource("productViewSource")));\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        productViewSource.Source = context.Products.ToList();\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-002")])]),e._v(" "),a("p",[e._v("And pushing it into a CollectionViewSource that's already up inside the View.")]),e._v(" "),a("p",[e._v("The code-behind also has some Helper code that's basically going to generate a Tree View, based on a\n                        node in the visual tree. So I've got a Helper method here called GetTreeFromNode:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("TreeViewItem GetTreeFromNode(DependencyObject node)\n{\n    TreeViewItem nodeAndChildren = GetVisualTree(node, true);\n    var parent = GetParent(node);\n    var child = nodeAndChildren;\n    TreeViewItem parentNode = null;\n    while (parent != null)\n    {\n        parentNode = new TreeViewItem();\n        parentNode.Header = GetNodeLabel(parent);\n        parentNode.Items.Add(child);\n        child = parentNode;\n        parent = GetParent(parent);\n    }\n    return parentNode;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-003")])]),e._v(" "),a("p",[e._v("That's basically going to start at the current node and walk down using a Helper down below called\n                        GetVisualTree.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('TreeViewItem GetVisualTree(DependencyObject rootObject, bool highlight)\n{\n    TreeViewItem rootItem = new TreeViewItem();\n    if (highlight) rootItem.Header = "[[" + GetNodeLabel(rootObject) + "]]";\n    else rootItem.Header = GetNodeLabel(rootObject);\n    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(rootObject); i++)\n    {\n        rootItem.Items.Add(GetVisualTree(VisualTreeHelper.GetChild(rootObject, i), false));\n    }\n    return rootItem;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-004")])]),e._v(" "),a("p",[e._v("GetVisualTree uses the VisualTreeHelper class in WPF to walk through all the children of the current\n                        node, and then recursively, notice the call to GetVisualTree here, recursively walk down to its\n                        children. It's basically generating a TreeViewItem, which is a node for a Tree View for each item in\n                        the visual tree from the object that you pass in, annotating the node that you started with by\n                        square brackets.\n                    ")]),e._v(" "),a("p",[e._v("After it's walked down from the current node to all its children generating a tree, it then starts\n                        walking up:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("TreeViewItem GetTreeFromNode(DependencyObject node)\n{\n    TreeViewItem nodeAndChildren = GetVisualTree(node, true);\n    var parent = GetParent(node);\n    var child = nodeAndChildren;\n    TreeViewItem parentNode = null;\n    while (parent != null)\n    {\n        parentNode = new TreeViewItem();\n        parentNode.Header = GetNodeLabel(parent);\n        parentNode.Items.Add(child);\n        child = parentNode;\n        parent = GetParent(parent);\n    }\n    return parentNode;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-005")])]),e._v(" "),a("p",[e._v("So it has another Helper method down below called GetParent:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("DependencyObject GetParent(DependencyObject depObj)\n{\n    FrameworkElement element = depObj as FrameworkElement;\n    if (element != null && element.Parent != null) return element.Parent;\n    else return VisualTreeHelper.GetParent(depObj);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-006")])]),e._v(" "),a("p",[e._v("That will get the ParentElement of the current node and then it uses that in a loop to walk up the\n                        tree and get each one of the parents until you get to the root of the visual tree.\n                    ")]),e._v(" "),a("p",[e._v("The TreeViewItem that comes out of this can be passed this helper called ShowTree:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("void ShowTree(TreeViewItem tree)\n{\n    Window popup = new Window();\n    TreeView treeView = new TreeView();\n    treeView.Items.Add(tree);\n    popup.Content = treeView;\n    popup.Width = 700;\n    popup.Height = 300;\n    popup.FontSize = 16;\n    popup.Show();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-007")])]),e._v(" "),a("p",[e._v("That's going to basically create a TreeView, put that root node into it, and pop it up in a window.\n                        So we're going to use this as a crude visualization of the visual tree and the elements that we're\n                        working with.\n                    ")]),e._v(" "),a("p",[e._v("So to get started, let's go over to our UI and I'm just going to drag out a simple TextBox:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid.RowDefinitions>\n    <RowDefinition Height="139*"/>\n    <RowDefinition Height="90*"/>\n    <RowDefinition Height="90*"/>\n</Grid.RowDefinitions>\n<TextBox x:Name="TextBox1" HorizontalAlignment="Left"\n         Height="23"\n         Margin="193,61,0,0"\n         TextWrapping="Wrap"\n         Text="TextBox"\n         VerticalAlignment="Top"\n         Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-008")])]),e._v(" "),a("p",[e._v("seemingly simple control, and we will give it a name of TextBox1. I could then drop into my\n                        code-behind and use my Helper methods to visualize the visual tree from that node. So I'm going to\n                        go in here and say, ShowTree(GetTreeFromNode(TextBox1)):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    CollectionViewSource productViewSource =\n        ((CollectionViewSource)(this.FindResource("productViewSource")));\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        productViewSource.Source = context.Products.ToList();\n    }\n\n    //ShowTree(GetTreeFromNode(productListBox));\n\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-009")])]),e._v(" "),a("p",[e._v("If we go ahead and run, we can see the TextBox loads up there and we've got our visual tree here,\n                        starting at the root, which is the window, down through the Grid that's its child. There's our\n                        TextBox, then notice that the TextBox itself contains a Border, ScrollViewer, Grid, Rectangle,\n                        ScrollContentPresenter, TextBoxViews, and blah, blah, blah.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(438)}}),e._v(" "),a("figcaption",[e._v("Fig 07-010")])]),e._v(" "),a("p",[e._v("So the point is, any given element within WPF that you declare at design time, can have some complex\n                        structure generated at runtime based on that declaration.\n                    ")]),e._v(" "),a("p",[e._v("In this case, what you're seeing is the default ControlTemplate for a TextBox, so this stuff is not\n                        so much being generated dynamically based on data, it's just part of the internal structure of a\n                        TextBox. Any control in WPF is going to have some amount of that, but what we're going to focus on\n                        next is the dynamic generation of elements based on data.\n                    ")])]),e._v(" "),a("div",{
staticClass:"panel-body"},[a("h3",[e._v("Demo: Dynamic Data Control Visual Tree")]),e._v(" "),a("p",[e._v("So instead of that, if I replace my TextBox with a ContentControl:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid DataContext="{StaticResource productViewSource}">\n    <Grid.RowDefinitions>\n        <RowDefinition Height="139*"/>\n        <RowDefinition Height="90*"/>\n        <RowDefinition Height="90*"/>\n    </Grid.RowDefinitions>\n    <ContentControl x:Name="productContentControl"\n                    Grid.Row="2"\n                    Content="{Binding}">\n    </ContentControl>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-011")])]),e._v(" "),a("p",[e._v("and we just use a binding that takes in whatever the current DataContext is, which is going to be the\n                        collection coming out of this CollectionViewSource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="productViewSource" d:DesignSource="{d:DesignInstance {x:Type Data:Product}, CreateList=True}"/>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-012")])]),e._v(" "),a("p",[e._v("If we then dump the tree on that ContentControl, and run, now we can see something similar get down\n                        to the Grid to the ContentControl, but notice this child element called ContentPresenter:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(439)}}),e._v(" "),a("figcaption",[e._v("Fig 07-013")])]),e._v(" "),a("p",[e._v("The DataContext on this, notice we're also dumping what the DataContext is at a given level so that\n                        we can see where that switches in data-bound scenarios.\n                    ")]),e._v(" "),a("p",[e._v("The DataContext is null on the ContentPresenter because it doesn't have anything to render yet, and\n                        we'll see that switch momentarily. But notice that the Collection View flows down to the\n                        ContentControl and then the ContentControl is going to render out a ContentPresenter for whatever\n                        it's trying to dynamically render we need to give it a template to be able to render.\n                    ")]),e._v(" "),a("p",[e._v("So how can we set the template of a ContentControl? Well we could use a number of different ways, but\n                        I'm just going to set an explicit template setting the ContentTemplate property equal to an instance\n                        of a DataTemplate containing a TextBlock:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentControl x:Name="productContentControl"\n                Grid.Row="2"\n                Content="{Binding}">\n    <ContentControl.ContentTemplate>\n        <DataTemplate>\n            <TextBlock HorizontalAlignment="Left"\n                       Height="53"\n                       TextWrapping="Wrap"\n                       Text="{Binding Name}"\n                       VerticalAlignment="Top"\n                       Width="195" />\n        </DataTemplate>\n    </ContentControl.ContentTemplate>\n</ContentControl>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-014")])]),e._v(" "),a("p",[e._v("That TextBlock is bound to the Name property of the product that's being rendered. And because of the\n                        way ListViews work, that was covered in a previous module, even this binding is pointing to a whole\n                        collection, ContentControl is going to render out the current item in that collection.\n                    ")]),e._v(" "),a("p",[e._v("So let's go ahead and run with that, and now we can see in the window behind there, Plain Cheese is\n                        showing up:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(440)}}),e._v(" "),a("figcaption",[e._v("Fig 07-015")])]),e._v(" "),a("p",[e._v("That's because that's the current product name. If we drill down in the tree now, we can see we get\n                        down to the ContentPresenter level:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(441)}}),e._v(" "),a("figcaption",[e._v("Fig 07-016")])]),e._v(" "),a("p",[e._v("and notice now it does have the DataContext is that ListCollectionView, but then immediately\n                        underneath that it renders an instance of our TextBlock and that DataContext flows down to it.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(442)}}),e._v(" "),a("figcaption",[e._v("Fig 07-017")])]),e._v(" "),a("p",[e._v("But because the control is designed to work with a single object, it will pick the current object out\n                        of that collection and bind against the Name property of that current object. So notice the\n                        ContentPresenter's role here in a ContentControl, it is the thing that will render out the\n                        DataTemplate inside of it.\n                    ")]),e._v(" "),a("p",[e._v("Now what if we go with a little more complicated control, such as a ListBox bound to the entire\n                        collection?")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="productListBox"\n    ItemsSource="{Binding}"\n    Grid.Row="1">\n    DisplayMemberPath="Name"\n</ListBox>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-018")])]),e._v(" "),a("p",[e._v("And in this case, we've got DisplayMemberPath set to Name. If we add that and dump that in a tree\n                        instead:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("ShowTree(GetTreeFromNode(productListBox));")])]),e._v(" "),a("figcaption",[e._v("Fig 07-019")])]),e._v(" "),a("p",[e._v("and go ahead and run, now we can see the dump here behind.")]),e._v(" "),a("p",[e._v("You can see the ListBox is populated. You can start drilling down. Here's our ListBox:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(443)}}),e._v(" "),a("figcaption",[e._v("Fig 07-020")])]),e._v(" "),a("p",[e._v("It's got some structure with Border, ScrollViewer, Grid, etc., eventually a ScrollContentPresenter,\n                        and then notice ItemsPresenter.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(444)}}),e._v(" "),a("figcaption",[e._v("Fig 07-021")])]),e._v(" "),a("p",[e._v("So for a ContentControl it's a ContentPresenter, that renders out the dynamic item. In an\n                        ItemsControl it's an ItemsPresenter that renders out the dynamic items (plural).\n                    ")]),e._v(" "),a("p",[e._v("But then notice we get down to a level called the VirtualizingStackPanel:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(445)}}),e._v(" "),a("figcaption",[e._v("Fig 07-022")])]),e._v(" "),a("p",[e._v("Which is the default presenter for a ListBox, and we can't drill down any deeper because the\n                        individual items are being rendered out dynamically in a way that the VisualTreeHelper can't get to.\n                    ")]),e._v(" "),a("p",[e._v("So how can we get to those to visualize their structure? Well, if we go to our ListBox and add an\n                        ItemTemplate to it and get rid of our DisplayMemberPath:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <ListBox x:Name="productListBox"\n         ItemsSource="{Binding}"\n         Grid.Row="1">\n    <ListBox.ItemTemplate>\n        <DataTemplate>\n            <TextBlock Text="{Binding Name}"\n                       Loaded="ListBoxTextBlock_Loaded" />\n        </DataTemplate>\n    </ListBox.ItemTemplate>\n</ListBox>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-023")])]),e._v(" "),a("p",[e._v("this ItemTemplate just contains a TextBlock bound to the Name property of the product again, similar\n                        to what the DisplayMemberPath was doing, but here we can now hook up a Loaded event that we can then\n                        tap into the object that's raising that event, which will be the TextBlock down inside of the\n                        ListBox, then we can walk the visual tree from there.\n                    ")]),e._v(" "),a("p",[e._v("So let's go hook up this Loaded event. So I'll jump into the code-behind and add the Loaded event\n                        here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("bool lbDumpDone = false;\nprivate void ListBoxTextBlock_Loaded(object sender, RoutedEventArgs e)\n{\n    if (lbDumpDone) return;\n    lbDumpDone = true;\n    //ShowTree(GetTreeFromNode(sender as DependencyObject));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-024")])]),e._v(" "),a("p",[e._v("We only want this to fire once, not once for each item, so I've got a little guard condition here to\n                        make sure it only executes once.\n                    ")]),e._v(" "),a("p",[e._v("And then we're going to do the ShowTree call for that sender object that's raising the event:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("ShowTree(GetTreeFromNode(sender as DependencyObject));")])]),e._v(" "),a("figcaption",[e._v("Fig 07-025")])]),e._v(" "),a("p",[e._v("which will be the individual TextBlock inside of the ListBox.")]),e._v(" "),a("p",[e._v("I'll comment out the other ShowTree:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("//ShowTree(GetTreeFromNode(productListBox));")])]),e._v(" "),a("figcaption",[e._v("Fig 07-026")])]),e._v(" "),a("p",[e._v("so we don't get two of them popping up, and let's run with that. Now we can expand down and we can\n                        see we get down to the VirtualizingStackPanel level, but we're actually walking up to that level so\n                        we're able to walk through it, and notice there's a ListBoxItem, and also notice the DataContext\n                        switch at this point.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(446)}}),e._v(" "),a("figcaption",[e._v("Fig 07-027")])]),e._v(" "),a("p",[e._v("So the true container of an item in the ListBox is a ListBoxItem. If it's a ComboBox, it's a\n                        ComboBoxItem; if it's a TabControl, it's a TabItem. So each control has its own item container that\n                        it will render out, and that's really the point where it switches from the overall collection to an\n                        individual object in that collection as far as the DataContext.\n                    ")]),e._v(" "),a("p",[e._v("That flows down the visual tree from there, and inside of that is a ContentPresenter:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(447)}}),e._v(" "),a("figcaption",[e._v("Fig 07-028")])]),e._v(" "),a("p",[e._v("because the ListBoxItem is effectively a ContentControl. Inside of the ContentPresenter, that's where\n                        our DataTemplate renders.\n                    ")]),e._v(" "),a("p",[e._v("So you can see, now we're able to walk up the visual tree, basically, from that TextBlock in the\n                        event handler, all the way up and see the internals of what's going on inside this\n                        VirtualizingStackPanel, and it emphasizes that's the point where the DataContext switches.\n                    ")]),e._v(" "),a("p",[e._v("Now let's take an even more dynamic and complicated data-bound container, a DataGrid:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="productDataGrid"\n                  RowDetailsVisibilityMode="VisibleWhenSelected"\n                  ItemsSource="{Binding}"\n                  EnableRowVirtualization="True"\n                  AutoGenerateColumns="False"\n                  Margin="0,0,0,8">\n            <DataGrid.Columns>\n                <DataGridTemplateColumn Header="Description">\n                    <DataGridTemplateColumn.CellTemplate>\n                        <DataTemplate>\n                            <TextBlock Text="{Binding Description}"\n                                       Loaded="DataGridCell_Loaded" />\n                        </DataTemplate>\n                    </DataGridTemplateColumn.CellTemplate>\n                </DataGridTemplateColumn>\n                <DataGridCheckBoxColumn x:Name="hasOptionsColumn"\n                                        Width="SizeToHeader"\n                                        Header="Has Options"\n                                        Binding="{Binding HasOptions}" />\n                <DataGridTextColumn x:Name="idColumn"\n                                    Width="SizeToHeader"\n                                    Header="Id"\n                                    Binding="{Binding Id}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-029")])]),e._v(" "),a("p",[e._v("A DataGrid is going to render out rows for each object in the collection. Those rows have composite\n                        structure of their own. And similar to what I showed with the ListBox, if I just tried to drill down\n                        from the DataGrid, I wouldn't be able to get past the Row level, the ItemsPresenter level.\n                    ")]),e._v(" "),a("p",[e._v("So I'm going to play a similar trick here, that I'm going to use a TemplatedColumn:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTemplateColumn.CellTemplate>\n    <DataTemplate>\n        <TextBlock Text="{Binding Description}"\n                   Loaded="DataGridCell_Loaded" />\n    </DataTemplate>\n</DataGridTemplateColumn.CellTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-030")])]),e._v(" "),a("p",[e._v("which we'll get into more details on later in the module, and provide a DataTemplate containing a\n                        TextBlock bound to the Description field with a Loaded event hooked up on it.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBlock Text="{Binding Description}"\n        Loaded="DataGridCell_Loaded" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-031")])]),e._v(" "),a("p",[e._v("I can hook that Loaded event and do my tree walk from there, similar to what I just showed with the\n                        ListBox.\n                    ")]),e._v(" "),a("p",[e._v("So let's drop into the code-behind, add that event handler, we'll do our ShowTree on the object\n                        that's raising the Loaded event, which will be our TextBlock inside of a cell within the DataGrid,\n                        and we've got our guard condition to make sure we only do it once.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("bool dgDumpDone = false;\nprivate void DataGridCell_Loaded(object sender, RoutedEventArgs e)\n{\n    if (dgDumpDone) return;\n    dgDumpDone = true;\n    ShowTree(GetTreeFromNode(sender as DependencyObject));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-032")])]),e._v(" "),a("p",[e._v("Let's go ahead and run, and now we can see a DataGrid showing up there:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(448)}}),e._v(" "),a("figcaption",[e._v("Fig 07-033")])]),e._v(" "),a("p",[e._v("We can drill our way down. Notice the ItemsPresenter in this case is a DataGridRowsPresenter:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(449)}}),e._v(" "),a("figcaption",[e._v("Fig 07-034")])]),e._v(" "),a("p",[e._v("and this is the level where we wouldn't be able to drill down any farther if we hadn't hooked the\n                        event down inside of a DataTemplate, but we're really drilling up to that point, so you can see that\n                        renders out DataGridRows as the containers.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(450)}}),e._v(" "),a("figcaption",[e._v("Fig 07-035")])]),e._v(" "),a("p",[e._v("Those have some structure to them. Eventually you get to a DataGridCellsPresenter, which contains an\n                        ItemsPresenter itself.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(451)}}),e._v(" "),a("figcaption",[e._v("Fig 07-036")])]),e._v(" "),a("p",[e._v("So you've actually got ItemsControl behavior at a Row level:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(452)}}),e._v(" "),a("figcaption",[e._v("Fig 07-037")])]),e._v(" "),a("p",[e._v("but then within a Row, you've got ItemsControl rendering of the individual cells within the Row.")]),e._v(" "),a("p",[e._v("Notice in terms of DataContext switching, the Context switch happens at a Row level:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(453)}}),e._v(" "),a("figcaption",[e._v("Fig 07-038")])]),e._v(" "),a("p",[e._v("The entire Row's DataContext is the Product, and from there down.")]),e._v(" "),a("p",[e._v("Inside of the Cells, we've got a DataGridCellsPanel, eventually a DataGridCell is the container for a\n                        single cell. There's our ContentPresenter again, the thing that's going to render out our\n                        DataContext for that cell.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(454)}}),e._v(" "),a("figcaption",[e._v("Fig 07-039")])]),e._v(" "),a("p",[e._v("The other thing to note here, that we'll talk about more in the DataGrid section of this module,\n                        notice there's no Column objects anywhere here. Columns don't really exist in terms of the object\n                        model of a DataGrid at runtime. They're explicitly part of the way you declare the DataGrid at\n                        design time, but the rendering actually happens at a Row level and then walking across the cells of\n                        a row, not in a column-oriented fashion.\n                    ")]),e._v(" "),a("p",[e._v("And this really emphasizes the pivotal role of the ItemsPresenter here and here:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(455)}}),e._v(" "),a("figcaption",[e._v("Fig 07-040")])]),e._v(" "),a("p",[e._v("And the ContentPresenter here:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(456)}}),e._v(" "),a("figcaption",[e._v("Fig 07-041")])]),e._v(" "),a("p",[e._v("for dynamically rendering out the data-driven content of a data-bound control.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Visual Tree Tools - Mole and WPF Inspector")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\ContentAndItemsControls\\ContentAndItemsControls.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\ContentAndItemsControls\\ContentAndItemsControls.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now the other thing I wanted to point out is there are some tools out there that can help you with\n                        all this data visualization and visual tree inspection. You don't necessarily have to write these\n                        tree dumpers in your code yourself. The first is one called Mole for Visual Studio:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(457)}}),e._v(" "),a("figcaption",[e._v("Fig 07-042")])]),e._v(" "),a("p",[e._v("and this is a debugging visualizer that plugs into either Visual Studio 2013 or 2012 or prior. The\n                        other is a tool called WPF Inspector:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(458)}}),e._v(" "),a("figcaption",[e._v("Fig 07-043")])]),e._v(" "),a("p",[e._v("which you can find out on CodePlex.")]),e._v(" "),a("p",[e._v("And there's a new XAML -Inspector coming that will work with other XAML technologies in a similar\n                        way. I've got both of these available here, so let me start up the app that I put together in the\n                        previous demo, and we're hitting a breakpoint for a DataGridCell_Loaded that's being triggered from\n                        a template down inside of the DataGrid.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("bool dgDumpDone = false;\nprivate void DataGridCell_Loaded(object sender, RoutedEventArgs e)\n{\n    if (dgDumpDone) return;\n    dgDumpDone = true;\n    ShowTree(GetTreeFromNode(sender as DependencyObject));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-044")])]),e._v(" "),a("p",[e._v("Now when you use Mole, it's a debugger visualizer, which means you can walk up to an object in your\n                        environment, go to this little magnifying glass drop it down, and you can see Mole 2012.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(459)}}),e._v(" "),a("figcaption",[e._v("Fig 07-045")])]),e._v(" "),a("p",[e._v("I click on that, and it brings up the MoloScope:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(460)}}),e._v(" "),a("figcaption",[e._v("Fig 07-046")])]),e._v(" "),a("p",[e._v("So Mole gives you, over here on the left you can see, it's broken down the visual tree similar to\n                        what I did in my demo:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(461)}}),e._v(" "),a("figcaption",[e._v("Fig 07-047")])]),e._v(" "),a("p",[e._v("So you've got this Visual Tree TreeView that you can drill through and see all the same kind of stuff\n                        rendered out a little nicer than what I was doing.\n                    ")]),e._v(" "),a("p",[e._v(" Also, anything you select in here over on the right, you're able to see all of the properties of\n                        that object, inspect them, and even edit some of them:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(462)}}),e._v(" "),a("figcaption",[e._v("Fig 07-048")])]),e._v(" "),a("p",[e._v("So if you want to tweak with styling and things like that, you can do that in here and see what it's\n                        going to look like.\n                    ")]),e._v(" "),a("p",[e._v("And if you select a given item up above, you can go down here on the bottom left, click to refresh,\n                        it's going to show you what the XAML would look like for that single thing\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(463)}}),e._v(" "),a("figcaption",[e._v("Fig 07-049")])]),e._v(" "),a("p",[e._v("and you can go into Snapshot and it will render out just that single item.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(464)}}),e._v(" "),a("figcaption",[e._v("Fig 07-050")])]),e._v(" "),a("p",[e._v("So here we can see we're seeing just a Description cell that would be within the DataGrid. So in\n                        terms of being able to walk up to any element in a running application and start inspecting and\n                        tweaking it, Mole is very nice for that.\n                    ")]),e._v(" "),a("p",[e._v("The other tool that's very handy here is WPF Inspector. So if I go start up WPF Inspector, and you do\n                        have to run this as an administrator, that's an important trick, because it has to have the process\n                        rights to be able to go and inspect another process:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(465)}}),e._v(" "),a("figcaption",[e._v("Fig 07-051")])]),e._v(" "),a("p",[e._v("So notice it shows MainWindow here, that's my running MainWindow. I can attach to that, and it brings\n                        up this window that's kind of laid out similar to what Mole had:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(466)}}),e._v(" "),a("figcaption",[e._v("Fig 07-052")])]),e._v(" "),a("p",[e._v("You can see we can start drilling down in the visual tree.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(467)}}),e._v(" "),a("figcaption",[e._v("Fig 07-053")])]),e._v(" "),a("p",[e._v("Now in this case I'm drilling down from the top down and we can see I can drill into something like\n                        my ListBox and this will let me drill down through that ItemsPresenter and VirtualizingStackPanel,\n                        and now I can see the ListBoxItems rendered out.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(468)}}),e._v(" "),a("figcaption",[e._v("Fig 07-054")])]),e._v(" "),a("p",[e._v("So I don't have to hook those lower-level events with WPF Inspector to drill all the way down the\n                        visual tree. This, you can see if you hover over an item, gives you a rendering of what that item\n                        looks like in the overall context\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(469)}}),e._v(" "),a("figcaption",[e._v("Fig 07-055")])]),e._v(" "),a("p",[e._v("and the other thing that's going on here, it's hard to see with the small screen here, but notice as\n                        I make selections in WPF Inspector, it's actually putting a red box around them in the running UI\n                        with some measurements.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(470)}}),e._v(" "),a("figcaption",[e._v("Fig 07-056")])]),e._v(" "),a("p",[e._v("Over on the right, similar to Mole, it has the property values so you can inspect those for the\n                        currently selected item:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(471)}}),e._v(" "),a("figcaption",[e._v("Fig 07-057")])]),e._v(" "),a("p",[e._v("and you can do other things with it inspecting the DataContext that's there:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(472)}}),e._v(" "),a("figcaption",[e._v("Fig 07-59")])]),e._v(" "),a("p",[e._v("even tweaking the values to see what it would look like in the UI. So we could go tweak the name of\n                        an item here:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(473)}}),e._v(" "),a("figcaption",[e._v("Fig 07-059")])]),e._v(" "),a("p",[e._v("and tab out of there, minimize this, and we can see it actually dynamically changed it in the running\n                        UI.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(474)}}),e._v(" "),a("figcaption",[e._v("Fig 07-060")])]),e._v(" "),a("p",[e._v("So very handy tool to be aware of for digging into your visual tree, seeing what's there,\n                        understanding what's there, and playing with values in it.\n                    ")]),e._v(" "),a("p",[e._v("So both Mole and WPF Inspector are very handy tools to have in your arsenal to be able to drill in\n                        and inspect your visual tree, visualize things, and make tweaks to them.\n                    ")]),e._v(" "),a("p",[e._v("And in the context of these demos, for really understanding what's being dynamically generated at an\n                        ItemsPresenter and ContentPresenter level, and what the DataContexts are, to make sure your data\n                        binding is working out the way you expect it to.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("ComboBoxes and ListBoxes")]),e._v(" "),a("p",[e._v("ComboBoxes and ListBoxes are a mainstay of data-bound scenarios, so let's review the key properties\n                        you're going to want to have at the tip of your fingers every time you go to do data binding with\n                        these.\n                    ")]),e._v(" "),a("p",[e._v("First off, they both derive from ItemsControl, so all the concepts around ItemsControls and\n                        ItemsPresenters and things we've been talking about so far, apply. The data binding properties that\n                        are going to be most important to you include, first and foremost the ItemsSource. This is the one\n                        you're going to set to a collection that's going to render out the individual items within the\n                        ComboBox or ListBox.\n                    ")]),e._v(" "),a("p",[e._v("Next, if you want to keep it simple, you can use the DisplayMemberPath property. DisplayMemberPath is\n                        going to be the name of a property on each data-bound object that you want turned into a string and\n                        rendered as a string within the ComboBox or ListBox. If you need to start using the SelectedItem,\n                        then you're going to have some value that you want to associate with it, so SelectedValuePath lets\n                        you point to a different property, or possibly the same property, on each data-bound object to\n                        identify the value of each item. Typically, this is going to be an Id-like property, something like\n                        a primary key type property that you can use to go and retrieve the whole object from a database or\n                        to transmit that Id around as a unique identifier for a particular object.\n                    ")]),e._v(" "),a("p",[e._v("Hand-in-hand with SelectedValuePath is the SelectedValue property. This is the thing you can inspect\n                        when the user is interacting with the control to see what the value of that property indicated by\n                        SelectedValuePath is, on the currently selected object.\n                    ")]),e._v(" "),a("p",[e._v("Next, if you want to deal with the whole selected object, then you can use SelectedItem. This is\n                        going to pass a reference to the entire selected object to whoever calls it. And both SelectedValue\n                        and SelectedItem become good candidates for data binding to push the SelectedValue or SelectedItem\n                        through a binding in a two-way data binding fashion to some property either in your code-behind or\n                        in something like a ViewModel that logic is then later going to act on based on what's selected.\n                    ")]),e._v(" "),a("p",[e._v("As we saw in a previous module, if you want to start driving the visual appearance of each item with\n                        something more than just a string, then you can provide an ItemTemplate, and that ItemTemplate is a\n                        DataTemplate to render out each item with whatever visual structure you want, containing embedded\n                        bindings to the properties of the current item.\n                    ")]),e._v(" "),a("p",[e._v("Now there's one other property on a ListBox to be aware of, called SelectedItems, because ListBoxes\n                        support multi-select scenarios. The problem with SelectedItems is, it's not a good candidate for\n                        data binding. It's a read-only property, so you can't set it through a data binding.\n                    ")]),e._v(" "),a("p",[e._v("Now there is kind of an advanced way you can deal with this if you've been exposed to the concept of\n                        behaviors, either attach behaviors or blend behaviors, these are extensibility points you can write\n                        and embed in your XAML.\n                    ")]),e._v(" "),a("p",[e._v("You could write a custom behavior that monitors the SelectionChanged event of the ItemsControl, reads\n                        the values from SelectedItems, and then pushes those values as a collection through some property\n                        that the behavior exposes through a binding, but doing that goes a little bit beyond the scope of\n                        this course.\n                    ")]),e._v(" "),a("p",[e._v("So let's dive into a demo that reviews all of these important properties and how to use them in\n                        ComboBoxes and ListBoxes.\n                    ")])]),e._v(" "),a("div",{
staticClass:"panel-body"},[a("h3",[e._v("Demo: ComboBoxes and ListBoxes")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\ComboAndListBoxes\\ComboAndListBoxes.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\ComboAndListBoxes\\ComboAndListBoxes.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to walk you through the basics of ComboBoxes and ListBoxes. We've seen these in\n                        a number of demos before, but I didn't really spend time focusing on each of the data-bound\n                        properties and how they relate to one another, so I just wanted to revisit them comprehensively\n                        since they're such a pivotal data-bound control.\n                    ")]),e._v(" "),a("p",[e._v("Starting point for this demo is a simple WPF application project with a MainWindow in it:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(475)}}),e._v(" "),a("figcaption",[e._v("Fig 07-061")])]),e._v(" "),a("p",[e._v("and I added a MainWindowViewModel. In the MainWindowViewModel constructor, we're doing some data\n                        retrieval:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindowViewModel()\n{\n    if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))\n    {\n        using (ZzaDbContext context = new ZzaDbContext())\n        {\n            var products = new ObservableCollection<Product>(context.Products);\n            products.ToList().ForEach(p => p.Image = "Images/" + p.Image);\n            SelectedProductId = products[0].Id;\n            SelectedProduct = products[0];\n            Products = products;\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-062")])]),e._v(" "),a("p",[e._v("As usual, we're using our ZzaDBContext to go out to a Zza database, we're getting some products and\n                        pushing them into an ObservableCollection.\n                    ")]),e._v(" "),a("p",[e._v("That collection is exposed as a property called Products on our ViewModel that we can data bind\n                        to:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ObservableCollection<Product> Products\n{\n    get\n    {\n        return _Products;\n    }\n    set\n    {\n        if (value != _Products)\n        {\n            _Products = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Products"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-063")])]),e._v(" "),a("p",[e._v("We're also modifying the Image property of each product to point to a collection of Images that's in\n                        our project under the Images subfolder.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(476)}}),e._v(" "),a("figcaption",[e._v("Fig 07-064")])]),e._v(" "),a("p",[e._v("And we're setting two other properties on initialization here, the SelectedProductId and\n                        SelectedProduct, which are both exposed as properties on our ViewModel here.\n                    ")]),e._v(" "),a("p",[e._v("So this just gives us a good DataContext to data bind against for our ComboBoxes and ListBoxes. We\n                        also have a RelayCommand in the project, which we've seen in previous demos:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class RelayCommand : ICommand\n{\n    Action _TargetExecuteMethod;\n    Func<bool> _TargetCanExecuteMethod;\n\n    public RelayCommand(Action executeMethod)\n    {\n        _TargetExecuteMethod = executeMethod;\n    }\n\n    public RelayCommand(Action executeMethod, Func<bool> canExecuteMethod)\n    {\n        _TargetExecuteMethod = executeMethod;\n        _TargetCanExecuteMethod = canExecuteMethod;\n    }")])]),e._v(" "),a("figcaption",[e._v("Fig 07-065")])]),e._v(" "),a("p",[e._v("just an ICommand object we can use to hook up buttons to point to handling in our ViewModel, which\n                        we'll get to.\n                    ")]),e._v(" "),a("p",[e._v("So if I drop into my MainWindow and add a basic ComboBox here, the basic structure is that it is an\n                        ItemsControl\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n        <ComboBox ItemsSource="{Binding Products}"\n                  HorizontalAlignment="Left"\n                  Margin="44,23,0,0"\n                  VerticalAlignment="Top"\n                  Width="120" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-066")])]),e._v(" "),a("p",[e._v("so the most important property that you're going to want to set in data binding is the ItemsSource\n                        property.\n                    ")]),e._v(" "),a("p",[e._v("Here we're pointing to a Products path on whatever our DataContext is, and you can see up above our\n                        DataContext is already wired up so that our MainWindowViewModel is our DataContext:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Window.DataContext>\n    <local:MainWindowViewModel />\n</Window.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 07-067")])]),e._v(" "),a("p",[e._v("So this will cause it to be constructed, the constructor fires and loads the products, and then data\n                        binding fires and reads those products into our ComboBox.\n                    ")]),e._v(" "),a("p",[e._v("If that's all we put on our ComboBox and try to run, as we've seen before, that's not quite enough,\n                        because it's just going to ToString each of the Product objects and that's not really what we want:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(477)}}),e._v(" "),a("figcaption",[e._v("Fig 07-068")])]),e._v(" "),a("p",[e._v("So at a bare minimum, when using a ComboBox, you're going to want to set the DisplayMemberPath\n                        property and I'll set that to Name.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox ItemsSource="{Binding Products}"\n    DisplayMemberPath="Name"\n    HorizontalAlignment="Left"\n    Margin="44,23,0,0"\n    VerticalAlignment="Top"\n    Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-069")])]),e._v(" "),a("p",[e._v("That basically says, go to the Name property on each of those products, get that out as a string, and\n                        then it's going to render a TextBlock, basically, inside of the ComboBox list for each one of those.\n                    ")]),e._v(" "),a("p",[e._v("So running with that, now we get something a little more like what we expect.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(478)}}),e._v(" "),a("figcaption",[e._v("Fig 07-070")])]),e._v(" "),a("p",[e._v("Now we see the names of each of the products in our ComboBox. Notice that it started with nothing\n                        selected, and that's where some of the other data-bound properties can come in. Another one, if\n                        you're using DisplayMemberPath, that you'll often use, is SelectedValuePath.\n                    ")]),e._v(" "),a("p",[e._v("SelectedValuePath lets you point to another property on each one of your data-bound objects that\n                        contains some sort of identifier typically. So in our case, we can use the Id property.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox ItemsSource="{Binding Products}"\n    DisplayMemberPath="Name"\n    SelectedValuePath="Id"\n    HorizontalAlignment="Left"\n    Margin="44,23,0,0"\n    VerticalAlignment="Top"\n    Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-071")])]),e._v(" "),a("p",[e._v("Hand-in-hand with the SelectedValuePath is the SelectedValue property, and this is one that you can\n                        programmatically inspect based on events.\n                    ")]),e._v(" "),a("p",[e._v("If you were to hook the SelectionChanged event, for example, you could then get the SelectedValue or\n                        the SelectedIndex or the SelectedItem, but in a data-bound scenario you might push this value\n                        through data binding into some property, especially in a ViewModel type scenario.\n                    ")]),e._v(" "),a("p",[e._v("So we could set up a binding on this and point it to our SelectedProductId property on our ViewModel,\n                        like so.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('ComboBox ItemsSource="{Binding Products}"\n                  DisplayMemberPath="Name"\n                  SelectedValuePath="Id"\n                  SelectedValue="{Binding SelectedProductId}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-072")])]),e._v(" "),a("p",[e._v("Now, if we go ahead and run, notice that the ComboBox is not empty initially:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(479)}}),e._v(" "),a("figcaption",[e._v("Fig 07-073")])]),e._v(" "),a("p",[e._v("and that's because of our initialization code back here in the ViewModel. Remember we loaded up the\n                        products, but we also initialized the SelectedProductId property to the first item in those\n                        products.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("SelectedProductId = products[0].Id;")])]),e._v(" "),a("figcaption",[e._v("Fig 07-074")])]),e._v(" "),a("p",[e._v("Another one you could do as an alternative to SelectedValue, you generally won't do both of these, is\n                        the SelectedItem property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('SelectedItem="{Binding SelectedProduct}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-075")])]),e._v(" "),a("p",[e._v("SelectedItem gets the whole data-bound object, which will be a Product object in this case, and\n                        pushes it through a binding to a property in our ViewModel in this case.\n                    ")]),e._v(" "),a("p",[e._v("That, likewise, was being initialized in the constructor to the first item in the list:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("SelectedProduct = products[0];")])]),e._v(" "),a("figcaption",[e._v("Fig 07-076")])]),e._v(" "),a("p",[e._v("So we should see that selected now when it starts up. And we could go back here into our\n                        SelectedProduct setter, set a breakpoint, and see whenever it's set, our set block is being called,\n                        so we have an opportunity to invoke some logic there based on the product that's being selected.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(480)}}),e._v(" "),a("figcaption",[e._v("Fig 07-077")])]),e._v(" "),a("p",[e._v("If we want to have more structure to the elements within our ComboBox, we could use a\n                        DataTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <DataTemplate DataType="{x:Type data:Product}">\n        <StackPanel Orientation="Horizontal">\n            <Image Source="{Binding Image}"\n                   Width="75" />\n            <TextBlock Margin="5"\n                       Text="{Binding Name}" />\n        </StackPanel>\n    </DataTemplate>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-078")])]),e._v(" "),a("p",[e._v("in this case, an ImplicitDatatemplate, but of course, an explicit one would work as well. This\n                        DataTemplate is mapped to the Product Type and it uses the Image property to render out an Image and\n                        a TextBlock to render out the Name. With that in place, it would do nothing if we don't get rid of\n                        the DisplayMemberPath property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox ItemsSource="{Binding Products}"\n    DisplayMemberPath="Name"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-079")])]),e._v(" "),a("p",[e._v("because those two are incompatible.")]),e._v(" "),a("p",[e._v("When you say DisplayMemberPath, you're saying you just want to render out text based on that\n                        property, so we can get rid of both DisplayMemberPath and SelectedValuePath:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DisplayMemberPath="Name"\nSelectedValuePath="Id"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-080")])]),e._v(" "),a("p",[e._v("which is not being used anymore, and go ahead and run this.")]),e._v(" "),a("p",[e._v("And now we can see that the individual items in our ComboBox have the structure that we determined in\n                        our DataTemplate:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(481)}}),e._v(" "),a("figcaption",[e._v("Fig 07-081")])]),e._v(" "),a("p",[e._v("and obviously we'd want to do some sizing on the ComboBox itself so we could show a whole item when\n                        selected. So those are the primary things you're going to use on a ComboBox.\n                    ")]),e._v(" "),a("p",[e._v("Always an ItemsSource when you're data binding, DisplayMemberPath and SelectedValuePath if you're\n                        just dealing with simple text rendering, and the SelectedValue property to do something with it or\n                        the SelectedItem property to push the whole object when selected, and then to put more structure on\n                        the rendering, use DataTemplates.\n                    ")]),e._v(" "),a("p",[e._v("All those same concepts apply to a ListBox. I could go in here and add a ListBox bound to Products\n                        here.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox ItemsSource="{Binding Products}"\n     HorizontalAlignment="Left"\n     Height="132"\n     Margin="44,72,0,0"\n     VerticalAlignment="Top"\n     Width="246" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-082")])]),e._v(" "),a("p",[e._v("DisplayMemberPath would, again, apply, as would SelectedItem, SelectedValue, SelectedValuePath, and\n                        so on.")]),e._v(" "),a("p",[e._v("I'm going to go ahead and run here with both the ComboBox and ListBox bound to Products to emphasize\n                        something about synchronization.\n                    ")]),e._v(" "),a("p",[e._v("So right now, notice I can make a selection in the ListBox and it has no impact on the ComboBox, and\n                        vice-versa.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(482)}}),e._v(" "),a("figcaption",[e._v("Fig 07-083")])]),e._v(" "),a("p",[e._v("When you have two data-bound controls pointing to the same collection by default, there is a\n                        CollectionViewSource associated with them, but they are not synchronized with that current item in\n                        the CollectionViewSource.\n                    ")]),e._v(" "),a("p",[e._v("If you have two things like that and you want them to stay in synch, this is where the\n                        IsSynchronizedWithCurrentItem property comes in. Go ahead and set that to True on both of these\n                        items:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox ItemsSource="{Binding Products}"\n    SelectedItem="{Binding SelectedProduct}"\n    HorizontalAlignment="Left"\n    Margin="44,23,0,0"\n    VerticalAlignment="Top"\n    Width="120" IsSynchronizedWithCurrentItem="True"/>\n\n<ListBox ItemsSource="{Binding Products}"\n         DisplayMemberPath="Name"\n         HorizontalAlignment="Left"\n         Height="132"\n         Margin="44,72,0,0"\n         VerticalAlignment="Top"\n         Width="246" IsSynchronizedWithCurrentItem="True" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-084")])]),e._v(" "),a("p",[e._v("and run again, and now we can see if I select Holy Smokes up above, it's highlighted in the list\n                        below, Italian Stallion down below, it's selected up above.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(483)}}),e._v(" "),a("figcaption",[e._v("Fig 07-085")])]),e._v(" "),a("p",[e._v("Now another thing you might sometimes want to do is have some other UI that is driving the selection\n                        in a ComboBox, ListBox or DataGrid. So here I'm going to add a simple little Search UI:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(484)}}),e._v(" "),a("figcaption",[e._v("Fig 07-086")])]),e._v(" "),a("p",[e._v("a TextBox and a button that we can trigger. The TextBox is going to be bound to a property on our\n                        ViewModel called SearchInput:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox Text="{Binding SearchInput}"\n     HorizontalAlignment="Left"\n     Height="23"\n     Margin="183,23,0,0"\n     TextWrapping="Wrap"\n     VerticalAlignment="Top"\n     Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-087")])]),e._v(" "),a("p",[e._v("and the button is bound to a command that we're going to add.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Command="{Binding SetProductCommand}"\n    Content="Search"\n    HorizontalAlignment="Left"\n    Margin="322,26,0,0"\n    VerticalAlignment="Top"\n    Width="75" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-088")])]),e._v(" "),a("p",[e._v("So first let me drop back to the ViewModel and add those two properties. So here's our SearchInput as\n                        a string input:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string SearchInput\n{\n    get\n    {\n        return _SearchInput;\n    }\n    set\n    {\n        if (value != _SearchInput)\n        {\n            _SearchInput = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("SearchInput"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-089")])]),e._v(" "),a("p",[e._v("and here's our SetProductCommand as a RelayCommand.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand SetProductCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 07-090")])]),e._v(" "),a("p",[e._v("Now we need to initialize that ProductCommand, so in the constructor up here, we can initialize it\n                        and point it to a method called OnSetProduct:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public MainWindowViewModel()\n{\n    SetProductCommand = new RelayCommand(OnSetProduct);")])]),e._v(" "),a("figcaption",[e._v("Fig 07-091")])]),e._v(" "),a("p",[e._v("and I can declare that method down below here.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnSetProduct()\n{\n    SelectedProduct = Products.FirstOrDefault(p => p.Name.Contains(SearchInput));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-092")])]),e._v(" "),a("p",[e._v("And you can see when that gets called through the command, I'm going to go out and use the\n                        SearchInput text, which was pushed through thanks to two-way data binding, when I click on the\n                        button, changes focus, that causes the current value in the TextBox to be pushed down into that\n                        SearchInput and that makes it available to do a Search here against our Products based on the Name\n                        property, and then we will push that into the SelectedProduct property.\n                    ")]),e._v(" "),a("p",[e._v("That's going to call the setter")]),e._v(" "),a("figure",[a("pre",[a("code",{},[e._v('public Product SelectedProduct\n{\n    get\n    {\n        return _SelectedProduct;\n    }\n    set\n    {\n        if (value != _SelectedProduct)\n        {\n            _SelectedProduct = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("SelectedProduct"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-093")])]),e._v(" "),a("p",[e._v("which raises a PropertyChanged event, and because our SelectedItem is bound to that\n                        SelectedProduct:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox ItemsSource="{Binding Products}"\n                  SelectedItem="{Binding SelectedProduct}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-094")])]),e._v(" "),a("p",[e._v("that's going to cause the ComboBox to change. Because the ComboBox changes and IsSynchronized is set\n                        on both of these, it will also cause the ListBox to change. So let's go ahead and run with that, and\n                        we can see down below there's a product called Taj Mahal. If I just put in Taj and Search:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(485)}}),e._v(" "),a("figcaption",[e._v("Fig 07-095")])]),e._v(" "),a("p",[e._v("You can see it's selected up above and selected down below. Put in Smokes, Search, Holy Smokes\n                        selected in both controls.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(486)}}),e._v(" "),a("figcaption",[e._v("Fig 07-096")])]),e._v(" "),a("p",[e._v("So that just further emphasizes the way you can bind SelectedItem, for example, or SelectedValue,\n                        change the thing it's bound to in the code-behind, and that will drive what's selected in the UI, a\n                        very common thing to do in Model-View-ViewModel data binding scenarios.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("TabControl Data Binding")]),e._v(" "),a("p",[e._v("TabControls are probably not something you think about first and foremost as a data-bound control,\n                        because they're often used for structurally setting up some static content in child views within a\n                        window.\n                    ")]),e._v(" "),a("p",[e._v("But TabControls are also good for dynamic view containment scenarios, when the set of child views\n                        that you want to present is dynamically driven by data. To support this, a TabControl is derived\n                        from ItemsControl so each of the tabs is an item that is rendered out, similar to ListBox items in a\n                        ListBox.\n                    ")]),e._v(" "),a("p",[e._v("But each TabItem that gets rendered out is really a composite object itself. It contains two pieces\n                        of content, and in fact, they're implemented as two separate ContentControls.\n                    ")]),e._v(" "),a("p",[e._v(" First off, there is the header. That's what shows up in the little tab at the top, which can,\n                        naturally, be put on the sides or bottom if you need to. Then there's the actual client area of the\n                        tab, the main part of the tab, if you will, and that's called Content.\n                    ")]),e._v(" "),a("p",[e._v("To drive these dynamically, there's two DataTemplates associated with a TabControl. The ItemTemplate\n                        actually applies to the header of each TabItem, and then there's a separate ContentTemplate that\n                        applies to the Content of each TabItem.\n                    ")]),e._v(" "),a("p",[e._v("So let's take a look at a demo of how we can use this to compose dynamic child views into a\n                        containing main view using a TabControl, DataTemplates, and data binding.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: TabControl Data Bound Views")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\TabControls\\TabControls.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\TabControls\\TabControls.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to get you familiar with TabControls and how they can be used with data binding.\n                        Starting point for this is a WPF project with a MainWindow and a MainWindowViewModel:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(487)}}),e._v(" "),a("figcaption",[e._v("Fig 07-097")])]),e._v(" "),a("p",[e._v("and then a ProductView, which is a UserControl in its own associated ViewModel.")]),e._v(" "),a("p",[e._v("The ViewModel for the ProductViewModel is just loading up products into a Products property on the\n                        ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ProductViewModel(string type)\n    {\n        ProductType = type;\n        if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))\n        {\n            using (ZzaDbContext context = new ZzaDbContext())\n            {\n                Products = new ObservableCollection<Product>(context.Products.Where(p => p.Type == type));\n                Products.ToList().ForEach(p => p.Image = "Images/" + p.Image);\n            }\n        }\n    }')])]),e._v(" "),a("figcaption",[e._v("Fig 07-098")])]),e._v(" "),a("p",[e._v("Which can be rendered out in a list-oriented control. In addition, it has a ProductType string")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string ProductType\n{\n    get\n    {\n        return _ProductType;\n    }\n    set\n    {\n        if (value != _ProductType)\n        {\n            _ProductType = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("ProductType"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-099")])]),e._v(" "),a("p",[e._v("That can be used to label what kind of products this view is rendering.")]),e._v(" "),a("p",[e._v("The view itself is just going to use a ListBox to render out those products:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ListBox ItemsSource="{Binding Products}"/>\n\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-100")])]),e._v(" "),a("p",[e._v("and notice that no DataContext is set inside the UserControl because it's going to be set dynamically\n                        through data binding.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('mc:Ignorable="d"\n         d:DesignHeight="300" d:DesignWidth="300">\n<UserControl.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-101")])]),e._v(" "),a("p",[e._v("The individual products are being rendered out using a DataTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate DataType="{x:Type data:Product}">\n    <StackPanel Orientation="Horizontal">\n        <Image Source="{Binding Image}"\n               Width="75" />\n        <TextBlock Margin="5"\n                   Text="{Binding Name}" />\n    </StackPanel>\n</DataTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-102")])]),e._v(" "),a("p",[e._v("specifically an ImplicitDataTemplate for the DataType Product.")]),e._v(" "),a("p",[e._v("The MainWindowViewModel, at this point, just has a property called ChildViewModels, which is a\n                        collection of those ProductViewModels.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ObservableCollection<ProductViewModel> ChildViewModels\n{\n    get\n    {\n        return _ChildViewModels;\n    }\n    set\n    {\n        if (value != _ChildViewModels)\n        {\n            _ChildViewModels = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("ChildViewModels"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-103")])]),e._v(" "),a("p",[e._v("So the scenario here is that we want to render out individual tabs in a TabControl for different\n                        categories of products or ProductTypes. So using data binding, we're going to create a collection of\n                        ChildViewModels here, one for each ProductType, and have data binding render out the appropriate\n                        View and ViewModel in a tab for each one of those.\n                    ")]),e._v(" "),a("p",[e._v("To do that, we'll need a TabControl. So let's drop into the MainWindow and add a TabControl")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TabControl ItemsSource="{Binding ChildViewModels}" ItemTemplate="{StaticResource TabHeaderTemplate}"/>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-104")])]),e._v(" "),a("p",[e._v(" bound to that ChildViewModel's property on its ViewModel, which is already wired up as the\n                        DataContext. Next, we need to actually populate that ChildViewModels collection with something, so\n                        I'm going to drop into the constructor of the ViewModel here and populate it with an\n                        ObservableCollection.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindowViewModel()\n{\n    ChildViewModels = new ObservableCollection<ProductViewModel>\n    {\n        new ProductViewModel("pizza"),\n        new ProductViewModel("salad"),\n        new ProductViewModel("drink")\n    };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-105")])]),e._v(" "),a("p",[e._v("We're putting one instance of the ProductViewModel in for each of the three ProductTypes that are in\n                        our Products collection, pizza, salads, and drinks. ProductViewModel takes that Type that's passed\n                        in and uses it to set the ProductType property:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("public ProductViewModel(string type)\n{\n    ProductType = type;")])]),e._v(" "),a("figcaption",[e._v("Fig 07-106")])]),e._v(" "),a("p",[e._v("and then notice it's filtering the products that it loads into that ViewModel, based on that\n                        Type.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Products = new ObservableCollection<Product>(context.Products.Where(p => p.Type == type));")])]),e._v(" "),a("figcaption",[e._v("Fig 07-107")])]),e._v(" "),a("p",[e._v("So now we have a TabControl, which is an ItemsControl itself, bound to a collection of items:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TabControl ItemsSource="{Binding ChildViewModels}" "/> </Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-108")])]),e._v(" "),a("p",[e._v("but it needs to know how to render those items out, and it's going to do that with DataTemplates.")]),e._v(" "),a("p",[e._v("So we're going to go up here to our Resources section and add in a DataTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <DataTemplate DataType="{x:Type local:ProductViewModel}">\n        <local:ProductView/>\n    </DataTemplate>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-109")])]),e._v(" "),a("p",[e._v("an ImplicitDataTemplate, mapped to the ProductViewModel Type, which is going to be the individual\n                        items that show up in this ChildViewModels collection.\n                    ")]),e._v(" "),a("p",[e._v("And similar to a demo in the DataTemplates module, the actual rendering for a ProductViewModel will\n                        be its corresponding view, and its DataContext will be set to that instance of the ViewModel through\n                        the magic of how DataTemplates work.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(488)}}),e._v(" "),a("figcaption",[e._v("Fig 07-110")])]),e._v(" "),a("p",[e._v("Now if we run at this point, we're going to see this strange-looking view:")]),e._v(" "),a("p",[e._v("where we actually have tabs here, you can see I can click on them and the appearance is changing, but\n                        what's actually happening is that view is being rendered in the tab itself, the tab header, and we\n                        don't have a scrolling container, so we can't see it, but it's actually rendering them again as the\n                        content of the tab, not exactly what we wanted.\n                    ")]),e._v(" "),a("p",[e._v("The reason for this is, a TabControl is an ItemsControl")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TabControl ItemsSource="{Binding ChildViewModels}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-111")])]),e._v(" "),a("p",[e._v("but it's really a composite ItemsControl, it's going to render a TabItem for each of the items in its\n                        data-bound source, but a TabItem itself has two parts to it, it has a header and it has content. The\n                        header is a ContentControl and the Content is a ContentControl, and the DataContext for the TabItem\n                        as a whole is the individual thing that's being rendered, in this case a ProductViewModel.\n                    ")]),e._v(" "),a("p",[e._v("So, the data binding in the content of the header binds to that, and the data binding in the content\n                        of the main client area of the tab, also binds to that. So what we need to do here is control this a\n                        little more explicitly.\n                    ")]),e._v(" "),a("p",[e._v("What I'll do is I'll drop into my Resources and add another DataTemplate.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate x:Key="TabHeaderTemplate">\n    <TextBlock Text="{Binding ProductType}"/>\n</DataTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-112")])]),e._v(" "),a("p",[e._v("This one's going to have a key to it so we can point to it explicitly and we'll call this the\n                        TabHeaderTemplate. Here you can see we're just going to bind to ProductType because the overall\n                        DataContext for the TabItem is still going to be the ViewModel and that's the property exposed from\n                        it.\n                    ")]),e._v(" "),a("p",[e._v("Now we need to go down here to our TabControl and actually pull that template in by name. So we'll\n                        set the ItemTemplate property through a StaticResource, pointing to that TabHeaderTemplate.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TabControl ItemsSource="{Binding ChildViewModels}"\n        ItemTemplate="{StaticResource TabHeaderTemplate}"/>\n\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-113")])]),e._v(" "),a("p",[e._v("Now, notice if we wanted to do the other one explicitly, we could do that, and what we would use is\n                        the ContentTemplate property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TabControl ItemsSource="{Binding ChildViewModels}"\n        ItemTemplate="{StaticResource TabHeaderTemplate}" ContentTemplate="" />\n\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-114")])]),e._v(" "),a("p",[e._v("and point it to whatever template we want, but since we're using an ImplicitDataTemplate here we\n                        don't have to do that one.\n                    ")]),e._v(" "),a("p",[e._v("That one can match up implicitly, but if you have an explicit one hooked up, it will ignore the\n                        implicit ones. So with that fix in place, now we've got what we want.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(489)}}),e._v(" "),a("figcaption",[e._v("Fig 07-115")])]),e._v(" "),a("p",[e._v("We've got the TabHeaders are being set based on the ProductType property of our ViewModel, the Tab\n                        content is being set to an instance of the ViewModel, which gets married up through the DataTemplate\n                        to its view, and rendered out.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("DataGrid Features")]),e._v(" "),a("p",[e._v("Now let's talk about the ubiquitous DataGrid. DataGrids are obviously a mainstay of data binding\n                        scenarios and presenting data collections in tabular form.\n                    ")]),e._v(" "),a("p",[e._v("They are ItemsControls themselves, so all the things we've said about ItemsControls apply to them as\n                        well. DataGrids are editable. They have an edit mode and a normal mode. When you click in a cell in\n                        a row, it goes into edit mode and stays there until you click out of that row.\n                    ")]),e._v(" "),a("p",[e._v("DataGrids support dynamic column generation, so they can reflect on the data-bound objects and\n                        generate a column for each property on that object, but most commonly you're going to use static\n                        column definitions, setting up exactly what columns you want, in the order you want them, bound to\n                        the properties you intend.\n                    ")]),e._v(" "),a("p",[e._v("You can also use templated columns, which we'll look into in more detail. Templating really comes in\n                        at two different levels. For the column level, it really amounts to cell level. You define a\n                        template column, and that's specifying the visual structure of each cell within that column.\n                    ")]),e._v(" "),a("p",[e._v("There are separate templates that you can set for normal versus edit mode, in case you want to\n                        toggle, for example, render something as text when you're not in edit mode, and then switch to a\n                        ComboBox when you are in edit mode.\n                    ")]),e._v(" "),a("p",[e._v("There's also a RowDetails template that you can provide on the DataGrid as a whole, and this lets you\n                        provide a DataTemplate to render out the child detail for a given row in whatever way that you want.\n                    ")]),e._v(" "),a("p",[e._v("You could render out a data form, a child DataGrid or whatever makes sense for your scenario. An\n                        important concept surrounding DataGrids and data binding is to realize that DataGrid columns are not\n                        part of the visual tree.\n                    ")]),e._v(" "),a("p",[e._v("So earlier in this module we looked at the breakdown of the visual tree and the dynamic generation of\n                        ItemsPresenters and ContentPresenters, and we saw that there are no columns rendered out as part of\n                        that tree.\n                    ")]),e._v(" "),a("p",[e._v("On a DataGrid column, however, you will declare bindings. Those bindings are actually kind of held\n                        aside and used at the point where it goes to render a cell. At the point where the binding is first\n                        evaluated, it's when it's parsing the DataGrid and the columns contained within it.\n                    ")]),e._v(" "),a("p",[e._v("Since that column is not part of the visual tree, things like RelativeSource bindings and ElementName\n                        bindings that try to walk throughout the tree to find the source object, are not going to work\n                        properly as part of a column.\n                    ")]),e._v(" "),a("p",[e._v("In a demo, I'll show you how you can use templated columns to address that and still have the power\n                        and flexibility you need to use RelativeSource or ElementName bindings when you want as part of a\n                        column definition. So let's dive into a demo to get more familiar with all these aspects of\n                        DataGrids.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: DataGrid Features")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\DataGrids\\DataGrids.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\DataGrids\\DataGrids.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to get you more familiar with some of the more detailed features of DataGrids.\n                        Now DataGrids are a big topic. You could easily spend a whole module drilling into all kinds of\n                        esoteric details about DataGrids. I just want to hit the high points here and the things you're\n                        going to use most commonly in data binding scenarios.\n                    ")]),e._v(" "),a("p",[e._v("Our starting point here is a simple WPF project with a MainWindow:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(490)}}),e._v(" "),a("figcaption",[e._v("Fig 07-116")])]),e._v(" "),a("p",[e._v("and the only thing that's really been added here is a little bit of data access code that's going out\n                        at runtime and getting a Customers collection populated:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('if (!DesignerProperties.GetIsInDesignMode(this))\n{\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        Customers = new ObservableCollection<Customer>(context.Customers.Include("Orders").ToList());\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-117")])]),e._v(" "),a("p",[e._v("that's exposed from the code-behind as a DependencyProperty that has an ObservableCollection.")]),e._v(" "),a("p",[e._v("Notice it's also drilling down and getting the related Orders for those Customers:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('context.Customers.Include("Orders")')])]),e._v(" "),a("figcaption",[e._v("Fig 07-118")])]),e._v(" "),a("p",[e._v("which we'll use later in the demo, and it's also populating a States property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("States = statesStr.Split(',').ToList();")])]),e._v(" "),a("figcaption",[e._v("Fig 07-119")])]),e._v(" "),a("p",[e._v("which is a collection of the state abbreviations, and that's all that's in the code-behind here.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(491)}}),e._v(" "),a("figcaption",[e._v("Fig 07-120")])]),e._v(" "),a("p",[e._v("Now especially when it comes to putting together a DataGrid, I find using the Data Sources Window to\n                        generate the columns for me is very handy.\n                    ")]),e._v(" "),a("p",[e._v("Generally, you're not going to want to auto-generate the columns, because they won't be in the right\n                        order and they includes certain properties you don't want to display, so you're going to need\n                        explicitly-defined columns, and doing each one by hand in the XAML Editor is a lot of work.\n                    ")]),e._v(" "),a("p",[e._v("Using the Data Sources Window, as I showed in a previous module, and go add a data source:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(492)}}),e._v(" "),a("figcaption",[e._v("Fig 07-121")])]),e._v(" "),a("p",[e._v("point to the object type that you want, get it into the tree here:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(493)}}),e._v(" "),a("figcaption",[e._v("Fig 07-122")])]),e._v(" "),a("p",[e._v("and then just drag-and-drop to generate the DataGrid and all of its columns.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(494)}}),e._v(" "),a("figcaption",[e._v("Fig 07-123")])]),e._v(" "),a("p",[e._v("Now in this case I don't actually want all of those columns, and I want them in a different order. So\n                        afterwards, I'm going to drop into the XAML and move some things around and delete a few columns.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid.Columns>\n                <DataGridTextColumn x:Name="idColumn"\n                                    Width="Auto"\n                                    Header="Id"\n                                    Binding="{Binding Id}" />\n                <DataGridTextColumn x:Name="firstNameColumn"\n                                    Width="Auto"\n                                    Header="First Name"\n                                    Binding="{Binding FirstName}" />\n                <DataGridTextColumn x:Name="lastNameColumn"\n                                    Width="Auto"\n                                    Header="Last Name"\n                                    Binding="{Binding LastName}" />\n                <DataGridTextColumn x:Name="phoneColumn"\n                                    Width="Auto"\n                                    Header="Phone"\n                                    Binding="{Binding Phone}" />\n                <DataGridTextColumn x:Name="emailColumn"\n                                    Width="*"\n                                    Header="Email"\n                                    Binding="{Binding Email}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-124")])]),e._v(" "),a("p",[e._v("I'm just going to do that all quickly here with cut and paste, and we get it down to Id, FirstName,\n                        LastName, Phone, and Email, and lastly, a State column.\n                    ")]),e._v(" "),a("p",[e._v("I'm going to make one other modification up here at the root level, I'm going to set the DataContext\n                        of the MainWindow to itself. So we saw this in earlier demos using a RelativeSource binding to Self:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DataContext="{Binding RelativeSource={RelativeSource Self}}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-125")])]),e._v(" "),a("p",[e._v("meaning that the DataContext is the window itself, so the bindings within the view can point to\n                        properties in the code-behind of the window, something you can do when you're not doing the MVVM\n                        pattern.\n                    ")]),e._v(" "),a("p",[e._v("Next, I'm going to take the CollectionViewSource that was generated through the drag/drop and make a\n                        modification to it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n        <CollectionViewSource x:Key="customerViewSource"\n            Source="{Binding Customers}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-126")])]),e._v(" "),a("p",[e._v("Setting the Source property equal to the Customers property that's being exposed from the\n                        code-behind.")]),e._v(" "),a("p",[e._v("With that in place, I can go ahead and run:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(495)}}),e._v(" "),a("figcaption",[e._v("Fig 07-127")])]),e._v(" "),a("p",[e._v("and we've got our basic data-bound DataGrid scenario. Keep in mind, a DataGrid is editable, by\n                        default, so I can go in here and start editing things. There's properties you can set to make it\n                        read-only.\n                    ")]),e._v(" "),a("p",[e._v("Also, at the bottom, a DataGrid always has a new entry row, by default:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(496)}}),e._v(" "),a("figcaption",[e._v("Fig 07-128")])]),e._v(" "),a("p",[e._v("and again, you can set a property to get rid of that if you don't expect people to add new items from\n                        the Grid. The basic properties in play here are, of course, ItemsSource:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('ItemsSource="{Binding}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-129")])]),e._v(" "),a("p",[e._v("because it is an ItemsControl; AutoGenerateColumns False:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('AutoGenerateColumns="False"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-130")])]),e._v(" "),a("p",[e._v("because we're explicitly declaring them, if you forget and leave that True, you'll get duplicate\n                        columns; and then you declare a column for each column that you want in your DataGrid.\n                    ")]),e._v(" "),a("p",[e._v("Now the important thing, as I pointed out in a previous demo, is that these columns:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTextColumn x:Name="idColumn"\n            Width="Auto"\n            Header="Id"\n            Binding="{Binding Id}" />\n<DataGridTextColumn x:Name="firstNameColumn"\n            Width="Auto"\n            Header="First Name"\n            Binding="{Binding FirstName}" />\n<DataGridTextColumn x:Name="lastNameColumn"\n            Width="Auto"\n            Header="Last Name"\n            Binding="{Binding LastName}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-131")])]),e._v(" "),a("p",[e._v("Don't actually exist at runtime. They're a declaration used to generate cells within a row that\n                        represent a column, but the Column objects here are just objects, they're not actually part of the\n                        visual tree.\n                    ")]),e._v(" "),a("p",[e._v("So that might raise the question of how can they have bindings on them then? Well, the Binding\n                        property here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Binding="{Binding Id}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-132")])]),e._v(" "),a("p",[e._v("is really creating a Binding object, which is held in this Binding property. It's then used to set\n                        the binding on whatever element will be generated within a cell, within a row representing that\n                        column. It's not actually evaluated at a column level when the DataGrid is being built, only down at\n                        a cell level.\n                    ")]),e._v(" "),a("p",[e._v("Now these Width properties:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Width="Auto"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-133")])]),e._v(" "),a("p",[e._v("are ones you can set size to Header, by default, but you can see it supports *, Auto, and explicit\n                        sizing as well.\n                    ")]),e._v(" "),a("p",[e._v("Now when you do your drag-and-drop, it's going to assume everything is just plain text, but you might\n                        want a more complicated rendering.\n                    ")]),e._v(" "),a("p",[e._v("There's other built-in column types such as a DataGridComboBoxColumn:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridComboBoxColumn x:Name="stateColumn"\n                                Width="100"\n                                Header="State"\n                                ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.States}"\n                                SelectedItemBinding="{Binding State}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-134")])]),e._v(" "),a("p",[e._v("DataGridCheckBoxColumns, and so on. Now this DataGridComboBoxColumn may seen tempting, but it's\n                        actually a little hard to work with at times because you need to set the ItemsSource to the\n                        collection of things that's going to show up in the ComboBox, such as our list of states.\n                    ")]),e._v(" "),a("p",[e._v("But the overall DataContext, when this actually results in rendering a cell, is just going to be a\n                        single Customer object in this case. And unless you hang the collection of states off of each\n                        Customer object, the ItemsSource property can't get to it through a DataContext binding.\n                    ")]),e._v(" "),a("p",[e._v("Well, you might be tempted to try what I did here and use a RelativeSource binding:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('"{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.States}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-135")])]),e._v(" "),a("p",[e._v("walking up the visual tree to the parent DataGrid, because after all, this is a ComboBoxColumn inside\n                        of a Columns collection on the DataGrid, it should be able to walk that tree, right?\n                    ")]),e._v(" "),a("p",[e._v("Well, not so much, because again, these columns aren't part of the visual tree at runtime, they're\n                        used to generate things at a row and cell level that are part of the visual tree, but the\n                        ComboBoxColumn itself is not.\n                    ")]),e._v(" "),a("p",[e._v("So this RelativeSource binding basically won't work out. It does expose other properties, such as\n                        SelectedItemBinding\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('SelectedItemBinding="{Binding State}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-136")])]),e._v(" "),a("p",[e._v("which corresponds to the SelectedItem property for the ComboBox that will be rendered out. As long as\n                        you can get a valid binding in there, that'll work fine, as well as SelectedValueBinding, and so on.\n                    ")]),e._v(" "),a("p",[e._v("But if we run right now, you can see that our State column looks kind of empty initially:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(497)}}),e._v(" "),a("figcaption",[e._v("Fig 07-137")])]),e._v(" "),a("p",[e._v("If we click on it and go into edit mode, then it does actually render like a ComboBox, but the\n                        ComboBox is empty.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(498)}}),e._v(" "),a("figcaption",[e._v("Fig 07-138")])]),e._v(" "),a("p",[e._v("What do want to do when your binding is not doing exactly what you expect it to do? Go look at your\n                        output window. Down here in the output window, we can see a System.Windows.Data Error:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(499)}}),e._v(" "),a("figcaption",[e._v("Fig 07-139")])]),e._v(" "),a("p",[e._v("and it says, Cannot find source for binding 'RelativeSource FindAncestor', and it's looking for a\n                        DataGrid.")]),e._v(" "),a("p",[e._v("The hard part is, there's nothing in this error message that's really going to tip you off if you\n                        haven't seen this video or learned about it somewhere else. The problem is that the DataGrid column\n                        is not part of the visual tree, so it's not able to walk up and find that DataGrid because it's just\n                        not there at the point where this binding is being evaluated.\n                    ")]),e._v(" "),a("p",[e._v("So, what we can do instead is use a TemplatedColumn:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTemplateColumn x:Name="stateColumn"\n                        Width="Auto"\n                        Header="State">\n    <DataGridTemplateColumn.CellTemplate>\n        <DataTemplate>\n            <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.States}"\n                      SelectedItem="{Binding State}" />\n        </DataTemplate>\n    </DataGridTemplateColumn.CellTemplate>\n</DataGridTemplateColumn>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-140")])]),e._v(" "),a("p",[e._v("TemplatedColumn is a very important concept in DataGrids because it gives you full control over\n                        exactly what the visual that will be rendered inside of a cell is.\n                    ")]),e._v(" "),a("p",[e._v("At the TemplatedColumn level, you can still set the Header that will be shown at the top of the Grid\n                        and the Width of the column, but everything else will be driven by what you put in the CellTemplate:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTemplateColumn.CellTemplate>\n    <DataTemplate>\n        <ComboBox ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.States}"\n                  SelectedItem="{Binding State}" />\n    </DataTemplate>\n</DataGridTemplateColumn.CellTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-141")])]),e._v(" "),a("p",[e._v("I should mention there's also a CellEditingTemplate property on the column if you want a different\n                        visual rendering for edit mode versus non-edit mode.\n                    ")]),e._v(" "),a("p",[e._v("If you don't set that, it'll use whatever is in the CellTemplate for both modes. CellTemplate is\n                        nothing more than a DataTemplate that you can put whatever visual structuring in you want.\n                    ")]),e._v(" "),a("p",[e._v("So, here we use an actual ComboBox:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.States}"\n        SelectedItem="{Binding State}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-142")])]),e._v(" "),a("p",[e._v("with all of its normal ComboBox properties, and in this case, we can use a RelativeSourceBinding, and\n                        that's because this ComboBox doesn't come into being until the DataTemplate is rendered within a\n                        cell, that cell is in a row, the row is in the DataGrid, so the RelativeSource is actually able to\n                        walk up the visual tree and get to whatever it's pointing to.\n                    ")]),e._v(" "),a("p",[e._v("So in this case, I'll point it to the Window level, to the DataContext property, which will be the\n                        Window itself, to the States property that's exposed on that.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.States}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-143")])]),e._v(" "),a("p",[e._v("So it's able to use that to get the list of states to render in the ComboBox and then we do the\n                        SelectedItem Binding:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('SelectedItem="{Binding State}"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-144")])]),e._v(" "),a("p",[e._v("against the current DataContext, which is a Customer object.")]),e._v(" "),a("p",[e._v("So we grab the State property off that Customer object to drive what's selected. With that in place,\n                        we can run, resize our window, and we can see off to the right our ComboBoxes are there:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(500)}}),e._v(" "),a("figcaption",[e._v("Fig 07-145")])]),e._v(" "),a("p",[e._v("rendering as ComboBoxes interactive all the time, even before you click into the row and get it in\n                        edit mode.\n                    ")]),e._v(" "),a("p",[e._v("And we can see that they show the list of items and are data-bound to that.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(501)}}),e._v(" "),a("figcaption",[e._v("Fig 07-146")])]),e._v(" "),a("p",[e._v("When we set those, they're setting the SelectedItem, which is bound to the state of the Customer and\n                        it actually sets that on the Customer.\n                    ")]),e._v(" "),a("p",[e._v("Another last capability to highlight here in DataGrids, is the ability to provide a\n                        RowDetailTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid.RowDetailsTemplate>\n    <DataTemplate>\n        <DataGrid ItemsSource="{Binding Orders}"\n                  AutoGenerateColumns="True" />\n    </DataTemplate>\n</DataGrid.RowDetailsTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-147")])]),e._v(" "),a("p",[e._v("So I'm going to pop in here another property on the DataGrid, RowDetailsTemplate, which is just a\n                        DataTemplate that will be rendered out as a child panel on each row when it's selected by default.\n                    ")]),e._v(" "),a("p",[e._v("It's driven by a property at the DataGrid level called RowDetailsVisibilityMode:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('RowDetailsVisibilityMode="VisibleWhenSelected"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-148")])]),e._v(" "),a("p",[e._v("You can set this to collapsed and then programmatically toggle it, or you can use this\n                        VisibleWhenSelected.")]),e._v(" "),a("p",[e._v("And what you put inside of that DataTemplate is totally up to you. The DataContext for the\n                        DataTemplate is going to be the RowDataContext, which means a Customer in our current case.\n                    ")]),e._v(" "),a("p",[e._v("So, because we populated the child Orders for a Customer in the query in the code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Customers = new ObservableCollection<Customer>(context.Customers.Include("Orders").ToList());')])]),e._v(" "),a("figcaption",[e._v("Fig 07-149")])]),e._v(" "),a("p",[e._v("it means that we can bind to that as a property hanging off of the current DataContext for a given\n                        row, which will be the customer.\n                    ")]),e._v(" "),a("p",[e._v("In this case, I'm just going to cheat and say, AutoGenerateColumns True, but in a real scenario you'd\n                        want to explicitly declare just the columns that you want. But this could be a little data entry\n                        form, some sort of rendering of the properties of an individual object hanging off of the current\n                        row object, such as an address for the customer or so on.\n                    ")]),e._v(" "),a("p",[e._v("So let's go ahead and run with that. Let's also resize our Grid, do a Reset Layout, All, so it fills\n                        the window here, and go ahead and run:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(502)}}),e._v(" "),a("figcaption",[e._v("Fig 07-150")])]),e._v(" "),a("p",[e._v("Now we can see the first row is selected, so we see this child DataGrid containing the orders, and as\n                        we select each row we see a child DataGrid with the orders for that item.\n                    ")]),e._v(" "),a("p",[e._v("Obviously, it needs some prettying up with some margins, some backgrounds, you probably want to get\n                        rid of the input row for the child items, and so on, but you can see through a DataTemplate you can\n                        put whatever you want in that child panel when the row is selected. So those are all the key things\n                        you want to know about working with DataGrids and data binding.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Collection Views")]),e._v(" "),a("p",[e._v("Now let's talk about some of the other things you can do with CollectionViewSources. We've seen these\n                        in a number of demos so far, especially those generated by the drag-and-drops from the Data Sources\n                        Window.\n                    ")]),e._v(" "),a("p",[e._v("And we mentioned them in a previous module when talking about the ICollectionView interface. So,\n                        first off, a CollectionViewSource wraps a collection by pointing to it through its Source property,\n                        and then you can use the CollectionViewSource as a collection for data binding. A\n                        CollectionViewSource exposes an ICollectionView.\n                    ")]),e._v(" "),a("p",[e._v("So if you want to deal with the ICollectionView, typically for something like maintaining what is the\n                        current object or moving the cursor of what the current object is around in the collection, you can\n                        do that with the ICollectionView interface, exposed through a .View property on a\n                        CollectionViewSource.\n                    ")]),e._v(" "),a("p",[e._v("But what we're going to focus on here, is that you can also use the CollectionViewSource to morph or\n                        change the rendered data collection, and use it to sort the data collection, filter which items are\n                        presented, or group the items. Additionally, CollectionViewSources are very handy for Master-Detail\n                        scenarios, being able to chain together a parent collection to a child collection, to a grandchild\n                        collection, and so on, and render those out nicely based on user selections in the view.\n                    ")]),e._v(" "),a("p",[e._v("The way you do this is by chaining them, so you set up multiple CollectionViewSources and you set the\n                        source of one CollectionViewSource to a parent CollectionViewSource and use a property path to\n                        indicate what properties on the current object in that parent CollectionViewSource should drive the\n                        child CollectionViewSource.\n                    ")]),e._v(" "),a("p",[e._v("So let's see how we can sort, filter, and group in one demo, and how we can set up Master-Details in\n                        another demo.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Sorting, Filtering, Grouping with CollectionViewSource")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\DataGrids\\DataGrids.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\DataGrids\\DataGrids.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to get you familiar with some of the extra things that a CollectionViewSource\n                        can do for you when working with data-bound collections, specifically sorting, filtering, and\n                        grouping.\n                    ")]),e._v(" "),a("p",[e._v("Starting point here is the end of our last demo working with DataGrids. I'm going to take my DataGrid\n                        and pull it down from the top a little bit so that I have room to add some buttons:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(503)}}),e._v(" "),a("figcaption",[e._v("Fig 07-151")])]),e._v(" "),a("p",[e._v("I'm going to drop into the UI here and add a button, its content is set to Sort:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Sort"\n    HorizontalAlignment="Left"\n    Margin="10,3,0,0"\n    VerticalAlignment="Top"\n    Width="75"\nClick="OnSort" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-152")])]),e._v(" "),a("p",[e._v("and we're going to hook up an OnSort method in the code-behind. Our OnSort handler here, you can see,\n                        is going to reach out and find that customersViewSource that's up in the XAML.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnSort(object sender, RoutedEventArgs e)\n{\n    var customerViewSource = FindResource("customerViewSource")\n        as CollectionViewSource;\n    customerViewSource.SortDescriptions.Add(\n        new SortDescription("State", ListSortDirection.Ascending));\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-153")])]),e._v(" "),a("p",[e._v("This is the one that was generated through drag-and-drop and slightly modified in the last demo, but\n                        it's pointing to the Customers collection exposed from the Window code-behind, which is our\n                        DataContext:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n        <CollectionViewSource x:Key="customerViewSource"\n                      Source="{Binding Customers}"\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-154")])]),e._v(" "),a("p",[e._v("So once we have a reference to a CollectionViewSource:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnSort(object sender, RoutedEventArgs e)\n{\n    var customerViewSource = FindResource("customerViewSource")\n        as CollectionViewSource;\n    customerViewSource.SortDescriptions.Add(\n        new SortDescription("State", ListSortDirection.Ascending));\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-155")])]),e._v(" "),a("p",[e._v("it exposes a number of methods and properties we can use to modify the collection it exposes for data\n                        binding purposes, first of which is a SortDescriptions property.\n                    ")]),e._v(" "),a("p",[e._v("It's a collection of SortDescriptions that supports multi-sorting, and we just add new\n                        SortDescription objects into it, telling it what property to sort on and what direction to sort.\n                    ")]),e._v(" "),a("p",[e._v("So just simply by adding that and hooking that up to a button, we can go ahead and run, and we can\n                        see I will click on the Sort property:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(504)}}),e._v(" "),a("figcaption",[e._v("Fig 07-156")])]),e._v(" "),a("p",[e._v("and now things are sorted by state:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(505)}}),e._v(" "),a("figcaption",[e._v("Fig 07-157")])]),e._v(" "),a("p",[e._v("Now there is a slightly different way to go about this using CollectionViews, instead of the\n                        CollectionViewSource explicitly:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnSort(object sender, RoutedEventArgs e)\n{\n    //var customerViewSource = FindResource("customerViewSource") as CollectionViewSource;\n    //customerViewSource.SortDescriptions.Add(new SortDescription("State", ListSortDirection.Ascending));\n\n    ICollectionView view = customerViewSource.View as ICollectionView;\n    view.SortDescriptions.Add(new SortDescription("State", ListSortDirection.Ascending));\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-158")])]),e._v(" "),a("p",[e._v("So I could comment out the line of code that went directly to the SortDescriptions property of the\n                        CollectionViewSource, and instead use the .View property on the CollectionViewSource to get a\n                        reference to the ICollectionView interface.\n                    ")]),e._v(" "),a("p",[e._v("We've seen this one in previous demos in an earlier module and we used it to drive the current object\n                        within the collection and to be able to move that cursor, if you will, for the current object,\n                        forward and backward to select different items in the collection. Well the CollectionView is really\n                        the thing that knows how to do the sorting, and it really exposes the same API.\n                    ")]),e._v(" "),a("p",[e._v("It has a SortDescriptions collection:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('view.SortDescriptions.Add(new SortDescription("State", ListSortDirection.Ascending));')])]),e._v(" "),a("figcaption",[e._v("Fig 07-159")])]),e._v(" "),a("p",[e._v("that you can add new SortDescriptions into, and do the exact same thing that we were doing directly\n                        on the SortDescriptions here. By doing it through ICollectionView, you're not coupled to whether\n                        you're actually using a CollectionViewSource or not.\n                    ")]),e._v(" "),a("p",[e._v("I showed in a previous demo, there's always an ICollectionView under the covers you can get to\n                        through GetDefaultView. So we could sort through that, even if we're not using a\n                        CollectionViewSource. Functionality here is exactly the same.\n                    ")]),e._v(" "),a("p",[e._v("Now another thing I might want to do is filter my data based on some criteria. So I'm going to drop\n                        down here and add another button, which will show up at the top, called Filter:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Filter"\n    HorizontalAlignment="Left"\n    Margin="90,3,0,0"\n    VerticalAlignment="Top"\n    Width="75"\n    Click="OnFilter" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-160")])]),e._v(" "),a("p",[e._v("and it's going to target a method we'll add in the code-behind called OnFilter. I'll drop in the\n                        code-behind and add that method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnFilter(object sender, RoutedEventArgs e)\n{\n    var customerViewSource = FindResource("customerViewSource") as CollectionViewSource;\n    customerViewSource.Filter += customerViewSource_Filter;\n\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-161")])]),e._v(" "),a("p",[e._v("and you can see what the API looks like here is, again, we reach out and get a reference to our\n                        CollectionViewSource. That CollectionViewSource has an event on it called Filter:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnFilter(object sender, RoutedEventArgs e)\n{\n    var customerViewSource = FindResource("customerViewSource")\n        as CollectionViewSource;\n    customerViewSource.Filter += customerViewSource_Filter;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-162")])]),e._v(" "),a("p",[e._v("and when you hook up a subscriber to that event it's going to trigger it to reevaluate its\n                        collection, fire that event once for each object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' void customerViewSource_Filter(object sender, FilterEventArgs e)\n{\n    Customer c = e.Item as Customer;\n    if (c.State == "AK") e.Accepted = true;\n    else e.Accepted = false;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-163")])]),e._v(" "),a("p",[e._v("and let your event handler decide whether to include that object or not.")]),e._v(" "),a("p",[e._v("So you can see the event handler takes in a FilterEventArgs. Inside of that EventArgs is an item,\n                        which is the data-bound object it's evaluating, and you're expected to return a Boolean through the\n                        Accepted property of the EventArg. So here I'm just inspecting, is the State equal to Alaska? If so,\n                        I set Accepted to true and it will be presented, otherwise, I set it to false.\n                    ")]),e._v(" "),a("p",[e._v("So I can go ahead and run this, expand so we can see our states a little better, hit the filter, and\n                        now we see only Alaska.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(506)}}),e._v(" "),a("figcaption",[e._v("Fig 07-164")])]),e._v(" "),a("p",[e._v("Now, of course, the way this is wired up right now, we would be re-subscribing each time I click on\n                        the button, so you'd want to structure that a little bit differently and do it one time as the view\n                        initializes. I just wanted to keep it all local here for demo purposes.\n                    ")]),e._v(" "),a("p",[e._v(" Now, again, if you go through the CollectionView, there's a little bit different way to get it\n                        hooked up here\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnFilter(object sender, RoutedEventArgs e)\n{\n    var customerViewSource = FindResource("customerViewSource") as CollectionViewSource;\n    //customerViewSource.Filter += customerViewSource_Filter;\n\n    ICollectionView view = customerViewSource.View as ICollectionView;\n    view.Filter = (item) =>\n        {\n            Customer c = item as Customer;\n            return c.State == "AZ" ? true : false;\n        };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-165")])]),e._v(" "),a("p",[e._v("So we could get to our CollectionViewSource and get to its underlying ICollectionView.")]),e._v(" "),a("p",[e._v("And then, instead of the event-based model, which I've always kind of hated events where you're\n                        expected to set properties on the EventArgs to make things happen by the caller. It kind of violates\n                        the fire-and-forget notion of events, so I'm not a big fan of this event-based way of doing it.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('void customerViewSource_Filter(object sender, FilterEventArgs e)\n{\n    Customer c = e.Item as Customer;\n    if (c.State == "AK") e.Accepted = true;\n    else e.Accepted = false;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-166")])]),e._v(" "),a("p",[e._v("The ICollectionView way is a little bit more explicit. What you set is a Filter property on the\n                        view.")]),e._v(" "),a("p",[e._v("The Filter property is set to a delegate type that's called Predicate. Predicate takes in an\n                        object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("view.Filter =  (item) =>")])]),e._v(" "),a("figcaption",[e._v("Fig 07-167")])]),e._v(" "),a("p",[e._v("and returns a Boolean.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('return c.State == "AZ" ? true : false;')])]),e._v(" "),a("figcaption",[e._v("Fig 07-168")])]),e._v(" "),a("p",[e._v("And basically, the Filter Predicate will be evaluated once for each object in the collection any time\n                        you set the Filter property or you change the underlying collection. So this is just a little bit\n                        more explicit that you pass in an item and you return a Boolean to say yes or no whether you should\n                        include it.\n                    ")]),e._v(" "),a("p",[e._v("In this case, I'm doing Arizona instead of Alaska.")]),e._v(" "),a("p",[e._v("So with that hooked up, I can run, and we'll see the exact same behavior, just for a different state,\n                        click on Filter, and now we just have the two Arizona customers.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(507)}}),e._v(" "),a("figcaption",[e._v("Fig 07-169")])]),e._v(" "),a("p",[e._v("Lastly, through the CollectionViewSource you can do grouping. So I'll add another button in my UI\n                        here to Group objects:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Group"\n    HorizontalAlignment="Left"\n    Margin="170,3,0,0"\n    VerticalAlignment="Top"\n    Width="75"\n    Click="OnGroup" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-170")])]),e._v(" "),a("p",[e._v("and I'll drop into the code-behind and add a handler for that OnGroup method.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnGroup(object sender, RoutedEventArgs e)\n{\n    var customerViewSource = FindResource("customerViewSource")\n        as CollectionViewSource;\n    customerViewSource.GroupDescriptions.Add(new PropertyGroupDescription("State"));\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-171")])]),e._v(" "),a("p",[e._v("Similar thing, I need to get a reference to my CollectionViewSource and it exposes a\n                        GroupDescriptions property. Now this one I'm not going to show, but there is a way to go down\n                        through the ICollectionView and it has a GroupDescriptions property as well.\n                    ")]),e._v(" "),a("p",[e._v("Here we just add a new PropertyGroupDescription, tell it what property it's based on, and it's going\n                        to start grouping based on that property. If we go ahead and run with that, click on Group, now we\n                        can see the groupings of states over on the right.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(508)}}),e._v(" "),a("figcaption",[e._v("Fig 07-172")])]),e._v(" "),a("p",[e._v("Now just having them grouped like that may not be enough visual indication, so the DataGrid and\n                        ListView controls in WPF support styling based on that group. So I can go back to my XAML here, go\n                        up to my DataGrid, and add a property called GroupStyle to the DataGrid, setting it to a GroupStyle\n                        instance:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid.GroupStyle>\n    <GroupStyle>\n        <GroupStyle.HeaderTemplate>\n            <DataTemplate>\n                <TextBlock Text="{Binding Name}" />\n            </DataTemplate>\n        </GroupStyle.HeaderTemplate>\n    </GroupStyle>\n</DataGrid.GroupStyle>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-173")])]),e._v(" "),a("p",[e._v("and the GroupStyle can have various things in it, but one of the things it has is a HeaderTemplate.\n                        That's just a DataTemplate that you can put whatever you want in it.\n                    ")]),e._v(" "),a("p",[e._v("Now the DataContext for this is not going to be a RowObject, it's actually going to be the Group\n                        itself, which will have its Name property set based on the Group that it's rendering.\n                    ")]),e._v(" "),a("p",[e._v("So the binding is generally going to be Name here, but with that in place we can go ahead and run\n                        again:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(509)}}),e._v(" "),a("figcaption",[e._v("Fig 07-174")])]),e._v(" "),a("p",[e._v("click on Group, and now we see it puts these bands in here in between the groups and renders out our\n                        GroupStyleTemplate.\n                    ")]),e._v(" "),a("p",[e._v("Obviously, you could put some better visual structure to that to make it prettier, but that's how you\n                        deal with sorting, filtering, and grouping using the CollectionViewSource.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Master-Details with CollectionViewSources")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-013",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\before\\MasterDetails\\MasterDetails.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-013"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex08-014",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 8\\after\\MasterDetails\\MasterDetails.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex08-014"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("The last I want to show here with respect to CollectionViewSources is how you can use it to drive a\n                        Master-Details presentation of related collections and objects. My starting point here is a basic\n                        WPF project.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(510)}}),e._v(" "),a("figcaption",[e._v("Fig 07-175")])]),e._v(" "),a("p",[e._v("The only thing going on ahead of time is some data access code in the code-behind of the window\n                        populating a Customers property that we're going to be data binding to\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindow()\n{\n    InitializeComponent();\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        Customers = new ObservableCollection<Customer>(context.Customers.Include("Orders").Include("Orders.OrderItems").Include("Orders.OrderItems.Product"));\n    }\n}\n\npublic ObservableCollection<Customer> Customers\n{\n    get { return (ObservableCollection<Customer>)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}\n\npublic static readonly DependencyProperty CustomersProperty =\n    DependencyProperty.Register("Customers", typeof(ObservableCollection<Customer>), typeof(MainWindow), new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 07-176")])]),e._v(" "),a("p",[e._v("When I populate Customers, notice I'm also drilling down and getting the related Orders, the related\n                        OrderItems for the Orders, and the related Product for the OrderItem using Entity Framework.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('context.Customers.Include("Orders").Include("Orders.OrderItems").Include("Orders.OrderItems.Product)')])]),e._v(" "),a("figcaption",[e._v("Fig 07-177")])]),e._v(" "),a("p",[e._v("I can go into the designer and the Data Sources Window, and I've already added Data Sources for our\n                        Entity objects we're going to be working with here.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(511)}}),e._v(" "),a("figcaption",[e._v("Fig 07-178")])]),e._v(" "),a("p",[e._v("As we've seen in a previous module, I can start at the root level with Customer, drag-and-drop, and\n                        generate a grid.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(512)}}),e._v(" "),a("figcaption",[e._v("Fig 07-179")])]),e._v(" "),a("p",[e._v("I'm going to resize that grid to fit towards the top here. Now, for the related Orders and\n                        OrderItems, it might be tempting to drag out from this level:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(513)}}),e._v(" "),a("figcaption",[e._v("Fig 07-180")])]),e._v(" "),a("p",[e._v("but if you do you're generating a DataGrid that's bound to an independent collection of orders or\n                        OrderItems.\n                    ")]),e._v(" "),a("p",[e._v("What you want to do is drill down to the property on a Customer that is the Orders collection related\n                        to that customer.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(514)}}),e._v(" "),a("figcaption",[e._v("Fig 07-181")])]),e._v(" "),a("p",[e._v("Do your drag-and-drop from there, and the designer will do the right thing, which we'll show the code\n                        for in a moment, to generate a different CollectionViewSource, but to tie that CollectionViewSource\n                        to the parent CollectionViewSource:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(515)}}),e._v(" "),a("figcaption",[e._v("Fig 07-182")])]),e._v(" "),a("p",[e._v("Likewise, I can drill down another level to OrderItems:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(516)}}),e._v(" "),a("figcaption",[e._v("Fig 07-183")])]),e._v(" "),a("p",[e._v("drag that out, and have that related to the parent Orders collection. And then we could go one level\n                        down to the related Product, switch that to use the Details view:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(517)}}),e._v(" "),a("figcaption",[e._v("Fig 07-184")])]),e._v(" "),a("p",[e._v("and generate a little data form for the current product:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(518)}}),e._v(" "),a("figcaption",[e._v("Fig 07-185")])]),e._v(" "),a("p",[e._v("and I won't worry about the fact that it's being clipped off there.")]),e._v(" "),a("p",[e._v("With that code in place, it also generated the Loaded event handler and all I've got to do is go set\n                        the Source property for the root customerViewSource to my Customers collection that I populated on\n                        construction.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' private void Window_Loaded(object sender, RoutedEventArgs e)\n        {\n            System.Windows.Data.CollectionViewSource customerViewSource = ((System.Windows.Data.CollectionViewSource)(this.FindResource("customerViewSource")));\n            // Load data by setting the CollectionViewSource.Source property:\n            customerViewSource.Source = Customers;\n        }')])]),e._v(" "),a("figcaption",[e._v("Fig 07-186")])]),e._v(" "),a("p",[e._v("So with that in place, I can run, and notice that we have the, not very well laid out, but we have\n                        customers up above. Whatever customer I select, we're seeing the orders for that customer in the\n                        next grid down. Whatever order I select, I'm seeing the order details, and whatever order detail I\n                        select, I'm seeing the related product.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(519)}}),e._v(" "),a("figcaption",[e._v("Fig 07-187")])]),e._v(" "),a("p",[e._v("So a typical chained Master-Details kind of setup, all in seconds with drag-and-drop. Now let's look\n                        at the XAML that it generated, because that's where all the action is. And the magic key really has\n                        to do with these CollectionViewSources.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                    d:DesignSource="{d:DesignInstance {x:Type Data:Customer}, CreateList=True}"/>\n    <CollectionViewSource x:Key="customerOrdersViewSource"\n                    Source="{Binding Orders, Source={StaticResource customerViewSource}}"/>\n    <CollectionViewSource x:Key="customerOrdersOrderItemsViewSource"\n                    Source="{Binding OrderItems, Source={StaticResource customerOrdersViewSource}}"/>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-188")])]),e._v(" "),a("p",[e._v("The first one was generated from the drag-and-drop of the CustomerEntityType, and we've talked\n                        through that before, that it sets it up, says it going to be dealing with Customer, and that's the\n                        one that we're populating from the code-behind at runtime.\n                    ")]),e._v(" "),a("p",[e._v("Where the Master-Details happens here is, notice the Source of the second one it generated for\n                        Orders. Its set to a Binding whose Source is explicitly set to be the CollectionViewSource up above\n                        for the Customers. That Customers collection is going to have a current item in it, as we've talked\n                        about before, and that current item is going to have an Orders property. So the path on this Binding\n                        is to the Orders property of the current item in that collection.\n                    ")]),e._v(" "),a("p",[e._v("Likewise, for the OrderItemsViewSource it's pointing to the OrdersViewSource into the OrderItems\n                        property on the current item in that OrdersViewSource. Notice there's not a separate\n                        CollectionViewSource for the Product.\n                    ")]),e._v(" "),a("p",[e._v("When I generated the grid containing the data entry fields for the product, it set the DataContext\n                        for that grid to the OrderItemsViewSource, which again, is going to have a current item that's an\n                        OrderItem. And then it generated the bindings on the individual fields to use the property\n                        Product.Description, Product.HasOptions, and so on.\n                    ")]),e._v(" "),a("p",[e._v("So you can see through the currency that's managed by an ICollectionview, which a\n                        CollectionViewSource has under the covers, whenever the current item changes, if there's another\n                        CollectionViewSource that's bound to that collection in the current item, it can get to the\n                        properties of that current item and use that to drive a separate CollectionViewSource, and so on\n                        down the chain.\n                    ")])]),e._v(" "),a("div",{
staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("Okay, in this module we went through a lot about container controls and the dynamic generation of\n                        child controls based on data binding, as well as collection controls and how they really worked.\n                    ")]),e._v(" "),a("p",[e._v("So first we looked at ContentControls and ItemsControls and their pivotal role in the dynamic UI\n                        composition based on data binding. We saw that ContentControls render out ContentPresenters, and\n                        it's inside the ContentPresenter that the actual data-driven content, such as a DataTemplate, gets\n                        rendered.\n                    ")]),e._v(" "),a("p",[e._v("Likewise, in an ItemsControl, an ItemsControl will render out an ItemsPresenter, and that\n                        ItemsPresenter will be responsible for rendering out individual item containers. Inside those\n                        containers, eventually, are often ContentPresenters that show the content for an individual\n                        DataObject.\n                    ")]),e._v(" "),a("p",[e._v("Next, we reviewed ComboBoxes and ListBoxes, mainstays of data binding, and just made sure you were\n                        familiar with all the key properties associated with data binding, including ItemsSource,\n                        DisplayMemberPath, SelectedValuePath, SelectedValue, SelectedItem, and so on.\n                    ")]),e._v(" "),a("p",[e._v("Next, we took a look at TabControls and you saw that they can be data-driven as well, especially for\n                        dynamic child view containment scenarios. They can point to a collection of ViewModels or data\n                        objects that are going to be rendered through a DataTemplate, and the views that get rendered inside\n                        the tabs can be driven by DataTemplates, as well as a DataTemplate to render the header in the top\n                        part of the tab that shows at the top of a TabControl by default.\n                    ")]),e._v(" "),a("p",[e._v("We drilled into DataGrids and got familiar with the key properties associated with data bindings and\n                        the things you could do there. We covered the fact that DataGrids are really just an ItemsControl\n                        that's going to render out rows for each of the items in the data-bound collection. DataGrids are\n                        defined through columns, but the columns aren't really part of the DataGrid at runtime, as I\n                        emphasized.\n                    ")]),e._v(" "),a("p",[e._v("Column definitions result in rows and cells being rendered. So the bindings you specify at a column\n                        level, really result in cell-level container bindings at runtime. As a result, certain kinds of\n                        bindings won't work in columns, specifically RelativeSource bindings and ElementName bindings.\n                    ")]),e._v(" "),a("p",[e._v("For those, you can use a CellTemplate. CellTemplate gives you full control of exactly what's going in\n                        to a cell, you define a DataTemplate that contains the content you want to see in that cell, and\n                        that DataTemplate can contain whatever bindings relative to the DataContext of the row that you\n                        want.\n                    ")]),e._v(" "),a("p",[e._v("So if the row is a customer, you can point to properties on the customer and any normal data binding\n                        should work there, including RelativeSource bindings and ElementName bindings because the cells are\n                        part of the visual tree, the columns are not.\n                    ")]),e._v(" "),a("p",[e._v("We also looked at the fact that DataGrid RowDetailTemplates allow you to provide a child panel that\n                        shows up associated with each row that you can populate with the DataTemplate with whatever\n                        structure you want in there.\n                    ")]),e._v(" "),a("p",[e._v("It could contain an entire data form, it could contain a child DataGrid, anything you want to put in\n                        there, the DataContext for that RowDetailTemplate will be the data-bound row object, such as a\n                        customer, and you can use any properties hanging off that customer to render out child details in\n                        that panel.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we finished off with CollectionViewSource and you saw that it gives you a very nice,\n                        easy-to-use way to sort, filter, group, and do master-detail type setups when working with\n                        collections or multiple collections in your views.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("First Taste of MVVM")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h2",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Welcome back to the second module of WPF MVVM in Depth. In this module I want to give you a quick exposure or\n                        taste of how using MVVM changes some coding patterns for a simple input screen in WPF application that you may\n                        already be used to.\n                    ")]),e._v(" "),a("p",[e._v("I'll do this by stepping through three variants of the same simple application in demos.")]),e._v(" "),a("ul",[a("li",[e._v("The first will have no MVVM nor data binding in it.")]),e._v(" "),a("li",[e._v("The second will at least leverage data binding but have no MVVM.")]),e._v(" "),a("li",[e._v("The third will evolve into showing the same view with MVVM and a quick look at some of the communication\n                            between View and ViewModel that we'll get into in more detail later in the course. ")])]),e._v(" "),a("h2",[e._v("Async in MVVM")]),e._v(" "),a("p",[e._v("\n                        Before we jump into the demos for this module I want to touch quickly on the concept of async. More and more\n                        client applications need to deal with with Async and parallelism to provide a good user experience. No longer\n                        is it acceptable to just put a spinning cursor in the users face and make it stop responding to input every\n                        time the app goes and does some fairly long lasting thing like a service call, computation or query.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In .Net we now have task based async as a pattern for how to deal with these things. For MVVM this means that\n                        the ViewModel is often the initiator of calls that can take a long time in the big scheme of computation.\n                        Those calls should be made async to keep the UI responsive. As a result often the methods you expose on a\n                        client services layer should be async themselves because they will be calling async methods to get the real\n                        work done.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So you will see in all my demos that the client services expose async methods based on tasks for doing the\n                        data access for the demo. This is done so that the same repository interface exposed to the ViewModel could\n                        also be used even if the data access was done via service calls. All the nuances of how async works, why you\n                        use it, and how you use it go way beyond what I have time to cover in this course. These are the types of\n                        calls that should be made async to keep the UI responsive.\n                    ")]),e._v(" "),a("p",[e._v("For more info on async and await checkout Pause and Play with Await and the TPL Async course by Ian Griffiths\n                        from Pluralsight.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Simple View with No MVVM or Data Binding")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex02-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 2\\ZzaDashboard-NoDataBinding\\ZzaDashboard.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this first demo we're going to start with a very simple app that does not do any MVVM nor any data binding.\n                        First let's see it running so you can visualize what we're going to build up to:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(554)}}),e._v(" "),a("figcaption",[e._v("Fig 02-001")])]),e._v(" "),a("p",[e._v("This terribly unsophisticated app loads up some data at the beginning, puts it into a data entry form, we could\n                        then go in and edit any of those fields and click on Save to Save the changes back down to the database.\n                    ")]),e._v(" "),a("p",[e._v("Now let's talk about the structure of this app. The ZzaDashboard here is the WPF application project itself:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(555)}}),e._v(" "),a("figcaption",[e._v("Fig 02-002")])]),e._v(" "),a("p",[e._v("Now the Zza comes from the fact that the sample data that I'll be using throughout the course is based on a\n                        pizza ordering domain. So there is a database with tables for Customers, Products, and Orders etc. There is a\n                        Data Layer (Zza.Data) which is pre-populated using Entity Framework DbContext and a set of Model objects\n                        including Customers, Products, and Orders etc.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In addition to the raw data access in Zza.Data in the Client Services layer you can see we have two\n                        repositories - a Customers repository and an Orders repository:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(556)}}),e._v(" "),a("figcaption",[e._v("Fig 02-003")])]),e._v(" "),a("p",[e._v("And if you look at the methods on these repositories they return Tasks for their invocation so these are setup\n                        for doing the Task based Async of .Net using the async and await keywords.\n                    ")]),e._v(" "),a("p",[e._v("They are also Interface based in the vein of testability of MVVM. The idea is that your ViewModels should only\n                        depend on the interface of their dependencies and have a substitution path so that you can pass in mock\n                        objects that implement that same interface for unit testing purposes.\n                    ")]),e._v(" "),a("p",[e._v("The implementation of these repositories is basic CRUD data access through Entity Framework")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ZzaDashboard.Services\n{\n    public class CustomersRepository : ICustomersRepository\n    {\n        ZzaDbContext _context = new ZzaDbContext();\n\n        public Task<List<Customer>> GetCustomersAsync()\n        {\n            return _context.Customers.ToListAsync();\n        }\n\n        public Task<Customer> GetCustomerAsync(Guid id)\n        {\n            return _context.Customers.FirstOrDefaultAsync(c => c.Id == id);\n        }\n\n        public async Task<Customer> AddCustomerAsync(Customer customer)\n        {\n            _context.Customers.Add(customer);\n            await _context.SaveChangesAsync();\n            return customer;\n        }")])]),e._v(" "),a("figcaption",[e._v("Fig 02-004")])]),e._v(" "),a("p",[e._v("We have a DbContext, we're doing queries with the ToListAsync to get the Task based Async, we're doing adds and\n                        SaveChanges\n                    ")]),e._v(" "),a("p",[e._v("The key thing is that we have repositories that expose a Task based interface for the ViewModel consumption.\n                    ")]),e._v(" "),a("p",[e._v("Now in terms of the functional code for the very simple screen that you saw. We have a MainWindow that has an\n                        instance of a User Control in it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:Customers="clr-namespace:ZzaDashboard.Customers"\n        x:Class="ZzaDashboard.MainWindow"\n        Title="MainWindow"\n        Height="350"\n        Width="525">\n    <Grid>\n\n        <Customers:CustomerEditView CustomerId="11DA4696-CEA3-4A6D-8E83-013F1C479618" HorizontalAlignment="Left"\n                                    Margin="42,35,0,0"\n                                    VerticalAlignment="Top" />\n\n    </Grid>\n</Window>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-005")])]),e._v(" "),a("p",[e._v("For demo purposes here we're hard coding up a CustomerId that we're loading from the database. Obviously in a\n                        real app you'd have to have some navigation or selection mechanism to pass that as context into the View.\n                        We'll see how that works later with MVVM in other demos.\n                    ")]),e._v(" "),a("p",[e._v("The View implementation is down in this Customers folder:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(557)}}),e._v(" "),a("figcaption",[e._v("Fig 02-006")])]),e._v(" "),a("p",[e._v("It's really just a simple user control with some layout using a grid:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid x:Name="grid1"\n      HorizontalAlignment="Left"\n      Margin="10,10,0,0"\n      VerticalAlignment="Top">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="Auto" />\n    </Grid.ColumnDefinitions>\n    <Grid.RowDefinitions>\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n    </Grid.RowDefinitions>\n    <Label Content="First Name:"\n           Grid.Column="0"\n           HorizontalAlignment="Left"\n           Margin="3"\n           Grid.Row="0"\n           VerticalAlignment="Center" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-007")])]),e._v(" "),a("p",[e._v("And then some inputs that have Labels and TextBoxes and you can see each of the inputs has a name to it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="First Name:"\n       Grid.Column="0"\n       HorizontalAlignment="Left"\n       Margin="3"\n       Grid.Row="0"\n       VerticalAlignment="Center" />\n<TextBox x:Name="firstNameTextBox"\n       Grid.Column="1"\n       HorizontalAlignment="Left"\n       Height="23"\n       Margin="3"\n       Grid.Row="0"\n       VerticalAlignment="Center"\n       Width="120" />\n<Label Content="Last Name:"\n       Grid.Column="0"\n       HorizontalAlignment="Left"\n       Margin="3"\n       Grid.Row="1"\n       VerticalAlignment="Center" />\n<TextBox x:Name="lastNameTextBox"\n       Grid.Column="1"\n       HorizontalAlignment="Left"\n       Height="23"\n       Margin="3"\n       Grid.Row="1"\n       VerticalAlignment="Center"\n       Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-008")])]),e._v(" "),a("p",[e._v("Likewise, our Save Button down at the bottom has a Click handler, so it's traditional WPF User Control\n                        development where you have to put all the support in the code-behind of the User Control. Here you can see we\n                        are newing up an instance of the repository:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public partial class CustomerEditView : UserControl\n{\n    private ICustomersRepository _repository = new CustomersRepository();\n    private Customer _customer = null;")])]),e._v(" "),a("figcaption",[e._v("Fig 02-009")])]),e._v(" "),a("p",[e._v("And when the Loaded event fires we go out and get our Customer asynchronously:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private async void OnLoaded(object sender, RoutedEventArgs e)\n{\n    if (DesignerProperties.GetIsInDesignMode(this)) return;\n\n    _customer = await _repository.GetCustomerAsync(CustomerId);\n    if (_customer == null) return;\n    firstNameTextBox.Text = _customer.FirstName;\n    lastNameTextBox.Text = _customer.LastName;\n    phoneTextBox.Text = _customer.Phone;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-010")])]),e._v(" "),a("p",[e._v("Notice the async and await keywords here. Because this returns a Task you can await on that Task and the\n                        execution of this method will be sequential from the code's declaration perspective but this method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("_customer = await _repository.GetCustomerAsync(CustomerId);")])]),e._v(" "),a("figcaption",[e._v("Fig 02-011")])]),e._v(" "),a("p",[e._v("will go and potentially execute on a separate thread and then return the value back on to the UI thread since\n                        that's where it was called from. So it makes it so all the execution within the context of the View or the\n                        ViewModel stays on the UI thread.\n                    ")]),e._v(" "),a("p",[e._v("Now, if you don't use data binding, you can see it gets very mundane. You have to go and grab discrete values\n                        out of properties on your model objects and stuff them into properties on individual elements that you're\n                        referencing by name here in the code-behind of your view:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private async void OnSave(object sender, RoutedEventArgs e)\n{\n    // TODO: Validate input... call business rules... etc...\n    _customer.FirstName = firstNameTextBox.Text;\n    _customer.LastName = lastNameTextBox.Text;\n    _customer.Phone = phoneTextBox.Text;\n    await _repository.UpdateCustomerAsync(_customer);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-012")])]),e._v(" "),a("p",[e._v("And then when you go to save you have to pull those discrete values out, put them back on the model object and\n                        then you can go ahead an try to persist with that model object or call some business rules, do validation,\n                        whatever's appropriate. So you get this kind of grundgy push pull code that you have to do without data\n                        binding. In the next demo we'll quickly see how this evolves by using data binding.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Simple View with Data Binding")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex02-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 2\\ZzaDashboard-DataBindingNoMVVM\\ZzaDashboard.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this next variant of the demo we have the same functionality but now we're moving in to actually using data\n                        binding to clean up the code some. So we have the same setup where we have the MainWindow with an instance of\n                        our user control here CustomerEditView inside of it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Customers:CustomerEditView CustomerId="11DA4696-CEA3-4A6D-8E83-013F1C479618"\n    HorizontalAlignment="Left"\n    Margin="42,35,0,0"\n    VerticalAlignment="Top" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-013")])]),e._v(" "),a("p",[e._v("And the CustomerEditView is defined down in the Customers folder still. The main difference here is that notice\n                        now the individual input controls are using Two-way databinding where they bind to their DataContext and\n                        expose that DataContext to expose a LastName, FirstName and Phone property. The Save button is just using a\n                        click handler to get to an OnSave() method in the code-behind.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So now if we go and look what this does to the code-behind we can see it cleans things up considerably:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public static readonly DependencyProperty CustomerIdProperty =\n    DependencyProperty.Register("CustomerId", typeof(Guid),\n    typeof(CustomerEditView), new PropertyMetadata(Guid.Empty));\n\nprivate async void OnLoaded(object sender, RoutedEventArgs e)\n{\n    if (DesignerProperties.GetIsInDesignMode(this)) return;\n\n    _customer = await _repository.GetCustomerAsync(CustomerId);\n    DataContext = _customer;\n}\n\nprivate async void OnSave(object sender, RoutedEventArgs e)\n{\n    await _repository.UpdateCustomerAsync(_customer);\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-014")])]),e._v(" "),a("p",[e._v("\n                        In that in the OnLoaded method we still have to go out and load our model object through our repository layer\n                        then we can just push that into the DataContext:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("DataContext = _customer;")])]),e._v(" "),a("figcaption",[e._v("Fig 02-015")])]),e._v(" "),a("p",[e._v("\n                        And the individual bindings in the View then have two-way data-binding against the properties exposed on that\n                        Model object. Because they are Two-way that means any changes made by the user get written directly into that\n                        object. So, when it is time to Save we don’t have to gather any values out of the controls themselves (as we\n                        did in the previous example) because the data has already been transferred into that bound model object. So we\n                        can just go pass it to our repository layer to get it saved:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("await _repository.UpdateCustomerAsync(_customer);")])]),e._v(" "),a("figcaption",[e._v("Fig 02-016")])]),e._v(" "),a("p",[e._v("So that cleans things up considerably. Then the next logical step is let's get all this junk out of the\n                        code-behind of the view and let it focus just on the structure and move the data manipulation and interaction\n                        logic into this separate thing we call a ViewModel.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Simple View Transformed to MVVM")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex02-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 2\\ZzaDashboard-SimpleMVVM\\ZzaDashboard.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now that leads us to this version of our simple little demo. We want to take this thing and turn it into an\n                        MVVM application with our single View that we're using. So that means we need to break up our View into a View\n                        and ViewModel instead of putting code in a code-behind we put all the interaction logic and data manipulation\n                        into our ViewModel. Let's step through it here:\n                    ")]),e._v(" "),a("p",[e._v("\n                        Firstly, in MainWindow.xaml we are still just placing statically an instance of our View (CustomerEditView)\n                        into the container.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Grid>\n        <Customers:CustomerEditView HorizontalAlignment="Left"\n                                    Margin="42,35,0,0"\n                                    VerticalAlignment="Top" />\n    </Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-017")])]),e._v(" "),a("p",[e._v("Notice the CustomerId property has gone from the MainWindow.xaml file because for the purposes of this demo we\n                        have to move it down a layer since all the data manipulation will be at the ViewModel level. Next we can go and\n                        look at our View and see whats changed there from the previous demo.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:local="clr-namespace:ZzaDashboard.Customers"\n             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"\n             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"\n             x:Class="ZzaDashboard.Customers.CustomerEditView"\n             mc:Ignorable="d"\n             d:DesignHeight="300"\n             d:DesignWidth="300">\n    <UserControl.DataContext>\n        <local:CustomerEditViewModel CustomerId="11DA4696-CEA3-4A6D-8E83-013F1C479618" />\n    </UserControl.DataContext>\n    <i:Interaction.Triggers>\n        <i:EventTrigger EventName="Loaded">\n            <ei:CallMethodAction TargetObject="{Binding}"\n                                 MethodName="LoadCustomer" />\n        </i:EventTrigger>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-018")])]),e._v(" "),a("p",[e._v("\n                        First off, if you noticed before (in CustomerEditView.xaml) there had been a Loaded event wired up here on the\n                        UserControl root element that has now gone. Probably first and foremost in terms of MVVM you can see we're\n                        newing up an instance of our CustomerEditViewModel statically here in the XAML parsing process:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.DataContext>\n    <local:CustomerEditViewModel CustomerId="11DA4696-CEA3-4A6D-8E83-013F1C479618" />\n</UserControl.DataContext>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-019")])]),e._v(" "),a("p",[e._v("And the instance that's created there will then be set as the value on the DataContext of the View satisfying\n                        the basic equation of MVVM. So this is where we're statically setting our CustomerId for demo purposes in this\n                        case but again we'll get into ways to pass that dynamically later on.\n                    ")]),e._v(" "),a("p",[e._v("The individual data bindings are not much different than they were before but instead of just referencing for\n                        example FirstName and LastName they reference Customer.FirstName so we are expecting that our ViewModel, which\n                        is the overall DataContext for this View now, is exposing a single property called Customer. That Customer is\n                        a reference to a Model object so we're exposing a Model object through our ViewModel allowing the bindings to\n                        dot down through it to it's individual properties to grab the values in a nice declarative fashion. So that\n                        makes it very clear when your'e reading this XAML as to exactly what this TextBox is bound against on the\n                        ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("Next we drop down to our Save button and we can see the button no longer performs click handling into the code\n                        behind. Instead it uses a Command object. So the Command property is bound to another property exposed by our\n                        ViewModel called SaveCommand. We expect that to be an ICommand object (a standard interface in .Net for\n                        Commands) and it will be invoked whenever the button is clicked. It can also be used to enable and disable the\n                        button.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button x:Name="saveButton"\n    Content="Save"\n    Width="75"\n    Command="{Binding SaveCommand}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-020")])]),e._v(" "),a("p",[e._v("At the top of the CustomerEditView.xaml file we define a Behaviour:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <i:Interaction.Triggers>\n    <i:EventTrigger EventName="Loaded">\n        <ei:CallMethodAction TargetObject="{Binding}"\n                             MethodName="LoadCustomer" />\n    </i:EventTrigger>\n</i:Interaction.Triggers>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-021")])]),e._v(" "),a("p",[e._v("It uses a behaviour from the Blend SDK called CallMethodAction which is able to call a method on some object.\n                        So we specify what object do we want to invoke something on. Well specifically what we're trying to do here is\n                        we still have that initialization that has to happen on Load of the View. So we want to handle the Loaded\n                        event in a declarative fashion here and dispatch it as a method call invocation against a method named\n                        LoadCustomer which is on our ViewModel which is our DataContext so a binding specified like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('"{Binding}"')])]),e._v(" "),a("figcaption",[e._v("Fig 02-022")])]),e._v(" "),a("p",[e._v("basically gets you a reference to the whole DataContext object or ViewModel. So this little chunk of code in a\n                        nutshell:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <i:Interaction.Triggers>\n    <i:EventTrigger EventName="Loaded">\n        <ei:CallMethodAction TargetObject="{Binding}"\n                             MethodName="LoadCustomer" />\n    </i:EventTrigger>\n</i:Interaction.Triggers>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-023")])]),e._v(" "),a("p",[e._v("Says go call the LoadCustomer method on my ViewModel when the Loaded event of the View fires. We'll see how to\n                        get this all wired up through Blend quickly in a later module.\n                    ")]),e._v(" "),a("p",[e._v("\n                        That leads us to our ViewModel - the focus of our MVVM world and first of it's main job is to expose data so\n                        the View can present it, and that would be our Customer data. So down here we see a Customer property of type\n                        Customer:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("public Customer Customer\n{\n    get { return _customer; }\n    set\n    {\n        if (value != _customer)\n        {")])]),e._v(" "),a("figcaption",[e._v("Fig 02-024")])]),e._v(" "),a("p",[e._v("\n                        We also see that we are implementing the INotifyPropertyChanged event because we are not going to set that\n                        Customer until our LoadCustomer method (this is being called from the Loaded event) gets invoked. By that\n                        point construction is already done, the XAML parsing is done, all the Bindings have been evaluated so we need\n                        to be able to signal to the View that it should refresh its data binding. That happens by firing the\n                        PropertyChanged event which is part of the INotifyPropertyChanged interface:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public Customer Customer\n{\n    get { return _customer; }\n    set\n    {\n        if (value != _customer)\n        {\n            _customer = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Customer"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-025")])]),e._v(" "),a("p",[e._v("Next we can see our SaveCommand property that we exposed publicly and bound to:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public Guid CustomerId { get; set; }\npublic ICommand SaveCommand { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 02-026")])]),e._v(" "),a("p",[e._v("That gets hooked up in the Constructor which points it to the actual handling method itself which is the OnSave\n                        handler:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public CustomerEditViewModel()\n{\n    SaveCommand = new RelayCommand(OnSave);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-027")])]),e._v(" "),a("p",[e._v("From there you can see that both for the LoadCustomer() and the OnSave() method we're doing task based async\n                        again. So we're just wrapping our repository (our dependency) and we're invoking it with an await in front of\n                        it so that when it completes it's asynchronous execution we come back onto the UI thread and set the Customer\n                        property of our ViewModel with the result:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public async void LoadCustomer()\n{\n    Customer = await _repository.GetCustomerAsync(CustomerId);\n}\n\nprivate async void OnSave()\n{\n    Customer = await _repository.UpdateCustomerAsync(Customer);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-028")])]),e._v(" "),a("p",[e._v("\n                        So that's a very simple MVVM in a nutshell example of a data entry form. Again through the demos in the rest\n                        of the course we'll get into more complicated Views, nested hierarchies of Views, navigation between Views and\n                        so on, and how all those come together through MVVM\n                    ")]),e._v(" "),a("h2",[e._v("Summary")]),e._v(" "),a("p",[e._v("\n                        Data binding really lays the groundwork for MVVM. It gets the hookup of data declaratively expressed through\n                        XAML and makes it so there is no code in the code behind that has to directly reference the UI elements.\n                    ")]),e._v(" "),a("p",[e._v("It allows you to move the data management interaction logic into the ViewModel. You also saw that for static\n                        containment scenarios like this View-First construction (where the ViewModel is constructed in the XAML\n                        through the mark-up) works out fine when you have static child Views inside a container.\n                    ")]),e._v(" "),a("p",[e._v("Finally, you got a quick preview of several forms of communication between View and ViewModel that we'll dive\n                        into more details on in a later module.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In the next module, we'll take a look at a number of things that are just features of the WPF platform, such\n                        as data binding and XAML parsing. But we'll look specifically at how those features support and enable the\n                        MVVM pattern. So even if your an experienced WPF developer and know how to use those features you may want to\n                        check out that module to put them into the context of MVVM.\n                    ")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("WPF Data Binding in Depth")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-00-course-contents","active-class":"active"}},[n("a",[e._v("WPF Data Binding in Depth")])]),e._v(" "),n("p",[e._v("Date Completed: 01/09/2016")]),e._v(" "),n("p",[e._v("Rating: *****")]),e._v(" "),n("p",[e._v("Review not available at this time.")]),e._v(" "),n("h3",[e._v("WPF MVVM in Depth")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-00-course-contents","active-class":"active"}},[n("a",[e._v("WPF MVVM in Depth")])]),e._v(" "),n("p",[e._v("Date Completed: 01/08/2016")]),e._v(" "),n("p",[e._v("Rating: *****")]),e._v(" "),n("p",[e._v("This is a great course which, as the name suggests, covers the basics of the Model View ViewModel pattern in\n                    the context of WPF.")])],1)])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("WPF")])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Design of Vuex Modules")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Image Module Design")]),e._v(" "),a("p",[e._v("I think that we've got a good handle on navigation and authentication inside of our app now.\n                        Now that those systems are under wraps we are going to move forward and think about how we\n                        are going to attempt to retrieve a list of images from the Imgur API and handle the upload\n                        process.")]),e._v(" "),a("p",[e._v("We will take care of fetching images first. We will use the Imgur sites upload form to upload\n                        some initial images. We should then be able to come back over to our application and see\n                        those images appear on the ImageList component.")]),e._v(" "),a("p",[e._v("Let's discuss the initial design of our Images module. So remember we've worked on one Vuex\n                        module so far - the Auth module. Inside that module we defined:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("state")]),e._v(" "),a("li",[e._v("getters")]),e._v(" "),a("li",[e._v("actions")]),e._v(" "),a("li",[e._v("mutations")])]),e._v(" "),a("p",[e._v("We are going to add a completely separate module inside of our Vuex modules folder which is\n                        going to be related to working with the images resource. Handling fetching them - like the\n                        list of images we have as a user and also work around uploading images as well.\n                    ")]),e._v(" "),a("p",[e._v("So let's take a look at a diagram that's going to walk us through the design of this module. ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(204)}}),e._v(" "),a("figcaption",[e._v("Fig 07-001")])]),e._v(" "),a("p",[e._v("The first thing we are going to think about is the state of this module. Remember the state\n                        is kind of like the very raw data that we're going to be working with inside this module.\n                        For this particular case when we reach out to the Imgur API to get a list of images that\n                        have been uploaded by our present user the Imgur API is going to send back a big array of\n                        objects to us - each object inside that array is going to represent one uploaded image - so\n                        in essence it's going to be very similar to the YouTube API we worked with earlier in the\n                        course.")]),e._v(" "),a("p",[e._v("So when we start thinking about our state design it's going to make a lot of sense to just\n                        have a single property called images and this will point to an array that\n                        contains a list of all the images that we've fetched from the Imgur API. Initially the array\n                        will be empty:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(205)}}),e._v(" "),a("figcaption",[e._v("Fig 07-002")])]),e._v(" "),a("p",[e._v("So for the getters all we're doing is showing a list of all of the images that the user has\n                        uploaded on screen. We are not performing any filtering or advanced computation or anything\n                        like that. We will have just one getter called allImages. If someone calls this getter we\n                        just going return back to them a list of all the images inside inside of our state ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(206)}}),e._v(" "),a("figcaption",[e._v("Fig 07-003")])]),e._v(" "),a("p",[e._v("In the case of Actions, our application really has two primary purposes to it. On the one hand\n                        we should have the ability to fetch a list of all of our images. Secondly we should have the\n                        ability to upload an image because that's really the two big aspects of our application that\n                        we're trying to implement:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(207)}}),e._v(" "),a("figcaption",[e._v("Fig 07-004")])]),e._v(" "),a("p",[e._v("We are going to be in a similar situation here with uploadImage to what we had in the Auth\n                        module. In the Auth module we put together that login action - which didn't actually modify\n                        our state or call any mutations. So it's actually going be very similar in this case as well.\n                        Upload image is going to attempt to take an image or multiple images and upload them to the\n                        Imgur API. There's probably not a lot of stuff beyond that the upload image action really\n                        needs to do because whenever we upload an image - that's going to be on the upload form and\n                        the uploadImage action is going to have no reason to ever try to modify the\n                        state object.\n                    ")]),e._v(" "),a("p",[e._v("On the other hand we have fetchImages which without doubt is going to have to call a mutation\n                        to update the images piece of state. We will create a mutation called setImages that will be\n                        something very similar to the setToken mutation that we had in the Auth module: ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(208)}}),e._v(" "),a("figcaption",[e._v("Fig 07-005")])]),e._v(" "),a("p",[e._v("We'll say that after the fetchImages action makes a network request over to the Imgur API to\n                        get a list of all of our images it should call the setImages mutation and attempt to update\n                        the list of images stored inside of our state.\n                    ")]),e._v(" "),a("p",[e._v("The design of this module is going to be very similar to the Auth module we worked on earlier\n                        . So this will be a good opportunity to reinforce a lot of the stuff that we just learned.")]),e._v(" "),a("h3",[e._v("Module Implementation")]),e._v(" "),a("p",[e._v("In the modules directory create a new file called images.js and add the following boilerplate\n                        code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const state = {\n    images: []\n};\n\nconst getters = {\n    allImages: state => state.images\n};\n\nconst actions = {\n    fetchImages() {}\n};\n\nconst mutations = {\n    setImages: (state, images) => {\n        state.images = images;\n    }\n};\n")]),e._v(" "),a("figcaption",[e._v("Fig 07-006")])]),e._v(" "),a("p",[e._v("The allImages getter is a function that gets called with our state object and all we want to\n                        do is return the list of images from state.")]),e._v(" "),a("p",[e._v("The setImages mutation gets called with an array of image objects. We just take the\n                        entire array and update the value of images replacing what is already there. Remember that\n                        when this gets called we first have our current state object and then any optional arguments\n                        - in this case the array of images that comes back from the Imgur API. We take that array and\n                        assign it to state.images. As we said previously most of the mutations that we put together\n                        inside of a Vuex application are going to be very straightforward in nature because they are\n                        specifically designed to be very small, very discrete changes to our state object so it will\n                        be rare to do a lot of complicated stuff here. Instead we try to put any complicated business\n                        logic we have into an action object.\n                    ")]),e._v(" "),a("p",[e._v("With fetchImages action we just add the function stub. We will look at the functionality\n                        inside fetchImages in the next section.")]),e._v(" "),a("h3",[e._v("Fetch Images API Documentation")]),e._v(" "),a("p",[e._v("The purpose of the fetchImages action is to reach out to the Imgur API and retrieve any\n                        images that this user has ever uploaded. There are a couple of different considerations here\n                        . First off we have to think about where we are going to locate the code to make this actual\n                        API request. Secondly we have to think about how we actually fetch the images at all.")]),e._v(" "),a("p",[e._v("The Imgur API "),a("a",{attrs:{href:"apidocs.imgur.com"}},[e._v("documentation")]),e._v(" has a section on Account which\n                        lists all the different API endpoints that are tied to a users account. We are looking for\n                        Account Images which returns all the images that have been uploaded by the current user. To\n                        get the list of images we perform a GET request to https://api.imgur.com/3/account/me/images\n                        . What's very important to note here is that we have to send along a very specific header on\n                        the request as well. The Header has to include the access_token that we obtained when we went\n                        through the OAuth process in order to access the user's list of images.")]),e._v(" "),a("h3",[e._v("Fetching Images")]),e._v(" "),a("p",[e._v("In the imgur.js file located in the api directory:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import qs from 'qs';\n\nconst CLIENT_ID = 'c3feb8623a2803b';\nconst ROOT_URL = 'https://api.imgur.com';\n\nexport default {\n    login() {\n        const querystring = {\n            client_id: CLIENT_ID,\n            response_type: 'token'\n        };\n\n        window.location = `${ROOT_URL}/oauth2/authorize?${qs.stringify(querystring )}`;\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-007")])]),e._v(" "),a("p",[e._v("You'll recall that we created the default object that houses a couple of different functions\n                        related to working with the Imgur API. Add a new function under the login action:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("fetchImages() {\n    return axios.get(`${ROOT_URL}/3/account/me/images`)\n}")]),e._v(" "),a("figcaption",[e._v("Fig 07-008")])]),e._v(" "),a("p",[e._v("We also need to import the axios library:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import axios from 'axios';")]),e._v(" "),a("figcaption",[e._v("Fig 07-009")])]),e._v(" "),a("p",[e._v("Remember we use that library to make network requests off to arbitrary endpoints. ")]),e._v(" "),a("p",[e._v("The fetchImages function makes a get request using axios. We use string interpolation to\n                        concatenate our ROOT_URL with the remainder of the address for the Account Images endpoint.\n                    ")]),e._v(" "),a("p",[e._v("This will make the get request over to the Imgur API. However at this point we are not\n                        passing the required information in the Header of the request. First of all we will add a\n                        Header to an axios request and then after that we will look at how we get access to the\n                        actual access_token from the fetchImages action.")]),e._v(" "),a("p",[e._v("So the first argument to get request is the actual Url that we want to make the request to\n                        and then the second argument is going to be an object that can have a collection of\n                        different options that customize the request that we're making. One possible option we could\n                        pass in here is a headers object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("fetchImages(token) {\n        return axios.get(`${ROOT_URL}/3/account/me/images`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n    }")]),e._v(" "),a("figcaption",[e._v("Fig 07-010")])]),e._v(" "),a("p",[e._v("This is going to be a list of different headers that we're going to include along with the\n                        request. So we follow the specifications laid out in the documentation by adding a key of\n                        "),a("code",{staticClass:"prettyprint"},[e._v("Authorization")]),e._v(". The value that we specify is a template\n                        string - "),a("code",{staticClass:"prettyprint"},[e._v("`Bearer ${}`")]),e._v(". We want to add the access token\n                        between the curly braces so, for the moment, we make the assumption that when we\n                        call the fetchImages function from within our images module we can pass the access_token in\n                        as an argument. We will figure out how to get the access_token into that module shortly.\n                    ")]),e._v(" "),a("h3",[e._v("Communicating Across Modules")]),e._v(" "),a("p",[e._v("In the last section we put together our fetchImages function inside of imgur helper function.\n                        We want to call this function from the fetchImages action inside of our images module. We want\n                        to get our access token over to this function. Remember that you and I are working inside of\n                        the Images module:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(209)}}),e._v(" "),a("figcaption",[e._v("Fig 07-011.png")])]),e._v(" "),a("p",[e._v("However our token is saved inside the Auth module - which is a totally separate piece of\n                        state inside of our overall Vuex instance. So inside of images.js we import our api:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import api from '../../api/imgur';")]),e._v(" "),a("figcaption",[e._v("Fig 07-012")])]),e._v(" "),a("p",[e._v("Then inside of the fetchImages function we can use our api that we just imported to call "),a("code",{staticClass:"prettyprint"},[e._v("api.fetchImages();")])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    fetchImages() {\n        api.fetchImages();\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-013")])]),e._v(" "),a("p",[e._v("In order to reach out to that totally different module and get information our of it the\n                        fetchImages action gets called with a first argument, which we've discussed a couple of times\n                        now, is going to give us the ability to reach into other modules inside of our application.\n\n                    ")]),e._v(" "),a("p",[e._v("So, previously, remember when we defined that first argument inside of an action we said it\n                        was an object with a couple of different properties. So, for example, in the Auth module\n                        the finalizeLogin and logout actions both make use of the commit function which allows us to\n                        call a mutation.")]),e._v(" "),a("p",[e._v("Another property that exists on that first argument is called rootState:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    fetchImages({ rootState }) {\n        api.fetchImages();\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-014")])]),e._v(" "),a("p",[e._v("rootState is a reference to all of the state that is held inside of our Vuex store or\n                        instance. So rootState here gives us the ability to reach into other modules and access\n                        state or access data that is held inside them.")]),e._v(" "),a("p",[e._v("The rootState object is going to have different properties assigned to it based on how you\n                        have hooked up your modules to your Vuex instance. Let me explain what I mean by that. If you\n                        recall inside the store directory we've got that index.js file inside of which we created our\n                        Vuex instance and wired up our Auth module as a module called simply auth:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default new Vuex.Store({\n    modules: {\n        auth\n    }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 07-015")])]),e._v(" "),a("p",[e._v("Because we hooked the Auth module up to the store as a module called "),a("code",{staticClass:"prettyprint"},[e._v("auth")]),e._v(" above, we can access the state inside of this Auth module\n                        by writing out "),a("code",{staticClass:"prettyprint"},[e._v("rootState.auth")]),e._v(" and then whatever property we\n                        want off that state object. Our Auth module has only one property on it's data object - the\n                        token property. So we use the following code in our Images module to reach over into that\n                        Auth module and pull the token out of that Auth module state:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    fetchImages({ rootState }) {\n        rootState.auth.token;\n        api.fetchImages();\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-016")])]),e._v(" "),a("p",[e._v("I'm going to use ES2015 destructuring syntax to clean up the code a little bit:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const { token } = rootState.auth;")]),e._v(" "),a("figcaption",[e._v("Fig 07-017")])]),e._v(" "),a("p",[e._v("So now we can take that token that we've got from the module and pass it along to the\n                        fetchImages function that we put together inside of the imgur.js api helper file:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    fetchImages({ rootState }) {\n        const { token } = rootState.auth;\n        api.fetchImages(token);\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-018")])]),e._v(" "),a("p",[e._v("Next in the imgur.js api file in the fetchImages function where we make the axios request:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("    fetchImages(token) {\n        return axios.get(`${ROOT_URL}/3/account/me/images`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n    }")]),e._v(" "),a("figcaption",[e._v("Fig 07-019")])]),e._v(" "),a("p",[e._v("Note - we are returning the request from the function. So back inside of the images module\n                        when we call "),a("code",{staticClass:"prettyprint"},[e._v("api.fetchImages(token);")]),e._v(" because we are calling\n                        an asynchronous request we have to write a little bit of code to handle the response that\n                        comes back. So previously in the VideoBrowser application when we made a request, we\n                        interfaced with that request by using a promise. However, this time around we are going to\n                        follow the convention of Vuex a little bit more closely by using an async await syntax here\n                        instead to wait for this api request to be completed:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    async fetchImages({ rootState }) {\n        const { token } = rootState.auth;\n        const response = await api.fetchImages(token);\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-020")])]),e._v(" "),a("p",[e._v("Firstly we mark "),a("code",{staticClass:"prettyprint"},[e._v("fetchImages")]),e._v(" with the "),a("code",{staticClass:"prettyprint"},[e._v("async")]),e._v(" keyword then we add the "),a("code",{staticClass:"prettyprint"},[e._v("await\n                    ")]),e._v(" keyword in front of the api call. Then we store the response in a variable called\n                        "),a("code",{staticClass:"prettyprint"},[e._v("response")]),e._v(".")]),e._v(" "),a("p",[e._v("Finally when we get this response back it should have a list of all the images inside of our\n                        application we will eventually call commit. Before call commit and actually store these\n                        images inside of our module I think it would probably be a really good experience to console\n                        log out the response object to get a better idea of what information we get back from the Imgur\n                        API:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    async fetchImages({ rootState }) {\n        const { token } = rootState.auth;\n        const response = await api.fetchImages(token);\n        console.log(response);\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-021")])]),e._v(" "),a("h3",[e._v("Testing Images Response")]),e._v(" "),a("p",[e._v("In this section we're going to wire up the Images module to our Vuex store and then we'll\n                        wire up all that stuff to our ImageList component and attempt to reach out to the Imgur API\n                        and get a list of all of our images.")]),e._v(" "),a("p",[e._v("So, again, the first thing we have to do is make sure that we export our state, getters,\n                        actions and mutations from this module file. At the bottom add the following export\n                        statement:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    state,\n    getters,\n    actions,\n    mutations\n}")]),e._v(" "),a("figcaption",[e._v("Fig 07-022")])]),e._v(" "),a("p",[e._v("And just like before the names of each of these objects right here are especially important.\n                        Next in index.js where we create our Vuex instance and import the Images module:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import images from './modules/images';")]),e._v(" "),a("figcaption",[e._v("Fig 07-023")])]),e._v(" "),a("p",[e._v("Next we'll hook that module up inside the modules object to tell Vuex about the additional\n                        module we have created:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default new Vuex.Store({\n                        modules: {\n                            auth,\n                            images\n                        }\n                    });")]),e._v(" "),a("figcaption",[e._v("Fig 07-024")])]),e._v(" "),a("p",[e._v("Ok so the next thing we have to do is actually take that store, take the action inside of it\n                        and call it from one of the functions inside our lifecycle methods inside our components.")]),e._v(" "),a("p",[e._v("So the chances are that we only want to attempt to load up our list of images from the Imgur\n                        API when we are showing the ImageList component on the screen. In the ImageList component we\n                        make use of the created() lifecycle method. First off though let's setup mapActions for fetching\n                        images. Add the import statement for mapActions:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import { mapActions } from 'vuex';")]),e._v(" "),a("figcaption",[e._v("Fig 07-025")])]),e._v(" "),a("p",[e._v("Next we will wire up the fetchImages action and wire it up to this component's methods\n                        property. ")]),e._v(" "),a("p",[e._v("So we define the methods property and call mapActions passing in an array containing the name\n                        of the action that we want merge into our ImageList component - fetchImages:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("    export default {\n    name: 'ImageList',\n    methods: mapActions(['fetchImages']),\n}")]),e._v(" "),a("figcaption",[e._v("Fig 07-025")])]),e._v(" "),a("p",[e._v("And as we were just saying we also want to define a lifecycle method because the instant we\n                        are about to load this component up we want to attempt to reach out to the Imgur API and\n                        fetch our list of images so we can show them on the screen. So underneath our methods\n                        definition I'll add in our created function which will be called automatically because it is\n                        called created. Inside the lifecycle method we can fetch our images:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n        name: 'ImageList',\n        methods: mapActions(['fetchImages']),\n        created() {\n            this.fetchImages();\n        }\n    }")]),e._v(" "),a("figcaption",[e._v("Fig 07-026")])]),e._v(" "),a("p",[e._v("So I think we are just about ready to test this out inside the browser. One thing I want to\n                        remind you about is that we have not yet gone through the process of uploading any images. So\n                        while we may be able to run this code inside the browser I really don't expect to see any\n                        images come back on the api. However I would like to run this code just to verify we are not\n                        getting any errors.\n                    ")]),e._v(" "),a("p",[e._v("In the browser make sure you are on the Image List - localhost:8080 and logged in. Click on the\n                        Network tab inside chrome devtools, filter by XHR requests and then refresh the\n                        entire page. ")]),e._v(" "),a("p",[e._v("At this point we have not yet setup our application to work correctly if you're not logged in\n                        when it comes to fetching this list of images. ")]),e._v(" "),a("p",[e._v("When you refresh you should see a GET request to the images endpoint at Imgur. You'll notice\n                        that there's two requests inside of here. The first one is an options type request. This is\n                        to handle the fact that we are making a network request across domain - also referred to as\n                        a CORS (Cross-Origin Resource Sharing) request. ")]),e._v(" "),a("p",[e._v("The second one is our actual request that tries to fetch some information. If we select that\n                        and then view the preview tab you'll notice that we got back data of empty array:")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(210)}}),e._v(" "),a("figcaption",[e._v("Fig 07-027")])]),e._v(" "),a("p",[e._v("This means we fetched no images. Also in the console log we've got the entire response object\n                        with the data property:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(211)}}),e._v(" "),a("figcaption",[e._v("Fig 07-028")])]),e._v(" "),a("p",[e._v("One thing that's going to be really confusing here, and this is why I wanted to do the console\n                        log, is that whenever we make a request with axios the response comes back with a data\n                        property that contains data that was sent back to us by the remote api. The reason this is\n                        really confusing is that when Imgurs API in particular sends a response back to us - there\n                        response object has a data property nested inside of it as well.\n                    ")]),e._v(" "),a("p",[e._v("So the first data object shown in Fig 07-028 is from axios behaving as usual saying whatever\n                        information we get back is going to be on the data property. Inside there is a second data\n                        property that is being returned by Imgurs API - they just decided to call this property data\n                        as well and they decided to return the results of our query inside that data property.")]),e._v(" "),a("p",[e._v("So in other words we've got "),a("code",{staticClass:"prettyprint"},[e._v("data.data")]),e._v(" these two nested data\n                        properties which is a bit confusing but we'll get around that.")]),e._v(" "),a("h3",[e._v("Image Upload via Imgur")]),e._v(" "),a("p",[e._v("Upload an image or images to imgur.com and then refresh the browser of your application at\n                        localhost:8080. If you look at the Network tab again and select the images GET request you\n                        should see that the data object contains a single object. ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(212)}}),e._v(" "),a("figcaption",[e._v("Fig 07-029")])]),e._v(" "),a("p",[e._v("You can expand the node to see various details about the image such as the date and time it\n                        was uploaded, the dimensions, type of image, and (most relevant for us) a direct link to the\n                        image.")]),e._v(" "),a("h3",[e._v("Committing Images to State")]),e._v(" "),a("p",[e._v("We are now able to successfully retrieve a list of images from the Imgur API and the last\n                        thing we have to do inside of our images module is to make sure that we complete the code fo\n                        our fetchImages action. We got back our response object that contains our images but we need\n                        to make sure that we call that setImages mutation to update the list of images that are\n                        stored inside of our state object. Remember how we do that from the first argument:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("async fetchImages({ rootState }) ")]),e._v(" "),a("figcaption",[e._v("Fig 07-030")])]),e._v(" "),a("p",[e._v("We are going to pull off the commit function in addition to the rootState object. The\n                        rootState object gives us access to state within other modules:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n                        async fetchImages({ rootState, commit }) {\n                            const { token } = rootState.auth;\n                            const response = await api.fetchImages(token);\n                        }\n                    };")]),e._v(" "),a("figcaption",[e._v("Fig 07-031")])]),e._v(" "),a("p",[e._v("We also remove the console.log statement and call commit instead:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    async fetchImages({ rootState, commit }) {\n        const { token } = rootState.auth;\n        const response = await api.fetchImages(token);\n        commit('setImages', response.data.data);\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 07-032")])]),e._v(" "),a("p",[e._v("The first argument to commit is a string that tells Vuex which mutation we are trying to call\n                        - so in this case "),a("code",{staticClass:"prettyprint"},[e._v("setImages")]),e._v(". The second argument we provide is\n                        the new list of images to store inside of our state - "),a("code",{staticClass:"prettyprint"},[e._v("response.data\n                            .data")]),e._v(". ")]),e._v(" "),a("p",[e._v("We are now getting back our list of image(s) and storing them inside our ImageList modules\n                        state object.")]),e._v(" "),a("h3",[e._v("Mapping the Images Getter")]),e._v(" "),a("p",[e._v("Our Images module is now taking our list of images back from the Imgur API and storing them\n                        on our Images module state. We are now going to move over to our ImageList component and\n                        make sure that the component is aware of all the images that are being fetched by our api.")]),e._v(" "),a("p",[e._v("At present we are only calling the action to fetch the images. Now remember these actions\n                        attempt to modify our state in some fashion. To actually get information out of our state\n                        object we have to make use of getters. Remember inside of our Images module we made that getter\n                        called allImages which returns all the images that are stored inside of our state object. So\n                        we want to take the allImages getter and map it to our ImageList component.")]),e._v(" "),a("p",[e._v("To do so we are going to import our mapGetters function:")]),e._v(" "),a("p",[e._v("and add it to our component definitions computed property. We use a computed property to read\n                        information into our component and make it accessible from our actual template:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import { mapActions, mapGetters } from 'vuex';")]),e._v(" "),a("figcaption",[e._v("Fig 07-033")])]),e._v(" "),a("p",[e._v("Ok so now that we've got the list of images inside of here we can reference that list of\n                        images inside of our template as we please. So for now, I'll just print out the number of\n                        images that are being fetched from the API:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<template>\n    <div>\n        Image List\n\n        {{ allImages.length }}\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 07-034")])]),e._v(" "),a("p",[e._v("If you now view the application now you should see the number of images returned from the\n                        API:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(213)}}),e._v(" "),a("figcaption",[e._v("Fig 07-035.png")])]),e._v(" "),a("h3",[e._v("Listing Images")]),e._v(" "),a("p",[e._v("We've now got a list of all of our images inside our ImageList component. Inside this section\n                        we are going to put in a little bit of temporary code here just to loop over all the images\n                        that we fetched and print them out to the screen. Now the first take that we're going to do\n                        is going to be a little bit ugly but we just want to get some temporary solution in here.\n                        We'll then go and take care of the UploadForm and then we're going to come back to this once\n                        we have the ability to upload a lot of images and we'll do something way more interesting to\n                        display our images on the screen.\n                    ")]),e._v(" "),a("p",[e._v("Firstly, clear out the contents of the div in the ImageList component and replace it with the\n                        following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div>\n        <img v-for="image in allImages" :src="image.link" />\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 07-036")])]),e._v(" "),a("p",[e._v("We use the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive to loop over all the different\n                        images that we fetch and display one "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" tag for each image.\n                        Remember how we use the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive - we write out "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v("\n                        and then a temporary variable name (in this case image), then the "),a("code",{staticClass:"prettyprint"},[e._v("\n                            in")]),e._v(" keyword, then the name\n                        of the collection of records that we want to iterate over which in this case is "),a("code",{staticClass:"prettyprint"},[e._v("allImages")]),e._v(" Then inside the tag that contains the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v("\n                        directive we can use the temporary variable ("),a("code",{staticClass:"prettyprint"},[e._v("image")]),e._v(") for any\n                        other purpose we might want. So in the context of an "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" tag\n                        we probably want to define the "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" property. Remember that\n                        anytime we want to pass in a "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" property or any Html\n                        property to an element and we want to ensure that the property comes from a variable we have\n                        to make use of the "),a("code",{staticClass:"prettyprint"},[e._v("v-bind")]),e._v(" syntax.")]),e._v(" "),a("p",[e._v("If we now view this in the browser we should see the image is displaying as expected.")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Data Binding Overview")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("\n                        Hi there. This is Brian Noyes, and in this first module we're going to go through a high-level overview of\n                        what data binding is all about in WPF, why you want to use it, and what some of the fundamental concepts are\n                        that you'll need to master to understand the rest of the course, where we'll dive deep enough to turn you into\n                        a data binding ninja.\n                    ")]),e._v(" "),a("p",[e._v("\n                        First I'm going to go through a high-level overview of what data binding is all about and why you want to use\n                        it, what some of the benefits are, and what it does for you. Next I'll talk about some of the key concepts,\n                        things like bindings and DataContext, and Change Notifications, and the role that they play in using data\n                        binding.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then I'll go a little bit deeper on DataContext and talk about the scoping mechanisms of DataContext and how\n                        you can use it to control what data flows to what part of your views.\n                    ")]),e._v(" "),a("p",[e._v("\n                        And then we'll finish off the module with a series of demos that starts off with a data-driven form, not using\n                        data binding at all, then transforming that to use data binding to see some of the benefits there, and\n                        finally, cleaning that up a little bit by consolidating your data sources into a single DataContext object.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Data Binding Overview")]),e._v(" "),a("p",[e._v("\n                        So let's start off by talking about what data binding is about and why it's important to you. First off, data\n                        binding is one of the more powerful XAML platform features and it's certainly not limited to just WPF. A lot\n                        of the things we're going to be talking about in this course apply equally to Windows 8 development, Windows\n                        Phone development, and even the somewhat defunct Silverlight. Certainly there are other platform features such\n                        as visual states and styling and resources that are equally as important and what makes XAML a great platform\n                        for developing applications, but data binding stands out to me as one of the most powerful features because of\n                        how it lets you architect your application.\n                    ")]),e._v(" "),a("p",[e._v("\n                        First off, it promotes loose coupling, and loose coupling means different things, but in the context of data\n                        binding what it does is it lets you decouple, first off, the View from the data model. So the data model\n                        objects that get loaded up with data and that you're going to use to ultimately drive what you see on the\n                        screen, the view doesn't need to be tightly coupled to exactly what type of objects those are, how they get\n                        populated, where they're held in memory, and so on.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Additionally, you can keep the View decoupled from the data access that populates those data models, so\n                        whether you get objects over service calls, go directly out to a relational database, load them up from flat\n                        files, the View doesn't have to know anything about that. And most specifically, when we're talking about View\n                        here, we really mean the elements within the View that represent the renderable content that you see on\n                        screen. Additionally through data binding, the view can stay decoupled from the interaction logic, the logic\n                        that gets invoked when the user clicks on something, selects something, navigates around the application, all\n                        of that stuff can be decoupled from the elements of the view using data binding. Now to fully achieve that,\n                        you really have to take a step further and consider something like the Model-View-ViewModel pattern, but it's\n                        really data binding that makes that possible.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Additionally, data binding reduces the overall amount of code you'll have to write and you'll see that in the\n                        demos towards the end of the module. So that reduction in code can mean shorter time to market in getting your\n                        app out there at first, and it means less time to create new features and fix bugs when you're maintaining the\n                        application. So that code reduction comes in, in several forms. One is that the automatic data flow to and\n                        from the screen that data binding enables, means that you have to write less code to explicitly push and pull\n                        data from individual properties on elements within the screen.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Additionally, just in terms of conceptualizing and implementing the code, it allows you to form natural\n                        associations between data objects and their properties and screen elements that are going to render out the\n                        content of those objects.\n                    ")]),e._v(" "),a("p",[e._v("\n                        One of the other benefits of data binding is it facilitates a developer-designer workflow. Now what that means\n                        is that one of the key concepts in XAML-based applications is the idea that you should be able to take your\n                        XAML and hand it over to a professional designer and let them go party on that XAML and change elements and\n                        add animations, and style it like crazy, and it shouldn't break anything in the app, but the more the elements\n                        are tightly coupled to the code-behind, especially with lots of push-pull logic and stuff like that, then it's\n                        going to be harder for the designer to swap out, say, a label for a textbox, because the properties on those\n                        elements that you're going to push data into is going to change with the change of an element.\n                    ")]),e._v(" "),a("p",[e._v("\n                        With data binding you just have declarations in the XAML that the designer can be in control of and they can\n                        move those bindings around and put them on the appropriate properties on the elements as they switch things\n                        out. So this allows designers to work more in isolation and independently from the developers and not have to\n                        coordinate on every little change that they make.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now another important concept the data binding leads into is the Model-View-ViewModel pattern, MVVM. I'm not\n                        going to go into any depth on MVVM in this course. I would recommend you check out my other Pluralsight\n                        course, Building Windows 8 MVVM Applications, because in that course I cover the MVVM pattern, the concepts\n                        behind it, and I'd say a good 70-80% of what I cover in that course equally applies to WPF. You would have to\n                        ignore some of the Windows 8 specifics such as the application lifecycle and navigation schemas of Windows 8,\n                        which are different in WPF, but the fundamentals of the MVVM pattern are covered well there and apply equally\n                        to WPF.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now for most of this course I am not going to use MVVM in my demos, just to emphasize that data binding is\n                        powerful and useful in its own right and you don't have to do the MVVM pattern to get benefit out of it. But\n                        if you're considering going down that road, it's important to realize that you're never going to get there\n                        without being good at data binding. Data binding is the most important aspect of being able to decouple the\n                        Views and ViewModels and the data flow and communication between those, because the bindings form the bond\n                        between the View and its ViewModel in a loosely coupled way.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Data Access vs Data Binding")]),e._v(" "),a("p",[e._v("\n                        Now one concept I want to clear up, up front, is the difference between data access vs data binding, because\n                        there's common misconceptions here. Data access is all about data that sits in a persistent store, and being\n                        able to load that data into some in-memory data source object. Data access is about retrieving data into those\n                        data source objects in-memory from the persistent store and being able to write changes back out to the\n                        persistent store. That persistent store could be a relational database, it could be flat files or it could\n                        even be a service that you're making web service calls out to, but conceptually you're reading data in from a\n                        persistent store and writing it out and putting it into objects in-memory.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(221)}}),e._v(" "),a("figcaption",[e._v("Fig 01-001")])]),e._v(" "),a("p",[e._v("\n                        Data binding, on the other hand, sits upstream of data access, so your initial focus is going to be on a\n                        screen that you're trying to support. It could be a Window or a User Control or a View in conceptual terms\n                        that you have a set of elements on that you're going to put data into, and you need to flow data into those\n                        element properties to present it on screen. To do that, you need objects in memory, so you have these data\n                        source objects that came from somewhere and you're going to read data in from those data source objects into\n                        elements on the screen, and if those elements are editable, then you're going to allow data to be written back\n                        into those data source objects when it changes on screen. From data binding's perspective, it shouldn't know\n                        or care where those data source objects came from or even be coupled to what kind of object they are.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(222)}}),e._v(" "),a("figcaption",[e._v("Fig 01-002")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Sources and Targets")]),e._v(" "),a("p",[e._v("\n                        Another key concept and some terminology when you're dealing with Data Binding are the concepts of Sources and\n                        Targets. Ultimately, when you're doing data binding, you have some data object that you're going to get some\n                        data out of that exposes properties, and those properties can be collections of individual objects, they can\n                        be a single complex object or they can be properties exposing primitive values, and you want to data bind\n                        those to different elements within your screen.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So, for example, we want data to flow from the Customers property on our data object into a ComboBox, and\n                        populate its drop-down list. We want to have a complex object property called SelectedCustomer in this case,\n                        bound to a collection of elements somewhere in our screen, in this case a FirstName field, LastName field, and\n                        Email field, come off of individual properties on that SelectedCustomer property. And then we might also have\n                        another collection down here, Orders, that's going to flow into a DataGrid and provide the data source for\n                        that DataGrid.\n                    ")]),e._v(" "),a("p",[e._v("\n                        When you view Data Binding like this, it should become clear that the data object is the Source object and the\n                        elements on the screen are the Targets of the bindings. Now the bindings get declared on the Target element\n                        and point to the Source object that's going to feed them. So at a high level, Data Binding basically flows\n                        data between the Source object property and the Target element property, discrete values that are going to\n                        flow back and forth, where those values can be a single primitive value, they can be a complex object or they\n                        can be an entire collection of complex objects.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(223)}}),e._v(" "),a("figcaption",[e._v("Fig 01-003")])]),e._v(" "),a("p",[e._v("\n                        Now it's important to note that the terms Source and Target can get a little confusing because in Two-Way Data\n                        Binding those fields on the screen may be editable, and if you have two-way binding enabled, those arrows can\n                        reverse and allow data to flow from the Target down into the Source object. The names don't change at that\n                        point. The Source is still the Source, the Target is still the Target, in Data Binding terms, but just realize\n                        that the flow reverses in the case of two-way data binding when edits are made in the screen.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(224)}}),e._v(" "),a("figcaption",[e._v("Fig 01-004")])]),e._v(" "),a("p",[e._v("\n                        So another key thing to keep in mind is that the target properties of a binding must be DependencyProperties.\n                        That typically means that they are a property defined on a framework element that's part of the WPF framework,\n                        but they could be custom DependencyProperties on your own objects, but the thing you hook the binding up to\n                        directly is going to be a DependencyProperty. The S ource object property does not have to be a\n                        DependencyProperty.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Data Binding Building Blocks")]),e._v(" "),a("p",[e._v("\n                        Now let's talk about the basic building blocks that you're going to use when Data Binding. The first thing is\n                        DataContext. DataContext is a property that each framework element has that can be used to flow data into the\n                        screen, so for some screen of data that you want to hook Data Binding up to, you can think of it as a\n                        DataContext overlays that screen and provides ambient data to all of the elements within the screen.\n                    ")]),e._v(" "),a("p",[e._v("\n                        From a structural perspective, it's really that you can set a DataContext property on any element and that\n                        DataContext flows down to all of the child elements that sit underneath it. So if we set the DataContext to\n                        the Window level, all of the child elements within that Window will have access to the same object that was\n                        set as the DataContext on the root Window element.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(225)}}),e._v(" "),a("figcaption",[e._v("Fig 01-005")])]),e._v(" "),a("p",[e._v("\n                        The next concept are Bindings. Bindings provide the glue between the single element property, such as the Text\n                        property on a TextBox and a Source object property such as the FirstName property on a Customer. Bindings\n                        allow you to read data in from the Source object property into the Target element property, and in Two-Way\n                        Data Binding you can also flow data back from the Target element property back into the Source object\n                        property.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(226)}}),e._v(" "),a("figcaption",[e._v("Fig 01-006")])]),e._v(" "),a("p",[e._v("\n                        Another important concept to do with binding is the way XAML parsing works. If you have some chunk of XAML\n                        that's going to be rendered on the screen, the XAML parser is going to kick in and start ripping through that\n                        XAML. Conceptually it's top to bottom and left to right, and it's newing up objects and setting properties on\n                        those objects. As it rips through that XAML, it's going to find Bindings and when it first finds a Binding, it\n                        goes ahead and does the initial evaluation of that Binding, figures out what the Source object is, it\n                        dereferences a property, gets a value out of that Source object property, and puts it into the Target element\n                        property that the Binding is sitting on.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(227)}}),e._v(" "),a("figcaption",[e._v("Fig 01-007")])]),e._v(" "),a("p",[e._v("\n                        Next there's the concept of Change Notifications. Change Notifications are important because if the data can\n                        change behind the scenes, you want the View to stay in sync with the real state of the data. So if you have\n                        some field and it's Data Bound to some Source object property, if the Source object property changes, an Event\n                        can fire and it can notify the Binding that's up in the View, and that Binding will know to go and re-retrieve\n                        the value and update the View to stay in sync. Likewise, as the data changes in the View, the Target property\n                        can raise Change Notifications, which can trigger the Binding to push the value back down into the Source\n                        object property. So it's these Change Notifications that allow your real data behind the scenes to stay in\n                        sync with what the user sees in the screen.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(228)}}),e._v(" "),a("figcaption",[e._v("Fig 01-008")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("DataContexts and Scopes")]),e._v(" "),a("p",[e._v("\n                        When it comes to working with DataContext, it's important to understand the way DataContext form a scoping\n                        mechanism. So as I described before, you can set the DataContext at a Window level. You just set the\n                        DataContext property on that Window object to some Source data object, and that becomes the ambient data\n                        source for all of the child elements within that Window.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(229)}}),e._v(" "),a("figcaption",[e._v("Fig 01-009")])]),e._v(" "),a("p",[e._v("\n                        However, you can also set a DataContext at a more granular level. So in this example I could set a DataContext\n                        for the DataGrid and the data entry form below it to a Collection of Customers, and that ambient source of\n                        data is just applying to those elements based on some containing element that we set the DataContext on, and\n                        any Bindings within that scope, by default, are going to be using that DataContext as their Source objects.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(230)}}),e._v(" "),a("figcaption",[e._v("Fig 01-010")])]),e._v(" "),a("p",[e._v("\n                        Now when it comes to DataBound List controls, it's important to realize that they will dynamically set a\n                        DataContext of their own. A DataGrid, for example, as it goes and renders out each row, each row is composed\n                        of a set of child elements and what it will do is set the DataContext for the container of those child\n                        elements to the object that it's rendering out, the row object. So in this case, this is a grid full of\n                        Orders, the overall DataContext is going to be a Collection of Orders, but the DataContext for each row is\n                        going to be an individual Order object. And that means the Bindings on the columns themselves, for example,\n                        can just bind to the properties of a single Order object, they don't have to know which particular Order\n                        object they're rendering out.\n                    ")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(231)}}),e._v(" "),a("figcaption",[e._v("Fig 01-011")])]),e._v(" "),a("p",[e._v("\n                        You can also set a DataContext in a more granular fashion to a set of elements. And you would do that by\n                        setting the DataContext property on some containing element such as a Grid or StackPanel. Then, as discussed\n                        before, that DataContext flows down to all child elements. That means these individual TextBoxes will have\n                        that DataContext as a Customer object in this case, and they can just Data Bind to the properties on that\n                        Customer object without needing to know about what the DataContext is for the rest of the form.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(232)}}),e._v(" "),a("figcaption",[e._v("Fig 01-012")])]),e._v(" "),a("p",[e._v("\n                        And finally, you could set it for an individual element. It's fairly rare that you would set DataContexts at\n                        that granular of level, although I will do it in the demos just to show how it works.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(233)}}),e._v(" "),a("figcaption",[e._v("Fig 01-013")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo Intro")]),e._v(" "),a("p",[e._v("\n                        So now let's finally get to some code that demonstrates all these fundamentals. I'm going to go through a\n                        series of demos starting with a data-driven form that has no data binding and talking about what the structure\n                        of the code needs to be when there's no data binding present.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then we'll transform that same thing and show how to hook up data binding and show what some of the benefits\n                        are in terms of the code that you write, and we'll show how to do data binding to label a TextBox, a ListBox,\n                        and a DataGrid.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then in the final demo we'll clean that up a bit and show how you can, instead of setting a number of\n                        different DataContexts for different parts of the form, you can aggregate those objects into a single\n                        DataContext object. I call this Poor man's MVVM here. In the demo I'll be calling it a ViewModel, but the\n                        ViewModel I'm using here doesn't follow a number of other tenets of MVVM that you can learn in other courses\n                        such as my Windows 8 MVVM course. So let's dive right into some coding.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(234)}}),e._v(" "),a("figcaption",[e._v("Fig 01-014")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Data Forms with No Data Binding")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex02-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 2\\before\\DataBindingBasics\\DataBindingBasics.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex02-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 2\\after\\DataBindingBasics\\DataBindingBasics.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this first demo I want to review some of the data binding fundamentals before we dive into more advanced\n                        aspects throughout the rest of the course. The data model we'll be dealing with throughout the course is based\n                        around a pizza ordering company. So we have Customers as a primary object, Customers have Orders, Orders have\n                        OrderItems, OrderItems are related to Products, Orders have an Order Status, and we probably won't get much\n                        deeper than that in the data model for the demos that we'll be doing. Now you can see in this demo I'm using\n                        an Entity Framework Database First edmx data model, partly so you can visualize the schema here. In later\n                        demos I'll mostly be using Entity Framework Code First.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(235)}}),e._v(" "),a("figcaption",[e._v("Fig 01-015")])]),e._v(" "),a("p",[e._v("\n                        The UI that we'll be using in this demo is a simple crude data form here. At the top we have some current\n                        Customer information, a Customer ID has a Label and a Customer Name has a TextBox. Then we have a Recent\n                        Orders List, which is a ListBox that's going to be populated with dates, and when we select a date there, down\n                        at the bottom in the DataGrid we're going to see the Order items associated with that Order. We've got a Save\n                        button here so that we can modify the Customer Name and save it off to the database. And we'll add some other\n                        fields as we go here to save off other modifications to the Customer.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(236)}}),e._v(" "),a("figcaption",[e._v("Fig 01-016")])]),e._v(" "),a("p",[e._v("\n                        Now really a good starting point when it comes to considering Data Binding is to think about what does the\n                        code need to be to support a data form like this when you don't have Data Binding. If we drop into the\n                        code-behind here, we can see that we've got our MainWindow, we're newing up an instance of our object context,\n                        our data model, we've got a Loaded event handler hooked up:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public partial class MainWindow : Window\n{\n    ZzaEntities _ZzaContext = new ZzaEntities();\n\n    public MainWindow()\n    {\n        InitializeComponent();\n        Loaded += MainWindow_Loaded;\n    }")])]),e._v(" "),a("figcaption",[e._v("Fig 01-017")])]),e._v(" "),a("p",[e._v("\n                        In that event handler we go out through our object context, execute a query to get the first Customer in the\n                        Customer's Collection.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("void MainWindow_Loaded(object sender, RoutedEventArgs e)\n{\n\n    var firstCustomer = _ZzaContext.Customers.FirstOrDefault();\n    CustomerIdLabel.Content = firstCustomer.Id;\n    CustomerLastNameTextBox.Text = firstCustomer.LastName;\n\n    var orderDates = _ZzaContext.Orders\n        .Where(o => o.CustomerId == firstCustomer.Id).Select(o => o.OrderDate).ToList();\n    OrdersList.ItemsSource = orderDates;\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 01-018")])]),e._v(" "),a("p",[e._v("\n                        Then comes the part that gets really tedious about not using Data Binding is we have to go field by field and\n                        grab out values of properties on our data object, our Customer in this case, and push them into properties on\n                        the corresponding elements in our UI, such as the Content property on a Label or the Text property on a\n                        TextBox.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("CustomerIdLabel.Content = firstCustomer.Id;\nCustomerLastNameTextBox.Text = firstCustomer.LastName;\n")])]),e._v(" "),a("figcaption",[e._v("Fig 01-019")])]),e._v(" "),a("p",[e._v("Next you can see I'm executing a query to go get the Orders for that current Customer and selecting just the\n                        OrderDate so we end up with a list of DateTime objects that we set as the ItemsSource property on our ListBox.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var orderDates = _ZzaContext.Orders\n    .Where(o => o.CustomerId == firstCustomer.Id).Select(o => o.OrderDate).ToList();\nOrdersList.ItemsSource = orderDates;")])]),e._v(" "),a("figcaption",[e._v("Fig 01-020")])]),e._v(" "),a("p",[e._v("\n                        We also have a SelectionChanged event handler hooked up to the ListBox, and that's down here. And here you can\n                        see we're basically going out and executing a query against the database to go to the Orders collection, get\n                        the related child OrderItems, and using a Select criteria that the OrderDate matches the one selected in the\n                        ListBox and the CustomerId matches the one that is the current Customer based on our CustomerIdLabel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('void OnOrderSelected(object sender, SelectionChangedEventArgs args)\n{\n    var selectedOrder = _ZzaContext.Orders.Include("OrderItems")\n        .Where(o => o.OrderDate == (DateTime)OrdersList.SelectedItem &&\n            o.CustomerId == (Guid)CustomerIdLabel.Content).FirstOrDefault();\n    OrderItemsDataGrid.ItemsSource = selectedOrder.OrderItems;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 01-021")])]),e._v(" "),a("p",[e._v("\n                        You can see one of the downsides to doing it this way is that things like SelectedItem and Content are\n                        declared as objects, so they can contain anything, so you end up having to do a lot of casting as you move\n                        things in and out of those control properties. Once we have the OrderItems, we put those as the ItemsSource on\n                        our DataGrid to drive that.\n                    ")]),e._v(" "),a("p",[e._v("\n                        And then for our Save button you can see that we're going out and going and re-retrieving that Customer based\n                        on the CustomerId. We could have, likewise, held onto that Customer after we retrieved it in a form member\n                        variable.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnSave(object sender, RoutedEventArgs e)\n{\n    var customer = _ZzaContext.Customers.Where(c => c.Id == (Guid)(CustomerIdLabel.Content)).FirstOrDefault();\n    customer.LastName = CustomerLastNameTextBox.Text;\n    // Get all the other editable field values...\n    //customer.FirstName = CustomerFirstNameTextBox.Text;\n    //customer.Email = CustomerEmailTextBox.Text;\n    //customer.Phone = CustomerPhoneTextBox.Text;\n    // ...\n    // Persist those changes somewhere\n    _ZzaContext.SaveChanges();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 01-022")])]),e._v(" "),a("p",[e._v("\n                        Once we have the Customer, now we have to do some pulling of values from individual properties on the controls\n                        in the UI, and putting those into individual properties on the Customer object, and then eventually going off\n                        and saving. And the comments are here just to emphasize that you have to do this on a property by property\n                        basis for your entity because of the fact that you're just pushing and pulling discrete values into the\n                        properties of controls on the UI.\n                    ")]),e._v(" "),a("p",[e._v("\n                        But with that code in place we can, in fact, run this form and we can see we have our current Customer at the\n                        top. We can modify that Customer. I'll get rid of the 42 here, click Save, close the form, start the app back\n                        up, and our modification was, in fact, persisted.\n                    ")]),e._v(" "),a("p",[e._v("\n                        When we select an Order, we get the table populated down below. Now there's some nasty stuff there because\n                        it's doing auto-generate columns, so we're getting these related objects, just getting dumped with their type\n                        information. Here's the meaningful OrderItem information over here with the related IDs, quantities, unit\n                        prices, and so on, and we can see that that changes based on the selection up above. So the good news is it's\n                        fully functional, but we have to do all this pushing and pulling of values in our UI, and you'll see that we\n                        can be a lot more efficient by Data Binding. So in the next demo, we'll see how this can get better by using\n                        Data Binding instead.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(237)}}),e._v(" "),a("figcaption",[e._v("Fig 01-023")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Data Binding Basics")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex02-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 2\\before\\DataBindingBasics\\DataBindingBasics.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex02-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 2\\after\\DataBindingBasics\\DataBindingBasics.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        So now let's look at how we can start cleaning up this demo by introducing Data Binding. First we're going to\n                        go in here to the XAML of our Window and start pulling values into the XAML instead of pushing things from the\n                        code-behind.\n                    ")]),e._v(" "),a("p",[e._v("So first we'll go to our CustomerIdLabel here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label x:Name="CustomerIdLabel"\n   Grid.Row="0"\n   Grid.Column="1"\n   Content="{Binding Id}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 01-023A")])]),e._v(" "),a("p",[e._v("and we'll introduce a Binding for the Content property that says go and get me the Id property of whatever my\n                        DataContext is. So whenever you see a Binding that just has one thing next to it, that one thing next to it is\n                        the Path or the property name on the DataContext object that flows down to this. And we talked about\n                        DataContext in the slides and we'll see that we're going to set it from the code-behind in a moment, but\n                        DataContext is an overall ambient data object that flows down the visual tree and is accessible for Data\n                        Binding on elements. So this implies that for this Label, at least, there has to be a DataContext object that\n                        has an Id property on it, and the Binding is going to grab that value and put it into the content property for\n                        us.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Likewise, we can go down to our TextBox here and put Text=\"(Binding LastName)\". So it's the Text property that\n                        we want to set, that's the Target. On the Source object we're expecting there to be a LastName property and\n                        that Source object has to be set as the DataContext for this TextBox.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="CustomerLastNameTextBox"\n    Grid.Row="1"\n    Grid.Column="1"\n    Text="{Binding LastName}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 01-024")])]),e._v(" "),a("p",[e._v("\n                        Next, for our ListBox, we can drop down here and we can do a Binding like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="OrdersList"\n     Grid.Row="2"\n     Grid.Column="1"\n     Height="100"\n     ItemsSource="{Binding}"\n     SelectionChanged="OnOrderSelected" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-025")])]),e._v(" "),a("p",[e._v("Ultimately we need to get a Collection into our ItemSource property and we can just use Binding here and that\n                        basically says, I'm expecting the DataContext for this ListBox to be a Collection of something I'm going to\n                        present. And by default, it will call ToString on each one of those objects if we don't do anything else here.\n                        So if you remember from the previous run, we're expecting a list of Order Dates here. We can put a list of\n                        Order Dates and it will call ToString on each of those and we'll see the date rendered as text, but Binding on\n                        its own like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('ItemsSource="{Binding}"')])]),e._v(" "),a("figcaption",[e._v("Fig01-025A")])]),e._v(" "),a("p",[e._v("implies that the Source object is the DataContext and that we're not looking for any particular property on\n                        that DataContext, we're expecting it to be whole objects that we're pushing in as a Collection here.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then we could drop down to the DataGrid and do the same thing:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="OrderItemsDataGrid"\n    ItemsSource="{Binding}"\n    AutoGenerateColumns="True"\n    Grid.Row="2">\n</DataGrid>')])]),e._v(" "),a("figcaption",[e._v("Fig01-026")])]),e._v(" "),a("p",[e._v("Now this implies that this DataGrid's DataContext has to be set to whatever collection it expects to render\n                        out, which in our case happens to be OrderItems. Now if you're experienced with data binding this may look a\n                        little weird, because this implies that we have a different DataContext for the DataGrid:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="OrderItemsDataGrid"\n    ItemsSource="{Binding}"\n    AutoGenerateColumns="True"\n    Grid.Row="2">\n</DataGrid>')])]),e._v(" "),a("figcaption",[e._v("Fig01-026A")])]),e._v(" "),a("p",[e._v("for the ListBox:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="OrdersList"\n     Grid.Row="2"\n     Grid.Column="1"\n     Height="100"\n     ItemsSource="{Binding}"\n     SelectionChanged="OnOrderSelected" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-026B")])]),e._v(" "),a("p",[e._v("and for the customer-oriented controls up above:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label x:Name="CustomerIdLabel"\n    Grid.Row="0"\n    Grid.Column="1"\n    Content="{Binding Id}" />\n<Label Grid.Row="1"\n    Grid.Column="0"\n    Content="Customer Name" />\n<TextBox x:Name="CustomerLastNameTextBox"\n    Grid.Row="1"\n    Grid.Column="1"\n    Text="{Binding LastName}" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-026C")])]),e._v(" "),a("p",[e._v("which is not something you'd normally do and we'll evolve past that quickly here in the demos.")]),e._v(" "),a("p",[e._v("\n                        So now let's drop into the code-behind and what we could do is go in here after we've retrieved our first\n                        Customer, we could switch things here to set the overall DataContext for the Window itself to that Customer\n                        object. That means it's going to be set at the root level on the Window and it's going to flow down the visual\n                        tree to all the elements within the window and that will be their available DataContext unless it is set to\n                        something different at an element level.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("void MainWindow_Loaded(object sender, RoutedEventArgs e)\n{\n\n    var firstCustomer = _ZzaContext.Customers.FirstOrDefault();\n    DataContext = firstCustomer;\n    //CustomerIdLabel.Content = firstCustomer.Id;\n    //CustomerLastNameTextBox.Text = firstCustomer.LastName;")])]),e._v(" "),a("figcaption",[e._v("Fig01-027")])]),e._v(" "),a("p",[e._v("\n                        For our OrderList, we could replace setting the ItemsSource directly with setting a DataContext for that list\n                        because the ItemsSource is being set through the binding now that we added in the XAML.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var orderDates = _ZzaContext.Orders\n    .Where(o => o.CustomerId == firstCustomer.Id).Select(o => o.OrderDate).ToList();\n//OrdersList.ItemsSource = orderDates;\nOrdersList.DataContext = orderDates;")])]),e._v(" "),a("figcaption",[e._v("Fig01-028")])]),e._v(" "),a("p",[e._v("\n                        And then down here in our OrderSelected handler we could do the same where we replace setting the ItemsSource\n                        on the DataGrid with setting a DataContext that flows into it, and then the binding on the ItemsSource\n                        property in the XAML will pick it up and render it.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' void OnOrderSelected(object sender, SelectionChangedEventArgs args)\n    {\n        var selectedOrder = _ZzaContext.Orders.Include("OrderItems")\n            .Where(o => o.OrderDate == (DateTime)OrdersList.SelectedItem &&\n                o.CustomerId == (Guid)CustomerIdLabel.Content).FirstOrDefault();\n        //OrderItemsDataGrid.ItemsSource = selectedOrder.OrderItems;\n        OrderItemsDataGrid.DataContext = selectedOrder.OrderItems;')])]),e._v(" "),a("figcaption",[e._v("Fig01-029")])]),e._v(" "),a("p",[e._v("\n                        The other thing we probably want to do is get rid of the ugly columns that we didn't intend to render in the\n                        first place, so I'm going to drop down here to the DataGrid and say, AutoGenerateColumns \"False\" and add in\n                        some column definitions that include just those columns that we want to do.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('      AutoGenerateColumns="False"\n      Grid.Row="2">\n    <DataGrid.Columns>\n        <DataGridTextColumn x:Name="idColumn"\n                            Binding="{Binding Id}"\n                            Header="Id"\n                            Width="SizeToHeader" />\n        <DataGridTextColumn x:Name="instructionsColumn"\n                            Binding="{Binding Instructions}"\n                            Header="Instructions"\n                            Width="Auto" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-030")])]),e._v(" "),a("p",[e._v("\n                        Now the other thing to point out here in the XAML is the way DataContext work in list bound controls. So we've\n                        got the DataGrid as a whole is being set to whatever the current DataContext is on that element, which we just\n                        programmatically set in the code-behind to be an OrderItems collection. However, notice these bindings are\n                        assuming their DataContext has properties like Id, Instructions, ProductId, and so on.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('      AutoGenerateColumns="False"\n      Grid.Row="2">\n    <DataGrid.Columns>\n        <DataGridTextColumn x:Name="idColumn"\n                            Binding="{Binding Id}"\n                            Header="Id"\n                            Width="SizeToHeader" />\n        <DataGridTextColumn x:Name="instructionsColumn"\n                            Binding="{Binding Instructions}"\n                            Header="Instructions"\n                            Width="Auto" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-031")])]),e._v(" "),a("p",[e._v("\n                        That's because when a list-oriented control like a DataGrid, ListBox or ComboBox, renders out its items, it\n                        sets the DataContext for the item being rendered to be the individual item. So in the case of a DataGrid, it's\n                        rendering out a whole row with these columns in it, it sets the DataContext for that row object to be the\n                        individual item in the Collection that it's rendering. So each of these, the DataContext is just a single\n                        Order item, and therefore, their Binding Path can be equal to just the property names on that object.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The other thing to point out in review here is that when you see Binding Id here, this is 100% equivalent to\n                        writing it this way.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTextColumn x:Name="idColumn"\n    Binding="{Binding Path=Id}"\n    Header="Id"\n    Width="SizeToHeader" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-032")])]),e._v(" "),a("p",[e._v("\n                        When you say Binding Id, you're really implicitly setting the Path through a parameterized constructor on the\n                        binding object. So Binding Instructions here really mean set the path equal to Instructions, and we'll get to\n                        other properties that the binding has in later modules.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So with that code in place, I can go ahead and run, and we can see our data has populated like before and our\n                        selections happen and now we don't have the extra columns that we didn't want in the first place.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(238)}}),e._v(" "),a("figcaption",[e._v("Fig 01-033")])]),e._v(" "),a("p",[e._v("\n                        So if we drop into the code-behind here we can clean up those commented lines of code.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnSave(object sender, RoutedEventArgs e)\n{\n    //var customer = _ZzaContext.Customers.Where(c => c.Id == (Guid)(CustomerIdLabel.Content)).FirstOrDefault();\n    //customer.LastName = CustomerLastNameTextBox.Text;\n    // Get all the other editable field values...\n    // Persist those changes somewhere\n    _ZzaContext.SaveChanges();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig01-034")])]),e._v(" "),a("p",[e._v("\n                        The other thing to point out here is that in the OnSave method we don't have to do all this work to pull\n                        individual values from controls and put them into properties on an object because the object we set as the\n                        DataContext is being tracked, in our case, by Entity Framework and it knows about those properties changed,\n                        because the whole object was set as the DataContext and when we're changing those properties, Entity Framework\n                        is raising property Change Notifications and it knows about those. So we can simply go off and save changes\n                        here and not have to do any pushing and pulling anymore.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnSave(object sender, RoutedEventArgs e)\n{\n    _ZzaContext.SaveChanges();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig01-035")])]),e._v(" "),a("p",[e._v("\n                        So I can go ahead and run, I can modify Pucket's name, Save, shut down, and restart, and we can see those\n                        changes were persisted. Now for just one editable field here, it doesn't really pay huge dividends to the Data\n                        Binding, but where it starts to become really apparent is when you have a big data entry form with lots of\n                        fields. So let's go up here and add a few more rows to our grid and we'll add a few more data entry forms for\n                        other properties on a customer\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Grid.Row="1"\n    Grid.Column="0"\n    Content="Customer Last Name" />\n<TextBox Text="{Binding LastName}"\n    Grid.Row="1"\n    Grid.Column="1" />\n<Label Grid.Row="2"\n    Grid.Column="0"\n    Content="Customer First Name" />\n<TextBox Text="{Binding FirsName}"\n    Grid.Row="2"\n    Grid.Column="1" />\n<Label Grid.Row="3"\n    Grid.Column="0"\n    Content="Customer Phone" />\n<TextBox Text="{Binding Phone}"\n    Grid.Row="3"\n    Grid.Column="1" />\n<Label Grid.Row="4"\n    Grid.Column="0"\n    Content="Customer Email" />\n<TextBox Text="{Binding Email}"\n    Grid.Row="4"\n    Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-036")])]),e._v(" "),a("p",[e._v("\n                        So now we're binding to the customer LastName, FirstName, Phone, and Email in individual TextBoxes and we\n                        don't have to make any modifications to the code-behind now because the code-behind is just pushing a whole\n                        customer object into the DataContext and it will flow down to all of these bindings. So we could run, we could\n                        modify First Name, Last Name, Customer Phone, Save our changes, shut down, and restart, and all those changes\n                        have been persisted.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(239)}}),e._v(" "),a("figcaption",[e._v("Fig 01-037")])]),e._v(" "),a("p",[e._v("\n                        So now you just get to focus on the markup and deciding how do you want to render something and what is the\n                        property on the DataContext that's going to give you that data.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Consolidating DataContexts")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex02-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 2\\before\\DataBindingBasics\\DataBindingBasics.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-004"
}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex02-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 2\\after\\DataBindingBasics\\DataBindingBasics.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex02-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        Now one thing that's kind of inefficient in the previous demo in the way we are doing things is we're setting\n                        the DataContext multiple times for individual controls. So here we're setting the DataContext of the window as\n                        a whole to be a customer, but then we have to set a separate DataContext on the ListBox and a separate\n                        DataContext on the DataGrid itself.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    Loaded += MainWindow_Loaded;\n}\n\nvoid MainWindow_Loaded(object sender, RoutedEventArgs e)\n{\n\n    var firstCustomer = _ZzaContext.Customers.FirstOrDefault();\n    DataContext = firstCustomer;\n\n    var orderDates = _ZzaContext.Orders\n        .Where(o => o.CustomerId == firstCustomer.Id).Select(o => o.OrderDate).ToList();\n    OrdersList.DataContext = orderDates;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig01-038")])]),e._v(" "),a("p",[e._v("\n                        Generally when you're doing data binding you're going to try to aggregate all of the objects needed to support\n                        a given screen onto some single object you can set as a DataContext, and that kind of leads to the MVVM\n                        pattern, the Model-View-ViewModel pattern. Now I'm not really going to go into any detail on MVVM,\n                        Model-View-ViewModel in this course because I want to emphasize that everything about data binding you can\n                        leverage, even if you don't embrace the MVVM pattern or perhaps you go do MVC or MVP as other patterns you\n                        could use, data binding can still help you out there. But just to show a very lightweight form of MVVM is, if\n                        we declared an instance of a main window ViewModel here and we go look in the code. And this thing is actually\n                        already defined, and you can see it has the Customer that we need for part of the screen, order dates that we\n                        need for another part of the screen, and OrderItems that we need for another part of the screen, all just\n                        exposed as properties on that ViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace DataBindingBasics\n{\n    public class MainWindowViewModel\n    {\n        public Customer Customer { get; set; }\n        public List<DateTime> OrderDates { get; set; }\n        public List<OrderItem> OrderItems { get; set; }\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig01-039")])]),e._v(" "),a("p",[e._v("\n                        Now when you really do MVVM you're generally going to encapsulate down on your ViewModel the interaction logic\n                        and also the data loading and saving kind of logic inside of the ViewModel and get that out of the code-behind\n                        so it's more testable, but at a minimum here, to support a little bit better data binding you need to\n                        aggregate all the data the screen needs on a single object so that you can set an instance of that single\n                        object as your DataContext.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So if we go modify the code a little bit more, we've got this instance of the ViewModel available to us now.\n                        Once we get our first Customer we'll set that as the Customer property on the ViewModel and we'll get rid of\n                        this DataContext setting\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var firstCustomer = _ZzaContext.Customers.FirstOrDefault();\n_ViewModel.Customer = firstCustomer;\nDataContext = firstCustomer;")])]),e._v(" "),a("figcaption",[e._v("Fig01-040")])]),e._v(" "),a("p",[e._v("\n                        And then once we have our OrderDates we'll set those as the OrderDates property on the ViewModel and down\n                        below in our Order selected we can set the OrderItems property on the ViewModel to that set of OrderItems for\n                        the current Order.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' void MainWindow_Loaded(object sender, RoutedEventArgs e)\n{\n\n    var firstCustomer = _ZzaContext.Customers.FirstOrDefault();\n    _ViewModel.Customer = firstCustomer;\n\n    var orderDates = _ZzaContext.Orders\n        .Where(o => o.CustomerId == firstCustomer.Id).Select(o => o.OrderDate).ToList();\n    _ViewModel.OrderDates = orderDates;\n\n\nvoid OnOrderSelected(object sender, SelectionChangedEventArgs args)\n{\n    var selectedOrder = _ZzaContext.Orders.Include("OrderItems")\n        .Where(o => o.OrderDate == (DateTime)OrdersList.SelectedItem &&\n            o.CustomerId == (Guid)CustomerIdLabel.Content).FirstOrDefault();\n    _ViewModel.OrderItems = selectedOrder.OrderItems.ToList();\n ')])]),e._v(" "),a("figcaption",[e._v("Fig01-041")])]),e._v(" "),a("p",[e._v("\n                        Now all we need to do is set the DataContext as a whole to an instance of that ViewModel. Now that DataContext\n                        will be set at a window level and it'll flow down to all of the child controls.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var orderDates = _ZzaContext.Orders\n    .Where(o => o.CustomerId == firstCustomer.Id).Select(o => o.OrderDate).ToList();\n_ViewModel.OrderDates = orderDates;\nDataContext = _ViewModel;")])]),e._v(" "),a("figcaption",[e._v("Fig01-042")])]),e._v(" "),a("p",[e._v("\n                        That implies that we need to change some of the bindings over here in our XAML. So first off, each of these\n                        bindings for Customer I could prefix with Customer. and it would go to that ViewModel.Customer to get the\n                        object and then get to the LastName property on there, and then I'd have to say Customer.FirstName down here,\n                        and so on.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Grid.Row="1"\n   Grid.Column="0"\n   Content="Customer Last Name" />\n<TextBox Text="{Binding Customer.LastName}"\n   Grid.Row="1"\n   Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-043")])]),e._v(" "),a("p",[e._v("\n                        Another way I could do the same thing is, because all these controls are grouped inside of this grid, I could\n                        just go to the grid and set the DataContext to the grid using a binding to the Customer property on our\n                        ViewModel\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid DataContext="{Binding Customer}">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="*" />\n    </Grid.ColumnDefinitions>\n    <Grid.RowDefinitions>\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n    </Grid.RowDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig01-044")])]),e._v(" "),a("p",[e._v("\n                        So it basically grabs that object reference, sets it as DataContext, and everything under this grid now will\n                        just see the Customer, not the ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then I could go down to my ListBox and change the Binding to point to the OrderDates property on the\n                        ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="OrdersList"\n    ItemsSource="{Binding OrderDates}"\n    Grid.Row="0"\n    Grid.Column="1"\n    Height="100"\n    SelectionChanged="OnOrderSelected" />')])]),e._v(" "),a("figcaption",[e._v("Fig01-045")])]),e._v(" "),a("p",[e._v("\n                        And go down to the DataGrid and change that one to point to the OrderItems.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="OrderItemsDataGrid"\n    ItemsSource="{Binding OrderItems}"\n    AutoGenerateColumns="False"\n    Grid.Row="2">\n<DataGrid.Columns>')])]),e._v(" "),a("figcaption",[e._v("Fig01-046")])]),e._v(" "),a("p",[e._v("\n                        Now if we go ahead and run, you can see we've got the same kind of experience up at the top as we had before\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(240)}}),e._v(" "),a("figcaption",[e._v("Fig 01-047")])]),e._v(" "),a("p",[e._v("\n                        But notice when I'm making selections in the OrderDate list we've got a problem, it's not actually doing\n                        anything down below. You can see that we are still setting the OrderItems property here when an order\n                        selection happens. So what's the issue there? Well it kind of leads into our next module and working with data\n                        sources, but the problem is that we're setting this OrderItems property and this is a normal property and it\n                        doesn't raise any kind of change notification. So even though the value of that property has changed, when our\n                        event handler fires, the Data Binding doesn't know anything about it.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public Customer Customer { get; set; }\npublic List<DateTime> OrderDates { get; set; }\npublic List<OrderItem> OrderItems { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig01-048")])]),e._v(" "),a("p",[e._v("\n                        Now as a quick workaround and to show you something we'll cover later in the course, we could force it to\n                        update. If you've worked with older technologies like Windows Forms, you may have seen methods called\n                        Invalidate, and variations on that, that force the form to re-render itself. This is kind of the Data Binding\n                        equivalent of that and you generally don't want to do this, but I just want to expose it as a quick workaround\n                        at this point.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("OrderItemsDataGrid.GetBindingExpression(DataGrid.ItemsSourceProperty)\n                    .UpdateTarget();")])]),e._v(" "),a("figcaption",[e._v("Fig01-049")])]),e._v(" "),a("p",[e._v("\n                        We can go to the DataGrid itself, we can use a method called GetBindingExpression that we pass a reference to\n                        a DependencyProperty exposed on that. So the ItemsSourceProperty that we were setting is actually a\n                        DependencyProperty on the DataGrid. And when we say GetBindingExpression it goes to that DependencyProperty\n                        and gets the underlying binding that's setting it. So you're effectively getting a reference to this binding\n                        object here.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="OrderItemsDataGrid"\n    ItemsSource="{Binding OrderItems}"\n    AutoGenerateColumns="False"\n    Grid.Row="2">\n<DataGrid.Columns>')])]),e._v(" "),a("figcaption",[e._v("Fig01-050")])]),e._v(" "),a("p",[e._v("\n                        Then on that binding object there is a method exposed called UpdateTarget. And remember the terminology of\n                        Source and Target, Source is the underlying data source object, which is our ViewModel here, Target is the\n                        property on the element that's being set. So by saying UpdateTarget here, it's forcing it to grab the current\n                        value out of the source and set it again on the target and that forces the UI to update.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So with that in place, we can run, we can make our selections, and down at the bottom you can see the grid is\n                        updating even though our layout's not that great now.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(241)}}),e._v(" "),a("figcaption",[e._v("Fig 01-051")])]),e._v(" "),a("p",[e._v("\n                        So that code will work, but it's not very efficient. We'll see in the next module the better way to do this is\n                        to support INotifyPropertyChanged and collection Change Notifications from your data bound objects.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("\n                        Alright, so wrapping up this first module, we covered a number of key concepts and some good demos of some\n                        fundamentals. We started off by talking about the motivations of using data binding, which mostly center\n                        around the way it lets you write more loosely coupled and well-structured code that can facilitate the\n                        developer-designer interaction and can also enable separation patterns such as MVVM. Even if you don't do\n                        those things, it lets you write less code and more maintainable code.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We talked about the concepts of Sources and Targets and the way data flows between them. Sources are your\n                        behind-the-scenes objects that feed data to the screen. Targets are the elements within your screen that are\n                        going to present the data. We covered the DataContext and talked about the way it acts as a scoping mechanism\n                        for data that you're going to flow into the view. And then we talked about the bindings themselves and how\n                        they're used to tie a Source property to a Target property and flow data between those two. We saw some basic\n                        demos that showed how a data-driven form works with and without Data Binding, and what some of the basic\n                        coding patterns are around setting up a DataContext and declaring your Bindings.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In the rest of the course, we'll get a lot deeper into all of those aspects including different kinds of data\n                        source objects that you can use and how to structure that in your Views, all the different options that are\n                        available on your Bindings to do more advanced things, things like how to validate your data, and so on. So\n                        continue on to continue your journey to becoming a data binding ninja.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Design Time Data Binding")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Hi, this is Brian Noyes. In this module, we're going to look into some of the Design Time Data\n                        features that Visual Studio has to help you get your UI's hooked up, data-bound, and even generate\n                        UI elements based on your data model.\n                    ")]),e._v(" "),a("p",[e._v("We'll also look at how you can use sample data in the Design-Time environment to help get your UI\n                        laid out and to have that data to visualize what it's going to look like in the UI as you're\n                        designing it.\n                    ")]),e._v(" "),a("p",[e._v("First, we're going to look at two windows within the Visual Studio environment, the Data Sources\n                        Window and the Properties Window.\n                    ")]),e._v(" "),a("p",[e._v("Data Sources Window lets you generate data-bound UI elements based on your data model or hook up\n                        existing elements, and the Properties Window lets you hook up bindings to individual properties for\n                        the elements you're working with in the designer.\n                    ")]),e._v(" "),a("p",[e._v("Next, we're going to look at working with DataTemplates in the designer. Visual Studio carries over\n                        some features from Blend where you can actually design DataTemplates in the designer as a\n                        stand-alone resource, and then switch back into the main design mode of the designer when you're\n                        done.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we'll look at how you can use the overall feature that's referred to as Design Time Data,\n                        which is mainly a set of properties and markup extensions that you can use within your XAML that\n                        makes certain things available to the designer, but they go away at runtime. And this includes being\n                        able to pull in some sample data that will populate your UI in the designer, but not be there at\n                        runtime.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Data Sources and Properties Windows")]),e._v(" "),a("p",[e._v("One window that's been in Visual Studio for a long time and actually dates back to the Windows Forms\n                        2.0 days, is the Data Sources Window, but it carries over and works wonderfully with WPF and other\n                        XAML technologies as well.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(341)}}),e._v(" "),a("figcaption",[e._v("Fig 06-001")])]),e._v(" "),a("p",[e._v("Basically, this Data Sources Window lets you point to different object types and it will provide the\n                        information about those object types so you can use it to hook up data binding. You can\n                        drag-and-drop those entities or the individual properties of an entity onto the XAML Designer. And\n                        what will happen is, if you drop in an open area on the Designer, it's going to generate new UI\n                        elements and hook up the appropriate properties on those elements with bindings based on what you\n                        dragged and dropped.\n                    ")]),e._v(" "),a("p",[e._v("In addition, it's going to generate a CollectionViewSource in the Resource section for the entity\n                        type that was dropped and hook that up as the data source for the new bound UI elements that were\n                        generated. At design time, this gives the designer enough information to be able to generate the\n                        right controls and hook up the bindings to the properties, but at runtime you'll just need to write\n                        the code that will populate those CollectionViewSources so that at runtime they have real data.\n                    ")]),e._v(" "),a("p",[e._v("In addition to generating brand-new UI elements by dragging and dropping, you can drag-and-drop from\n                        properties or entities within the Data Sources Window onto existing controls, and that will just\n                        hook up bindings to appropriate properties on those controls.\n                    ")]),e._v(" "),a("p",[e._v("The icons in this window:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(342)}}),e._v(" "),a("figcaption",[e._v("Fig 06-002")])]),e._v(" "),a("p",[e._v("represent the kind of control that's going to be generated. And you can see drop-down arrows next to\n                        the selected item, the Product, in this case, that allows you to change what those mappings are, so\n                        you can change what control is going to be generated when you do your drag-and-drop directly through\n                        the UI, and you can also go into an Options dialog and you can change what set of controls are\n                        available when you do the drop-down for a given property type.\n                    ")]),e._v(" "),a("p",[e._v("In addition to the Data Sources Window, there is the Properties Window, which anyone who's done any\n                        UI design in Visual Studio over the years is certainly familiar with. What you may not be familiar\n                        with are the data binding features that are within the Properties Window. So first off, next to each\n                        property there's a little tiny square there:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(343)}}),e._v(" "),a("figcaption",[e._v("Fig 06-003")])]),e._v(" "),a("p",[e._v("that's kind of subtle what it is, but if you click on that, it'll bring up a context menu and in that\n                        context menu there's an option to create a data binding.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(344)}}),e._v(" "),a("figcaption",[e._v("Fig 06-004")])]),e._v(" "),a("p",[e._v("If you click on that, you get a dialog that lets you basically set everything you need to set at a\n                        property level for data binding:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(345)}}),e._v(" "),a("figcaption",[e._v("Fig 06-005")])]),e._v(" "),a("p",[e._v("So if you take the aggregate of all the fine-grained properties that we covered in various modules\n                        earlier in the course, things like, what are the different kinds of data sources a binding can have,\n                        DataContext, Source, RelativeSource, ElementName, and so on, then based on which of those you pick,\n                        on the right of the dialogue box you can set the Path to a property on the source object.\n                    ")]),e._v(" "),a("p",[e._v("Down at the bottom of this dialogue box you can see you can set up a Converter and the More settings\n                        will expand and give you access to all those other fine-grained properties, such as\n                        UpdateSourceTrigger, IsAsync, Mode, and so on.\n                    ")]),e._v(" "),a("p",[e._v("So let's dive into a series of demos that shows us the full power of the Data Sources Window and the\n                        Properties Window in the designer.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Generating DataGrids with Data Sources")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to get you familiar with some of the Design Time Data capabilities in Visual\n                        Studio 2012 and 2013. We're going to go ahead and start with a fresh new project. We'll make it a\n                        WPF project called DesignTimeData:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(346)}}),e._v(" "),a("figcaption",[e._v("Fig 06-006")])]),e._v(" "),a("p",[e._v("I'm going to add into the solution my data layer that I've been using in other demos, so I'll add an\n                        existing project and I'll go find my ZzaData project.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(347)}}),e._v(" "),a("figcaption",[e._v("Fig 06-007")])]),e._v(" "),a("p",[e._v("I need to update my NuGet packages to make sure both projects use Entity Framework. So now I've added\n                        Entity Framework to both projects.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(348)}}),e._v(" "),a("figcaption",[e._v("Fig 06-008")])]),e._v(" "),a("p",[e._v("I need a connectionString in my App.config that's pointing to my Zza database:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<connectionStrings>\n    <add name="ZzaDbContext" connectionString="server=.\\sqlexpress;database=Zza;trusted_Connection=true" providerName="System.Data.SqlClient"/>\n</connectionStrings>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-009")])]),e._v(" "),a("p",[e._v("The other thing I did here is add a reference from the DesignTimeData project to the ZaaData project\n                        so we can use it as our data layer.\n                    ")]),e._v(" "),a("p",[e._v("So the way you're going to get started with the Design-Time features is to use the Data Sources\n                        Window.\n                    ")]),e._v(" "),a("p",[e._v("You can get to it through View, Other Windows, Data Sources. You can see this is going to start up\n                        blank and you can click on Add New Data Source:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(349)}}),e._v(" "),a("figcaption",[e._v("Fig 06-010")])]),e._v(" "),a("p",[e._v("There's four choices here, but only one of them, Object, is the main one you're going to use.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(350)}}),e._v(" "),a("figcaption",[e._v("Fig 06-011")])]),e._v(" "),a("p",[e._v("Database is going to put SQL statements and connections and things, directly into your Views, which\n                        is a bad idea from a Separation of Concerns perspective.\n                    ")]),e._v(" "),a("p",[e._v("Service is doing nothing more than shortcutting to the Add Service Reference dialog to hook up to a\n                        WCF Service, generate a proxy and data contracts, so that you can start calling that service. You\n                        can do that outside of this dialog.\n                    ")]),e._v(" "),a("p",[e._v("SharePoint, I'm not going to get into here, but Object is the one I want to focus on.")]),e._v(" "),a("p",[e._v("So if I click Next, what I'm going to be presented are all the namespaces in my solution, and I can\n                        drill down and find the data objects that I want to work with. So I'm going to select Customer here\n                        as the object I want to work with.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(351)}}),e._v(" "),a("figcaption",[e._v("Fig 06-012")])]),e._v(" "),a("p",[e._v("I click Finish, and Visual Studio is basically going to reflect on that assembly and that type, and\n                        generate some information here in the Data Sources Window that we can then use to start generating\n                        data-bound UI through drag-and-drop operations.\n                    ")]),e._v(" "),a("p",[e._v("You can see that it starts off with a customer and presents all the properties defined on that\n                        customer.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(352)}}),e._v(" "),a("figcaption",[e._v("Fig 06-013")])]),e._v(" "),a("p",[e._v("By default, if I drag this out onto my UI here into the main window, it's going to generate a\n                        DataGrid with columns for each of the properties mapped to specific column types.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(353)}}),e._v(" "),a("figcaption",[e._v("Fig 06-014")])]),e._v(" "),a("p",[e._v('Now if we go look at the XAML that was generated, we can see it generated a DataGrid, it set up a\n                        binding that just says, ItemsSource="(Binding)":\n                    ')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customerDataGrid"\n          RowDetailsVisibilityMode="VisibleWhenSelected"\n          Margin="10,10,10.4,218.4"\n          ItemsSource="{Binding}"\n          EnableRowVirtualization="True"\n          AutoGenerateColumns="False">\n    <DataGrid.Columns>\n        <DataGridTextColumn x:Name="cityColumn"\n                            Width="SizeToHeader"\n                            Header="City"\n                            Binding="{Binding City}" />\n        <DataGridTextColumn x:Name="emailColumn"\n                            Width="SizeToHeader"\n                            Header="Email"\n                            Binding="{Binding Email}" />\n        <DataGridTextColumn x:Name="firstNameColumn"\n                            Width="SizeToHeader"\n                            Header="First Name"\n                            Binding="{Binding FirstName}" />\n        <DataGridTextColumn x:Name="fullNameColumn"\n                            Width="SizeToHeader"\n                            IsReadOnly="True"\n                            Header="Full Name"\n                            Binding="{Binding FullName}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-015")])]),e._v(" "),a("p",[e._v("So it's expecting a collection of customers to come down into this from somewhere, I'll show that in\n                        a moment, and then it defines explicit columns for each of the properties that it found on that data\n                        object, with each of those columns bound to the appropriate property on the customer object.\n                    ")]),e._v(" "),a("p",[e._v("It also generated up above, notice the Window.Resources created a CollectionViewSource:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                          d:DesignSource="{d:DesignInstance {x:Type Data:Customer}, CreateList=True}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-016")])]),e._v(" "),a("p",[e._v("which we covered a little bit before and we'll cover more in a later module, but it's an\n                        ICollectionView object that wraps some data collection.\n                    ")]),e._v(" "),a("p",[e._v("By default, it uses some DesignTimeData attributes that we'll be talking more about later in this\n                        module. But you can see, basically, it's specifying that the Collection Type is the Customer Type:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"
},[a("code",[e._v('d:DesignSource="{d:DesignInstance {x:Type Data:Customer}, CreateList=True}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-017")])]),e._v(" "),a("p",[e._v("and it indicates that it is a list of objects, and then it sets the DataContext on the root Grid\n                        element to point to that CollectionViewSource.\n                    ")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"xml"},[e._v('<Grid DataContext="{StaticResource customerViewSource}">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-018")])]),e._v(" "),a("p",[e._v("So it basically wires everything up so that the designer knows about the type of the object it's\n                        binding to, it can use the Type information from that object to generate the bindings for the\n                        columns, and it sets up the bindings so that if you populate this CollectionViewSource at runtime\n                        with a collection of Customers, the binding is going to kick in and you'll see that data.\n                    ")]),e._v(" "),a("p",[e._v("Now it also wired up the loaded event of the window and if we go into the code-behind we can see that\n                        it's stubbed out some lines of code here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    System.Windows.Data.CollectionViewSource customerViewSource = ((System.Windows.Data.CollectionViewSource)(this.FindResource("customerViewSource")));\n    // Load data by setting the CollectionViewSource.Source property:')])]),e._v(" "),a("figcaption",[e._v("Fig 06-019")])]),e._v(" "),a("p",[e._v("where it gets a reference to the customerViewSource through a FindResource call:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('((System.Windows.Data.CollectionViewSource)(this.FindResource("customerViewSource")));')])]),e._v(" "),a("figcaption",[e._v("Fig 06-020")])]),e._v(" "),a("p",[e._v("and then it just has some commented-out code that says, if you set the Source property of that\n                        CollectionViewSource to a collection, then things are going to be ready to go.\n                    ")]),e._v(" "),a("p",[e._v("So I could drop in here and replace this commented-out line of code with a call through our\n                        ZzaDBContext to go get the Customers as a list and push those into the Source property.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('System.Windows.Data.CollectionViewSource productViewSource = ((System.Windows.Data.CollectionViewSource)(this.FindResource("productViewSource")));\n// Load data by setting the CollectionViewSource.Source property:\nusing (ZzaDbContext context = new ZzaDbContext())\n{\n    customerViewSource.Source = context.Customers.ToList();\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-021")])]),e._v(" "),a("p",[e._v("And with just that much effort, I can go and start and we can see our data being rendered out in a\n                        Grid.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(354)}}),e._v(" "),a("figcaption",[e._v("Fig 06-022")])]),e._v(" "),a("p",[e._v("Obviously, we have some layout to do here, the columns are probably not in the order that you want by\n                        default. You can go and start moving those around in the editor, and in the case of a DataGrid,\n                        moving those around is nothing more than grabbing a column and sliding it up and down within the\n                        environment. So those are the basics of generating a DataGrid through the Data Sources Window based\n                        on some data-bound object type.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Generating Input Forms")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now in this demo I want to show you how you can go a little further with the Data Sources Window. I'm\n                        going to slide the DataGrid that we did in the last demo up to the top so I have some room at the\n                        bottom here, and I'm going to expand my overall UI a little bit.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(355)}}),e._v(" "),a("figcaption",[e._v("Fig 06-023")])]),e._v(" "),a("p",[e._v("I'm going to go back to the Data Sources Window. Now when I did the drag-and-drop before, we got a\n                        DataGrid because of this selection. It's the default selection that when you do a drag-and-drop of a\n                        given entity type, it's going to generate a DataGrid for that.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(356)}}),e._v(" "),a("figcaption",[e._v("Fig 06-024")])]),e._v(" "),a("p",[e._v("You can see there's other options here including List that's going to generate a ListViewControl,\n                        which is mostly obsolete at this point by the DataGrid, and then the one I really want to show here\n                        is the Details View.\n                    ")]),e._v(" "),a("p",[e._v("If I select Details View, the other thing I can do is you can see you have drop-down boxes at the\n                        individual property level, and this is where it figures out what kind of column within the DataGrid\n                        or what kind of field when you're doing details it's going to generate.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(357)}}),e._v(" "),a("figcaption",[e._v("Fig 06-025")])]),e._v(" "),a("p",[e._v("So I can leave most of these to TextBox, but I can also exclude certain ones by saying (None). So\n                        I'll exclude a few of these and say that we just want the Id, FirstName, LastName, Email, and Phone\n                        properties to be generated as the DataForm or DetailsView.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(358)}}),e._v(" "),a("figcaption",[e._v("Fig 06-026")])]),e._v(" "),a("p",[e._v("Now if I do my drag-and-drop, you can see that what it generates is a Grid or a little data form.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(359)}}),e._v(" "),a("figcaption",[e._v("Fig 06-027")])]),e._v(" "),a("p",[e._v("Now the ordering of the properties may not be what you want again. It's going to go in alphabetical\n                        order, by default, but we can move those around later. If we go look at what it generated, first\n                        off, at the top, notice there's no additional CollectionViewSource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n            d:DesignSource="{d:DesignInstance {x:Type Data:Customer}, CreateList=True}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-028")])]),e._v(" "),a("p",[e._v("It saw that we did a drag-and-drop of the same exact entity type and so it just can reuse that same\n                        CollectionViewSource. If we dropped a different entity type, then a new CollectionViewSource would\n                        have shown up here.\n                    ")]),e._v(" "),a("p",[e._v("Down below our DataGrid, it added the root grid that's containing all those labels and TextBoxes, and\n                        it sets up the appropriate column and row definitions to get that nice rectangular layout.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid x:Name="grid1"\n      HorizontalAlignment="Left"\n      Margin="10,158,0,0"\n      VerticalAlignment="Top">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="Auto" />\n    </Grid.ColumnDefinitions>\n    <Grid.RowDefinitions>\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="Auto" />\n    </Grid.RowDefinitions>\n    <Label Content="Email:"\n           Grid.Column="0"\n           HorizontalAlignment="Left"\n           Margin="3"\n           Grid.Row="0"\n           VerticalAlignment="Center" />\n    <TextBox x:Name="emailTextBox"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-029")])]),e._v(" "),a("p",[e._v("Then it basically generates a Label based on the property, and an input field based on the property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="Email:"\n       Grid.Column="0"\n       HorizontalAlignment="Left"\n       Margin="3"\n       Grid.Row="0"\n       VerticalAlignment="Center" />\n<TextBox x:Name="emailTextBox"\n         Grid.Column="1"\n         HorizontalAlignment="Left"\n         Height="23"\n         Margin="3"\n         Grid.Row="0"\n         Text="{Binding Email, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"\n         VerticalAlignment="Center"\n         Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-030")])]),e._v(" "),a("p",[e._v("And you saw from those drop-downs where the given input field type was coming from.")]),e._v(" "),a("p",[e._v("On the appropriate property for that input field, such as Text on a TextBox, it's going to set up a\n                        binding.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Text="{Binding Email, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-031")])]),e._v(" "),a("p",[e._v("The binding is going to have the Path to the property on the data-bound object. It's always going to\n                        declare the Mode TwoWay for input controls, even though in WPF, most of these are TwoWay by default.\n                        It does that so it can have the same DesignTime experience for Silverlight and Windows 8\n                        applications where there is no default of TwoWay for editable controls. It also puts a couple of\n                        additional properties that have to do with validation on here. We'll get to those in a later module.\n                    ")]),e._v(" "),a("p",[e._v("So you can see it just sets up a Label and input for each of the properties that you had selected\n                        that you wanted to generate input for, and puts them all in a parent grid, nicely laid out.\n                    ")]),e._v(" "),a("p",[e._v("Now if you wanted to start reordering these, maybe you wanted Id, then FirstName, then LastName, you\n                        could just drop in here and start tweaking the row numbers of the individual controls:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Grid.Row="1"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-032")])]),e._v(" "),a("p",[e._v("and then you'd probably want to move the XAML around, as well, so that it's in a linear layout in the\n                        XAML that matches the way it's laid out in the screen, but ultimately it's the Row numbers that\n                        derive which grid cell it shows up in.\n                    ")]),e._v(" "),a("p",[e._v("So that shows how you can use the Details view of the Data Sources Window to drag-and-drop and\n                        generate a data form.\n                    ")]),e._v(" "),a("p",[e._v("Additionally, you can drag out individual properties, so I could drag out LastName here, for example,\n                        and we can see it generates a single grid with two columns to it:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(360)}}),e._v(" "),a("figcaption",[e._v("Fig 06-033")])]),e._v(" "),a("p",[e._v("one for the Label and one for the input, and you could drag these out as individual grids on a\n                        per-property basis if you have some more exotic layout that you need.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Using the Properties Window")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now another Design-Time capability that you can leverage in Visual Studio is the Properties Window.\n                        If I just drag an unbound control out here, such as the TextBox here:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(361)}}),e._v(" "),a("figcaption",[e._v("Fig 06-034")])]),e._v(" "),a("p",[e._v("And I want to start data binding this, I can go to the Properties Window, select the property that I\n                        want to data bind, and go to this little square over to the right of the input here.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(362)}}),e._v(" "),a("figcaption",[e._v("Fig 06-035")])]),e._v(" "),a("p",[e._v("If I click on that, you can see a Context menu comes up that includes Create Data Binding:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(363)}}),e._v(" "),a("figcaption",[e._v("Fig 06-036")])]),e._v(" "),a("p",[e._v("If I click on that, I get a dialog here that lets me start to specify how I want to hook up the data\n                        binding.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(364)}}),e._v(" "),a("figcaption",[e._v("Fig 06-037")])]),e._v(" "),a("p",[e._v("At the top, you can see, is a drop-down that lets you pick what kind of source to use.")]),e._v(" "),a("p",[e._v("DataContext is the default, and if there is a Design-Time DataContext available, such as the one\n                        shown here:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(365)}}),e._v(" "),a("figcaption",[e._v("Fig 06-038")])]),e._v(" "),a("p",[e._v("You can see that it knows about this Customer List and this is because of the Grid that this TextBox\n                        sits within has a DataContext set using DesignTimeData, which we'll get more into later in the\n                        module.\n                    ")]),e._v(" "),a("p",[e._v("So I could just pick the property over on the right here and that's setting the Path property of the\n                        binding that's going to result from this. I could also do ElementName bindings, RelativeSource\n                        bindings, and StaticResource or Source bindings, by selecting those here.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(366)}}),e._v(" "),a("figcaption",[e._v("Fig 06-039")])]),e._v(" "),a("p",[e._v("And when I do, then the inputs change to let me pick from what's out there that I can select as the\n                        ElementName and what property on that element to use to set the Path:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(367)}}),e._v(" "),a("figcaption",[e._v("Fig 06-040")])]),e._v(" "),a("p",[e._v("We'll just use DataContext here, say FirstName as our property.")]),e._v(" "),a("p",[e._v("Down at the bottom you can see if there are Converters out there, you can either add one dynamically\n                        here and it'll let you go create the class and create it as a Resource or if there's ones already in\n                        the Resource Dictionary it'll show them here.\n                    ")]),e._v(" "),a("p",[e._v("And then the More settings expands and shows all those other properties we covered in a previous\n                        module:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(368)}}),e._v(" "),a("figcaption",[e._v("Fig 06-041")])]),e._v(" "),a("p",[e._v("for things like StringFormat, the Mode property, the UpdateSourceTrigger, FallbackValues,\n                        TargetNullValues, and so on.\n                    ")]),e._v(" "),a("p",[e._v("A bunch of these properties on the right have to do with validation, which we'll cover in a later\n                        module. So once we click OK there, if we go and inspect the XAML:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox HorizontalAlignment="Left"\n     Height="23"\n     Margin="318,273,0,0"\n     TextWrapping="Wrap"\n     Text="{Binding /FirstName}"\n     VerticalAlignment="Top"\n     Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-042")])]),e._v(" "),a("p",[e._v("We can see here is our TextBox, and all it was really doing there is creating a binding.")]),e._v(" "),a("p",[e._v("And you can see sometimes it does a little bit strange bindings. Really all we needed was FirstName\n                        here, but it adds /FirstName.\n                    ")]),e._v(" "),a("p",[e._v("So ultimately, once you get comfortable with bindings, I generally find it's just as productive to\n                        type the code in the XAML Editor as to use the Properties Window, but that may be a more expeditious\n                        path for you when you're getting familiar with the syntax.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Customizing Data Sources Control Mappings")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Another thing you can do with the Data Sources Window, is customize what the set of controls are that\n                        it's capable of generating when you do your drag-and-drop operations. If you drop-down this list, I\n                        already covered the fact that the defaults here include DataGrid, List, and Details.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(369)}}),e._v(" "),a("figcaption",[e._v("Fig 06-043")])]),e._v(" "),a("p",[e._v("The reason for that is, it assumes when you add an entity type or an object here, that you're talking\n                        about a collection of those. If we go to Customize here, you can see the dialog comes up that allows\n                        us to change the mapping there:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(370)}}),e._v(" "),a("figcaption",[e._v("Fig 06-044")])]),e._v(" "),a("p",[e._v("and you can see the checkboxes there for DataGrid and List and Details is just kind of a built-in one\n                        that generates a form as we talked about before, but the important thing is at the top you can see\n                        it's mapped to a DataType of (List), a conceptual collection of a given entity type.\n                    ")]),e._v(" "),a("p",[e._v("If you drop that down and go to something like String:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(371)}}),e._v(" "),a("figcaption",[e._v("Fig 06-045")])]),e._v(" "),a("p",[e._v("then what this is showing is if you're dealing with an individual property of an entity that's of\n                        type String, this is the collection of controls it's going to show as options when you go to\n                        customize what it's going to generate on drag/drop.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(372)}}),e._v(" "),a("figcaption",[e._v("Fig 06-046")])]),e._v(" "),a("p",[e._v("You can see at the bottom there's a link you can even add custom controls of your own and third party\n                        component libraries will show up in this list as well. And you can just check additional things. So,\n                        for example, if I wanted to go back to the List and say I want to be able to generate a ComboBox\n                        when I drag-and-drop an entity type that represents a list. I can click OK there\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(373)}}),e._v(" "),a("figcaption",[e._v("Fig 06-047")])]),e._v(" "),a("p",[e._v("and then now I could drop this down, select ComboBox, drag-and-drop, and you can see the sizing is\n                        kind of funky, but it generated a ComboBox:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(374)}}),e._v(" "),a("figcaption",[e._v("Fig 06-048")])]),e._v(" "),a("p",[e._v("and if we go look at the XAML:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox x:Name="customerComboBox"\n      DisplayMemberPath="City"\n      ItemsSource="{Binding}"\n      Margin="239,237,80.4,107.4"\n      SelectedValuePath="City">\n        <CombBox.ItemsPanel>\n            <ItemsPanelTemplate>\n                <VirtualizingStackPanel />\n            </ItemsPanelTemplate>\n        </CombBox.ItemsPanel>\n    </ComboBox>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-049")])]),e._v(" "),a("p",[e._v("what it created for me was a ComboBox with the ItemsSource bound to the current DataContext, because\n                        it saw that that ComboBox was dropped inside of a Grid that already had a customerViewSource hooked\n                        up, so it could data bind to that.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid DataContext="{StaticResource customerViewSource}">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-050")])]),e._v(" "),a("p",[e._v("Now notice a couple other things about dropping a ComboBox like this. One is that it hooks up two\n                        other properties relative to data binding that are important, the DisplayMemberPath property\n                        indicates what property on the individual objects in the collection your binding to should be used\n                        to render text in the ComboBox. And the SelectedValuePath is going to be used to point to another\n                        property on that same object that can be used to track a value, typically a primary key type of\n                        value.\n                    ")]),e._v(" "),a("p",[e._v("You can see by default here, it set both of those to the same property.")]),e._v(" "),a("p",[e._v("And if we look at our Data Sources Window and expand the Customer, we can see it picked City, even\n                        though that was marked None:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(375)}}),e._v(" "),a("figcaption",[e._v("Fig 06-051")])]),e._v(" "),a("p",[e._v("and that's because it's the first string property that it found on the Customer alphabetically.")]),e._v(" "),a("p",[e._v("So as I talked about when dragging and dropping and generating a form, it's always going to generate\n                        things based on the alphabetical order of the properties on the object, so you may have to do some\n                        tweaking of the XAML afterwards.\n                    ")]),e._v(" "),a("p",[e._v("And the DisplayMemberPath and SelectedValuePath it's rarely going to get correct, so you're always\n                        going to want to take a look at those and adjust the values to the appropriate property for your\n                        scenario.\n                    ")]),e._v(" "),a("p",[e._v("The other thing it did here is on a ComboBox it always adds this ItemsPanel customization:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(376)}}),e._v(" "),a("figcaption",[e._v("Fig 06-052")])]),e._v(" "),a("p",[e._v("setting it to a virtualizing StackPanel. There are various reasons the Design Team chose to do that,\n                        but in general, you can kill that out of there.\n                    ")]),e._v(" "),a("p",[e._v("A virtualizing StackPanel is only needed when you have a very large number of items that you're going\n                        to present in a data-bound control. If you are putting hundreds or thousands of items in a ComboBox,\n                        you are just torturing your users, so please don't do that, for user experience sake, and if you\n                        don't do that, then you don't need the virtualizing StackPanel.\n                    ")]),e._v(" "),a("p",[e._v("So notice that you can also customize at the individual property level:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(377)}}),e._v(" "),a("figcaption",[e._v("Fig 06-053")])]),e._v(" "),a("p",[e._v("and this is where those other type mappings such as string come in. The set of controls presented\n                        here are based on whatever that property type is in this dialog.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(378)}}),e._v(" "),a("figcaption",[e._v("Fig 06-054")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Hook Up Existing Controls")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("So far, the examples I've shown of using the Data Sources Window have been for generating the UI, as\n                        well as the bindings on the UI properties of that control.\n                    ")]),e._v(" "),a("p",[e._v("Data Sources Window is also capable of just hooking up the binding on an existing control. So, for\n                        example, if I go to the Toolbox and go grab a TextBox and put it out here on the UI:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(379)}}),e._v(" "),a("figcaption",[e._v("Fig 06-055")])]),e._v(" "),a("p",[e._v("I could then decide what I want to put in that TextBox. In this case, I'm going to add another Data\n                        Source, so I'm going to grab the Object Data Source:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(380)}}),e._v(" "),a("figcaption",[e._v("Fig 06-056")])]),e._v(" "),a("p",[e._v("I'm going to go to my ZzaData, and we'll pick Product this time and click Finish.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(381)}}),e._v(" "),a("figcaption",[e._v("Fig 06-057")])]),e._v(" "),a("p",[e._v("You can see the icon here:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(382)}}),e._v(" "),a("figcaption",[e._v("Fig 06-058")])]),e._v(" "),a("p",[e._v("that it's mapped to the DataGrid by default, and you can see our customizations from a previous demo\n                        there:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(383)}}),e._v(" "),a("figcaption",[e._v("Fig 06-059")])]),e._v(" "),a("p",[e._v(" that ComboBox also shows up now.")]),e._v(" "),a("p",[e._v("What I could do is expand and say that maybe it's the Name of the property that I want to put into\n                        this TextBox:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(384)}}),e._v(" "),a("figcaption",[e._v("Fig 06-060")])]),e._v(" "),a("p",[e._v("So I can drag-and-drop that onto the existing TextBox, and you can see that the icon changes to a\n                        shortcut arrow.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(385)}}),e._v(" "),a("figcaption",[e._v("Fig 06-061")])]),e._v(" "),a("p",[e._v("If I release, basically it made no modifications to the control in terms of its layout or position,\n                        all it did is added a binding for the default property for that control type, so the Text property\n                        for a TextBox:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox HorizontalAlignment="Left"\n     Height="23"\n     Margin="262,269,0,0"\n     TextWrapping="Wrap"\n     Text="{Binding Name, Mode=TwoWay, NotifyOnValidationError=true, Source={StaticResource productViewSource}}"\n     VerticalAlignment="Top"\n     Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-062")])]),e._v(" "),a("p",[e._v("and it bounded to the property on the data-bound object we dragged onto it, so Name in this case.")]),e._v(" "),a("p",[e._v("It also added a couple other things. As I talked about in a previous demo, it's always going to put\n                        Mode TwoWay on there for an input control. It puts these validation properties on here that we'll\n                        get to in a later module, and then in this case, because we dragged and dropped a new entity type\n                        that didn't already have a Data Source, you can see it hooked it up using a Source binding, pointing\n                        to some Resource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('NotifyOnValidationError=true, Source={StaticResource productViewSource}}"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-063")])]),e._v(" "),a("p",[e._v("If we go back up to the top of our UI now, we can see it added a new CollectionViewSource with a\n                        DesignInstance Type of Data:Product.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                          d:DesignSource="{d:DesignInstance {x:Type Data:Customer}, CreateList=True}" />\n    <CollectionViewSource x:Key="productViewSource"\n                          d:DesignSource="{d:DesignInstance {x:Type Data:Product}, CreateList=True}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-064")])]),e._v(" "),a("p",[e._v("So, similar to what I had covered before for creating this Customer Source that it reused for all the\n                        different drag-and-drops of customers, it's going to create one CollectionViewSource for a given\n                        entity type and then all the subsequent drag-and-drops will use that single CollectionViewSource if\n                        they're using that same entity type.\n                    ")]),e._v(" "),a("p",[e._v("You can certainly break that up on your own and change things around, use MVVM to point to properties\n                        on a ViewModel or create different instances of CollectionViewSources, possibly for the same entity\n                        type that you populate with different sets of collections. But the Designer is just trying to map it\n                        to a Type, so it sets up a single CollectionViewSource per Type.\n                    ")]),e._v(" "),a("p",[e._v("We could also do something similar for a collection-oriented control. I can drag-and-drop a ListBox\n                        out here:\n                    ")]),e._v(" "),a("figure",[a("img",{
staticClass:"image",attrs:{src:n(386)}}),e._v(" "),a("figcaption",[e._v("Fig 06-065")])]),e._v(" "),a("p",[e._v("We won't worry too much about the presentation there.")]),e._v(" "),a("p",[e._v("If I then go back to my Data Sources Window and drag-and-drop an entity type onto that ListBox and go\n                        look at the XAML and what it did there:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox HorizontalAlignment="Left"\n    Height="55"\n    Margin="262,297,0,0"\n    VerticalAlignment="Top"\n    Width="176"\n    DisplayMemberPath="Description"\n    ItemsSource="{Binding Source={StaticResource productViewSource}}"\n    SelectedValuePath="Description" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-066")])]),e._v(" "),a("p",[e._v("we can see the ListBox was pre-existing in this case, so all it hooked up for us were the data\n                        binding properties again.\n                    ")]),e._v(" "),a("p",[e._v("So it sets up the ItemSource, again, pointing to that ProductViewSource that was already up in the\n                        Resource section and it sets the DisplayMemberPath and SelectedValuePath to the first string\n                        property that it finds on that entity type, which in this case was Description.\n                    ")]),e._v(" "),a("p",[e._v("Again, you're generally going to have to tweak those to what you intend them to be, probably Name or\n                        the DisplayMemberPath on a Product, and Id for the ProductId. So that's how you can use\n                        drag-and-drop operations to hook up data bindings to existing controls.\n                    ")]),e._v(" "),a("p",[e._v("In the end, as you can see, it's not really writing that much code for you. As an experienced XAML\n                        developer, I find it easier to just drop into the XAML and write the bindings myself, especially\n                        because in Visual Studio 2012 they added IntelliSense for bindings.\n                    ")]),e._v(" "),a("p",[e._v("You can see here I get IntelliSense down to the properties of a binding:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(387)}}),e._v(" "),a("figcaption",[e._v("Fig 06-067")])]),e._v(" "),a("p",[e._v("where I can set the Path equal to Name, and I can set Source equal to a StaticResource or\n                        productViewSource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Text="{Binding Path=Name, Source={StaticResource productViewSource}}"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-068")])]),e._v(" "),a("p",[e._v("But the one thing it did do, which was nice, was the declaration of that CollectionViewSource for me\n                        up in the Resources section, and getting this all hooked up. So that can definitely save you a\n                        little bit of time getting things wired up.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Editing Data Templates")]),e._v(" "),a("p",[e._v("Now another feature of Visual Studio you can take advantage of if you don't want to spend all your\n                        time just banging out XAML in the Editor, is the Visual Studio DataTemplate editing feature.\n                    ")]),e._v(" "),a("p",[e._v("This is something that came over because in Visual Studio 2012 and later, the Designer is really the\n                        same designer that Blend for Visual Studio is using and this is a feature that already existed in\n                        Blend. Basically, what you can do is graphically add DataTemplates in the designer.\n                    ")]),e._v(" "),a("p",[e._v("You can go up to an existing control, you can say you want to set up a DataTemplate for it, it will\n                        generate that DataTemplate and give you a graphical design experience on top of it. You can add\n                        controls to the template, set properties on those controls, and even hook up data binding to the\n                        properties of those controls.\n                    ")]),e._v(" "),a("p",[e._v("Now if you go and compare this to the similar features in Blend, it's a little bit limited, but it\n                        gives you a little more flexibility to go to any resource in your project and get a graphical\n                        editing experience on it.\n                    ")]),e._v(" "),a("p",[e._v("The feature I'm going to show you here in Visual Studio is just for a given control on your UI that\n                        you want to hook up a DataTemplate to, and you'll see from the demo that there's a lot of pointing\n                        and clicking and mouse movement involved to get this done. If your DataTemplate is fairly simple,\n                        you may find, as I usually do, it's easier to just bang out the XAML, but I want to get you exposed\n                        to the features. You can try it out and decide which works best for you.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Editing Data Templates")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now another nice capability that's available in the Visual Studio designer relative to data binding\n                        is the ability to work with DataTemplates directly from the designer.\n                    ")]),e._v(" "),a("p",[e._v("So I can go to something like my ListBox that's selected in the bottom left, I can right-click on it,\n                        and if I go to EditTemplate here, this has to do with ControlTemplates, not data binding, but if I\n                        go to Edit Additional Templates, you can see Edit Generated Items (ItemTemplate), and basically what\n                        we're doing here is creating an ItemTemplate for use with that control.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(388)}}),e._v(" "),a("figcaption",[e._v("Fig 06-069")])]),e._v(" "),a("p",[e._v("I can say, Create Empty:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(389)}}),e._v(" "),a("figcaption",[e._v("Fig 06-070")])]),e._v(" "),a("p",[e._v("give it a name, we'll call this ProductTemplate. You can see there's some selections down below about\n                        where it's going to go:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(390)}}),e._v(" "),a("figcaption",[e._v("Fig 06-071")])]),e._v(" "),a("p",[e._v("Those don't actually work correctly and you have no way to change them, so you just say OK here.")]),e._v(" "),a("p",[e._v("And what you end up with doesn't seem like a very impressive designer experience at first, because\n                        what you've got here is just this little box in the Designer:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(391)}}),e._v(" "),a("figcaption",[e._v("Fig 06-072")])]),e._v(" "),a("p",[e._v("A very important window in Visual Studio when working in this mode is the Document Outline View.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(392)}}),e._v(" "),a("figcaption",[e._v("Fig 06-073")])]),e._v(" "),a("p",[e._v("You can see that the Document Outline View shows that we are working with the DataTemplate and it's\n                        got a single Grid within it. In fact, if we go look at the XAML, that's exactly what we're looking\n                        at, a DataTemplate named ProductTemplate with a Grid inside of it:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(393)}}),e._v(" "),a("figcaption",[e._v("Fig 06-074")])]),e._v(" "),a("p",[e._v("but what we've got is a Design-Time experience for working with that.")]),e._v(" "),a("p",[e._v("So I can zoom in a little bit here, we'll go to 800%, and we can see we have the same kinds of\n                        Design-Time experience working with that Grid:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(394)}}),e._v(" "),a("figcaption",[e._v("Fig 06-075")])]),e._v(" "),a("p",[e._v("So say I want to set this up similar to the ProductTemplate we used in a previous module. We could\n                        click here to add a column to my Grid, so now I have two columns in my Grid.\n                    ")]),e._v(" "),a("p",[e._v("I could go to the Toolbox and grab another Grid, and put it in the right cell. I can shrink it down\n                        so that it's fully within that cell, right-click, say Reset Layout, All:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(395)}}),e._v(" "),a("figcaption",[e._v("Fig 06-076")])]),e._v(" "),a("p",[e._v("and now we'll take off all sizing and positioning so that Grid fills the right cell.")]),e._v(" "),a("p",[e._v("Then on the edges of that Grid in the designer, you can see I could split it up into two rows.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(396)}}),e._v(" "),a("figcaption",[e._v("Fig 06-077")])]),e._v(" "),a("p",[e._v("Now I've got a place to put an image on the left, the name on the top, and the description on the\n                        bottom, similar to the ProductTemplate that we used in a previous module.\n                    ")]),e._v(" "),a("p",[e._v("So now I just need to add those controls, put the image in the leftmost cell, get it shrunk down so\n                        that it's fully within it, do another Reset Layout, All. Then I can select the Right Grid so that I\n                        can see the guidelines on there, go to the Toolbox, grab a TextBlock, put it in the upper right:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(397)}}),e._v(" "),a("figcaption",[e._v("Fig 06-078")])]),e._v(" "),a("p",[e._v("Now this one gets a little harder to resize because it's so darn big compared to that tiny little\n                        thing, but I can just shrink it down, get it fully within the cell:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(398)}}),e._v(" "),a("figcaption",[e._v("Fig 06-079")])]),e._v(" "),a("p",[e._v("right-click, Reset Layout, All, and you can see things get a little wonky here because of the text\n                        being in there in a certain text size, but I could go edit that text and zero it out and then things\n                        shrink back down to something reasonable.\n                    ")]),e._v(" "),a("p",[e._v("So then I could do something similar, do another TextBlock into the bottom cell, again, it's too\n                        large, let's get rid of the text, click out, click back in, and this is where this Document window\n                        comes in really handy:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(399)}}),e._v(" "),a("figcaption",[e._v("Fig 06-080")])]),e._v(" "),a("p",[e._v("Sometimes it's hard, especially with these semi-non-visual controls, like how do I grab the TextBlock\n                        in here? You don't, you grab it in the Document Outline, and it will select it down below.\n                    ")]),e._v(" "),a("p",[e._v("And then from there, I can say Reset Layout, All, grab it up here, say Reset Layout, All, and you can\n                        see you have a little bit more control from the Document Outline.\n                    ")]),e._v(" "),a("p",[e._v("We can do things with our Grid, such as changing sizing to Auto sizing. Go to the Sizing, Auto size\n                        on that, select the top level Grid, go to the sizing of the columns and Auto size those, and now if\n                        we look at the resulting XAML:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate x:Key="ProductTemplate">\n    <Grid>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width="Auto" />\n            <ColumnDefinition Width="Auto" />\n        </Grid.ColumnDefinitions>\n        <Grid Grid.Column="1">\n            <Grid.RowDefinitions>\n                <RowDefinition Height="Auto" />\n                <RowDefinition Height="Auto" />\n            </Grid.RowDefinitions>\n            <TextBlock Grid.RowSpan="1"\n                       TextWrapping="Wrap"\n                       Text="" />\n            <TextBlock Grid.Row="1"\n                       TextWrapping="Wrap" />\n        </Grid>\n        <Image Height="Auto"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-081")])]),e._v(" "),a("p",[e._v("we have something fairly close to what we had done before manually by pasting in some code top level\n                        Grid with two columns, the inner Grid with two rows, an Image in the left cell, the TextBlocks in\n                        the right cell, and no other sizing or positioning there.\n                    ")]),e._v(" "),a("p",[e._v("Now we need to hook up data binding on these controls to the appropriate properties of a product.\n                        Obviously, I could drop right in the XAML here and bang out the code quick enough, but just to show\n                        you the designer way of doing it, I could go to my Image in the Document Outline to make sure it's\n                        selected:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(400)}}),e._v(" "),a("figcaption",[e._v("Fig 06-082")])]),e._v(" "),a("p",[e._v("go F4 to bring the Properties Window out, and go to the Source property.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(401)}}),e._v(" "),a("figcaption",[e._v("Fig 06-083")])]),e._v(" "),a("p",[e._v("I go to this little square to the right of its input field and say, Create Data Binding, and we get\n                        back to our Properties data binding window that I've covered before:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(402)}}),e._v(" "),a("figcaption",[e._v("Fig 06-084")])]),e._v(" "),a("p",[e._v("We would say that we're going to use the DataContext, which is going to flow down into that\n                        DataTemplate as we've covered, and we would use a custom Path up here to say that we're going to use\n                        the Image property of whatever that DataContext object is.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(403)}}),e._v(" "),a("figcaption",[e._v("Fig 06-085")])]),e._v(" "),a("p",[e._v("Then, likewise, we could go to this TextBlock, F4 for its properties, go to the Text property, Create\n                        Data Binding, set it to DataContext, Path of Name for this one:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(404)}}),e._v(" "),a("figcaption",[e._v("Fig 06-086")])]),e._v(" "),a("p",[e._v("Other TextBox, F4, Create Data Binding, DataContext, and Description for this one.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(405)}}),e._v(" "),a("figcaption",[e._v("Fig 06-087")])]),e._v(" "),a("p",[e._v("So you can see that's a lot of mouse movement and a lot of clicking and pointing, and generally I\n                        just found it would be a lot quicker to drop into the XAML and write those expressions myself, but I\n                        just wanted to get you exposed to the designer-based way of setting bindings as well.\n                    ")]),e._v(" "),a("p",[e._v("Now if we go back to the Design surface, you can see we're still in this, sort of, zoomed-in focus\n                        where we're designing just the DataTemplate:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(406)}}),e._v(" "),a("figcaption",[e._v("Fig 06-088")])]),e._v(" "),a("p",[e._v("How do we get out of this and back to the main Designer View?")]),e._v(" "),a("p",[e._v("Over here in the Document Outline you see this up arrow, Return scope to (Window) in the upper left\n                        of the Document Outline:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(407)}}),e._v(" "),a("figcaption",[e._v("Fig 06-089")])]),e._v(" "),a("p",[e._v("So we just click on that and we kind of zoom back out.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(408)}}),e._v(" "),a("figcaption",[e._v("Fig 06-090")])]),e._v(" "),a("p",[e._v("Now you can see the Document Outline transforms to the top-level Window hierarchy, and we get our\n                        normal designer back.\n                    ")]),e._v(" "),a("p",[e._v("What if we want to drop back in there and make more tweaks? We can just go select the Control again,\n                        right-click, Edit Additional Templates, Edit Generated Items (Item Template), and then Edit Current:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(409)}}),e._v(" "),a("figcaption",[e._v("Fig 06-091")])]),e._v(" "),a("p",[e._v("and we'll go right back into that existing DataTemplate.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(410)}}),e._v(" "),a("figcaption",[e._v("Fig 06-092")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Design Time Data")]),e._v(" "),a("p",[e._v("Now let's look at an aggregate feature that's referred to as Design-Time Data in Visual Studio.\n                        Basically what this is, is for Visual Studio to really light up and give you a lot of support in the\n                        designer for working with data binding, the designer is going to have to know what data you're\n                        working with.\n                    ")]),e._v(" "),a("p",[e._v("At a minimum, that includes what type of entities you're working with so it knows about the\n                        properties and the type of those properties to facilitate some of the dialogs and things that you've\n                        seen in previous demos. In addition, if you have sample data available, it can render that in the\n                        Design-Time environment. Having this information can help you out in a number of ways with the\n                        graphical design of your user interface.\n                    ")]),e._v(" "),a("p",[e._v("First off, in hooking up the code you get better binding IntelliSense. In Visual Studio 2012, the\n                        binding properties show up when you're typing in the XAML Editor, but you don't have much\n                        information about the actual data that you're working with.\n                    ")]),e._v(" "),a("p",[e._v("One new feature in Visual Studio 2013 is that anything that's wired up as a DataContext in the\n                        Design-Time environment will show up in the IntelliSense list. And if you pick those, it's going to\n                        set those up to hook up the Path Property of the binding.\n                    ")]),e._v(" "),a("p",[e._v("In addition, you saw the Properties Binding Window can populate with the properties on your current\n                        DataContext object or on other Resource objects that you point to with a Source binding. In order to\n                        do that, it has to know what those types are. In terms of the sample data, that can help out a lot\n                        with getting your UI laid out appropriately.\n                    ")]),e._v(" "),a("p",[e._v("By having that data there in the Designer, you can visualize more what your controls are going to\n                        look like once they are populated with data, and that can help you decide on the sizing and\n                        positioning of those controls.\n                    ")]),e._v(" "),a("p",[e._v("Now one important thing to realize is that your UI elements are alive in the designer. And what I\n                        mean by that is the elements themselves are actually being constructed and loaded to render in the\n                        designer, just like they do at runtime.\n                    ")]),e._v(" "),a("p",[e._v("This means that anything you construct in the XAML is also alive too. That means they're going to be\n                        constructed and will be invoked from the designer.\n                    ")]),e._v(" "),a("p",[e._v("So, for example, if you're wiring up your ViewModel to the DataContext property in the XAML, that's\n                        going to be constructed. And in your Constructor, if you've tried to call to a service or a\n                        database, that's not going to work out because you don't have a full execution context there,\n                        specifically, you don't have any application configuration and your host executable is actually\n                        Visual Studio, not your normal host executable that you're building.\n                    ")]),e._v(" "),a("p",[e._v("So things like database and service calls will generally fail, calls out to certain frameworks may\n                        not work correctly, but basic construction of objects, setting of properties and things like that\n                        should work just fine. Now to start leveraging this Design-Time Data, you need to start using some\n                        framework features that are available.\n                    ")]),e._v(" "),a("p",[e._v("First off, there's a d:namespace that you're going to pull into your XAML. You can see it as\n                        expression/blend in the namespace name, and that's because that's where these features were\n                        originally introduced back in 2008.\n                    ")]),e._v(" "),a("p",[e._v("Next, you have certain properties that you can set on objects that are only available in the\n                        Design-Time environment. So d:DataContext is one that is similar to the normal DataContext property\n                        on an element, but if you set this on an element, it's only going to set the DataContext in the\n                        Design-Time environment, and it will basically be ignored at runtime as if it wasn't there. But in\n                        the Design-Time environment, whatever object you point this to is going to be available in the\n                        designer and can be used to render out things in bindings, and it's going to flow down the visual\n                        tree just like a normal DataContext does.\n                    ")]),e._v(" "),a("p",[e._v("Another property like this you can use is on a CollectionViewSource, is the d:DesignSource property.\n                        So this is the equivalent of the Source property on a CollectionViewSource, which you normally point\n                        to whatever the collection is that is wrapping. d:DesignSource just provides a Design-Time\n                        collection to use.\n                    ")]),e._v(" "),a("p",[e._v("Next, there's the d:DesignInstance markup extension. So this is a markup extension with curly braces\n                        that you can use on the right side of the assignment from something like DesignSource or\n                        DataContext. And what you do is you provide it a Type through an x:Type markup extension, and it's\n                        basically saying, create me an instance of this object type for the Design-Time environment so that\n                        the designer can reflect on it, find out about its properties and the types of those properties and\n                        so on, but it will basically be an empty default values for all the properties.\n                    ")]),e._v(" "),a("p",[e._v("Last, there's the d:DesignData property, and this is one that you can point to a XAML file or an XML\n                        file that can be turned into an object model, and once that object model is created, if it has the\n                        same properties as you expect for your runtime objects, those can be rendered out through the\n                        bindings.\n                    ")]),e._v(" "),a("p",[e._v("So you can use d:DesignData to set d:DataContext or d:DataSource, and instead of just getting the\n                        Type information, you actually get a whole built-up object model with values for all the properties.\n                        So let's take a look at a demo of using all these features.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Design Time Data Features")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-013",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\before\\DesignTimeSampleData\\DesignTimeSampleData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-013"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-014",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeSampleData\\DesignTimeSampleData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-014"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to get you more familiar with working with DesignTimeSampleData and some of the\n                        d:namespace markup extensions that assist you in the Design-Time environment.\n                    ")]),e._v(" "),a("p",[e._v("The starting point here is a simple WPF application project.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(411)}}),e._v(" "),a("figcaption",[e._v("Fig 06-093")])]),e._v(" "),a("p",[e._v("The only thing I've added here is I've added in the Zza data layer project that we've been using for\n                        our data, and I added a ViewModel where this ViewModel class is just set up to expose a Customers\n                        collection:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private ObservableCollection<Customer> _Customers;\npublic ObservableCollection<Customer> Customers\n{\n    get\n    {\n        return _Customers;\n    }\n    set\n    {\n        _Customers = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("Customers"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-094")])]),e._v(" "),a("p",[e._v("and it has some hard-coded data in there right now for a couple of customers that are being put into\n                        that collection, but only if you're not in the Design-Time environment:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindowViewModel()\n{\n    if (!DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))\n    {\n        Customers = new ObservableCollection<Customer>\n        {\n            new Customer { Id = Guid.NewGuid(), FirstName = "Brian", LastName = "Noyes" },\n            new Customer { Id = Guid.NewGuid(), FirstName = "Fred", LastName = "Flintstone" }\n        };\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-095")])]),e._v(" "),a("p",[e._v("So this is one of the first things that, you know, starts tying in with the sample data here, is you\n                        can see that you have this switch available to you that we've used before to make sure the database\n                        calls did not get executed in the designer, and here I've set it up the way I did before where it's\n                        guarding out the initialization of our data.\n                    ")]),e._v(" "),a("p",[e._v("But in this case, because this data is static data, it turns out this would work okay in the\n                        designer, so I'm going to get rid of the not symbol here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindowViewModel()\n{\n    if (DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))\n    {\n        Customers = new ObservableCollection<Customer>\n        {\n            new Customer { Id = Guid.NewGuid(), FirstName = "Brian", LastName = "Noyes" },\n            new Customer { Id = Guid.NewGuid(), FirstName = "Fred", LastName = "Flintstone" }\n        };\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-096")])]),e._v(" "),a("p",[e._v("and make it so that this data is only there if we're in the designer. Now this ViewModel is not\n                        hooked up to anything yet, we'll hook this up in a bit.\n                    ")]),e._v(" "),a("p",[e._v(" So if I go into my MainWindow and go to the design surface, you can see how I already added Data\n                        Sources for some of the primary entities we'll be working with:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(412)}}),e._v(" "),a("figcaption",[e._v("Fig 09-097")])]),e._v(" "),a("p",[e._v("So I'm going to add one more for my ViewModel itself, because it is just a Data Object that I can\n                        bind to its properties:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(413)}}),e._v(" "),a("figcaption",[e._v("Fig 06-098")])]),e._v(" "),a("p",[e._v("So I'm going to drill down in here:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(414)}}),e._v(" "),a("figcaption",[e._v("Fig 06-099")])]),e._v(" "),a("p",[e._v("and check the box for my MainWindowViewModel.")]),e._v(" "),a("p",[e._v(" Now as we've seen before in other demos, I could then drag this Customers collection out onto my\n                        MainWindow and it would generate a DataGrid for me, it would hook up the data binding for that\n                        DataGrid, and it would also generate a CollectionViewSource for Customers.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(415)}}),e._v(" "),a("figcaption",[e._v("Fig 06-100")])]),e._v(" "),a("p",[e._v("I'm going to Reset Layout, All, and I'm going to drag up the bottom and bring out a TextBox from the\n                        Toolbox that we'll also use in this demo.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(416)}}),e._v(" "),a("figcaption",[e._v("Fig 06-101")])]),e._v(" "),a("p",[e._v("Now if we go into the XAML and inspect what was generated from the drag-and-drop of the ViewModel,\n                        it's a little bit more complicated than some of the demos we've seen before, but the thing I want to\n                        focus on here is this part of the CollectionViewSource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('d:DesignSource="{d:DesignInstance')])]),e._v(" "),a("figcaption",[e._v("Fig 06-102")])]),e._v(" "),a("p",[e._v("I pointed it out before, but it generated a CollectionViewSource for the object that we dragged and\n                        dropped, and it uses this d:DesignSource property. So this d:namespace is a special namespace\n                        declared up above:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\nxmlns:mc="https://schemas.openxmlformats.org/markup-compatibility/2006"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-103")])]),e._v(" "),a("p",[e._v("that contains a bunch of custom markup extensions that are able to detect whether they are in the\n                        designer or not. And they're really just using that same code that I showed in the ViewModel to do\n                        that detection. So, markup extensions like this d:DesignInstance:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('d:DesignSource="{d:DesignInstance {x:Type local:MainWindowViewModel}, CreateList=True}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-104")])]),e._v(" "),a("p",[e._v("Can basically null themselves out or make themselves so they do nothing when you're not in the\n                        designer. So it's as if these properties are not even here if you're at runtime.\n                    ")]),e._v(" "),a("p",[e._v("So d:DesignSource functions like the Source property of a CollectionViewSource, but it will only set\n                        the source if you're in the designer. What it's setting it to is a DesignInstance. So a\n                        DesignInstance is a markup extension that can create a Design-Time instance of some object. The\n                        object type it's going to create in this case is our ViewModel Type, specified through an x:Type\n                        markup extension.\n                    ")]),e._v(" "),a("p",[e._v("And you can see over here")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('d:DesignSource="{d:DesignInstance {x:Type local:MainWindowViewModel}, CreateList=True}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-105")])]),e._v(" "),a("p",[e._v("As we've talked about before, the CreateList=True is part of the CollectionViewSource to say, even\n                        though we're talking about an Entity type here, make it a collection of those entities.\n                    ")]),e._v(" "),a("p",[e._v("So this just gives the designer information about the Type that's going to be used, and that allows\n                        it to populate some of those Design-Time features, such as the Create data binding dialog from the\n                        Properties window that I showed earlier.\n                    ")]),e._v(" "),a("p",[e._v("However, if we're doing the MVVM pattern, we actually don't want all this extra junk in the way, so\n                        I'm going to strip out the loaded event that it added:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Loaded="Window_Loaded">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-106")])]),e._v(" "),a("p",[e._v("I'm going to kill these CollectionViewSources")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="mainWindowViewModelViewSource"\n                          d:DesignSource="{d:DesignInstance {x:Type local:MainWindowViewModel}, CreateList=True}" />\n    <CollectionViewSource x:Key="mainWindowViewModelCustomersViewSource"\n                          Source="{Binding Customers, Source={StaticResource mainWindowViewModelViewSource}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-107")])]),e._v(" "),a("p",[e._v("I'm going to get rid of this DataContext on the root Grid:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid DataContext="{StaticResource mainWindowViewModelCustomersViewSource}">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-108")])]),e._v(" "),a("p",[e._v("and I'm going to set the binding on the DataGrid to be the Customers property that we expect to be\n                        exposed from our ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customersDataGrid"\n    RowDetailsVisibilityMode="VisibleWhenSelected"\n    ItemsSource="{Binding Customers}">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-109")])]),e._v(" "),a("p",[e._v("Now I'm going to drop in here and set the DataContext to the Window to our ViewModel.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Window.DataContext>\n    <local:MainWindowViewModel />\n</Window.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-110")])]),e._v(" "),a("p",[e._v("This would be a fairly standard structuring for MVVM. Now the reason I'm doing this is to emphasize\n                        something about the designer. I'm going to go ahead and build here, and then we'll go over to the\n                        design surface itself, and we see that there is immediately data there.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(417)}}),e._v(" "),a("figcaption",[e._v("Fig 06-111")])]),e._v(" "),a("p",[e._v("And that is because if we go back to our ViewModel, if you remember, we put this statement in here\n                        that says, only if you're in Design mode, populate the Customers with these hard-coded data values:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindowViewModel()\n{\n    if (DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))\n    {\n        Customers = new ObservableCollection<Customer>\n        {\n            new Customer { Id = Guid.NewGuid(), FirstName = "Brian", LastName = "Noyes" },\n            new Customer { Id = Guid.NewGuid(), FirstName = "Fred", LastName = "Flintstone" }\n        };\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-112")])]),e._v(" "),a("p",[e._v("And it emphasizes the fact that in the Design-Time environment, what you're seeing in the designer is\n                        live code basically. It is constructing all the elements in the element tree and anything done\n                        during their construction process is going to be live data. So it constructed the Window:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window\n    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-113")])]),e._v(" "),a("p",[e._v("And then to set the DataContext property it constructed the MainViewModel:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" <Window.DataContext>\n    <local:MainWindowViewModel/>\n</Window.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-114")])]),e._v(" "),a("p",[e._v("And in the MainViewModel's constructor, it checked and said, yes I am in Design mode, so I'll new up\n                        this collection of customers and set those properties:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('if (DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))\n{\n    Customers = new ObservableCollection<Customer>\n    {\n        new Customer { Id = Guid.NewGuid(), FirstName = "Brian", LastName = "Noyes" },\n        new Customer { Id = Guid.NewGuid(), FirstName = "Fred", LastName = "Flintstone" }\n    };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-115")])]),e._v(" "),a("p",[e._v("because we're setting customers here and it raises PropertyChanged:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' private ObservableCollection<Customer> _Customers;\n    public ObservableCollection<Customer> Customers\n    {\n        get\n        {\n            return _Customers;\n        }\n        set\n        {\n            _Customers = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Customers"));\n        }\n    }\n    public event PropertyChangedEventHandler PropertyChanged = delegate { };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-116")])]),e._v(" "),a("p",[e._v("events fire, and you're actually looking at running code in the designer here.")]),e._v(" "),a("p",[e._v("And so, this is one way you can get some sample data into your Design-Time environment, is if you\n                        have some hard-coded sample data that will be part of the construction process of the elements that\n                        are declared, then it's going to show up there and you can use that to help get your layout right\n                        and visualize exactly what it's going to look like.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(418)}}),e._v(" "),a("figcaption",[e._v("Fig 06-117")])]),e._v(" "),a("p",[e._v("The problem with that approach is you probably don't want to have all this hard-coded data:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Customers = new ObservableCollection<Customer>\n{\n    new Customer { Id = Guid.NewGuid(), FirstName = "Brian", LastName = "Noyes" },\n    new Customer { Id = Guid.NewGuid(), FirstName = "Fred", LastName = "Flintstone" }\n};')])]),e._v(" "),a("figcaption",[e._v("Fig 06-118")])]),e._v(" "),a("p",[e._v("especially any complex object model, cluttering up your production code like this, and that's where\n                        some of the other Design-Time data features come in.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Design Time Sample Data")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-015",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\before\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-015"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex07-016",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 7\\after\\DesignTimeData\\DesignTimeData.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex07-016"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("So what if you wanted to get this hard-coded data out of your ViewModels and model objects and so on?\n                        You want to get it out into some separate data files that would not even be loaded at runtime.\n                    ")]),e._v(" "),a("p",[e._v("So what I could do instead, I'm going to put the not symbol back in here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('if (!DesignerProperties.GetIsInDesignMode(new System.Windows.DependencyObject()))\n{\n    Customers = new ObservableCollection<Customer>\n    {\n        new Customer { Id = Guid.NewGuid(), FirstName = "Brian", LastName = "Noyes" },\n        new Customer { Id = Guid.NewGuid(), FirstName = "Fred", LastName = "Flintstone" }\n    };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-119")])]),e._v(" "),a("p",[e._v("so that now these customers will only be populated at runtime. And again, if I simply build and go\n                        back to the Designer, now we can see our data is gone.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(419)}}),e._v(" "),a("figcaption",[e._v("Fig 06-120")])]),e._v(" "),a("p",[e._v("Now I want to provide some sample data there, and there's a couple ways to go about this. There's one\n                        very simple and crude way, which is that you can go into your project and you can add a new Resource\n                        Dictionary which really just gives you a flat XAML file, and we'll call this MyDesignData:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(420)}}),e._v(" "),a("figcaption",[e._v("Fig 06-121")])]),e._v(" "),a("p",[e._v("Once I'm in here, I can add in other namespaces, such as my Zza.Data namespace")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ResourceDictionary xmlns:="http://schemas.microsoft.com/winfx/2006/xaml/presenstation"\n                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n                    xmlns:data="clr-namesapce:Zza.Data;assembly=Zza.Data">\n</ResourceDictionary>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-122")])]),e._v(" "),a("p",[e._v("And then I could change the root element to be some object from that namespace:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<data:Customer xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n           xmlns:data="clr-namespace:Zza.Data;assembly=Zza.Data">\n</data:Customer>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-123")])]),e._v(" "),a("p",[e._v("Once I've done that, I could drop in here and just start setting properties on the Customer. So I\n                        could set my Id equal to a GUID, I could set my FirstName equal to some value:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<data:Customer xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n            xmlns:data="clr-namespace:Zza.Data;assembly=Zza.Data">\n            Id:="5248500A-F89E-4FF2-83CE-E6A20205EAD2D" FirstName="Brian">\n</data:Customer>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-124")])]),e._v(" "),a("p",[e._v("Now I have a sample data object that I can actually use in the Design-Time environment, so I'll save\n                        that and show you the direct way of using it.\n                    ")]),e._v(" "),a("p",[e._v("If I go into the XAML of my MainWindow, I'm going to drop down to that TextBox I put at the bottom. I\n                        can add a DataContext to just this element using the d:DataContext property that we saw before, and\n                        what I'm going to set it to is a d:DesignData markup extension. This takes a Source property, which\n                        can point to a XAML file:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox d:DataContext="{d:DesignData Source=MyDesignData.xaml}"\n                    HorizontalAlignment="Left"\n                    Height="23"\n                    Margin="42,270,0,-44"\n                    TextWrapping="Wrap"\n                    Text="{Binding FirstName}"\n                    VerticalAlignment="Top"\n                    Width="120"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-125")])]),e._v(" "),a("p",[e._v(" It's all pointed to MyDesignData, and it's basically going to look into that XAML file, take the\n                        root element, create an instance of it, and use that as the DataContext.\n                    ")]),e._v(" "),a("p",[e._v("Then I can take the text here and just set up a binding to FirstName:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Text="{Binding FirstName}"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-126")])]),e._v(" "),a("p",[e._v("And as soon as I do that, in the designer we can see it's pulling Brian out of that DesignTimeData\n                        file.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(421)}}),e._v(" "),a("figcaption",[e._v("Fig 06-127")])]),e._v(" "),a("p",[e._v("Now setting up those data files by hand can be a little bit of work. Unfortunately, there's no direct\n                        support in Visual Studio for this, but if you just drop over to Blend for Visual Studio, I'm going\n                        to fire up Blend for Visual Studio 2012, and certainly this still works with 2013 as well, I'm just\n                        sticking to 2012 since 13 just came out.\n                    ")]),e._v(" "),a("p",[e._v("I can go and open the same project, and once we're in here we can go to this Data tab over on the\n                        right:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(422)}}),e._v(" "),a("figcaption",[e._v("Fig 06-128")])]),e._v(" "),a("p",[e._v("And we can select at a Project level, and in the upper right corner you can see Create Sample Data:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(423)}}),e._v(" "),a("figcaption",[e._v("Fig 06-129")])]),e._v(" "),a("p",[e._v("We'll say, New Sample Data, and you can also create sample data from a class, but I'm just going to\n                        show you the raw experience here.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(424)}}),e._v(" "),a("figcaption",[e._v("Fig 06-130")])]),e._v(" "),a("p",[e._v("I'll say, Create Sample Data, and we'll accept Sample Data Source:")]),e._v(" "),a("p",[e._v("And what it starts out with here is it's got a root level collection, which we'll call Customers:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(425)}}),e._v(" "),a("figcaption",[e._v("Fig 06-131")])]),e._v(" "),a("p",[e._v("Just like the Customers property hanging off of our ViewModel. And then it's got a couple of\n                        properties declared here, first off, a string, so we'll rename that one to be FirstName.\n                    ")]),e._v(" "),a("p",[e._v("This other one is set to a Boolean, we'll switch that to be a string as well, and you can see there's\n                        various options depending on the Type that you select, and we'll call this Id:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(426)}}),e._v(" "),a("figcaption",[e._v("Fig 06-132")])]),e._v(" "),a("p",[e._v("Now you can see there's not a one-to-one match here, our ID is actually a GUID, a GUID is not an\n                        option for the sample data, but for getting the UI laid out and stuff, this can get you pretty\n                        close.\n                    ")]),e._v(" "),a("p",[e._v("Now as soon as that's done, what I can do is go over here to my DataGrid and I'm going to delete this\n                        DataGrid out of here that was already here.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(427)}}),e._v(" "),a("figcaption",[e._v("Fig 06-133")])]),e._v(" "),a("p",[e._v("I'm going to go into the Toolbox here, find a DataGrid:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(428)}}),e._v(" "),a("figcaption",[e._v("Fig 06-134")])]),e._v(" "),a("p",[e._v("Select my root Grid here in the MainWindow, and double-click on the DataGrid.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(429)}}),e._v(" "),a("figcaption",[e._v("Fig 06-135")])]),e._v(" "),a("p",[e._v("That's going to add a new instance of it. I'm going to go ahead and Reset Layout, All:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(430)}}),e._v(" "),a("figcaption",[e._v("Fig 06-136")])]),e._v(" "),a("p",[e._v("It's going to end up overlaying my TextBox, but we're not going to use that anymore anyway.")]),e._v(" "),a("p",[e._v("Now that I have an empty DataGrid here, I can drag-and-drop the Customers collection from my Sample\n                        Data Source onto my DataGrid:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(431)}}),e._v(" "),a("figcaption",[e._v("Fig 06-137")])]),e._v(" "),a("p",[e._v("And we can see it immediately populates with some sample data.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(432)}}),e._v(" "),a("figcaption",[e._v("Fig 06-138")])]),e._v(" "),a("p",[e._v("Now I'm just going to save what I did and jump back over to Visual Studio. We'll Reload All:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(433)}}),e._v(" "),a("figcaption",[e._v("Fig 06-139")])]),e._v(" "),a("p",[e._v("and let's take a look at what it did for us. First off, you can see it added a Sample Data subfolder,\n                        the SampleDataSource, and under that a XAML file with an xsd.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(434)}}),e._v(" "),a("figcaption",[e._v("Fig 06-140")])]),e._v(" "),a("p",[e._v("The structure of that XAML file is kind of similar to what we were setting up by hand.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<!--\n      *********    DO NOT MODIFY THIS FILE     *********\n      This file is regenerated by a design tool. Making\n      changes to this file can cause errors.\n-->\n<SampleData:SampleCustomersDataSource xmlns:SampleData="clr-namespace:Expression.Blend.SampleData.SampleCustomersDataSource">\n\t<SampleData:SampleCustomersDataSource.Customers>\n\t\t<SampleData:CustomersItem Id="Aliquam integer class" FirstName="Class aliquam integer" LastName="Aenean maecenas"/>\n\t\t<SampleData:CustomersItem Id="Aenean mauris quisque" FirstName="Nam quisque aenean maecenas" LastName="Cras mauris aliquam"/>\n\t\t<SampleData:CustomersItem Id="Maecenas nullam nam vivamus" FirstName="Cras vivamus sed" LastName="Nullam duis nunc nam"/>\n\t\t<SampleData:CustomersItem Id="Praesent curae sed accumsan" FirstName="Mauris dis praesent" LastName="Aptent class praesent"/>\n\t\t<SampleData:CustomersItem Id="Donec aliquam" FirstName="Accumsan est" LastName="Amet integer auctor"/>\n\t\t<SampleData:CustomersItem Id="Dis etiam bibendum est" FirstName="Curae bibendum" LastName="Congue quisque ante"/>\n\t\t<SampleData:CustomersItem Id="Fusce aptent cras" FirstName="Nullam aptent aliquam" LastName="Sed cursus dis"/>\n\t\t<SampleData:CustomersItem Id="Aliquet lorem morbi" FirstName="Aliquet dictumst hac eleifend" LastName="Dictum vivamus est"/>\n\t\t<SampleData:CustomersItem Id="Hac dictumst" FirstName="Blandit auctor" LastName="Curae aliquam hac arcu"/>\n\t\t<SampleData:CustomersItem Id="Duis nulla leo eleifend" FirstName="Facilisi duis" LastName="Aliquet leo donec"/>\n\t</SampleData:SampleCustomersDataSource.Customers>\n</SampleData:SampleCustomersDataSource>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-141")])]),e._v(" "),a("p",[e._v("It's got a single root object, it has a Customers collection property, and then it's got individual\n                        customer items underneath that.\n                    ")]),e._v(" "),a("p",[e._v("Now you can see it called these CustomersItem instead of Customer. That shouldn't matter. Bindings\n                        don't actually couple to the type of the object that they're binding to, only to the property names\n                        on the containing objects.\n                    ")]),e._v(" "),a("p",[e._v("So as long as this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<SampleData:SampleCustomersDataSource.Customers>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-142")])]),e._v(" "),a("p",[e._v("Matches up with our Customers property on our ViewModel and the properties we put on our\n                        CustomerItems match up with the properties on a Customer:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('FirstName="Class aliquam integer" LastName="Aenean maecenas"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-143")])]),e._v(" "),a("p",[e._v("we should be good to go for getting this all hooked up.")]),e._v(" "),a("p",[e._v("Because we selected Project Level, it declared an instance of that SampleDataSource as an object\n                        inside of our application-scoped Resource Dictionary and gave it a key of SampleDataSource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Application.Resources>\n\n    <SampleData:SampleCustomersDataSource x:Key="SampleCustomersDataSource" d:IsDataSource="True"/>\n\n</Application.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-144")])]),e._v(" "),a("p",[e._v("In the MainWindow, you can see what it did is declared our DataGrid from our drag-and-drop operation:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid AutoGenerateColumns="False" ItemsSource="{Binding Customers}">\n    <DataGrid.Columns>\n        <DataGridTextColumn Binding="{Binding FirstName}" Header="FirstName"/>\n        <DataGridTextColumn Binding="{Binding Id}" Header="Id"/>\n        <DataGridTextColumn Binding="{Binding LastName}" Header="LastName"/>\n    </DataGrid.Columns>\n</DataGrid>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-145")])]),e._v(" "),a("p",[e._v("and it set the DataContext on that equal to that SampleDataSource.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid d:DataContext="{Binding Source={StaticResource SampleCustomersDataSource}}" Margin="0,0,0.4,71.8">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-146")])]),e._v(" "),a("p",[e._v("Now it should have, and sometimes does, use the d:DataContext here.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('d:DataContext="{Binding Source={StaticResource SampleCustomersDataSource}}"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-147")])]),e._v(" "),a("p",[e._v("You really only want that to be the DataContext on this DataGrid for DesignTimeData. For runtime, we\n                        want our DataContext to flow down from the Window:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" <Window.DataContext>\n    <local:MainWindowViewModel/>\n</Window.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-148")])]),e._v(" "),a("p",[e._v("especially if we're doing MVVM like this.")]),e._v(" "),a("p",[e._v("So I can build, and go back to the designer, and just prove that our sample data is still there.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(435)}}),e._v(" "),a("figcaption",[e._v("Fig 06-149")])]),e._v(" "),a("p",[e._v("But now, because our ViewModel was populating our Customers collection, if we are not in the\n                        designer, and because this DataContext is only going to overwrite what DataContext comes down the\n                        visual tree if we're in Design-time, it means that we can run this and we can see that our data\n                        coming from our ViewModel is there at runtime:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(436)}}),e._v(" "),a("figcaption",[e._v("Fig 06-150")])]),e._v(" "),a("p",[e._v("But in the designer we've got our sample data there.")]),e._v(" "),a("p",[e._v("So you can see these d:namespace markup extensions:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('d:DataContext="{Binding Source={StaticResource Samp...')])]),e._v(" "),a("figcaption",[e._v("Fig 06-151")])]),e._v(" "),a("p",[e._v("and properties give you a lot of power and flexibility to declare things that will be there in the\n                        Design-Time environment. These can help you in getting your UI laid out, visualizing what it's going\n                        to look like, handle things like localization, but then at runtime, that data can be replaced\n                        automatically with your real runtime data.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("Okay, in this module you saw that Visual Studio provides a lot of features there for giving you a\n                        more graphical user interface WYSIWYG experience for working with data binding.\n                    ")]),e._v(" "),a("p",[e._v("You saw that from the Data Sources Window you can drag-and-drop entities or individual properties and\n                        generate DataGrids, Detail Forms or even individual fields just through a simple drag/drop\n                        operation. And it not only generates the UI elements, it generates them with decent layout, and it\n                        hooks up the bindings on the appropriate properties to get it all data bound to the entity or\n                        property that you dragged out.\n                    ")]),e._v(" "),a("p",[e._v("Additionally, you saw that you can hook up existing controls. So if you want to first lay out all\n                        your controls and then hook them up to data objects, you can simply drag-and-drop from the Data\n                        Sources Window onto the existing control, and it won't generate any UI, but it will set the\n                        appropriate properties using bindings.\n                    ")]),e._v(" "),a("p",[e._v("You saw that while working with the Data Sources Window, the set of mapped controls that get\n                        generated is customizable. It has a default set based on the individual property types. You can\n                        customize that to add other control types that are in the framework, or you can bring in your own\n                        custom controls or third party libraries to that list as well.\n                    ")]),e._v(" "),a("p",[e._v("You saw that the VS Designer inherits, if you will, from Blend, because it really is the Blend\n                        Designer under the covers, a nice little feature for graphically defining your DataTemplate.\n                    ")]),e._v(" "),a("p",[e._v("Now it does involve a lot of point-and-click and drag-and-drop, and mouse movement, so in general, if\n                        it's a simple template you may be able to do it faster by typing it, but you saw that you can just\n                        right-click on a control, say you want to edit the template for that control, and the designer\n                        switches into a Resource editing mode for a single DataTemplate.\n                    ")]),e._v(" "),a("p",[e._v("Finally, you saw you can bring in some sample data into the Design-Time environment. You can either\n                        use the designer properties GetIsInDesignMode and have some hard-coded data back inside your\n                        model objects or your ViewModel objects that's only used at Design-time, or you can use some of the\n                        properties and markup extensions from the d:namespace to pull in sample data from XAML files or XML\n                        files and use that to populate your UI in the Design-Time environment only, allowing that data to be\n                        overwritten or substituted at runtime with your real-time data.\n                    ")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Xamarin Forms: Build Native Cross-platform Apps with C#")]),e._v(" "),n("a",{attrs:{href:"https://www.udemy.com/xamarin-forms-course/learn/v4/overview"}},[e._v("Xamarin Forms: Build Native\n                    Cross-platform Apps with C# On Udemy")]),n("br"),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-00-course-contents","active-class":"active"}},[n("a",[e._v("Xamarin Forms: Build Native Cross-platform Apps with C#")])]),e._v(" "),n("p",[e._v("\n                    Date Completed: 29/12/2017\n                ")]),e._v(" "),n("p",[e._v("Rating: *****")]),e._v(" "),n("p",[e._v("\n                    Good course - need to go through it again and write a full summary and review.\n                ")])],1)])])]);
},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Xamarin")])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[n("h2",[e._v("SQLite")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Xamarin - Working with Local Databases in Xamarin.Forms Using SQLite")]),e._v(" "),n("a",{attrs:{href:"https://msdn.microsoft.com/en-us/magazine/mt736454.aspx"}},[e._v("Xamarin - Working with Local Databases in\n                    Xamarin.Forms Using SQLite")]),n("br"),e._v(" "),n("p",[e._v("An MSDN magazine article describing how to work with SQLite databases in Xamarin.Forms")]),e._v(" "),n("h3",[e._v("Pull an SQLite database file from an Android device for debugging")]),e._v(" "),n("a",{attrs:{href:"https://www.liammoat.com/blog/2017/pull-an-sqlite-database-file-from-an-android-device-for-debugging"}},[e._v("Pull\n                    an SQLite database file from an Android device for debugging")]),e._v(" "),n("p",[e._v("An article that describes how to get/put SQLite database files from an Android device.")]),e._v(" "),n("h3",[e._v("SQLite Tutorial")]),e._v(" "),n("a",{attrs:{href:"http://www.sqlitetutorial.net/"}},[e._v("SQLite Tutorial")]),e._v(" "),n("p",[e._v("This SQLite tutorial teaches you everything you need to know to start using SQLite effectively. You will\n                    learn SQLite through extensive hands-on practices.\n                ")]),e._v(" "),n("h3",[e._v("SQLite/SQL Server Compact Toolbox")]),e._v(" "),n("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=ErikEJ.SQLServerCompactSQLiteToolbox"}},[e._v("SQLite/SQL\n                    Server Compact Toolbox")]),e._v(" "),n("p",[e._v("The SQL Server Compact & SQLite Toolbox adds several features to Visual Studio taht help your SQL Server\n                    Compact and SQLite development efforts:\n                ")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("ul",[n("router-link",{attrs:{to:"/vuejsessentials-01-an-introduction-to-vue","active-class":"active"}},[n("a",[e._v("An Introduction to Vue")])]),e._v(" "),e._m(1),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-02-moving-on-with-vue-cli","active-class":"active"}},[n("a",[e._v("Moving on with Vue CLI")])]),e._v(" "),e._m(2),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-03-writing-effective-apps","active-class":"active"}},[n("a",[e._v("Writing Effective Apps")])]),e._v(" "),e._m(3),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-04-handling-state-with-vuex","active-class":"active"}},[n("a",[e._v("Handling State with Vuex")])]),e._v(" "),e._m(4),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-05-authentication-in-vue-with-oauth2","active-class":"active"}},[n("a",[e._v("Authenticating in Vue with OAuth2")])]),e._v(" "),e._m(5),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-06-navigation-with-vue-router","active-class":"active"}},[n("a",[e._v("Navigation with Vue Router")])]),e._v(" "),e._m(6),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-07-design-of-vuex-modules","active-class":"active"}},[n("a",[e._v("Design of Vuex Modules")])]),e._v(" "),e._m(7),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-08-handling-image-upload","active-class":"active"}},[n("a",[e._v("Handling Image Upload")])]),e._v(" "),e._m(8)],1)])])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Course Contents")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",[n("li",[e._v("How to Get Help")]),e._v(" "),n("li",[e._v("Our First Vue App")]),e._v(" "),n("li",[e._v("App Overview")]),e._v(" "),n("li",[e._v("A Codepen Starter")]),e._v(" "),n("li",[e._v("Vue Templates and Instances")]),e._v(" "),n("li",[e._v("Creating the Template")]),e._v(" "),n("li",[e._v("Linking Templates and Instances")]),e._v(" "),n("li",[e._v("Step by Step Implementation")]),e._v(" "),n("li",[e._v("Defining Instance Methods")]),e._v(" "),n("li",[e._v("Defining Vue Directives")]),e._v(" "),n("li",[e._v("Retrieving Event Information")]),e._v(" "),n("li",[e._v("Imperative vs Declarative Programming")]),e._v(" "),n("li",[e._v("Declarative Apps with the Vue API")]),e._v(" "),n("li",[e._v("Data, Computed, and Methods")]),e._v(" "),n("li",[e._v("Updated Data Values")]),e._v(" "),n("li",[e._v("Computed Properties")]),e._v(" "),n("li",[e._v("Review from Start to Finish")]),e._v(" "),n("li",[e._v("Template Placement")]),e._v(" "),n("li",[e._v("Referencing Data in the Template")]),e._v(" "),n("li",[e._v("Expressions in Templates")]),e._v(" "),n("li",[e._v("Coding Exercise 1 Rendering with String Templates")]),e._v(" "),n("li",[e._v("Coding Exercise 2 JS Expressions with String Templates")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"23"}},[n("li",[e._v("App Overview")]),e._v(" "),n("li",[e._v("App Challenges")]),e._v(" "),n("li",[e._v("Generating a New Project")]),e._v(" "),n("li",[e._v("Why Use Vue CLI?")]),e._v(" "),n("li",[e._v("Project Walkthrough")]),e._v(" "),n("li",[e._v("Vue Files")]),e._v(" "),n("li",[e._v("Behind the Scenes of Vue Files")]),e._v(" "),n("li",[e._v("Vue Components vs Vue Instances")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"31"}},[n("li",[e._v("Starting from Scratch")]),e._v(" "),n("li",[e._v("The App Component")]),e._v(" "),n("li",[e._v("Another Way of Specifying Content")]),e._v(" "),n("li",[e._v("Multiple Ways of DOM Attachment")]),e._v(" "),n("li",[e._v("Making the SearchBar")]),e._v(" "),n("li",[e._v("Nesting Components")]),e._v(" "),n("li",[e._v("Event Directives")]),e._v(" "),n("li",[e._v("Shorthand Event Syntax")]),e._v(" "),n("li",[e._v("Data Sharing Between Components")]),e._v(" "),n("li",[e._v("Communication with Props and Events")]),e._v(" "),n("li",[e._v("Emitting Events")]),e._v(" "),n("li",[e._v("Listening for Custom Events")]),e._v(" "),n("li",[e._v("Youtube API Signup")]),e._v(" "),n("li",[e._v("Searching Youtube")]),e._v(" "),n("li",[e._v("Investigating Video Responses")]),e._v(" "),n("li",[e._v("Rendering a List of Videos")]),e._v(" "),n("li",[e._v("Updating Data Causes Rerenders")]),e._v(" "),n("li",[e._v("Data in Components vs Instances")]),e._v(" "),n("li",[e._v("Updating Data")]),e._v(" "),n("li",[e._v("Communicating from Parent to Child")]),e._v(" "),n("li",[e._v("Prop Validation")]),e._v(" "),n("li",[e._v("Separate List Components")]),e._v(" "),n("li",[e._v("Lists with V-For")]),e._v(" "),n("li",[e._v("Handling Props with V-For")]),e._v(" "),n("li",[e._v("Keys with V-For")]),e._v(" "),n("li",[e._v("Including Bootstrap Styling")]),e._v(" "),n("li",[e._v("Styling the Search Bar")]),e._v(" "),n("li",[e._v("Styling the Video List")]),e._v(" "),n("li",[e._v("Thumbnail Image Reference")]),e._v(" "),n("li",[e._v("Thumbnail by Computed Property")]),e._v(" "),n("li",[e._v("More List Item Styling")]),e._v(" "),n("li",[e._v("Handling Nested Clicks")]),e._v(" "),n("li",[e._v("Event Handling in the VideoList")]),e._v(" "),n("li",[e._v("Receiving Events in the App")]),e._v(" "),n("li",[e._v("Passing Props to the Video Detail")]),e._v(" "),n("li",[e._v("Updating Data")]),e._v(" "),n("li",[e._v("The V-If Directive")]),e._v(" "),n("li",[e._v("Referencing Video Title and Description")]),e._v(" "),n("li",[e._v("Crafting the Embed URL")]),e._v(" "),n("li",[e._v("Responsive Embeds")]),e._v(" "),n("li",[e._v("Two Column Layout")]),e._v(" "),n("li",[e._v("App Review")]),e._v(" "),n("li",[e._v("Coding Exercise 3 Events and Methods")]),e._v(" "),n("li",[e._v("Coding Exercise 4 Component Data")]),e._v(" "),n("li",[e._v("Coding Exercise 5 Events, Data, and Directives")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"75"}},[n("li",[e._v("App Overview")]),e._v(" "),n("li",[e._v("App Challenges")]),e._v(" "),n("li",[e._v("Additional Dependencies")]),e._v(" "),n("li",[e._v("A Bit of Boilerplate")]),e._v(" "),n("li",[e._v("Building the Header")]),e._v(" "),n("li",[e._v("Including Semantic UI")]),e._v(" "),n("li",[e._v("Styling the Header")]),e._v(" "),n("li",[e._v("Imgur Overview")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"83"}},[n("li",[e._v("OAuth Overview")]),e._v(" "),n("li",[e._v("Imgur API Signup")]),e._v(" "),n("li",[e._v("Handling App Logic")]),e._v(" "),n("li",[e._v("Vuex Introduction")]),e._v(" "),n("li",[e._v("Vuex Modules")]),e._v(" "),n("li",[e._v("Connecting Vuex to Vue")]),e._v(" "),n("li",[e._v("Initial Auth Module Design")]),e._v(" "),n("li",[e._v("Auth Module Mutations")]),e._v(" "),n("li",[e._v("Auth Module State and Getters")]),e._v(" "),n("li",[e._v("Updating State Values")]),e._v(" "),n("li",[e._v("Logging Out with Actions")]),e._v(" "),n("li",[e._v("Separate API Helpers")]),e._v(" "),n("li",[e._v("Forming the OAuth2 URL")]),e._v(" "),n("li",[e._v("Initiating the Login Flow")]),e._v(" "),n("li",[e._v("Wiring the Auth Module")]),e._v(" "),n("li",[e._v("Initial OAuth Request")]),e._v(" "),n("li",[e._v("Extracting the Access Token")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"100"}},[n("li",[e._v("Wiring up Vue Router")]),e._v(" "),n("li",[e._v("Browser vs Hash Routers")]),e._v(" "),n("li",[e._v("Component Insertion Point")]),e._v(" "),n("li",[e._v("Component Lifecycle Methods")]),e._v(" "),n("li",[e._v("Calling Actions")]),e._v(" "),n("li",[e._v("Parsing the Access Token")]),e._v(" "),n("li",[e._v("Data in Components with MapGetters")]),e._v(" "),n("li",[e._v("The V-Else Directive")]),e._v(" "),n("li",[e._v("Persisting Login State")]),e._v(" "),n("li",[e._v("Button Styling")]),e._v(" "),n("li",[e._v("Logging Out Users")]),e._v(" "),n("li",[e._v("Automatic Component Updates")]),e._v(" "),n("li",[e._v("Clearing LocalStorage Tokens")]),e._v(" "),n("li",[e._v("Programmatic Navigation")]),e._v(" "),n("li",[e._v("Additional Route Config")]),e._v(" "),n("li",[e._v("Navigation with Router-Link")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"116"}},[n("li",[e._v("Image Module Design")]),e._v(" "),n("li",[e._v("Module Implementation")]),e._v(" "),n("li",[e._v("Fetch Images API Documentation")]),e._v(" "),n("li",[e._v("Fetching Images")]),e._v(" "),n("li",[e._v("Communicating Across Modules")]),e._v(" "),n("li",[e._v("Testing Images Response")]),e._v(" "),n("li",[e._v("Image Upload via Imgur")]),e._v(" "),n("li",[e._v("Committing Images to State")]),e._v(" "),n("li",[e._v("Mapping the Images Getter")]),e._v(" "),n("li",[e._v("Listing Images")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",{attrs:{start:"126"}},[n("li",[e._v("Image Upload Overview")]),e._v(" "),n("li",[e._v("Upload Form HTML")]),e._v(" "),n("li",[e._v("Styling the Upload Form")]),e._v(" "),n("li",[e._v("The Upload Images Action")]),e._v(" "),n("li",[e._v("File Change Event")]),e._v(" "),n("li",[e._v("Accepting Multiple Image Files")]),e._v(" "),n("li",[e._v("The Path to Upload")]),e._v(" "),n("li",[e._v("Attaching Images with FormData")]),e._v(" "),n("li",[e._v("Concurrent Uploads")]),e._v(" "),n("li",[e._v("Layout with CSS Grid")]),e._v(" "),n("li",[e._v("Hide Images on Logout")]),e._v(" "),n("li",[e._v("Expanding the App")])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Images")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("So at this point you know a simple way to load an image from a Url. In this section you are going to\n                        learn various ways of adding images to your applications. You will learn about:")]),e._v(" "),a("ul",[a("li",[e._v("How to control the caching of image downloaded from the internet")]),e._v(" "),a("li",[e._v("How to display an activity indicator when downloading images")]),e._v(" "),a("li",[e._v("Embed images with your application so they don't have to be downloaded evertyime")]),e._v(" "),a("li",[e._v("Adding Icons")]),e._v(" "),a("li",[e._v("Rendering images with round corners")])]),e._v(" "),a("p",[e._v("Let's get started.")]),e._v(" "),a("h3",[e._v("Image Sources")]),e._v(" "),a("p",[e._v("Let's start with image sources. In Xamarin Forms apps we have two different types of images:")]),e._v(" "),a("ul",[a("li",[e._v("Platform-independent (backgrounds)")]),e._v(" "),a("li",[e._v("Platform-specific (icons, splash screens)")])]),e._v(" "),a("p",[e._v("To include platform-independent images in our applications we have two options:")]),e._v(" "),a("ul",[a("li",[e._v("We can download them using a URI or Uniform Resource Identifier")]),e._v(" "),a("li",[e._v("We can embed them in our Portable Class Library (PCL)")])]),e._v(" "),a("p",[e._v("If you want to work with platform-specific images (icons for buttons, toolbars etc.) you need to\n                        include different images in each application project (Android, iOS, Windows etc.) Throughout the\n                        rest of this section we will explore these image sources in more detail.")]),e._v(" "),a("h3",[e._v("Downloaded Images")]),e._v(" "),a("p",[e._v("Add a new Content Page called ImagePage.xaml and delete the ContentPage.Content element, add padding\n                        if required and set the MainPage property to this new page in the App.cs:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new UdemyXamarinForms.ImagePage();")])]),e._v(" "),a("figcaption",[e._v("Fig 04-001")])]),e._v(" "),a("p",[e._v("In the ImagePage.xaml file add an Image element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image Source="https://www.creativetorbay.com/media/creative-torbay/images/torquay-at-night.jpg"  x:Name="image" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-002")])]),e._v(" "),a("p",[e._v("Now let's look at what happens behind the scenes when you set the Source property to a Uri. In the\n                        code-behind after the call to InitializeComponent() add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("image.Source")])]),e._v(" "),a("figcaption",[e._v("Fig 04-003")])]),e._v(" "),a("p",[e._v("If we look at the type of the Source property we will see it is of type ImageSource:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(670)}}),e._v(" "),a("figcaption",[e._v("Fig 04-004")])]),e._v(" "),a("p",[e._v("It is not a string. In XamarinForms we have different image sources. This ImageSource class is the\n                        base for all of them. Also note that this is an abstract class so we can't create and ImageSource\n                        like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("new ImageSource()")])]),e._v(" "),a("figcaption",[e._v("Fig 04-005")])]),e._v(" "),a("p",[e._v("Instead we need to use one of it's derivatives. When working with Uris we have two options:")]),e._v(" "),a("ul",[a("li",[e._v("Use one of the factory methods on the ImageSource class:")]),e._v(" "),a("ul",[a("li",[e._v("FormUri")]),e._v(" "),a("li",[e._v("FromFile")]),e._v(" "),a("li",[e._v("FromStream")]),e._v(" "),a("li",[e._v("FromResource")])]),e._v(" "),a("li")]),e._v(" "),a("p",[e._v("In this instance we can use FromUri:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('var imageSource = ImageSource.FromUri(new Uri("https://www.creativetorbay.com/media/creative-torbay/images/torquay-at-night.jpg"));')])]),e._v(" "),a("figcaption",[e._v("Fig 04-006")])]),e._v(" "),a("p",[e._v("Note that this method return an ImageSource (the abstract base class for all image sources) so we\n                        need to explicitly cast this to a UriImageSource")]),e._v(" "),a("p",[e._v("As an alternative to the FromUri method we could create a UriImageSource by creating a new\n                        UriImageSource directly, set the Uri and store the result in an imageSource object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('var imageSource = new UriImageSource { Uri = new Uri("https://www.creativetorbay.com/media/creative-torbay/images/torquay-at-night.jpg") };')])]),e._v(" "),a("figcaption",[e._v("Fig 04-007")])]),e._v(" "),a("p",[e._v("The UriImageSource object has a couple of interesting properties:")]),e._v(" "),a("ul",[a("li",[e._v("CachingEnabled - true by default (24 hours is the default caching period)")]),e._v(" "),a("li",[e._v("CacheValidity - a TimeSpan object which specifies the duration for which our cache is valid (24\n                            hours is the default caching period)\n                        ")])]),e._v(" "),a("p",[e._v("This means when you use Xaml to add an image to your application and you set the Source to a Uri the\n                        Xaml parser will internally create the UriImageSource and because caching is enabled by default that\n                        image is cached for 24 hours. Sometimes this is the desired result but sometimes you may wish to\n                        disable caching. In those cases you cannot use Xaml. You need to go to code-behind, directly create\n                        a UriImageSource object and set CachingEnabled to false:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("imageSource.CachingEnabled = false;")])]),e._v(" "),a("figcaption",[e._v("Fig 04-008")])]),e._v(" "),a("p",[e._v("You can also specify how long the Cache is valid for by using the CacheVadility property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("imageSource.CacheValidity = TimeSpan.FromHours(1);")])]),e._v(" "),a("figcaption",[e._v("Fig 04-008")])]),e._v(" "),a("p",[e._v("Now that we have an ImageSource we can set the image object's Source property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("image.Source = imageSource;")])]),e._v(" "),a("figcaption",[e._v("Fig 04-009")])]),e._v(" "),a("p",[e._v("By the way, there is an implicit conversion from a string to UriImageSource. So if I set the\n                        image.Source to Uri like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('image.Source = "https://www.creativetorbay.com/media/creative-torbay/images/torquay-at-night.jpg";')])]),e._v(" "),a("figcaption",[e._v("Fig 04-010")])]),e._v(" "),a("p",[e._v("This string will be implicitly converted to a UriImageSource and that's the reason we can set the\n                        Source property of an Image element in Xaml to a string and it will be implicitly converted to a\n                        UriImageSource.\n                    ")]),e._v(" "),a("h3",[e._v("Aspects")]),e._v(" "),a("p",[e._v("Edit the ImagePage.xaml code-behind to look like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('var imageSource = new UriImageSource { Uri = new Uri("https://www.creativetorbay.com/media/creative-torbay/images/torquay-at-night.jpg") };\nimageSource.CachingEnabled = false;\nimage.Source = imageSource;')])]),e._v(" "),a("figcaption",[e._v("Fig 04-011")])]),e._v(" "),a("p",[e._v("Edit the Image element in Xaml to look like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image x:Name="image" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-012")])]),e._v(" "),a("p",[e._v("If I run the application now this is what we get:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(671)}}),e._v(" "),a("figcaption",[e._v("Fig 04-013")])]),e._v(" "),a("p",[e._v("So this 1920 by 1080 image is scaled down to fit on the screen. This is known as AspectFit. The Image\n                        object has a property called Aspect which is an enumeration with three members:")]),e._v(" "),a("ul",[a("li",[e._v("AspectFill")]),e._v(" "),a("li",[e._v("AspectFit")]),e._v(" "),a("li",[e._v("Fill - which is the default")])]),e._v(" "),a("p",[e._v("This property can be set in code-behind or in Xaml. So in Xaml it would look like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image x:Name="image" Aspect="Fill" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-014")])]),e._v(" "),a("p",[e._v("Which would result in the image being displayed like this:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(672)}}),e._v(" "),a("figcaption",[e._v("Fig 04-015")])]),e._v(" "),a("p",[e._v("We can see the image is distorted - because we have a landscape image that is stretched to fit into\n                        dimensions of this device.")]),e._v(" "),a("p",[e._v("We also have AspectFill which results in the image being displayed like this:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(673)}}),e._v(" "),a("figcaption",[e._v("Fig 04-016")])]),e._v(" "),a("p",[e._v("The image fills the entire display area but the aspect is preserved - this results in an image that\n                        is not distorted but will more than likely result in cropping. This is useful for displaying\n                        background images.\n                    ")]),e._v(" "),a("p",[e._v("When displaying images from the internet sometimes it can take a short time before the image is\n                        loaded. In those cases it is a good idea to display an activity indicator - which is like loader\n                        icon in the center of the screen. This is the topic of the next lecture.")]),e._v(" "),a("h3",[e._v("Activity Indicator")]),e._v(" "),a("p",[e._v("Now let's add an activity indicator on the page. Now, because we are going to have multiple elements\n                        we are going to use the AbsoluteLayout because we want to position the activity indicator right in\n                        the middle of the page:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n    <Image x:Name="image" Aspect="Fill" />\n</AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-017")])]),e._v(" "),a("p",[e._v("First of all we added an ActivityIndicator with the IsRunning element set to true (by default this is\n                        false):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ActivityIndicator IsRunning="true"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-018")])]),e._v(" "),a("p",[e._v("Now let's set the Attached Bindable Properties. For the X and Y coordinates we use proportional\n                        values but for the width and height we specify absolute values :")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('AbsoluteLayout.LayoutBounds="0.5, 0.5, 100, 100"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-019")])]),e._v(" "),a("p",[e._v("Next we add the LayoutFlags Attached Bindable Property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('AbsoluteLayout.LayoutFlags="PositionProportional"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-020")])]),e._v(" "),a("p",[e._v("If we were to run the app now you wouldn't see the ActivityIndicator because the image would be\n                        rendered on top of the ActivityIndicator. We can resolve this temporarily by setting the IsVisible\n                        attribute of the Image attribute to false. So the XAML so far looks like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('    <AbsoluteLayout>\n    <ActivityIndicator\n            IsRunning="true"\n            AbsoluteLayout.LayoutBounds="0.5, 0.5, 100, 100" AbsoluteLayout.LayoutFlags="PositionProportional"/>\n    <Image x:Name="image" Aspect="AspectFill"/>\n</AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-021")])]),e._v(" "),a("p",[e._v("If we run the application now we will see the ActivityIndicator in the center of the screen:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(674)}}),e._v(" "),a("figcaption",[e._v("Fig 04-022")])]),e._v(" "),a("p",[e._v("We can change the Color of the ActivityIndicator. First of all change the Color of the ContentPage to\n                        black:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage BackgroundColor="Black"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-023")])]),e._v(" "),a("p",[e._v("Then change the color of the ActivityIndicator to white:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ActivityIndicator IsRunning="true" Color="White"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-024")])]),e._v(" "),a("p",[e._v("Now our application will look like this:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(675)}}),e._v(" "),a("figcaption",[e._v("Fig 04-025")])]),e._v(" "),a("p",[e._v("Now we only want to show the ActivityIndicator when the Image is downloading so instead of setting\n                        IsRunning to true we will use a Binding expression. I want to bind the IsRunning attribute of the\n                        ActivityIndicator to the IsLoading attribute of the Image:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('IsRunning="{Binding Source={x:Reference image}, Path=IsLoading }"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-026")])]),e._v(" "),a("p",[e._v("So our Binding expression starts with the Binding keyword inside curly braces. We specify the Source\n                        using another Binding expression (and another set of curly braces). The second Binding expression\n                        contains a Markup extension x:Reference which references the image element. Finally we set the Path\n                        to IsLoading. This is a read-only property of the image. Whilst the image is being downloaded from\n                        the internet IsLoading will be set to true and when the downloading has finished it will be\n                        false.")]),e._v(" "),a("p",[e._v("Remove the IsVisible attribute from the Image and preview the app:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(676)}}),e._v(" "),a("figcaption",[e._v("Fig 04-027")])]),e._v(" "),a("p",[e._v("The ActivityIndicator appears and is then hidden when the image is finished loading as expected.\n                        However the Image is not filling the entire page. This is because we put it inside an AbsoluteLayout\n                        and we have not set it's size. So we need to set the LayoutBounds Attached Bindable Property: ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('AbsoluteLayout.LayoutBounds="0, 0, 1, 1"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-028")])]),e._v(" "),a("p",[e._v('The numbers specified in the LayoutBounds (X, Y, Width, Height) are all proportional so we also\n                        specify AbsoluteLayout.LayoutFlags="All":')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image x:Name="image" Aspect="AspectFill"\n    AbsoluteLayout.LayoutBounds="0, 0, 1, 1"\n    AbsoluteLayout.LayoutFlags="All"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-029")])]),e._v(" "),a("p",[e._v("Now if we check the result the ActiviyIndicator is displayed and when the image is loaded it fits as\n                        expected:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(677)}}),e._v(" "),a("figcaption",[e._v("Fig 04-030")])]),e._v(" "),a("p",[e._v("The finished Xaml Looks like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n    <ActivityIndicator\n            IsRunning="{Binding Source={x:Reference image}, Path=IsLoading }"\n            Color="White"\n            AbsoluteLayout.LayoutBounds="0.5, 0.5, 100, 100" AbsoluteLayout.LayoutFlags="PositionProportional"/>\n    <Image x:Name="image" Aspect="AspectFill"\n           AbsoluteLayout.LayoutBounds="0, 0, 1, 1"\n           AbsoluteLayout.LayoutFlags="All"\n    />\n</AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-031")])]),e._v(" "),a("p",[e._v("Now downloading images is one way to add platform-independent images in your applications. It's\n                        useful if you want your app to let the user browse some kind of photo gallery. A real-world example\n                        of this is Facebook where you can browse different photos and as each photo is being downloaded you\n                        see an activity indicator. However, in the app we have just built the image we are using is supposed\n                        to be the background image of the app. It doesn't make sense to download it from the internet every\n                        time. So in the next lecture we will demonstrate how to embed it in the Portable Class Library.")]),e._v(" "),a("h3",[e._v("Embedded Images")]),e._v(" "),a("p",[e._v("First of all add another Content Page called EmbeddedImagesPage.xaml to your solution, remove the\n                        ContentPage.Content element and add an Image element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.EmbeddedImagesPage">\n    <Image x:Name="image" Aspect="AspectFill"/>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-032")])]),e._v(" "),a("p",[e._v("Now let's look at how to embed an image in your application. Add a new folder called Images to the\n                        Shared/Portable Class Library project in the Solution. Right click the folder and select\n                        Add>Existing Item and add an image to the folder. Click on the new file in the Solution Explorer and\n                        in the Properties window set the Build Action to Embedded Resource.")]),e._v(" "),a("p",[e._v("The Udemy course mentions a Resource Id in Visual Studio but I couldn't find this.")]),e._v(" "),a("p",[e._v("By default you cannot set an embedded resource in xaml. We need to setup a custom markup extension\n                        for that which is a topic for the next lecture. So go to the code-behind and add the following\n                        code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('image.Source = ImageSource.FromResource("UdemyXamarinForms.Images.torquay=at-night.jpg");')])]),e._v(" "),a("figcaption",[e._v("Fig 04-033")])]),e._v(" "),a("p",[e._v("The resource id (allegedly consists of: ")]),e._v(" "),a("ul",[a("li",[e._v("The application name")]),e._v(" "),a("li",[e._v("The folder where the resource is located (Images)")]),e._v(" "),a("li",[e._v("The filename")])]),e._v(" "),a("p",[e._v("If we run the application we should see the image embedded in the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(678)}}),e._v(" "),a("figcaption",[e._v("Fig 04-034")])]),e._v(" "),a("p",[e._v("I couldn't get the app described in this lecture working for the following reasons:")]),e._v(" "),a("ul",[a("li",[e._v("As far as I can see there is no Resource Id in the properties window of Visual Studio")]),e._v(" "),a("li",[e._v("When using the fully qualified Resource Id described above the resource was not found - no\n                            error/exception seemed to be thrown but I just got a blank page when the app ran.\n                        ")])]),e._v(" "),a("p",[e._v("I resolved this issue by following the instructions in this "),a("a",{
attrs:{href:"https://forums.xamarin.com/discussion/17953/helpful-shared-project-image-information"}},[e._v("\n                        Xamarin Forum article")]),e._v(". Specifically the answer provided by DerekWinnicki")]),e._v(" "),a("p",[e._v('You have to edit the .projitems file by hand. You simply ensure your embedded resource includes the\n                        "LogicalName" child element. The name provided there is what you would use in your code-behind:')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ItemGroup>\n    <EmbeddedResource Include="$(MSBuildThisFileDirectory)Images\\torquay-at-night.jpg">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n\t  <LogicalName>torquay-at-night.jpg</LogicalName>\n    </EmbeddedResource>\n  </ItemGroup>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-035")])]),e._v(" "),a("p",[e._v("The name used for the LogicalName becomes the resource identifier in your code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('image.Source = ImageSource.FromResource("torquay-at-night.jpg");')])]),e._v(" "),a("figcaption",[e._v("Fig 04-036")])]),e._v(" "),a("p",[e._v("Once this fix was in place the image was displayed and the app worked as desired.")]),e._v(" "),a("p",[e._v("Oddly the the following diagnostic code still failed to list the resource as found even though the\n                        image now displays successfully:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('var assembly = typeof(EmbeddedImagesPage).GetType().Assembly;\n    foreach (var res in assembly.GetManifestResourceNames())\n        System.Diagnostics.Debug.WriteLine("found resource: " + res);')])]),e._v(" "),a("figcaption",[e._v("Fig 04-037")])]),e._v(" "),a("h3",[e._v("Embedded Images in XAML")]),e._v(" "),a("p",[e._v("Earlier I told you that if we set a Source here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image Source="http://" x:Name="image" Aspect="AspectFill"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-038")])]),e._v(" "),a("p",[e._v("It will be interpreted as a Uri. This is why we can't use embedded images in Xaml. For that we need a\n                        markup extension. Something like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image\n    Source="{EmbeddedImage Source=torquay-at-night.jpg}" x:Name="image2"\n    Aspect="AspectFill"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-039")])]),e._v(" "),a("p",[e._v("Above we named our Markup Extension EmbeddedImage and we also have an attribute called Source which\n                        is set to the Resource Id of the Image.")]),e._v(" "),a("p",[e._v("So let's see how to create a Custom Markup Extension. First of all in the solution add a new folder\n                        called MarkupExtensions. In this folder add a class called EmbeddedImage. Delete the constructor and\n                        set the EmbeddedImage class to implement the IMarkupExtension interface (you will need to add a\n                        reference to the Xamarin.Forms.Xaml namespace). ")]),e._v(" "),a("p",[e._v("If you right click the interface and select implement interface one method called ProvideValue will\n                        be stubbed out. The method should return an ImageSource so we could implement the method like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public object ProvideValue(IServiceProvider serviceProvider)\n{\n    return ImageSource.FromResource("torquay-at-night.jpg");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-040")])]),e._v(" "),a("p",[e._v("You might need to resolve the namespace for ImageSource (Xamarin.Forms).")]),e._v(" "),a("p",[e._v("Next, instead of hard coding the Resource Id we will make it a parameter. First of all in the Xaml\n                        change the attribute name from Source to ResourceId:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image Source="{local:EmbeddedImage ResourceId=torquay-at-night.jpg}"\n    x:Name="image2"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-041")])]),e._v(" "),a("p",[e._v("Now in the EmbeddedImage class define a public property called ResourceId and use it in the\n                        FromResource method instead of the hard coded string:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public string ResourceId { get; set; }\n\npublic object ProvideValue(IServiceProvider serviceProvider)\n{\n    return ImageSource.FromResource(ResourceId);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-042")])]),e._v(" "),a("p",[e._v("We should also add logic to handle the scenario where the ResourceId supplied is a null or empty\n                        string:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public string ResourceId { get; set; }\n\npublic object ProvideValue(IServiceProvider serviceProvider)\n{\n    if (String.IsNullOrWhiteSpace(ResourceId))\n        return null;\n\n    return ImageSource.FromResource(ResourceId);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-043")])]),e._v(" "),a("p",[e._v("The markup extension is now complete. To use it in Xaml we must add a reference to the EmbeddedImage\n                        markup extension. The convention is to use the local namespace. So we add local: in front of our\n                        EmbeddedImage Markup Extension and we add the namespace declaration to the ContentPage element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                 x:Class="UdemyXamarinForms.EmbeddedImagesPage"\n                 xmlns:local="clr-namespace:UdemyXamarinForms">\n    <!--<Image x:Name="image1" Aspect="AspectFill" />-->\n    <Image Source="{local:EmbeddedImage ResourceId=torquay-at-night.jpg}" x:Name="image2" Aspect="AspectFill"/>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-044")])]),e._v(" "),a("p",[e._v("Let's add one more feature to make the Xaml a little bit cleaner. We can make the ResourceId what we\n                        call the ContentProperty for Embedded Image. That means we can remove the ResourceId attribute from\n                        the Xaml expression and the Xaml parser will still treat the string as a ResourceId by default:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Image Source="{local:EmbeddedImage torquay-at-night.jpg}" x:Name="image2" Aspect="AspectFill"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-045")])]),e._v(" "),a("p",[e._v("For this to work we need to add an attribute in our EmbeddedImage class just above the class\n                        definition itself:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[ContentProperty("ResourceId")]\npublic class EmbeddedImage : IMarkupExtension\n{')])]),e._v(" "),a("figcaption",[e._v("Fig 04-046")])]),e._v(" "),a("p",[e._v("Next we will discuss Platform-specific images.")]),e._v(" "),a("h3",[e._v("Platform-specific Images")]),e._v(" "),a("p",[e._v("Sometimes you need to work with images that are specific to each platform like the icons on buttons\n                        and toolbars. This necessary because each of these platforms has it's own design guidelines.")]),e._v(" "),a("p",[e._v("So if you want to give your app the native look and feel for each platform you will want to use\n                        platform-specific images.\n                    ")]),e._v(" "),a("p",[e._v("Add a new Content Page called ButtonPage.xaml for this lecture.")]),e._v(" "),a("p",[e._v("Now in this lecture we will look at how to add an icon to a button. I got the icon in question from\n                        "),a("a",{attrs:{href:"http://icons8.com"}},[e._v("icons8")])]),e._v(" "),a("p",[e._v("The resources for this lecture are separated into folders for each platform:")]),e._v(" "),a("ul",[a("li",[e._v("iOS")]),e._v(" "),a("ul",[a("li",[e._v("clock.png (32x32)")]),e._v(" "),a("li",[e._v("clock@2x.png (64x64)")]),e._v(" "),a("li",[e._v("clock@3x.png (96x96)")])]),e._v(" "),a("li",[e._v("Android")]),e._v(" "),a("ul",[a("li",[e._v("drawable/ (32x32)")]),e._v(" "),a("li",[e._v("drawable-hdpi/ (48x48)")]),e._v(" "),a("li",[e._v("drawable-xhdpi/(64x64)")]),e._v(" "),a("li",[e._v("drawable-xxhdpi/ (96x96)")])]),e._v(" "),a("li",[e._v("Windows")]),e._v(" "),a("ul",[a("li",[e._v("clock.png (32x32)")])])]),e._v(" "),a("p",[e._v("Both iOS and Android are capable of loading different image resolutions based on the target device.\n                        So you know that newer phones have more pixel density which means you can display higher quality\n                        images. That's why inside the iOS folder we have this clock icon at different resolutions. It's\n                        worth noting the naming convention of our file names in iOS. The original clock file is 32x32\n                        pixels. The next file has a suffix of @2x which is twice as big as the original file and then the\n                        last file with a suffix of @3x which is 3 times the size of the original file. So whenever you want\n                        to supply platform-specific images for iOS it's best to supply the same image in three different\n                        sizes.")]),e._v(" "),a("p",[e._v("In Android we have a different naming convention - we use different folder names. Each of the folder\n                        names start with drawable-. After that we describe the resolution of the images contained in that\n                        folder - normal (no suffix), high dpi (hdpi), extra high dpi (xhdpi) and extra, extra high dpi\n                        (xxhdpi).")]),e._v(" "),a("p",[e._v("Windows seems to offer inconsistent documentation. Some sources say you should specify different\n                        resolution images whereas other documents deny this. For this example we will supply only one file\n                        in the Windows folder.")]),e._v(" "),a("p",[e._v("One thing you need to know about Android is that the name of your file should only contain:")]),e._v(" "),a("ul",[a("li",[e._v("Lowercase letters")]),e._v(" "),a("li",[e._v("Numbers")]),e._v(" "),a("li",[e._v("Underscore")]),e._v(" "),a("li",[e._v("Period")])]),e._v(" "),a("p",[e._v("Now let's demonstrate how to use these icons in our application. In Visual Studio Solution Explorer\n                        locate the resources folder in the iOS project and add the three clock files specified above. Also\n                        you might want to right click these files (Show all files) and select Include In Project.")]),e._v(" "),a("p",[e._v("With Android we also have a Resources folder. Inside this folder there are four subfolders that all\n                        start with drawable. Add the relevant clock.png files into the different resolution folders.")]),e._v(" "),a("p",[e._v("Windows projects require you to place the files in the root of the project")]),e._v(" "),a("p",[e._v("Now that we have included our image in the different application projects we can add a button to our\n                        ButtonPage.xaml with the Image set to clock.png:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Image="clock.png" />\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 04-047")])]),e._v(" "),a("p",[e._v("If we run the application")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(679)}}),e._v(" "),a("figcaption",[e._v("Fig 04-048")])]),e._v(" "),a("p",[e._v("If you have a lot of images in your app you may want to organise them into different folders. Let's\n                        demonstrate. Firstly add a Name attribute to your button:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Image="clock.png" x:Name="btn"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-049")])]),e._v(" "),a("p",[e._v("Now in the code-behind add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("btn.Image")])]),e._v(" "),a("figcaption",[e._v("Fig 04-050")])]),e._v(" "),a("p",[e._v("If you look at the Type of the Image property it is FileImageSource. This is one of the derivatives\n                        of ImageSource that we have seen earlier. If you wanted to create an FileImageSource you would use:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('btn.Image = (FileImageSource) ImageSource.FromFile("clock.png");')])]),e._v(" "),a("figcaption",[e._v("Fig 04-051")])]),e._v(" "),a("p",[e._v("The FromFile is another static factory method on the ImageSource class.")]),e._v(" "),a("p",[e._v("Let's say that in our Windows Project we want to put our image files in a sub folder called images.")]),e._v(" "),a("p",[e._v("We can use the Device.OnPlatform method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('btn.Image = (FileImageSource) ImageSource.FromFile(\n    Device.OnPlatform(\n        iOS: "clock.png",\n        Android: "clock.png",\n        WinPhone: "Images/clock.png"\n        ));')])]),e._v(" "),a("figcaption",[e._v("Fig 04-052")])]),e._v(" "),a("p",[e._v("In this case I am overriding the path in the Windows project but you can use the same technique\n                        to override the filename or it's path in iOS or Android Projects as well.")]),e._v(" "),a("p",[e._v("You can apply the same technique in Xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button.Image>\n    <OnPlatform x:TypeArguments="FileImageSource"\n                iOS="clock.png"\n                Android="clock.png"\n                WinPhone="Images/clock.png"/>\n</Button.Image>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-053")])]),e._v(" "),a("p",[e._v("We deleted the Source attribute and used Property Element Syntax to specify different images for\n                        different platforms:")]),e._v(" "),a("p",[e._v("Because above image is not really a string it is a FileImageSource we set the TypeArguments to\n                        FileImageSource. For different platforms we supply different values - as we did in the code-behind.\n                        An implicit conversion takes place between the string values you supply to a FileImageSource Type.\n                        That's why earlier on the Button element we could simply set the Image attribute to a string.\n                    ")]),e._v(" "),a("p",[e._v("Before we finish I would like to clarify something. Earlier I mentioned that there was an implicit\n                        conversion between a string and a UriImageSource:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image Source="http://.."/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-054")])]),e._v(" "),a("p",[e._v("and then later said there was an implicit conversion between a string and a FileImageSource:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image Source="clock.png"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-055")])]),e._v(" "),a("p",[e._v("How does XamarinForms know which way to parse the string. If the string starts with http:// it\n                        will parse it into a UriImageSource otherwise it will parse it into a FileImageSource which means\n                        a local file in each application project.")]),e._v(" "),a("h3",[e._v("Application Icons")]),e._v(" "),a("p",[e._v("Now let me show you how to set application icons. I have only documented the part of the lecture\n                        that deals with setting application icons in Visual Studio as Xamarin Studio is now deprecated.")]),e._v(" "),a("p",[e._v("For the iOS project double click Info.plist select Visual Assets and that's where my Version of\n                        Visual Studio starts to differ from the course material - so I will have to look into this myself and\n                        then document it at a later date.")]),e._v(" "),a("h3",[e._v("Rounded Images")]),e._v(" "),a("p",[e._v("By default in XamarinForms we cannot display rounded images - we need a plugin for that. If you\n                        just search for ImageCirclePlugin in Google you will find the GitHub page by James Montemagno along\n                        with usage instructions.")]),e._v(" "),a("p",[e._v("First we need to add the plugin via Nuget from the following address Xam.Plugins.Forms.ImageCircle.\n                        In Visual Studio we need to use Nuget to add this plugin to every project in our solution. So right\n                        click on the solution and select Manage Nuget packages. Copy the address Xam.Plugins.Forms.ImageCircle\n                        into the Search bar and then install the ImageCircle plugin against the Android and iOS projects.")]),e._v(" "),a("p",[e._v("Now in each application project we have a class that bootstraps our application. In iOS it's\n                        AppDelegate.cs. In this class there is a method called FinishedLaunching:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    global::Xamarin.Forms.Forms.Init ();\n    LoadApplication (new UdemyXamarinForms.App ());\n\n    return base.FinishedLaunching (app, options);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-056")])]),e._v(" "),a("p",[e._v("The first line of this method which calls Forms.Init() basically kickstarts Xamarin Forms. Next\n                        we have a call to the LoadApplication method which passes an instance of the App class as an\n                        argument - this is the App class that we have in the Portable Class Library. Finally we have a call\n                        to the base.FinishedLaunching method.")]),e._v(" "),a("p",[e._v("After the call to the Init method we need to add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("ImageCircleRenderer.Init();")])]),e._v(" "),a("figcaption",[e._v("Fig 04-057")])]),e._v(" "),a("p",[e._v("The ImageCircleRenderer is defined in ImageCircle.Forms.Plugin.iOS.")]),e._v(" "),a("p",[e._v("For Android we select MainActivity.cs in the OnCreate method there is a call to Forms.Init:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("protected override void OnCreate (Bundle bundle)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n    base.OnCreate (bundle);\n\n    global::Xamarin.Forms.Forms.Init (this, bundle);\n    LoadApplication (new UdemyXamarinForms.App ());\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-058")])]),e._v(" "),a("p",[e._v("So add the call to ImageCircleRenderer (dont forget to add the namespace):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("\t\tprotected override void OnCreate (Bundle bundle)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n    base.OnCreate (bundle);\n\n    global::Xamarin.Forms.Forms.Init (this, bundle);\n    ImageCircleRenderer.Init();\n    LoadApplication (new UdemyXamarinForms.App ());\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-059")])]),e._v(" "),a("p",[e._v("You will need to add the ImageCircle.Forms.Plugin.Droid namespace.")]),e._v(" "),a("p",[e._v("For Windows projects if you open App.xaml.cs and locate the call to Forms.Init. Again after this\n                        line you need to add the call to ImageCircleRenderer.Init().")]),e._v(" "),a("p",[e._v("Now let's add a new Content Page to the app called ImageCirclePage.xaml and add the following Xaml\n                        (don't forget the XML namespace declaration - you can copy this from the github documentation):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n                    <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n                                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                                 x:Class="UdemyXamarinForms.ImageCirclePage"\n                                 xmlns:local="clr-namespace:UdemyXamarinForms"\n                                 xmlns:ic="clr-namespace:ImageCircle.Forms.Plugin.Abstractions;assembly=ImageCircle.Forms.Plugin.Abstractions">\n    <ic:CircleImage\n            WidthRequest="100"\n            HeightRequest="100"\n            Aspect="AspectFill"\n            Source="{local:EmbeddedImage torquay-at-night.jpg}"\n            HorizontalOptions="Center"\n            VerticalOptions="Center"\n    />\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-060")])]),e._v(" "),a("h3",[e._v("Dealing with Sizes")]),e._v(" "),a("p",[e._v("Let's wrap up this section with a lecture on sizes. So earlier when you worked with Padding I told\n                        you these numbers were not in pixels:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Padding="0, 20, 0, 0"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-061")])]),e._v(" "),a("p",[e._v("I referred to them as units which is short for Device Independent Units. So let's see what this\n                        means. ")]),e._v(" "),a("p",[e._v("Here I've got a 400 by 300 pixel image displayed in an iPhone 6s: ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(680)}}),e._v(" "),a("figcaption",[e._v("Fig 04-062")])]),e._v(" "),a("p",[e._v("Now let's see what happens when we launch this application in an iPhone 6+ which is a newer model:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(681)}}),e._v(" "),a("figcaption",[e._v("Fig 04-063")])]),e._v(" "),a("p",[e._v("Our image looks almost half the size. This is because newer phones tend to have a higher resolution\n                        or higher pixel density. That means we have more pixels on the screen which means an image looks smaller\n                        on a device with a higher resolution. The exact same concept applies in Android and Windows phones.")]),e._v(" "),a("p",[e._v("Now when building cross-platform apps we want our apps to look more or less the same across\n                        different devices irrespective of their pixel dimensions. That's why we have this concept called\n                        device independent units.")]),e._v(" "),a("p",[e._v("So in Xamarin Forms whenever you are working with sizes you are working with device independent\n                        units instead of pixels. Now depending on the target platform a unit can be converted to 1, 2 or 3\n                        pixels.\n                    ")]),e._v(" "),a("p",[e._v("So let's say we had a BoxView and we set it's WidthRequest and HeightRequest to 160. If you launch\n                        your application in an iPhone 6s because we have 2 pixels to the unit the BoxView will be 320 by 320\n                        pixels. On an iPhone 6+ because we 3 pixels to the unit our BoxView will be 480 by 480 pixels. Now if\n                        we put the screen shots next to each other we will see our BoxView is almost the same size on each\n                        different device:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(682)}}),e._v(" "),a("figcaption",[e._v("Fig 04-064")])]),e._v(" "),a("p",[e._v("Generally speaking as a Xamarin Forms programmer you should not worry about the actual size of the\n                        elements on the screen. Instead you work with Device Independent Units and let the OS decide how to\n                        deal with the actual sizes while rendering elements.")]),e._v(" "),a("p",[e._v("One last thing - 160 Units is a key number. Generally it translates to 1 inch. So if you want the\n                        width and or height of an element to be 1 inch you can set it to 160 units.")]),e._v(" "),a("h3",[e._v("Cheat Sheet")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Exercise - Photo Gallery")]),e._v(" "),a("p")])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Unleashing the Full Power of Bindings")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Hi, this is Brian Noyes, and in this module we're going to dive deeper into bindings and look at a\n                        number of additional properties that let you unleash the full power of what a binding can do for you\n                        for specialized scenarios.\n                    ")]),e._v(" "),a("p",[e._v("First up, we're going to look at a property called UpdateSourceTrigger, and this is a property on a\n                        binding that controls when data flows from the target to the source into a data binding scenario.\n                        The Default mode is when focus changes, but you'll see there's a number of other options there and\n                        I'll explain how that works.\n                    ")]),e._v(" "),a("p",[e._v("Next we're going to talk about Converters. Convertors give you a lot of power because it allows you\n                        to insert an object between the source and the target object conceptually, hooked up through the\n                        binding, and the data will flow through that Converter. So as the data flows from the source to the\n                        target, you can change the value or the type of the object that's being used to set the target\n                        property. And, likewise, in a two-way data binding scenario, as data flows from the target to the\n                        source, you can do a similar transformation either in value or in type.\n                    ")]),e._v(" "),a("p",[e._v("Next we'll talk about Async Bindings. Normally, bindings all happen on the UI thread, but sometimes\n                        you may need to have the get and set block of your source property called on a background thread,\n                        and Async bindings allow you to do that.\n                    ")]),e._v(" "),a("p",[e._v("Then we'll talk about Fallback values and this is really two separate properties on a binding, one\n                        called FallbackValue and one called TargetNullValue, that allow you to provide alternate values to\n                        be used when the source object can't be resolved properly.\n                    ")]),e._v(" "),a("p",[e._v("Next we'll talk about FormatString. This is an automatic convertor of sorts, that lets you convert\n                        from the source property into a formatted string using any standard .NET FormatString to render out\n                        the value the way you want to present it to the user.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we'll finish off with a couple of specialized bindings called a MultiBinding and a\n                        PriorityBinding. These bindings allow you to aggregate multiple bindings into a collection, and in\n                        the case of the MultiBinding, you can come up with a single value based on the individual values of\n                        those multiple bindings. And in the case of the PriorityBinding you can pick from one of the child\n                        bindings which one to use based on a priority scheme. So let's dive right in and see how these\n                        modify the behavior of our bindings.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("UpdateSourceTrigger")]),e._v(" "),a("p",[e._v("Now let's talk about the triggers that cause data to flow through a binding in a two-way data binding\n                        scenario. By default, the modified values in a binding control only get pushed down to the source\n                        object when you tab out of the field or really a focus change, so things like minimize, maximize,\n                        and switching to another window would also do it. Sometimes, however, you want to get the values\n                        sooner than that. You want it keystroke by keystroke in the TextBox, for example, or you want it as\n                        a slider bar is being slid.\n                    ")]),e._v(" "),a("p",[e._v("To do that, you can use a property on the binding called UpdateSourceTrigger. The default value is\n                        called Default, and it basically means lost focus for most controls. There's also a value called\n                        LostFocus and then there's the PropertyChanged value. PropertyChanged says, whenever the target\n                        property changes, such as Text on a TextBox, which will happen with every keystroke or the position\n                        on a slider, then you want to push that current value down into the source object. LostFocus is\n                        going to wait until the focus leaves the control.\n                    ")]),e._v(" "),a("p",[e._v("Basically, Default and LostFocus mean the same thing for most controls. The one place they're\n                        different is in a DataGrid. Default means when the row itself that the editable control is in loses\n                        focus, whereas LostFocus means the cell lost focus. So basically, if you set it to LostFocus, as\n                        soon as you tab out of the cell, the value will be written to the source object.\n                    ")]),e._v(" "),a("p",[e._v("If you leave it on the default, then you're going to have to actually click on a separate row or tab\n                        out of the row before the values of all the edited cells will be written to the source object. And,\n                        of course, even in the DataGrid scenario, PropertyChanged means keystroke by keystroke in a TextEdit\n                        field, for example. So let's take a look at using UpdateSourceTrigger in a demo.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: UpdateSourceTrigger")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to show you how to use the UpdateSourceTrigger property on a binding to control\n                        exactly when data flows in a two-way data binding scenario. By default, as we've talked about\n                        before, when you've got a two-way data bound scenario here, the point where data flows is when you\n                        tab out of the field, and that's called LostFocus.\n                    ")]),e._v(" "),a("figure",[a("img",{
staticClass:"image",attrs:{src:n(289)}}),e._v(" "),a("figcaption",[e._v("Fig 04-001")])]),e._v(" "),a("p",[e._v("That is the default UpdateSourceTrigger for most bindings. I'm going to drop into the XAML here and\n                        add a couple of Labels and TextBoxes which we can show up down here as Source and Target, two\n                        different TextBoxes.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="SourceTextBox"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="35,200,0,0"\n    TextWrapping="Wrap"\n    VerticalAlignment="Top"\n    Width="120" />\n<TextBox x:Name="TargetTextBox"\n    Text="{Binding ElementName=SourceTextBox, Path=Text, UpdateSourceTrigger=PropertyChanged, Delay=500}"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="207,200,0,0"\n    TextWrapping="Wrap"\n    VerticalAlignment="Top"\n    Width="120" />\n<Label Content="Source:"\n    HorizontalAlignment="Left"\n    Margin="35,175,0,0"\n    VerticalAlignment="Top" />\n<Label Content="Target:"\n    HorizontalAlignment="Left"\n    Margin="207,175,0,0"\n    VerticalAlignment="Top" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-002")])]),e._v(" "),a("p",[e._v("And the way the bindings are set up here between these is that you can see the Source TextBox has no\n                        binding, so it's just going to reflect whatever is put into it as a source object.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="SourceTextBox"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="35,200,0,0"\n    TextWrapping="Wrap"\n    VerticalAlignment="Top"\n    Width="120" />\n<TextBox x:Name="TargetTextBox"\n    Text="{Binding ElementName=SourceTextBox, Path=Text, UpdateSourceTrigger=PropertyChanged, Delay=500}"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="207,200,0,0"\n    TextWrapping="Wrap"\n    VerticalAlignment="Top"\n    Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-003")])]),e._v(" "),a("p",[e._v("The Target TextBox has its text bound, but it's using an ElementName binding, which we covered\n                        earlier, to point to the source TextBox as a source object. And because the Path that we point to is\n                        a DependencyProperty, that's going to raise Change Notifications, and we should see the Target\n                        update whenever the Source value changes. So that means for every character that we put into the\n                        Text, the Text property is changing and it's going to update the Target to reflect that.\n                    ")]),e._v(" "),a("p",[e._v("Now notice this UpdateSourceTrigger=PropertyChanged.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Path=Text, UpdateSourceTrigger=PropertyChanged}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-004")])]),e._v(" "),a("p",[e._v("If I leave it on Default:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Path=Text, UpdateSourceTrigger=Default}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-005")])]),e._v(" "),a("p",[e._v("once I start putting stuff in the Source, you can see that the Target stays in synch on every\n                        keystroke:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(290)}}),e._v(" "),a("figcaption",[e._v("Fig 04-006")])]),e._v(" "),a("p",[e._v("However, if I go to the Target and start putting stuff in, the Source does not update until I tab out\n                        of the field and then the Source is updated because of the focus change.\n                    ")]),e._v(" "),a("p",[e._v("So the Default UpdateSourceTrigger is really a focus change for most elements. So if I change this to\n                        PropertyChanged:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('TextBox x:Name="TargetTextBox"\n                    Text="{Binding ElementName=SourceTextBox,\n                    Path=Text, UpdateSourceTrigger=PropertyChanged}"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-007")])]),e._v(" "),a("p",[e._v("It basically says, every time the Target property changes, which is the Text property of this\n                        TextBox, go ahead and push its current value down into the source object's property.\n                    ")]),e._v(" "),a("p",[e._v("So now we're going to get fully synchronized if we start up. Source is raising PropertyChanged on\n                        every keystroke because the text of the Source is changing, but now on every keystroke in the\n                        Target, it's pushing the current value of the text of the Target down into the Source property.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(291)}}),e._v(" "),a("figcaption",[e._v("Fig 04-008")])]),e._v(" "),a("p",[e._v("So basically, when you want the source set immediately every time the bound property changes, then\n                        you want to use the PropertyChanged on UpdateSourceTrigger. This is especially good for validation\n                        scenarios where you want immediate feedback to the user and not wait until they tab out of the\n                        field.\n                    ")]),e._v(" "),a("p",[e._v("Now you can see here there's actually four choices there:")]),e._v(" "),a("ul",[a("li",[e._v("Default")]),e._v(" "),a("li",[e._v("Explicit")]),e._v(" "),a("li",[e._v("LostFocus")]),e._v(" "),a("li",[e._v("PropertyChanged")])]),e._v(" "),a("p",[e._v("There's Default and LostFocus, which for most controls mean exactly the same thing, lost focus. The\n                        place where they're different is if you're inside of a DataGrid. If the bound control is inside of a\n                        DataGrid, Default means losing focus on the row that the control is within, whereas LostFocus means\n                        losing focus on the cell that the control is within, but for single controls like a TextBox,\n                        Defaults and LostFocus mean the same thing.\n                    ")]),e._v(" "),a("p",[e._v("We covered PropertyChanged. Explicit is a mode where you actually have to use programmatic call\n                        against the binding itself to tell it when to flow the data. So data is not going to flow\n                        automatically in any case, you have to tell it to flow the data and it's fairly rarely used.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Converters")]),e._v(" "),a("p",[e._v("Now let's talk about using Converters and bindings, which is a very powerful mechanism to be able to\n                        transform values as they flow from your source object to your target and vice-versa. Basically, a\n                        Converter is a chunk of custom code that you can write that's going to sit in between that source\n                        and target object, and as the data flows from the source to the target, you can transform the data\n                        value.\n                    ")]),e._v(" "),a("p",[e._v("You can transform just the value using the same type, so in a numeric scenario maybe you would round\n                        off a floating point number to a whole digit, but still keep it as a float. But you can also\n                        transform the data type. So one example that I'll demo is, that we could data bind to a Boolean\n                        property, but set a Style property based on that Boolean flag.\n                    ")]),e._v(" "),a("p",[e._v("The way you define a convertor is by creating a class that implements the IValueConverter interface.\n                        This interface has two methods. Convert is the method that gets called when data is flowing from the\n                        source to the target and ConvertBack is called in two-way data binding scenarios when data is\n                        flowing from the target to the source.\n                    ")]),e._v(" "),a("p",[e._v("So basically, you just implement this interface on a class, you put an instance of that class in a\n                        Resource dictionary within your UI, and then you point to that Converter instance from the Converter\n                        property on a binding using the StaticResource markup extension. So let's take a look at a couple of\n                        examples of using converters.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Converters")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to show you how you can use converters with bindings to change the value that\n                        gets set through a binding or to change the type entirely.\n                    ")]),e._v(" "),a("p",[e._v("For our first scenario, let's say that anytime you want to display negative numbers in a form, you\n                        want to put parentheses around them instead of showing the minus sign. That's something I can\n                        accommodate through a converter.\n                    ")]),e._v(" "),a("p",[e._v("So I'm going to go and add a class to my project here called NegativeNumberConverter:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(292)}}),e._v(" "),a("figcaption",[e._v("Fig 04-010")])]),e._v(" "),a("p",[e._v("To implement a Converter, you're going to want it to be public so it can be called by the framework,\n                        and you're going to implement the IValueConverter interface. I can stub out the methods on that\n                        interface and you can see that it has two methods, Convert, and ConvertBack.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class NegativeNumberConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-011")])]),e._v(" "),a("p",[e._v("Convert gets called as data is flowing from the source to the target. The value that is going to be\n                        set, flows in here and tells you what the typeof the Target property is that's going to be set and\n                        it has an optional parameter, and will tell you what culture it's being done in, so you can use\n                        converters to actually modify values for localization purposes. ConvertBack is called if you have\n                        two-way data binding and the value is being pushed down from the target down into the source object.\n                    ")]),e._v(" "),a("p",[e._v("So I'm going to replace this implementation with a fully fleshed out version:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class NegativeNumberConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        int input = (int)value;\n        if (input >= 0) return input.ToString();\n        else return string.Format("({0})", 0 - input);\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        if (value.ToString().StartsWith("(") && value.ToString().EndsWith(")"))\n        {\n            return -int.Parse(value.ToString().Substring(1, value.ToString().Length - 2));\n        }\n        else return value;\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-012")])]),e._v(" "),a("p",[e._v("and you can see what the implementation does here, is it's expecting this to only be hooked up to\n                        integers. Now to write a production of one of these, you want to do a little more type checking and\n                        not just blindly cast the value here, which could blow up if it's not an integer.\n                    ")]),e._v(" "),a("p",[e._v("But here we're assuming we're only going to be hooked up to integers. We cast to an integer and we\n                        check to see whether it's greater than or equal to 0. If so, we're just going to return it as a\n                        string, but otherwise, we're going to negate it here and put it in between parentheses using a\n                        string format.\n                    ")]),e._v(" "),a("p",[e._v("If we're going to support two-way data binding and allow people to enter negative numbers with\n                        parentheses around them, then the value is going to flow in here when they tab out of the field or\n                        if you're using UpdateSourceTrigger=PropertyChanged.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)")])]),e._v(" "),a("figcaption",[e._v("Fig 04-013")])]),e._v(" "),a("p",[e._v(" And we're going to look here and see if it starts with parentheses and ends with parentheses.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n{\n    if (value.ToString().StartsWith("(") && value.ToString().EndsWith(")"))\n    {\n        return -int.Parse(value.ToString().Substring(1, value.ToString().Length - 2));\n    }\n    else return value;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-014")])]),e._v(" "),a("p",[e._v("We're basically going to strip those off and negate the value that's there to return the negative\n                        integer down to the source object.\n                    ")]),e._v(" "),a("p",[e._v("Now to use this converter I need to create an instance of it and use it in a binding. So I'm going to\n                        go over to my MainWindow and I'm going to go to its Resource section. And the way you'll typically\n                        use a converter is by creating an instance of it in your Resources collection and give it a key:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <local:NegativeNumberConverter x:Key="NegConverter" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-015")])]),e._v(" "),a("p",[e._v("Then you can refer to it in a binding using a StaticResource.")]),e._v(" "),a("p",[e._v("So then we're going to drop down into the form here to the field that we have that's a numeric value,\n                        such as an age, and we're going to use the Converter property, say StaticResource, grab the key name\n                        of our Converter as we defined it up above, and pass that as the key in the StaticResource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="ageTextBox"\n     Width="120"\n     VerticalAlignment="Center"\n     Text="{Binding Path=Age, Converter={StaticResource NegConverter}}"\n     Grid.Row="3"\n     Margin="3"\n     Height="23"\n     HorizontalAlignment="Left"\n     Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-016")])]),e._v(" "),a("p",[e._v("So that's going to pull in a reference to that converter and basically invoke it.")]),e._v(" "),a("p",[e._v("Anytime data is flowing from the source to the target, it's going to call the Convert method, and\n                        then if we edit this and push a value down through, it's going to invoke the ConvertBack method on\n                        that converter.\n                    ")]),e._v(" "),a("p",[e._v("With that in place, we can go back here to where our Customer is being initialized and we'll set the\n                        Age property as -35 there:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Customer = new Customer\n{\n    Id = 42,\n    Name = "Joe",\n    PremiumCustomer = true,\n    Age = -35\n};')])]),e._v(" "),a("figcaption",[e._v("Fig 04-017")])]),e._v(" "),a("p",[e._v("I'll go over to the Age property on my Customer object and set a breakpoint so we can see when it's\n                        being set what it's being set to.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public int Age\n{\n    get\n    {\n        return _Age;\n    }\n    set\n    {\n        if (value != _Age) // Set breakpoint here\n        {\n            _Age = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Age"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-018")])]),e._v(" "),a("p",[e._v("We'll go ahead and start up and it will be called here one time as it's initializing")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(293)}}),e._v(" "),a("figcaption",[e._v("Fig 04-019")])]),e._v(" "),a("p",[e._v("and we see it renders out with parentheses instead of the -35.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(294)}}),e._v(" "),a("figcaption",[e._v("Fig 04-020")])]),e._v(" "),a("p",[e._v("And if we put in some other values, such as (99), and tab out of the field, our set block gets called,\n                        and the current value is -99:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(295)}}),e._v(" "),a("figcaption",[e._v("Fig 04-021")])]),e._v(" "),a("p",[e._v("so it strips off those parentheses and turns it into an actual negative integer.")]),e._v(" "),a("p",[e._v("Now as another example, let's say we want to set a style based on a Boolean property in our model.\n                        I'm going to add a BoolToStyle Converter class and I'll quickly flesh out the implementation:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class BoolToStyleConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        string[] styles = parameter.ToString().Split(';');\n        if (targetType == typeof(Style) && value is bool)\n        {\n            if ((bool)value) { return GetStyle(styles[0]); }\n            else { return GetStyle(styles[1]); }\n        }\n        else return value;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n\n    Style GetStyle(string key)\n    {\n        return Application.Current.Resources[key] as Style;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-022")])]),e._v(" "),a("p",[e._v("You can see what this is doing is it's doing a little more type checking, so it's saying, if the\n                        target type is a Style and the input is a Boolean, then that's what this thing was designed to do,\n                        otherwise, it's just going to blindly return the value and say, this converter doesn't know what to\n                        do with that.\n                    ")]),e._v(" "),a("p",[e._v("And for a starting point here, it's going to say, I could hard code here a style name of TrueStyle\n                        and FalseStyle corresponding to those Boolean values:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' if (targetType == typeof(Style) && value is bool)\n{\n    if ((bool)value) { return GetStyle(styles[0]); }\n    else { return GetStyle("FalseStyle"); }\n')])]),e._v(" "),a("figcaption",[e._v("Fig 04-023")])]),e._v(" "),a("p",[e._v("and go use a Helper method here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Style GetStyle(string key)\n{\n    return Application.Current.Resources[key] as Style;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-024")])]),e._v(" "),a("p",[e._v("to reach out to my Application Resources and get the Style by name out of my Resource dictionary:")]),e._v(" "),a("p",[e._v("Then I'm just going to return that as the value that actually gets set on the target of the\n                        binding.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if ((bool)value) { return GetStyle(styles[0]); }\nelse { return GetStyle(styles[1]); }")])]),e._v(" "),a("figcaption",[e._v("Fig 04-025")])]),e._v(" "),a("p",[e._v("Based on that code, I'll need those styles to exist so I'll go out of here to my\n                        Application.Resources and pop in a Name Style called TrueStyle and FalseStyle that are just going to\n                        set the foreground to Red for True and Black for False:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Application x:Class="BindingProperties.App"\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             StartupUri="MainWindow.xaml">\n    <Application.Resources>\n        <Style x:Key="TrueStyle">\n            <Setter Property="Control.Foreground"\n                    Value="Red" />\n        </Style>\n        <Style x:Key="FalseStyle">\n            <Setter Property="Control.Foreground"\n                    Value="Black" />\n        </Style>\n    </Application.Resources>\n</Application>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-026")])]),e._v(" "),a("p",[e._v("Now to use that in my application, I would go to my MainWindow to the Resources, and create an\n                        instance of that Converter and give it a name. And then on the control that I wanted to use it on,\n                        such as my TextBox, I would set the Style property using a Binding so the value that's going to come\n                        out of the Converter is a Style, but the input is a Boolean:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="nameTextBox"\n    Style="{Binding Path=PremiumCustomer,\n        Converter={StaticResource BoolToStyleConverter}}"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Path=Name, Mode=OneTime}"\n    Grid.Row="1"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\n    Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-027")])]),e._v(" "),a("p",[e._v("So I'm pointing to a Boolean property on my model called premium customer and then I'm using my\n                        Converter instance to convert that Boolean value into a Style value.\n                    ")]),e._v(" "),a("p",[e._v("With that in place, I can go ahead and run, and we can see that Joe is red right now because it is a\n                        Premium Customer:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(296)}}),e._v(" "),a("figcaption",[e._v("Fig 04-028")])]),e._v(" "),a("p",[e._v("If I uncheck it, it goes to black and back to red.")]),e._v(" "),a("p",[e._v("Now obviously hard-coding Style names down inside some code like this is not a great idea, and that's\n                        where this object parameter can come in.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public object Convert(object value, Type targetType, object parameter, CultureInfo culture)")])]),e._v(" "),a("figcaption",[e._v("Fig 04-029")])]),e._v(" "),a("p",[e._v("You can pass ConverterParameters to a converter to drive its behavior. So if I modify that\n                        implementation a little bit, and I expect my parameter to be a semi-colon separated pair of Style\n                        names:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("string[] styles = parameter.ToString().Split(';');\nif (targetType == typeof(Style) && value is bool)\n{\n    if ((bool)value) { return GetStyle(styles[0]); }\n    else { return GetStyle(styles[1]); }\n}\nelse return value;")])]),e._v(" "),a("figcaption",[e._v("Fig 04-030")])]),e._v(" "),a("p",[e._v("I can split that out into an array and then use the first one as my TrueStyle and the second one as\n                        my FalseStyle.\n                    ")]),e._v(" "),a("p",[e._v("Now I can just go back to where I was binding the Style and add another property on my binding called\n                        ConverterParameter, and pass that value, which is going to be TrueStyle;FalseStyle:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Converter={StaticResource BoolToStyleConverter}, ConverterParameter=TrueStyle;FalseStyle}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-031")])]),e._v(" "),a("p",[e._v("With that in place, the same behavior is manifest, it's red now, it goes to black when I uncheck the\n                        Premium Customer property.\n                    ")]),e._v(" "),a("p",[e._v("But now this BoolToStyleConverter is a little more reusable because you can pass in those two\n                        different styles that it supports as a parameter when you use the Converter. The one downside to be\n                        aware of is when you use a ConverterParameter, the values will have to be statically expressible in\n                        the code here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Converter={StaticResource BoolToStyleConverter}, ConverterParameter=TrueStyle;FalseStyle}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-032")])]),e._v(" "),a("p",[e._v("And that's the basics of using Converters.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Async Binding")]),e._v(" "),a("p",[e._v("Most of the time you're binding, you're going to be binding to objects in memory that have already\n                        been populated and so the binding can pull the values out of the properties very quickly and push\n                        values back into those objects quickly. Occasionally, you might bind to something that's a little\n                        slower, and that's where Async bindings come in.\n                    ")]),e._v(" "),a("p",[e._v("So a binding is calling the get and set block of the property it's bound to, and it does that on the\n                        UI thread in a synchronous manner by default.\n                    ")]),e._v(" "),a("p",[e._v("Now one thing to be aware of is that in WPF your source objects can raise PropertyChanged on a\n                        separate thread, so you could have a background thread or an Async service execution that goes out,\n                        gets some data, and pushes values into your data bound objects. And when you call the set block, the\n                        PropertyChanged event is going to fire.\n                    ")]),e._v(" "),a("p",[e._v("In WPF that's okay. The binding is actually smart enough to see that you're not on the UI thread,\n                        switch to the UI thread and get the value, and update the UI, only on the UI thread. However, just\n                        be aware, other XAML technologies are not as smart. You cannot do that same thing in other XAML\n                        technologies, you'll have to make sure your set blocks are always being called on the UI thread if\n                        they raise PropertyChanged.\n                    ")]),e._v(" "),a("p",[e._v(" Now if the get and set blocks will execute slowly, maybe they make a database call themselves or the\n                        service call themselves, you can get the binding to call those on a background thread itself.\n                    ")]),e._v(" "),a("p",[e._v("So all you do is you set IsAsync true on the binding, and the binding is actually going to go grab a\n                        background thread and use that to dispatch the call to the get or set block. And then once it gets\n                        the value, it'll set the target property on the element using the UI thread.\n                    ")]),e._v(" "),a("p",[e._v("Another form of Async the bindings support, is setting a Delay on when the binding can call the set\n                        block. So this is only for two-way data binding scenarios and it's basically there to act as a\n                        buffer to make sure that you're not sending new values down to the source object too often. The\n                        Delay property is specified in ms and it's basically, how long will the binding wait before it\n                        attempts to set the property on the source object, even if the target property is rapidly changing?\n                        So let's take a look at a demo of working with Async bindings.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Async Binding")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to show you how you can use the Async capabilities of bindings. Now in most\n                        binding scenarios, as long as your data is already right there in memory, populated on whatever your\n                        model objects are that you're binding to, you won't have to worry about doing the binding itself\n                        Async. You may have some code behind the scenes that gets these things loaded up asynchronously, but\n                        the binding itself won't have to be Async.\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('public string Phone\n{\n    get\n    {\n        return _Phone;\n    }\n    set\n    {\n        if (value != _Phone)\n        {\n            _Phone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Phone"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-033")])]),e._v(" "),a("p",[e._v("But depending on the way you structure things, you may have setters and getters on a given property\n                        that take a while to execute. So I'm going to simulate that in this case by putting a Thread.Sleep\n                        in the get and set block of my Phone property on my Customer:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string Phone\n{\n    get\n    {\n        Thread.Sleep(5000);\n        return _Phone;\n    }\n    set\n    {\n        Thread.Sleep(5000);\n        if (value != _Phone)\n        {\n            _Phone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Phone"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-034")])]),e._v(" "),a("p",[e._v("And if I did that without doing anything else and tried to run, first off, we can see as it starts up\n                        it's waiting a full 5 seconds before the UI becomes responsive because it's got to read that value\n                        in to populate the UI through the binding and it's got to wait for that full execution of the get\n                        block to complete:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(297)}}),e._v(" "),a("figcaption",[e._v("Fig 04-035")])]),e._v(" "),a("p",[e._v("Likewise, if we go and change that field and tab out of the field, you can see the cursor didn't\n                        move, it's gone completely unresponsive, and will stay that way until the set block execution\n                        completes and then it comes back to life:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(298)}}),e._v(" "),a("figcaption",[e._v("Fig 04-036")])]),e._v(" "),a("p",[e._v("Obviously not the user experience you're going for.")]),e._v(" "),a("p",[e._v("So if you're doing complex model objects that you're binding to where the get and set blocks of the\n                        properties you're binding to execute real work such as doing a database query or a service call or\n                        something, you may need to use Async bindings then.\n                    ")]),e._v(" "),a("p",[e._v("So all you would do to leverage Async bindings, is go to the binding on the property that you want to\n                        be Async and say, IsAsync=True:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <TextBox x:Name="phoneTextBox"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Phone, IsAsync=True}"\n    Grid.Row="2"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\n    Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-037")])]),e._v(" "),a("p",[e._v("Now, if we start up our same exact scenario, you can see the UI comes up and is responsive right\n                        away:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(299)}}),e._v(" "),a("figcaption",[e._v("Fig 04-038")])]),e._v(" "),a("p",[e._v("And then 5 seconds later the Phone pops in there when the set block is finally done executing:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(300)}}),e._v(" "),a("figcaption",[e._v("Fig 04-039")])]),e._v(" "),a("p",[e._v("And, likewise, if we modify it and tab out of the field, it just goes blank and we can be using the\n                        rest of the UI until the point where the Phone set block completes and the value pops back in there.\n                    ")]),e._v(" "),a("p",[e._v("So it just makes it a non-blocking thing the WPF is going to actually go use a background thread to\n                        invoke the get and set blocks when you have IsAsync=True on the binding. But that also means that\n                        these are actually going to execute on a separate thread, so you do have to be concerned about\n                        concurrency if the UI thread can also access this code.\n                    ")]),e._v(" "),a("p",[e._v("The other thing to be aware of is that if you have multiple threads in your application and a\n                        background thread calls this set block, it's going to raise the PropertyChanged notification, which\n                        goes up into the binding and the binding has subscribed to that based on seeing that your bound\n                        object supports INotifyPropertyChanged. And generally you don't want to be doing anything to a UI\n                        element on a background thread.\n                    ")]),e._v(" "),a("p",[e._v("The good news is, in WPF, and only WPF, the other XAML technologies this is not true, you can raise\n                        PropertyChanged from a background thread and the WPF binding will be smart enough to switch back\n                        over to the UI thread before it calls the get block and modifies the UI based on the PropertyChanged\n                        notification. So it is safe from a binding perspective to set the property on a background thread.\n                    ")]),e._v(" "),a("p",[e._v("So another binding property related to Async that you might use in some scenarios is the Delay\n                        property. So I can add Delay=500 on my data binding to my two TextBoxes down here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="TargetTextBox"\n    Text="{Binding ElementName=SourceTextBox, Path=Text, UpdateSourceTrigger=PropertyChanged, Delay=500}"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="207,200,0,0"\n    TextWrapping="Wrap"\n    VerticalAlignment="Top"\n    Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-040")])]),e._v(" "),a("p",[e._v("So I could add Delay=500, and that's in ms, on my two TextBoxes that are bound to each other down\n                        here. And what that's going to do is act as a throttle for input. So this only affects the calling\n                        of the set block and it basically says, my input may be coming quicker than I actually want to go\n                        set it on the data bound source object, so I'm going to delay by this much time before I call the\n                        set block, and if I would have triggered multiple times within that time window, I'm only going to\n                        call it once when that time window is up.\n                    ")]),e._v(" "),a("p",[e._v("So with that in place, we can see the visual impact of this behavior. If I go down here to my source,\n                        I start setting things there in sync. I go to my target and I rapidly input some stuff:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(301)}}),e._v(" "),a("figcaption",[e._v("Fig 04-041")])]),e._v(" "),a("p",[e._v("500 ms later, it fills in the source and it only set the source one time in that case at the 500 ms\n                        point. Do it again, and 500 ms later, one set of the source happens, not one for each character that\n                        I was setting.\n                    ")]),e._v(" "),a("p",[e._v("So this is handy for situations like this if you may have some very rapid input, especially if you're\n                        doing something like an auto-complete service call to look up the available candidates, and you\n                        don't want to do that service call on every single keystroke. Another example would be if you were\n                        binding the current position in something like a slider, you don't want to necessarily go set the\n                        property on the source object on every miniscule movement of that slider, just when it finally\n                        settles in position or has moved by a significant amount, so you could set the Delay property on\n                        there so that it only sets the source property every 500 ms, for example.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Fallback Values")]),e._v(" "),a("p",[e._v("Another minor capability of bindings you should be aware of is the ability to supply some fallback\n                        values when the binding can't come up with an appropriate value to set the target with. The first\n                        one of these is called TargetNullValue, and the name is a little deceptive there. What it really\n                        means is, if the source object's property is null, what is the value you want to use for the target?\n                    ")]),e._v(" "),a("p",[e._v("So you basically supply a value in the binding that's going to be used to set the target property if\n                        the current value of the source property is null.\n                    ")]),e._v(" "),a("p",[e._v("The other one is literally called FallbackValue, and this one is used when the binding can't come up\n                        with a value at all based on the data source and the path. So when that's the case, it can't come up\n                        with the value, and you supply a FallbackValue, it's going to use that value to set the target\n                        instead. So let's take a look at a quick demo of using both of these.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Fallback Values")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to show you a couple last properties here on the binding which relate to having\n                        fallback values when the binding can't quite come up with the value it's supposed to use for\n                        binding. What I mean by that is, I can go into my MainWindow here, and we'll just use my Name\n                        TextBox that I've been binding, we'll go to its Text Binding here for name, get rid of the\n                        Mode=OneTime here, and we'll say, TargetNullValue-'Not set'.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="nameTextBox"\n        Style="{Binding Path=PremiumCustomer,\n            Converter={StaticResource BoolToStyleConverter}, ConverterParameter=TrueStyle;FalseStyle}"\n         Width="120"\n         VerticalAlignment="Center"\n         Text="{Binding Path=Namex, Mode=Default, TargetNullValue=\'Not set\', FallbackValue=\'no value\'}"\n\n         Grid.Row="1"\n         Margin="3"\n         Height="23"\n         HorizontalAlignment="Left"\n         Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-042")])]),e._v(" "),a("p",[e._v("What TargetNullValue means, the name is a little misleading there, it's really if the source value is\n                        null, then what is the value you want to set on the target instead of null? So if we go to the\n                        code-behind to the point where we're setting the name, and we set it to null here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    Customer = new Customer\n    {\n        Id = 42,\n        Name = null,\n        PremiumCustomer = true,\n        Age = -35\n    };\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-043")])]),e._v(" "),a("p",[e._v("Start up the UI, and we see, Not set:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(302)}}),e._v(" "),a("figcaption",[e._v("Fig 04-044")])]),e._v(" "),a("p",[e._v("So because of the value that the binding came up with was equal to null, and we had the\n                        TargetNullValue there, it used the value provided by the TargetNullValue property on the binding.\n                    ")]),e._v(" "),a("p",[e._v("Another somewhat similar property is the FallbackValue. So here we're going to say FallbackValue='no\n                        value':\n                    ")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"xml"},[e._v("{Binding Path=Name, TargetNullValue='Not set', FallbackValue='no value'}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-045")])]),e._v(" "),a("p",[e._v("This will be used when the binding is unable to come up with a value at all based on the Path that\n                        it's given. So if I corrupt my Path over here and say Namex, which doesn't exist on my DataContext\n                        object:\n                    ")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"xml"},[e._v("{Binding Path=Name, TargetNullValue='Not set', FallbackValue='no value'}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-046")])]),e._v(" "),a("p",[e._v("and I run, now we see no value in there because the binding was unable to evaluate and come up with a\n                        value to set the target property. And, again, down here in the output window, notice that we have\n                        one of these System.Data Warnings that says, Namex not found on Customer:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(303)}}),e._v(" "),a("figcaption",[e._v("Fig 04-047")])]),e._v(" "),a("p",[e._v("So you always want to be looking for those. In this case, it was a warning, not an error, because we\n                        had the FallbackValue here. If we get rid of the FallbackValue and run with Namex in place there,\n                        now you can see it's a System.Windows.Data Error down here because it can't come up with any value\n                        to present in the UI:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(304)}}),e._v(" "),a("figcaption",[e._v("Fig 04-048")])]),e._v(" "),a("p",[e._v("So those are TargetNullValue used when the Source property is null, and gives a value to set on the\n                        target and FallbackValue when it can't resolve a value from the specified binding Path.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("StringFormat")]),e._v(" "),a("p",[e._v("StringFormat is a handy property on bindings for being able to render out a formatted value in the\n                        form of a string for a given source property value. You can think of StringFormat as an automatic\n                        converter from the source property type to a string, applying formatting in the process. So with it,\n                        you can use any standard .NET format string, the same kind of format string you would use with the\n                        String.Format method in the framework.\n                    ")]),e._v(" "),a("p",[e._v("There are a number of built-in format strings for things like dates and numeric formats, and you can\n                        come up with your own custom format strings as well. Now this works great in simple scenarios where\n                        you want to render out a date in the TextBox or a numeric value in a TextBox and have some\n                        formatting applied to it.\n                    ")]),e._v(" "),a("p",[e._v("But there is one gotcha with it, you generally don't want to combine it with the\n                        UpdateSourceTrigger=PropertyChanged value. There can be some weird input behaviors that you'll see\n                        in the demos that makes it kind of unsuitable for use in combination with that, and I'll just defer\n                        to the demo to show you what I mean by that.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: StringFormat")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex05-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 5\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to show you quickly how to use the StringFormat property on a binding to render\n                        out a formatted value to the user interface. Our starting point here is the same demo app that we've\n                        been using up to this point and what I'm going to focus on is this Age field. If you remember from\n                        previous demo, we were applying a converter there that's putting the parentheses there for a\n                        negative value.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(305)}}),e._v(" "),a("figcaption",[e._v("Fig 04-049")])]),e._v(" "),a("p",[e._v("We're going to replace that and do some string formatting. So, first off, I'm going to drop into my\n                        Customer and change my Age property (I created a new property called Age2) to be a floating value so\n                        that we can put some decimal points in there:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class Customer : INotifyPropertyChanged\n{\n    private bool _PremiumCustomer;\n    private int _Age;\n    private float _Age2;\n    private string _Phone = "555-555-5555";\n    private string _Name;\n    private int _Id;')])]),e._v(" "),a("figcaption",[e._v("Fig 04-050")])]),e._v(" "),a("p",[e._v("And I'll do that on the member variable and on the property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public float Age2\n{\n    get\n    {\n        return _Age2;\n    }\n    set\n    {\n        if (value != _Age2)\n        {\n            _Age2 = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Age2"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-051")])]),e._v(" "),a("p",[e._v("Then I'm going to drop into the UI and find the Age input, and I'm going to replace that with a\n                        slightly different Text Binding.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="ageTextBox"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Path=Age, StringFormat=f2}"\n    Grid.Row="3"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\nGrid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-052")])]),e._v(" "),a("p",[e._v("So here we can see we're still binding to the Age Property, but now we just simply set the\n                        StringFormat property and here we're using one of the pre-defined StringFormats, a floating point\n                        with two decimals. If we go ahead and run now, we can see that that value which is set to -35 now\n                        displays with two decimals. If we go and make other mods to it, let's say we set it to 44.444 and we\n                        tab out of the field, notice as we tab out of the field the value is written to the underlying\n                        object and the value becomes 44.44.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(306)}}),e._v(" "),a("figcaption",[e._v("Fig 04-053")])]),e._v(" "),a("p",[e._v("Now let's go set a breakpoint in the set block and do that again, and we'll say 44.4455, tab out, and\n                        we can see the value that's being set is the full precision value:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(307)}}),e._v(" "),a("figcaption",[e._v("Fig 04-054")])]),e._v(" "),a("p",[e._v(" but when we run, all we see is the rounded off value applied by StringFormat:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(308)}}),e._v(" "),a("figcaption",[e._v("Fig 04-055")])]),e._v(" "),a("p",[e._v("So one downside to using these is to realize that what you see on the screen and what the actual\n                        underlying values are might be slightly different, but if the way you want to display it to the user\n                        is always with two decimal places, then that's up to you to manage the actual precision under the\n                        covers.\n                    ")]),e._v(" "),a("p",[e._v("Now there's one other gotcha to be aware of with using StringFormat. If we also add the\n                        UpdateSourceTrigger=PropertyChanged property on our binding, which we saw earlier in the module:\n                    ")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"xml"},[e._v("{Binding Path=Age, StringFormat=f2, UpdateSourceTrigger=PropertyChanged}}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-056")])]),e._v(" "),a("p",[e._v("and go run our scenario again, now watch what happens as I put in a value. I hit 5, and it\n                        immediately StringFormats because we've got UpdateSourceTrigger=PropertyChanged. As soon as the\n                        Target property changes, which happens on every keystroke, it's going to set the underlying source\n                        property.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(309)}}),e._v(" "),a("figcaption",[e._v("Fig 04-057")])]),e._v(" "),a("p",[e._v("The source property raises a PropertyChangedEvent, that forces the binding to re-bind and re-render\n                        based on the StringFormat. The problem with this is, for a rapid input scenario, say that I wanted\n                        to highlight this and say 55.55.\n                    ")]),e._v(" "),a("p",[e._v("If I do that quickly, 55.55, look what I end up with.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(310)}}),e._v(" "),a("figcaption",[e._v("Fig 04-058")])]),e._v(" "),a("p",[e._v("It's because after each keystroke it's re-rendering, it's putting the decimal place in there for me,\n                        so when I get around and type the decimal place I'm actually adding another decimal place and I've\n                        got an invalid StringFormat now that can't be converted to the underlying Type, and that's why we\n                        see the red box, which we'll get into more in the validation section.\n                    ")]),e._v(" "),a("p",[e._v("As a result of that, you generally don't want to use UpdateSourceTrigger=PropertyChanged in\n                        combination with StringFormat because you'll get this re-rendering as you're typing, which\n                        especially with numeric formats, does not work out the way you want, but with a normal focus change\n                        UpdateSourceTrigger, StringFormat works very nicely for inputting those formatted values and\n                        rendering them appropriately.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("MultiBinding/PriorityBinding")]),e._v(" "),a("p",[e._v("One last topic I want to touch on in this module is the concept of MultiBindings and\n                        PriorityBindings. A MultiBinding is a special kind of binding in WPF that allows you to provide a\n                        collection of bindings inside the MultiBinding. It's basically going to evaluate each one of those\n                        bindings and come up with a value, and then you combine this MultiBinding with a\n                        MultiValueConverter, an object that you implement this interface on, similar to the converters we\n                        covered earlier in the module.\n                    ")]),e._v(" "),a("p",[e._v("But this MultiValueConverter is going to get passed an array of values. The array is going to be\n                        populated with the values that came out of each one of the child bindings in the MultiBinding and\n                        then the Converter can do with those values what it pleases. So one example would be if you were\n                        going to create a color picker and have a separate slider for the red, the green, and the blue\n                        values, you could use a MultiBinding in combination with a MultiValueConverter to come up with a\n                        color object based on those red, green, and blue inputs. So basically, the net result of a\n                        MultiBinding is to come up with a single value based on the individual values of the child bindings.\n                    ")]),e._v(" "),a("p",[e._v(" The other kind of binding is called a PriorityBinding, and it's somewhat similar in that it can\n                        contain a collection of child bindings, but what the PriorityBinding is going to do is pick a value\n                        from one of those, and the priority is the first one declared is the highest priority one, and the\n                        idea is that even though you have a binding in there, it may not be able to come up with a value. It\n                        could be that it's using Async and it's waiting for an Async result that hasn't come back yet, or it\n                        could be that it's pointing to a Path that may or may not be there in the DataContext that varies\n                        over time. So the PriorityBinding is going to produce a single value based on whichever highest\n                        priority binding has an available value.\n                    ")]),e._v(" "),a("p",[e._v("Now I'm not even going to do a demo of these, because generally, in many years of doing WPF\n                        development, I've never used either one of these. And the reason for that is I don't like the fact\n                        that they really are putting logic in the XAML itself. They are a little difficult to debug as a\n                        result. If you are not getting exactly what you want, there's nowhere you can set a breakpoint and\n                        see what's going on. And it's also too much coupling in the view.\n                    ")]),e._v(" "),a("p",[e._v("Generally the alternative is to go produce a single value behind the scenes and put it into a source\n                        object property and just use normal binding. And then all the code that produces that value is\n                        debuggable and you can structure it however you want, to use priorities or to go to multiple sources\n                        and figure out which one to use or to go to multiple sources and combine the values of those\n                        multiple sources, but then you can just use a normal binding and point to your source object that\n                        you populate however you want.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("So in this module we covered a bunch of fine-grain control points that you have when you apply\n                        bindings by setting different properties on those bindings. First we covered the\n                        UpdateSourceTrigger, which controls when data flows in a two-way data binding scenario from the\n                        target to the source. Normally it's going to be on FocusChange, but if you set this to\n                        PropertyChanged then you can get that immediate feedback, keystroke by keystroke, in a TextBox, for\n                        example, to flow the data from the target to the source. And we'll see later in the Validation\n                        module this can be important for immediate feedback to the user if they're inputting bad data.\n                    ")]),e._v(" "),a("p",[e._v("We also talked about the difference between Default and LostFocus. Default and LostFocus generally\n                        mean the same thing on most controls, but on a control like the DataGrid, Default means a row focus\n                        changed and LostFocus means a cell focus changed.\n                    ")]),e._v(" "),a("p",[e._v("Next we talked about Converters. Converters are these objects that you implement that implement the\n                        IValueConverter interface. You hook them in through the Converter property of the binding and the\n                        data will flow through them both from source to target and from target to source. And as part of\n                        that flowing process, you can transform the value or the type of the object that's being passed\n                        through.\n                    ")]),e._v(" "),a("p",[e._v("Next we talked about Async bindings and simply using the IsAsync property on a binding to make it so\n                        the get and set block of your source object get called on a background thread if they might take a\n                        long time and you don't want to block the UI.\n                    ")]),e._v(" "),a("p",[e._v("Next we talked about FallbackValues, specifically the FallbackValue property and the TargetNullValue\n                        property that allow you to supply alternate values to be used when the source object value can't be\n                        resolved.\n                    ")]),e._v(" "),a("p",[e._v('Next we talked about StringFormat and the way it will let you, basically, "pretty print" or create a\n                        formatted string version of the value that you\'re getting from your source object, so this works\n                        very nicely with dates and numeric formats, and so on.\n                    ')]),e._v(" "),a("p",[e._v("Finally, we finished off with the concept surrounding MultiBindings and PriorityBindings. We\n                        described that MultiBindings have a collection of child bindings, from which it can come up with a\n                        final value based on the values that come out of the individual bindings. And a PriorityBinding, on\n                        the other hand, allows you to have a collection of child bindings and have it pick the highest\n                        priority one of those that comes up with a value for you.\n                    ")])])])])]);
}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Handling State with Vuex")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("App Overview")]),e._v(" "),a("p",[e._v("We just finished our last application but there's still a lot more for us to learn about Vue.\n                        In this section we're going to generate a new project and then take a look at a couple of\n                        mock-ups that will explain what we're trying to build.\n                    ")]),e._v(" "),a("p",[e._v("Use the vue cli to create a new project called images:")]),e._v(" "),a("code",{staticClass:"prettyprint"},[e._v("vue create images")]),e._v(" "),a("p",[e._v("Accept the default presets. Vue cli will then start installing a couple of dependencies into\n                        our new project. ")]),e._v(" "),a("p",[e._v("The following mock-up describes what we are going to build:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(158)}}),e._v(" "),a("figcaption",[e._v("Fig 04-001")])]),e._v(" "),a("p",[e._v("The first mock-up is of the home screen we are going to create. We are going to create an\n                        image upload and viewing application. When the user first visits our application we'll\n                        prompt them to login to our app. This means we need some sort of authentication system in\n                        place.")]),e._v(" "),a("p",[e._v("Once the user logs in they'll then be prompted with a screen to upload a couple of different\n                        images:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(159)}}),e._v(" "),a("figcaption",[e._v("Fig 04-002")])]),e._v(" "),a("p",[e._v("This is going to be a drag and drop image upload widget. A user can either click on this big\n                        button or panel and be prompted to upload an image or they can drag and drop images across\n                        onto this big block as well.\n                    ")]),e._v(" "),a("p",[e._v("Once the user has uploaded some images they can browse the gallery page where they can view\n                        all the different images that they have uploaded over time. ")]),e._v(" "),a("p",[e._v("All the images that a user uploads should only be visible to them. There's not going to be\n                        any built-in sharing of images here. We're going to be much more concerned with figuring out\n                        how we handle upload and drag and drop functionality. ")]),e._v(" "),a("p",[e._v("In the next section we will discuss some of the challenges that we will face whilst creating\n                        this application.")]),e._v(" "),a("h3",[e._v("App Challenges")]),e._v(" "),a("p",[e._v("In the last section we started talking about the next big application that we're going to be\n                        working on.")]),e._v(" "),a("p",[e._v("Some of the challenges we may encounter whilst developing this application include:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(160)}}),e._v(" "),a("figcaption",[e._v("Fig 04-003")])]),e._v(" "),a("p",[e._v("In the next section we will continue with our application configuration by adding some\n                        additional dependencies.")]),e._v(" "),a("h3",[e._v("Additional Dependencies")]),e._v(" "),a("p",[e._v("In the images directory we can install a couple of dependencies that we will need later on in\n                        the application. Add the following dependencies using the following terminal command:")]),e._v(" "),a("code",{staticClass:"prettyprint"},[e._v("npm install --save axios lodash qs vue-router vuex")]),e._v(" "),a("p",[e._v("In the next section we'll continue after the installation is complete.")]),e._v(" "),a("h3",[e._v("A Bit of Boilerplate")]),e._v(" "),a("p",[e._v("Issue the following command from a terminal window:")]),e._v(" "),a("code",{staticClass:"prettyprint"},[e._v("npm run serve")]),e._v(" "),a("p",[e._v("This will start the application running at the following addresses:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("App running at:\n    - Local:   http://localhost:8080/\n    - Network: http://192.168.0.37:8080/")]),e._v(" "),a("figcaption",[e._v("Fig 04-004")])]),e._v(" "),a("p",[e._v("Back in the code editor you should see some pretty familiar files and folders - these were\n                        all generated for us automatically by Vue CLI. I don't want to use a lot of the boilerplate\n                        that was added automatically for us - so I will delete the src directory along with all it's\n                        content.")]),e._v(" "),a("p",[e._v("Create a new src directory and then create the root file of the application which is the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("main.js")]),e._v(" file. Remember when Vue CLI first boots up and tries\n                        to run your project it always looks for a file called "),a("code",{staticClass:"prettyprint"},[e._v("main\n                            .js")]),e._v(" inside the "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" directory.\n                    ")]),e._v(" "),a("p",[e._v("In the main.js file we will add some code which is very similar to the code we added in the\n                        previous application:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import Vue from 'vue';\nimport App from './App';\n\nnew Vue ({\n    render: h => h(App)\n}).mount('#app');")]),e._v(" "),a("figcaption",[e._v("Fig 04-005")])]),e._v(" "),a("p",[e._v("We start by importing the Vue library. Next we add an import statement for the App component.\n                        The App component does not yet exist but we will create it in just a moment. We create a new Vue\n                        instance and supply an object with a "),a("code",{staticClass:"prettyprint"},[e._v("render")]),e._v(" property (remember\n                        this is one of the many ways of getting content to show up in the browser when Vue first\n                        starts up). We define our h function. Then, after we create the Vue instance, we render it to\n                        the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with an "),a("code",{staticClass:"prettyprint"},[e._v("id")]),e._v(" of app.\n                        This will target the element that gets created for us by default inside of our public\n                        index.html file:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div id="app"></div>')]),e._v(" "),a("figcaption",[e._v("Fig 04-006")])]),e._v(" "),a("p",[e._v("Create a new file called App.vue inside the src directory:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <h3>Im an App!</h3>\n</template>\n\n<script>\n    export default {\n        name: 'App'\n    };\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 04-007")])]),e._v(" "),a("p",[e._v("So we add a template with a placeholder heading, we add a script tag and define our export\n                        default.\n                    ")]),e._v(" "),a("p",[e._v("Ok, so we've created our App component, we've got our main.js file which imports the App\n                        component, creates the Vue instance and renders it in the browser.\n                    ")]),e._v(" "),a("p",[e._v("Now back in the browser you should see the following:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(161)}}),e._v(" "),a("figcaption",[e._v("Fig 04-008")])]),e._v(" "),a("h3",[e._v("Building the Header")]),e._v(" "),a("p",[e._v("In the last section we setup our project. We now need to dive in and work on our first\n                        feature - the AppHeader.")]),e._v(" "),a("p",[e._v("The left hand of the AppHeader will display the Image Storage logo. On the right hand side we\n                        will display a login button. Once logged in the AppHeader should display links to Gallery,\n                        Upload and Log Out.\n                    ")]),e._v(" "),a("p",[e._v("Back in the editor we will create a new directory called components in the src directory. In the\n                        components folder create a file called AppHeader.vue:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        Image Storage\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'AppHeader'\n    };\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 04-009")])]),e._v(" "),a("p",[e._v("In the App component we will now import AppHeader and make sure that it is visible. Add an\n                        "),a("code",{staticClass:"prettyprint"},[e._v("import")]),e._v(" statement to the "),a("code",{staticClass:"prettyprint"},[e._v("<script>")]),e._v(" tag:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import AppHeader from './components/AppHeader';")]),e._v(" "),a("figcaption",[e._v("Fig 04-010")])]),e._v(" "),a("p",[e._v("Then we add the "),a("code",{staticClass:"prettyprint"},[e._v("AppHeader")]),e._v(" to components property of our\n                        component configuration object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n        name: 'App',\n        components: {\n            AppHeader\n        }\n    };")]),e._v(" "),a("figcaption",[e._v("Fig 04-011")])]),e._v(" "),a("p",[e._v("So now we can show an instance of AppHeader inside of our app's template so we replace the\n                        placeholder heading:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        <AppHeader></AppHeader>\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 04-012")])]),e._v(" "),a("p",[e._v("If you preview this in the browser you should see the AppHeader is now visible:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(162)}}),e._v(" "),a("figcaption",[e._v("Fig 04-013.png")])]),e._v(" "),a("p",[e._v("In the next section we will look at the solution we will be using for styling in this app.")]),e._v(" "),a("h3",[e._v("Including Semantic UI")]),e._v(" "),a("p",[e._v("We wont write all the CSS for this application from scratch because at the end of the day\n                        this course is focused on Vue and not CSS. To handle styling we're going to make use of a\n                        styling library called Semantic UI.")]),e._v(" "),a("p",[e._v("This is going to take care of all the styling of our application and we're just going to have\n                        to add a couple of CSS rules here and there.")]),e._v(" "),a("p",[e._v("The documentation for Semantic UI can be found "),a("a",{attrs:{href:"https://semantic-ui.com/"}},[e._v("here")]),e._v(". It\n                        describes a couple of different methods for installing Semantic UI into your project.\n                    ")]),e._v(" "),a("p",[e._v("We are not going to use an NPM package to install Semantic UI. Instead we will get a single\n                        CSS file and include that in the Html of our application.")]),e._v(" "),a("p",[e._v("The link to the CSS file that we need is available on a CDN or Content Delivery Network which\n                        is used to very quickly serve up resources like CSS files to users of our application. ")]),e._v(" "),a("p",[e._v("Browse to "),a("a",{attrs:{href:"cdnjs.com"}},[e._v("cdnjs.com")]),e._v(" and perform a search for semantic-ui and locate\n                        the "),a("a",{attrs:{href:"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css"}},[e._v("\n                            semantic.min.css")]),e._v(" CSS file - this is the complete package (the other results are\n                        individual components).\n                    ")]),e._v(" "),a("p",[e._v("Copy the link tag and then, back in the editor, in the public/index.html file paste the\n                        link for Semantic UI under the existing link tag (this link tag is related to all the\n                        custom CSS that you and I include directly into our project):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<head>\n    <meta charset="utf-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <link rel="icon" href="<%= BASE_URL %>favicon.ico">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css" />\n    <title>images</title>\n</head>')]),e._v(" "),a("figcaption",[e._v("Fig 04-014")])]),e._v(" "),a("p",[e._v("If you now refresh the browser you should see the Image Storage logo has changed font -\n                        meaning the Semantic UI styling has been applied successfully.")]),e._v(" "),a("h3",[e._v("Styling the Header")]),e._v(" "),a("p",[e._v("If we look at the Semantic UI documentation we will see that it can be used in place of other\n                        libraries like Bootstrap or Material UI - it's just another styling framework that gives you a\n                        little bit of styling out of the box for free.")]),e._v(" "),a("p",[e._v("Locate the Menu button on the left hand side and you will see a list of all the different\n                        styled components you will get when you install Semantic UI.")]),e._v(" "),a("p",[e._v("We can use the "),a("a",{attrs:{href:"https://semantic-ui.com/collections/menu.html"}},[e._v("Menu")]),e._v(" component of\n                        the Collections section to style our AppHeader. The documentation give a couple of different\n                        examples of menu components. The Pointing menu is close to the styling we require for the\n                        AppHeader menu bar. Clicking on the code snippet icon we can see from the example Html that\n                        we need to place a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with a couple of classes applied and\n                        then inside there any button that wants to appear on the left hand side should be an "),a("code",{staticClass:"prettyprint"},[e._v("anchor")]),e._v(" tag with a class of "),a("code",{staticClass:"prettyprint"},[e._v("item\n                        ")]),e._v(".\n                    ")]),a("p",[e._v("For buttons that we want to appear on the right-hand side we will place a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with a class of "),a("code",{staticClass:"prettyprint"},[e._v("right")]),e._v(" and\n                        "),a("code",{staticClass:"prettyprint"},[e._v("menu")]),e._v(". Inside the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" we place\n                        anchor tags which will serve as the actual buttons.")]),e._v(" "),a("p",[e._v("Back in the editor modify the AppHeader.vue file:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="ui secondary pointing menu">\n        <a href="/" class="active item">\n            Image Storage\n        </a>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 04-015")])]),e._v(" "),a("p",[e._v("Back in the browser you should see the page has some new styling applied:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(163)}}),e._v(" "),a("figcaption",[e._v("Fig 04-016")])]),e._v(" "),a("h3",[e._v("Imgur Overview")]),e._v(" "),a("p",[e._v("We are now going to start looking at the right hand side of the AppHeader where initially a\n                        login button will be displayed that is then replaced by various page links when the user\n                        logs in. The AppHeader component is very tightly coupled with the authentication system of\n                        our application. Remember to handle authentication we're going to be making use of the OAuth\n                    system through the Imgur API.")]),e._v(" "),a("p",[e._v("If you navigate to "),a("a",{attrs:{href:"imgur.com"}},[e._v("imgur.com")]),e._v(" you will see a lot of images appearing on\n                        screen. These are all images that have been submitted by users of the Imgur application.\n                        Imgur has two primary methods of working with these images - creating images, adding images,\n                    adding comment or titles, deleting images etc.")]),e._v(" "),a("p",[e._v("The first method is by signing into imgur.com and using the website the other is by making\n                        use of the Imgur API. This is the method we will use. The "),a("a",{attrs:{href:"https://apidocs.imgur.com/"}},[e._v("Imgur")]),e._v(" docs provide lots of information on how\n                        to interface with Imgur through the API.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Applied MVVM Part 1 – Hierarchies and Navigation")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h2",[e._v("Overview")]),e._v(" "),a("p",[e._v("\n                        We will now start building out a few more fully functional use cases from start to finish. In doing\n                        so we will hit on a number of other design considerations and things you will need to know how to\n                        tackle when using the MVVM pattern. We will start with a few concepts first including:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Naming and Location of Components")]),e._v(" "),a("li",[e._v("Hierarchical MVVM and how it ties in with Navigation where compose your app from hierarchies of\n                            Views and ViewModels.\n                        ")]),e._v(" "),a("li",[e._v("From there we'll dive straight into writing code and start building out several use cases for a\n                            Pizza order management app. We'll build out use cases including hierarchical MVVM and\n                            Navigation, getting some data on the screen in a listing and being able to switch to other Views\n                            and pass navigation parameters. That app development will continue into the next module as well\n                            as to finish out the rest of the course.\n                        ")])]),e._v(" "),a("h2",[e._v("Naming MVVM Components")]),e._v(" "),a("p",[e._v("\n                        When it comes to naming components in software there are no correct names, only good or bad ones\n                        depending on who you talk to. What really matters is having a pattern and using it consistently.\n                    ")]),e._v(" "),a("p",[e._v("Most often your Views will be implemented as a UserControl that will be hosted or contained within\n                        some UI container or parent View.\n                    ")]),e._v(" "),a("p",[e._v("Some guidance when naming Views:")]),e._v(" "),a("p",[e._v("\n                        Views should generally be named with a suffix of View with their name indicating what they contain\n                        or something about the action or use case that they support.\n                    ")]),e._v(" "),a("p",[e._v("\n                        You might also have cases where you are creating a top level construct such as a Window, Dialog or\n                        Page and you want to name the View with those as a suffix to indicate what kind of construct they\n                        are. This is absolutely fine.\n                    ")]),e._v(" "),a("p",[e._v("\n                        One recommendation is that you should avoid naming something with a View suffix if it does not have\n                        a corresponding ViewModel. That way you don’t have to dig into the internals of a View to figure out\n                        if it is part of a View/ViewModel pair.\n                    ")]),e._v(" "),a("p",[e._v("Some guidance when naming ViewModels:")]),e._v(" "),a("p",[e._v("\n                        If you are following the above guidance on View naming, then simply apply Model to the end of the\n                        View name to create the ViewModel name (e.g. CustomerEditView/CustomerEditViewModel).\n                    ")]),e._v(" "),a("p",[e._v("If you have a View that’s name doesn't end in View, then append ViewModel to the end of the View name\n                        (e.g. MainWindow/MainWindowViewModel)\n                    ")]),e._v(" "),a("p",[e._v("\n                        Model objects are usually just objects with properties to contain the data of the Model. These kind\n                        of objects are often called entities but don’t let that term confuse you and make you think that\n                        they are necessarily associated with the Entity Framework in any way. Entity is just a general term\n                        for a lightweight object that contains data and properties.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Name Model objects for the domain object that they represent. So your Model objects should have noun\n                        based names like Customer, Order, Patient, Prescription etc.\n                    ")]),e._v(" "),a("p",[e._v("\n                        One last thing to consider is what to name classes that are wrappers for model objects. For example,\n                        assume you are given the requirement to present an Order History for a Customer in a table\n                        consisting of the Product Name, the Order Date and the Quantity of that item:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(588)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000A")])]),e._v(" "),a("p",[e._v("But then you go look at your Model object definitions and realize that you need to get the Product\n                        Name from the Product object, the Order Date from the Order and the Quantity from the OrderItem but\n                        you need a collection of something you can easily bind to from a Grid. The solution, as discussed in\n                        the first module is to wrap your model objects in a separate type that is a helper to the ViewModel.\n                        Some people append ViewModel to the end of type names of these kinds of object but I recommeend you\n                        avoid that. Use some kind of entity name for the object and keep it so ViewModel's always have a\n                        View they are associated with. To keep things clean and easy to understand Wrapped Models should be\n                        kept in a different location to where the Models are defined – often side by side with the Views and\n                        ViewModels they are servicing.\n                    ")]),e._v(" "),a("h2",[e._v("Locating MVVM Components")]),e._v(" "),a("p",[e._v("\n                        When it comes to creating your MVVM components in your Solution structure there are no hard and fast\n                        rules here either. The two most common approaches are to locate your View and ViewModel components\n                        either in folders by type or folders by feature. When using folder by type you have sub folders\n                        foreach each type of construct one for Views:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(589)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000AB")])]),e._v(" "),a("p",[e._v("\n                        and one for ViewModels:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(590)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000AC")])]),e._v(" "),a("p",[e._v("\n                        When using folder by feature you have Views and ViewModels grouped into folders named for a feature\n                        area (e.g. Customers):\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(591)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000AD")])]),e._v(" "),a("p",[e._v("\n                        or set of related use cases and the Views and ViewModels live side by side in that common folder and\n                        namespace.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The problem with the folder by type approach for Views and ViewModels is that in a large complex app\n                        you could easily end up with dozens of files in those single folders making it hard to locate the\n                        type you are looking for. On the other hand, using folder by feature there are rarely more than half\n                        a dozen Views supporting any single feature area. This makes it a lot easier to find a particular\n                        View or ViewModel type.\n                    ")]),e._v(" "),a("p",[e._v("\n                        For your Model types and Client Services those types are often used across multiple features so\n                        using a folder by type for those typically makes sense:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(592)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000AE")])]),e._v(" "),a("p",[e._v("In fact, in the majority of real applications out there the Model types were often in a separate\n                        library altogether:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(593)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000AF")])]),e._v(" "),a("p",[e._v("\n                        because they were objects produced either through data access calls to a database or service calls\n                        to a back end web service and putting them in a separate class library makes it easier to share them\n                        with other parts of your architecture.\n                    ")]),e._v(" "),a("h2",[e._v("MVVM Hierarchies and Navigation")]),e._v(" "),a("p",[e._v("\n                        One of the last concepts to discuss briefly before we dive into the code is hierarchical MVVM and\n                        Navigation. When building an MVVM app you typically decompose complex screens of information into a\n                        set of Parent and Child Views where the Child Views are contained within the Parent Views in Panels\n                        or ContainerControls and they form a hierarchy of Views themselves:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(594)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000B")])]),e._v(" "),a("p",[e._v("\n                        When you do that not every piece of content that you separate into its own XAML file necessarily\n                        needs to be an MVVM View. If the chunk of content just provides the structure to render something to\n                        the screen and does not support any input or manipulation by the user for that content it may not\n                        warrant defining a separate ViewModel for it. It could just be a chunk of XAML that renders based on\n                        properties exposed by the parent's ViewModel\n                    ")]),e._v(" "),a("p",[e._v("\n                        However, if there is justification for having a ViewModel for a Child View then one way to structure\n                        things is to form a ViewModel hierarchy that mimics the View hierarchy and use ViewModel-First\n                        construction with Data Templates as the way to setup that hierarchy. We will implement this in the\n                        demos coming up shortly.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Finally, if you have a hierarchy of Views and ViewModels the Parent ViewModel can become a hub for\n                        communications so that each Child ViewModel can remain decoupled from the other Child ViewModels and\n                        from their Parent as much as possible.\n                    ")]),e._v(" "),a("h2",[e._v("Demo Use Case Review")]),e._v(" "),a("p",[e._v("\\DevelopmentTutorials\\Pluralsight Courses\\WPF MVVM In Depth\\5Pluralsight Courses\\WPF MVVM In\n                        Depth\\ZzaDesktop-Start\n                    ")]),e._v(" "),a("p",[e._v("\\DevelopmentTutorials\\Pluralsight Courses\\WPF MVVM In Depth\\5Pluralsight Courses\\WPF MVVM In\n                        Depth\\ZzaDesktop-End\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now it's time to dive into a series of demos that will span the rest of this module and carry on\n                        into the next. For those demos we are going to start with a set of end user use cases that form the\n                        requirements for what will be building out. Those use cases include:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("The ability to List Customers so that we can take certain actions on a given Customer:")]),e._v(" "),a("ul",[a("li",[e._v("Placing Orders for a Customer")]),e._v(" "),a("li",[e._v("Adding/Editing Customers")])]),e._v(" "),a("li",[e._v("We'll also have a separate notional requirement, just to show some navigation, that we need to\n                            have a separate part of our app that let's us monitor the order preparation process for all\n                            Customers to know when the order is :\n                        ")]),e._v(" "),a("ul",[a("li",[e._v("Queued")]),e._v(" "),a("li",[e._v("Prepared")]),e._v(" "),a("li",[e._v("Out for delivery")])])]),e._v(" "),a("p",[e._v("Now to keep the length of this course reasonable and to avoid showing a bunch of repetitive coding\n                        techniques we're not going to fully flesh out all these use cases but we're going to use them as a\n                        framework of requirements to build out a series of demos in this module and the next to show how to\n                        build out some more realistic screens and interaction patterns. So let's get started.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Building Out an MVVM Hierarchy")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo we are going to start building up our set of use cases from scratch starting from an\n                        essentially empty WPF application project. We have already added the Zza.Data project which contains\n                        the DbContext that we are using for data access and the Model object definitions for our Data Model.\n                        This is referenced already from our WPF project.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We also have our Services Layer with our CustomerRepository and OrderRepository that we have seen in\n                        previous demos. We also have our RelayCommand.cs class that we are using for our ICommand\n                        implementation to delegate calls into our ViewModels when Commands fire.\n                    ")]),e._v("\n                    Fig05-000BA.png\n                    "),a("figure",[a("img",{
attrs:{src:n(595)}}),e._v(" "),a("figcaption",[e._v("Fig 05-000BA")])]),e._v(" "),a("p",[e._v("\n                        Finally add or modify the connection string in the App.config file that points to our Zza Database.\n                    ")]),e._v(" "),a("p",[e._v("Firstly, we will define a set of Views and define the View switching or navigation that can happen to\n                        navigate throughout the application as an end user. To achieve this, we will create a series of\n                        feature folders.\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Customers")]),e._v(" "),a("li",[e._v("Orders")]),e._v(" "),a("li",[e._v("OrderPrep")])]),e._v(" "),a("p",[e._v("Now we will add a View and ViewModel to each one of those feature folders where the Views are\n                        UserControls and the ViewModels are classes:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("CustomerListView")]),e._v(" "),a("li",[e._v("CustomerListViewModel")]),e._v(" "),a("li",[e._v("OrderPrepView")]),e._v(" "),a("li",[e._v("OrderPrepViewModel")]),e._v(" "),a("li",[e._v("OrderView")]),e._v(" "),a("li",[e._v("OrderViewModel")])]),e._v(" "),a("p",[e._v("Next we will add a TextBlock to each View to differentiate between them before adding any actual\n                        functionality:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <Grid>\n    <TextBlock Text="OrderPrep View" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-001")])]),e._v(" "),a("p",[e._v("\n                        Now we need somewhere to host these Views. A good place for that (since this is a simple app) is in\n                        the MainWindow View. We need a ContainerControl that we can place our Views in and switch them in a\n                        navigation fashion. The perfect control for that is a ContentControl. What we will end up doing here\n                        is using its Content property and bind to a ViewModel reference. Similar to what we saw when we were\n                        covering data templates in the third module here we are going to expose a CurrentViewModel property\n                        from this View's ViewModel (which doesn't exist yet). By setting the CurrentViewModel property to an\n                        instance of a ViewModel and having a data template for it we can drive the rendering of the View and\n                        its ViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ContentControl Content="{Binding CurrentViewModel}" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-002")])]),e._v(" "),a("p",[e._v("\n                        Now we need to add data templates that match up to our Views and ViewModels. To define the data\n                        templates for each View we will need to bring in their corresponding child namespaces:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\nxmlns:cust="clr-namespace:ZzaDesktop.Customers"\nxmlns:order="clr-namespace:ZzaDesktop.Orders"\nxmlns:prep="clr-namespace:ZzaDesktop.OrderPrep"\nxmlns:local="clr-namespace:ZzaDesktop"\nTitle="MainWindow"')])]),e._v(" "),a("figcaption",[e._v("Fig 05-003")])]),e._v(" "),a("p",[e._v("\n                        So we have a child namespace per sub folder and one for the root folder. Now we can define the\n                        DataTemplates in a ResourceDictionary for this window. We will setup one DataTemplate per ViewModel\n                        mapping to its ViewType:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <DataTemplate DataType="{x:Type cust:CustomerListViewModel}">\n        <cust:CustomerListView />\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type order:OrderViewModel}">\n        <order:OrderView />\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type prep:OrderPrepViewModel}">\n        <prep:OrderPrepView />\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type cust:AddEditCustomerViewModel}">\n        <cust:AddEditCustomerView />\n    </DataTemplate>\n\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-004")])]),e._v(" "),a("p",[e._v("\n                        Note how each DataTemplate maps a DataType (the ViewModel Type) to a corresponding View and the use\n                        of this DataTemplate will create this View, set its DataContext to its ViewModel. So now anytime\n                        CurrentViewModel is set to instance of a CustomerListViewModel it will render out a CustomerListView\n                        with the ViewModel hooked up.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So we just need a ViewModel that has a CurrentViewModel property and some logic and Commanding to\n                        switch the current reference of ViewModel inside that property.\n                    ")]),e._v(" "),a("p",[e._v("Create a class called MainWindowViewModel. In MainWindow view we can use static hook-up in the XAML:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Window.DataContext>\n    <local:MainWindowViewModel />\n</Window.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 05-005")])]),e._v(" "),a("p",[e._v("The above XAML just creates an instance of the ViewModel from XAML and use it to set the DataContext\n                        property of the Window.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now let's start fleshing out our MainWindowViewModel. The first property we know our ViewModel needs\n                        is a property called CurrentViewModel which we will set to a type of object for now:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public object CurrentViewModel { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-006")])]),e._v(" "),a("p",[e._v("\n                        To drive the navigation, the MainWindowViewModel is going to act as a Parent in a hierarchy of\n                        ViewModels where the Child ViewModels will be managed by the parent ViewModel. We will declare an\n                        instance of each of the Child ViewModel types that we are going to be placing into that\n                        CurrentViewModel property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private CustomerListViewModel _customerListViewModel = new CustomerListViewModel();\nprivate OrderViewModel _orderViewModel = new OrderViewModel();\nprivate OrderPrepViewModel _orderPrepViewModel = new OrderPrepViewModel();")])]),e._v(" "),a("figcaption",[e._v("Fig 05-007")])]),e._v(" "),a("p",[e._v("\n                        We can see that just like the MainWindow ContentControl will act as a Container for the rendered\n                        Views our MainWindowViewModel can act as a Container or Parent to the contained ViewModels.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The next thing to consider is that we will be setting the CurrentViewModel property over and over\n                        again as navigation occurs. Anytime that you are going to be setting a property that you are bound\n                        to after the initial XAML parsing has happened you would need to support INotifyPropertyChanged. We\n                        could just implement INPC directly on MainWindowViewModel and then later we would find we would need\n                        to do it on CustomerListViewModel, OrderViewModel and so on. The thing to recognise is that you\n                        pretty much always need INPC support on your ViewModels.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We also need to make sure that whatever type you make the CurrentViewModel property we are able to\n                        put an instance of each of the child ViewModels into that property. Obviously using the object base\n                        class for all types of objects in .Net will work but it is better to be a bit more specific.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So the combination of facts that each ViewModel will need to implement INPC and that we need some\n                        common base type for those ViewModels leads us to creating something that encapsulates the INPC\n                        pattern, and makes it so our ViewModels don’t have to be repetitive in declaring INPC and makes it\n                        so our property definitions can be a little bit more trim as well.\n                    ")]),e._v(" "),a("p",[e._v("In our next demo we will create a base class to encapsulate that INPC implementation then have our\n                        ViewModels inherit from it.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Encapsulating INotifyPropertyChanged")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        So we need to create a base class to encapsulate the implementation of INPC for our ViewModels. To\n                        do that we are going to add a new class to the project called BindableBase. The main idea behind\n                        BindableBase is to encapsulate the INotifyPropertyChanged implementation and provide helper methods\n                        to the derived class so they can easily trigger the appropriate notifications. Firstly, this class\n                        needs to implement INPC:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ZzaDesktop\n{\n    public class BindableBase : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged = delegate { };\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-007A")])]),e._v(" "),a("p",[e._v("and then it needs to expose a way for the derived classes to trigger that PropertyChanged event at\n                        the appropriate time as well as encapsulating the check to make sure that the value of any property\n                        that is being set is actually changing.\n                    ")]),e._v(" "),a("p",[e._v("\n                        To do that we will define two methods on this class. One called SetProperty and one called\n                        OnPropertyChanged:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("protected virtual void SetProperty<T>(ref T member, T val, [CallerMemberName] string propertyName = null)\n{\n    if (object.Equals(member, val)) return;\n\n    member = val;\n    PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n}\n\nprotected virtual void OnPropertyChanged(string propertyName)\n{\n    PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-007B")])]),e._v(" "),a("p",[e._v("The SetProperty method is intended to be set from the set block of each property and encapsulates the\n                        check to see if the value actually changed and if so it sets the member variable and triggers the\n                        PropertyChanged event.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The other method, OnPropertyChanged, is meant for places where maybe changing one property means you\n                        need to trigger an update on two properties such as a computed property. So for that one you can\n                        just pass in the property name and the event will be fired, since it's encapsulated down here at the\n                        base level. Now let's go see what it can do for us with our ViewModels\n                    ")]),e._v(" "),a("p",[e._v("\n                        So back in our MainWindowViewModel we can change the way we define our properties, we can’t do just\n                        auto implemented properties because we need to have a set block to trigger the change but we want\n                        that to be as compact as possible.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We can use BindableBase as our property type and the property name is still CurrentViewModel. Make\n                        sure you set MainWindowViewModel to inherit from BindableBase:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("class MainWindowViewModel : BindableBase\n{\n    private CustomerListViewModel _customerListViewModel = new CustomerListViewModel();\n    private OrderViewModel _orderViewModel = new OrderViewModel();\n    private OrderPrepViewModel _orderPrepViewModel = new OrderPrepViewModel();\n\n    private BindableBase _CurrentViewModel;\n\n    public BindableBase CurrentViewModel\n    {\n        get { return _CurrentViewModel; }\n        set { SetProperty(ref _CurrentViewModel, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-008")])]),e._v(" "),a("p",[e._v("\n                        The standard use of SetProperty is that you pass in the backing variable by ref into the SetProperty\n                        method on the base class. You will also pass in the value that is currently being set for that\n                        property.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In the BindableBase implementation of SetProperty you can see how those members are coming in:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class BindableBase : INotifyPropertyChanged\n{\n    protected virtual void SetProperty<T>(ref T member, T val,\n                [CallerMemberName] string propertyName = null)")])]),e._v(" "),a("figcaption",[e._v("Fig 05-008A")])]),e._v(" "),a("p",[e._v("The by ref member variable comes in in the first argument, the value comes in second and the third\n                        one gets set with a nice feature of C# which is the CallerMemberName attribute:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("[CallerMemberName] string propertyName = null")])]),e._v(" "),a("figcaption",[e._v("Fig 05-008B")])]),e._v(" "),a("p",[e._v("That attribute makes it so it can automatically pick off the name of the thing that called in here –\n                        which in our case, since the SetProperty it being called from the property is the property name\n                        itself – CurrentViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("class MainWindowViewModel : BindableBase\n{\n    private CustomerListViewModel _customerListViewModel = new CustomerListViewModel();\n    private OrderViewModel _orderViewModel = new OrderViewModel();\n    private OrderPrepViewModel _orderPrepViewModel = new OrderPrepViewModel();\n\n    private BindableBase _CurrentViewModel;\n\n    public BindableBase CurrentViewModel\n    {\n        get { return _CurrentViewModel; }\n        set { SetProperty(ref _CurrentViewModel, value); }\n    }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-009")])]),e._v(" "),a("p",[e._v("\n                        You can see it allows you to have a nice compact property definition with the get and set blocks but\n                        still do all the things that you need to do for INPC like checking the value actually changed and\n                        firing the event. As a nice consequence it allows us to set the type of this property to be\n                        BindableBase assuming that each of our ViewModels will inherit from that. So now let’s add\n                        BindableBase to each of our ViewModels.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ZzaDesktop.Customers\n{\n    class CustomerListViewModel : BindableBase\n    {")])]),e._v(" "),a("figcaption",[e._v("Fig 05-009A")])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ZzaDesktop.Orders\n{\n    class OrderViewModel : BindableBase\n    {")])]),e._v(" "),a("figcaption",[e._v("Fig 05-009B")])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ZzaDesktop.OrderPrep\n{\n    class OrderPrepViewModel : BindableBase\n    {\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-009C")])]),e._v(" "),a("p",[e._v("So next we'll hook up the Commanding to actually drive this switching and navigation.")]),e._v(" "),a("h2",[e._v("Demo: View Switching Navigation")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        So in this demo we will start doing some actual View switching using our CurrentViewModel property.\n                        We just need some way to drive the setting of this property and we are going to make it so the end\n                        user can command going to the CustomerList or to the OrderPreparation View. To get to the OrderView\n                        we are going to need to know what Customer that order is being placed for so that one is going to be\n                        driven in a slightly different way.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So we need to setup some top level navigation to the CustomerListViewModel and the\n                        OrderPrepViewModel and the logic for that switching should belong inside of this ViewModel. We will\n                        declare a method called OnNav that takes a string destination and then we will setup a simple switch\n                        case to set the CurrentViewModel property to the appropriate child ViewModel when a certain\n                        identifier comes in:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnNav(string destination)\n{\n    switch (destination)\n    {\n        case "orderPrep":\n            CurrentViewModel = _orderPrepViewModel;\n            break;\n        case "customers":\n        default:\n            CurrentViewModel = _customerListViewModel;\n            break;\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-010")])]),e._v(" "),a("p",[e._v("\n                        We need some way to call that when the user interacts with the View. We know from previous modules a\n                        good way to set that up is with Commands. So let’s declare a Command that we can invoke the method\n                        with:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand<string> NavCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-011")])]),e._v(" "),a("p",[e._v("\n                        Now we just need to construct that so we will add a Constructor to the class and set that Command\n                        pointing to the OnNav method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public MainWindowViewModel()\n{\n    NavCommand = new RelayCommand<string>(OnNav);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-012")])]),e._v(" "),a("p",[e._v("\n                        Now we just need to be able to trigger that Command from our View so keeping it simple we will use\n                        some Buttons. Add two rows to the Grid in the MainWindow.xaml View:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n<Grid.RowDefinitions>\n    <RowDefinition Height="Auto" />\n    <RowDefinition Height="*" />\n</Grid.RowDefinitions>\n<Grid x:Name="NavBar">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width="*" />\n        <ColumnDefinition Width="*" />\n        <ColumnDefinition Width="*" />\n    </Grid.ColumnDefinitions>\n    <Button Content="Customers"\n            Command="{Binding NavCommand}"\n            CommandParameter="customers"\n            Grid.Column="0" />\n    <Button Content="OrderPrep"\n            Command="{Binding NavCommand}"\n            CommandParameter="orderPrep"\n            Grid.Column="2" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-013")])]),e._v(" "),a("p",[e._v("\n                        We add some Buttons to the top row, in the second row of the Grid we have our ContentControl as\n                        before. The Button on the left is used for navigating to Customers whilst the Button on the right is\n                        used for navigating to Orders. You can see we are just pointing those at the NavCommand property\n                        exposed by our ViewModel and using the CommandParameter to pass in the string to drive which\n                        navigation should take place. With all that in place we should be able to go ahead and run the\n                        application. We can see the two Buttons and clicking on them takes you to the relevant View:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(596)}}),e._v(" "),a("figcaption",[e._v("Fig 05-014")])]),e._v(" "),a("p",[e._v("\n                        So we are getting top level navigation driven by the User, triggering Commands into the ViewModel,\n                        and the ViewModel encapsulates the navigation logic. We are leveraging implicit DataTemplates to\n                        marry up the Views and ViewModels simply by setting a child ViewModel property.\n                    ")]),e._v(" "),a("p",[e._v("Now to start making this more real we're going to flesh out the CustomerListView cause the only way\n                        we can get to the Order view is if we know what Customer to create an Order for.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Data Loading into a ViewModel")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now that we have our basic top-level navigation working it is time to start fleshing out the\n                        CustomerListView. Replace the TextBox with a DataGrid:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <DataGrid ItemsSource="{Binding Customers}"\n              AutoGenerateColumns="False"\n              CanUserAddRows="False"\n              Grid.Row="1">\n        <DataGrid.Columns>\n            <DataGridTextColumn Binding="{Binding FullName}"\n                                Width="*" />\n            <DataGridTemplateColumn Width="Auto">\n                <DataGridTemplateColumn.CellTemplate>\n                    <DataTemplate>\n                        <Button Content="Place Order"\n                                Command="{Binding DataContext.PlaceOrderCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"\n                                CommandParameter="{Binding}"\n                                Margin="5" />\n                    </DataTemplate>\n                </DataGridTemplateColumn.CellTemplate>\n            </DataGridTemplateColumn>\n        </DataGrid.Columns>\n    </DataGrid>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-015")])]),e._v(" "),a("p",[e._v("\n                        We have added a DataGrid that is binding to Customers which means our ViewModel must now expose a\n                        Customers Collection. We have got a set of two columns defined. The first one is bound to the\n                        FullName property of the Customer and will take up most of the row. The second one is a templated\n                        column that contains a Button to place an order for a given Customer. That Button is going to pass\n                        the Customer by grabbing just the current DataContext for the cell.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The Command itself will exist on our ViewModel. So to get to our ViewModel from inside of the row\n                        where the DataContext is not the ViewModel we have to break out of the local DataContext using a\n                        RelativeSource binding:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <Button Content="Place Order"\n    Command="{Binding DataContext.PlaceOrderCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"\n    CommandParameter="{Binding}"\n    Margin="5" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-015A")])]),e._v(" "),a("p",[e._v("\n                        that let’s us walk up the Visual Tree until we get to the DataGrid at which point we are in the part\n                        of the XAML where our ViewModel is the current DataContext. Then we can set the path to the\n                        DataContext of the DataGrid then dot down into PlaceOrderCommand which we will add to our ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("In the CustomerListViewModel we will start by adding the Customers Collection and the\n                        PlaceOrderCommand:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ObservableCollection<Customer> _customers;\npublic ObservableCollection<Customer> Customers\n{\n    get { return _customers; }\n    set { SetProperty(ref _customers, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-016")])]),e._v(" "),a("p",[e._v("\n                        Now we need to be able to load Customers into that Customers collection. For that we will need the\n                        repository. The ViewModel can new up an instance of the repository as an initial crude attempt. In\n                        the next module we will cover dependency injection and how we can use that to pass the repository\n                        in. For now, let’s just hard code it in here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ICustomersRepository _repo = new CustomersRepository();")])]),e._v(" "),a("figcaption",[e._v("Fig 05-017")])]),e._v(" "),a("p",[e._v("\n                        So we new up an instance of the Customers repository and hold it in a member variable of the\n                        interface type. Now we need to trigger where we are going to load the Customers into the collection\n                        and because that is going to be an asynchronous load using the Loaded event of the View is actually\n                        a good way to go. We just have to wire it up with the behavior as we saw in the previous module.\n                        First let’s define the target method that we want to invoke when the Loaded event fires:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public async void LoadCustomers()\n{\n    Customers = new ObservableCollection<Customer>(\n        await _repo.GetCustomersAsync());\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-018")])]),e._v(" "),a("p",[e._v("\n                        Here we can see that we are going to go out to our CustomerRepository and call GetCustomersAsync,\n                        await on the async method. When it returns the value we are going to pass it into the constructor of\n                        ObservableCollection and populate our Customers property. Now we just need to call that when the\n                        event fires.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The quickest way to get that hooked up is in Blend. Make sure the UserControl root element is\n                        selected in Objects and Timeline:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(597)}}),e._v(" "),a("figcaption",[e._v("Fig 05-018A")])]),e._v(" "),a("p",[e._v("\n                        go up to the Assets tab, Behaviors and then double click CallMethodAction:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(598)}}),e._v(" "),a("figcaption",[e._v("Fig 05-018B")])]),e._v(" "),a("p",[e._v("\n                        That adds it as a child of the root element.\n                    ")]),e._v(" "),a("p",[e._v("\n                        If you open the CustomerListView back in Visual Studio you will see that Blend has added two\n                        namespaces of the Blend SDK, it added the Triggers collection to the Root element, and it added an\n                        EventTrigger which we want to change to the Loaded event and a CallMethodAction underneath that. We\n                        want to set the TargetObject to just Binding to get to a reference of our ViewModel and the\n                        MethodName to LoadCustomers:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<i:Interaction.Triggers>\n    <i:EventTrigger EventName="Loaded">\n        <ei:CallMethodAction TargetObject="{Binding}" MethodName="LoadCustomers"/>\n    </i:EventTrigger>\n</i:Interaction.Triggers>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-019")])]),e._v(" "),a("p",[e._v("With that we should be able to run, click on the Customers Button and the Customers should be loaded\n                        asynchronously:\n                    ")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(599)}}),e._v(" "),a("figcaption",[e._v("Fig 05-020")])]),e._v(" "),a("p",[e._v("\n                        Now we just have to get the Place Order Button wired up with a Command in the ViewModel. In the\n                        ViewModel define a Command property called PlaceOrderCommand:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand<Customer> PlaceOrderCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-021")])]),e._v(" "),a("p",[e._v("In the constructor for the ViewModel initialize the Command property and point it to a handling\n                        method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public CustomerListViewModel()\n{\n    PlaceOrderCommand = new RelayCommand<Customer>(OnPlaceOrder);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-022")])]),e._v(" "),a("p",[e._v("Now add the handling method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnPlaceOrder(Customer customer)\n{\n    PlaceOrderRequested(customer.Id);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-023")])]),e._v(" "),a("p",[e._v("Just to make sure that is all setup correctly we can set a break point on the OnPlaceOrder method and\n                        run, go to our Customers View, click on Place Order and you can see we're calling our command\n                        handler with the Customer reference.\n                    ")]),e._v(" "),a("p",[e._v("Next up we need to tackle navigating to an OrderView with that Customers context.")]),e._v(" "),a("h2",[e._v("Demo: Navigation with Parameters")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        At this point we are all wired up to do top level navigation between the CustomersList and the\n                        OrderPrep area of the application. Now we wired ourselves up to present a list of Customers and have\n                        a PlaceOrder Command that we can then invoke on each Customer passing that into the\n                        CustomerListViewModel.")]),e._v(" "),a("p",[e._v("\n                        Now we need to cause navigation from the Child ViewModel but that navigation is going to replace\n                        this ViewModels View as the Current View in the top level navigation container. That means this\n                        child ViewModel needs to be able to communicate up to its parent ViewModel:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(600)}}),e._v(" "),a("figcaption",[e._v("Fig 05-023A")])]),e._v(" "),a("p",[e._v("\n                        which is the MainWindowViewModel because that is where the navigation is being managed.")]),e._v(" "),a("p",[e._v("\n                        There is a number of ways you can go about doing this but one simple and straightforward way is to\n                        allow Child ViewModels to raise events that their Parent ViewModel can handle. Much like a human\n                        child tries to get its parent to do something with events – sometimes polite and controlled,\n                        sometimes disastrous (we'll avoid those here in our code).\n                    ")]),e._v(" "),a("p",[e._v("\n                        Basically we need to raise an event to our parent. To do that we can simply declare an event that is\n                        raised by this ViewModel. So we will have an event that can pass a GUID (the CustomerId) that we\n                        want to start placing an Order for:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event Action<Guid> PlaceOrderRequested = delegate { };")])]),e._v(" "),a("figcaption",[e._v("Fig 05-023B")])]),e._v(" "),a("p",[e._v("\n                        Once we have the event defined we can raise it from inside of our PlaceOrder command handler passing\n                        the Customer Id of the Customer the Command was raised for:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnPlaceOrder(Customer customer)\n{\n    PlaceOrderRequested(customer.Id);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-024")])]),e._v(" "),a("p",[e._v("\n                        In the MainWindowViewModel (the parent ViewModel) in the constructor , since our ViewModel is\n                        constructed up above with an initializer, we can just subscribe to the PlaceOrderRequested event and\n                        have some handling method that we will place here in the parent:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public MainWindowViewModel()\n        {\n            NavCommand = new RelayCommand<string>(OnNav);\n            _customerListViewModel.PlaceOrderRequested += NavToOrder;\n        }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-025")])]),e._v(" "),a("p",[e._v("To implement the method, we will drop down to the bottom of the class and declare a method with the\n                        appropriate signature:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void NavToOrder(Guid customerId)")])]),e._v(" "),a("figcaption",[e._v("Fig 05-026")])]),e._v(" "),a("p",[e._v("\n                        Now before we go and set the CurrentViewModel to cause the navigation to occur to the OrderViewModel\n                        we need to pass some context. What we can do is pan on exposing a property on the ViewModel that the\n                        parent can set as the context that drives the way it is going to behave when it is presented. We\n                        take the Guid that was passed to us and just push it down to the child ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void NavToOrder(Guid customerId)\n        {\n            _orderViewModel.CustomerId = customerId;\n            CurrentViewModel = _orderViewModel;\n        }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-027")])]),e._v(" "),a("p",[e._v("In the OrderViewModel add an appropriate property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private Guid _CustomerId;\n\npublic Guid CustomerId\n{\n    get { return _CustomerId; }\n    set { SetProperty(ref _CustomerId, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-028")])]),e._v(" "),a("p",[e._v("In the OrderView add the following XAML:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackPanel Orientation="Horizontal">\n    <TextBlock Text="Placing Order for Customer: " />\n    <TextBlock Text="{Binding CustomerId}" />\n</StackPanel>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-029")])]),e._v(" "),a("p",[e._v("\n                        We have added a Horizontal StackPanel with two TextBlocks to present that we are placing an order\n                        for a given Customer Id. With that in place we can go ahead and run the application, go to\n                        Customers, select a Customer, click Place Order and you will be taken to the Order page showing the\n                        Customer Id:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(601)}}),e._v(" "),a("figcaption",[e._v("Fig 05-030")])]),e._v(" "),a("p",[e._v("Now we're not going to fully flesh out this View with taking orders, order items and all that kind of\n                        stuff, we're going to focus on rounding out the functionality for Customers.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Add/Edit Navigation")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex05-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 5\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex05-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        So to finish up the navigation topics in this module we just need to add a new View and ViewModel to\n                        handle adding and editing. Since the two will combine the same data entry fields we can combine them\n                        into a single View and ViewModel that has a mode to it that switches between Add mode and Edit mode.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The first step is to define a new AddEditCustomerView and AddEditCustomerViewModel. Now we just need\n                        to put in place some way to navigate to this View in Add mode or Edit mode. That will involve\n                        putting some Command buttons onto our CustomerListView:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height="Auto" />\n        <RowDefinition Height="*" />\n    </Grid.RowDefinitions>\n    <Grid>\n        <Button Content="Add Customer"\n                Command="{Binding AddCustomerCommand}"\n                HorizontalAlignment="Left" />\n    </Grid>\n    <DataGrid ItemsSource="{Binding Customers}"\n              AutoGenerateColumns="False"\n              CanUserAddRows="False"\n              Grid.Row="1">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-031")])]),e._v(" "),a("p",[e._v("\n                        Our root Grid now has two rows, the top one will Autosize based on its content. We have added some\n                        content to that first row that is a Button that invokes an AddCustomerCommand in our ViewModel. For\n                        our Edit we want to use the context of a given row within the Grid that is a single Customer. We\n                        will just add another templated column similar to the PlaceOrderCommand:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTemplateColumn Width="Auto">\n    <DataGridTemplateColumn.CellTemplate>\n        <DataTemplate>\n            <Button Content="Place Order"\n                    Command="{Binding DataContext.PlaceOrderCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"\n                    CommandParameter="{Binding}"\n                    Margin="5" />\n        </DataTemplate>\n    </DataGridTemplateColumn.CellTemplate>\n</DataGridTemplateColumn>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-032")])]),e._v(" "),a("p",[e._v("\n                        We use a RelativeSource Binding to get up to the DataGrid, uses the DataContext property of the\n                        DataGrid to get to the ViewModel, then dots down to the EditCustomerCommand that we will be adding\n                        shortly.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Let’s add the EditCustomerCommand and AddCustomerCommand to the CustomerListViewModel. The pattern\n                        should be getting familiar now. First we define the property on our ViewModel that exposes that\n                        Command:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand AddCustomerCommand { get; private set; }\npublic RelayCommand<Customer> EditCustomerCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-033")])]),e._v(" "),a("p",[e._v("\n                        The AddCustomerCommand takes no arguments, the EditCustomerCommand takes the Customer object for the\n                        row the Button was clicked in. Next we go to the constructor for our ViewModel and construct the\n                        command object, pointing it to a handling method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public CustomerListViewModel()\n{\n    PlaceOrderCommand = new RelayCommand<Customer>(OnPlaceOrder);\n    AddCustomerCommand = new RelayCommand(OnAddCustomer);\n    EditCustomerCommand = new RelayCommand<Customer>(OnEditCustomer);\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-034")])]),e._v(" "),a("p",[e._v("Now stub out the handling methods:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnAddCustomer()\n{\n    AddCustomerRequested(new Customer { Id = Guid.NewGuid() });\n}\nprivate void OnEditCustomer(Customer cust)\n{\n    EditCustomerRequested(cust);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-035")])]),e._v(" "),a("p",[e._v("\n                        Now, just like PlaceOrder, we need to cause navigation to occur from down inside the child ViewModel\n                        so the pattern we established is to raise an event to our Parent ViewModel. We will need two more\n                        events for that:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event Action<Customer> AddCustomerRequested = delegate { };\npublic event Action<Customer> EditCustomerRequested = delegate { };")])]),e._v(" "),a("figcaption",[e._v("Fig 05-036")])]),e._v(" "),a("p",[e._v("Each event will pass a Customer and now we just need to fire those from the Command handlers:")]),e._v(" "),a("p",[e._v("\n                        For AddCustomer we will just fire the event and pass in a new Customer object setting its Id to a\n                        new Guid. For EditCustomer we will just fire the event passing in the Customer that was passed to us\n                        through the Command:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnAddCustomer()\n{\n    AddCustomerRequested(new Customer { Id = Guid.NewGuid() });\n}\nprivate void OnEditCustomer(Customer cust)\n{\n    EditCustomerRequested(cust);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-037")])]),e._v(" "),a("p",[e._v("\n                        So now we just need to go up to the Parent ViewModel level and do the event handling and navigation.\n                        So first we will need an instance of the new child ViewModel that we are going to navigate to:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private AddEditCustomerViewModel _addEditViewModel = new AddEditCustomerViewModel();")])]),e._v(" "),a("figcaption",[e._v("Fig 05-038")])]),e._v(" "),a("p",[e._v("We can then subscribe to its events in the constructor of the ViewModel (as we did for PlaceOrder):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("_customerListViewModel.AddCustomerRequested += NavToAddCustomer;\n_customerListViewModel.EditCustomerRequested += NavToEditCustomer;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-039")])]),e._v(" "),a("p",[e._v("Now we just need to implement the handling methods:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void NavToAddCustomer(Customer cust)\n{\n    _addEditViewModel.EditMode = false;\n    _addEditViewModel.SetCustomer(cust);\n    CurrentViewModel = _addEditViewModel;\n}\n\nprivate void NavToEditCustomer(Customer cust)\n{\n    _addEditViewModel.EditMode = true;\n    _addEditViewModel.SetCustomer(cust);\n    CurrentViewModel = _addEditViewModel;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-040")])]),e._v(" "),a("p",[e._v("\n                        Each takes in a Customer. What we expect to do here is set a flag on the AddEditViewModel to tell it\n                        whether it is in EditMode or not and then we need some way to pass that Customer context down into\n                        the ViewModel. We are doing that with an imperative call to a method. Finally, we set the\n                        CurrentViewModel property so that it becomes the current View in the root container.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now for all of that to work we need to implement the property, the method, and make it so that\n                        AddEditViewModel is a BindableBase object because that is the type of CurrentViewModel.\n                    ")]),e._v(" "),a("p",[e._v("So in AddEditCustomerViewModel add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("class AddEditCustomerViewModel : BindableBase\n{\n    private bool _EditMode;\n\n    public bool EditMode\n    {\n        get { return _EditMode; }\n        set { SetProperty(ref _EditMode, value); }\n    }\n\n    private Customer _editingCustomer = null;\n\n    public void SetCustomer(Customer cust)\n    {\n        _editingCustomer = cust;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-041")])]),e._v(" "),a("p",[e._v("\n                        Firstly, we add the BindableBase base class, define our EditMode as a boolean property, define a\n                        SetCustomer method that takes in a Customer and hold onto that Customer for the span of the editing\n                        context:\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now if we were going to just bind to this Customer directly and let the editing happen directly\n                        against it we could have just set a property. As we will see in the next module you may not always\n                        want to directly edit your Model objects you may need to wrap them in some scenarios. In that case\n                        we can pass this Customer down in here and produce a wrapped object. We will cover this in the next\n                        module.\n                    ")]),e._v(" "),a("p",[e._v("For now, we need to put something in the View so we can identify when it is on screen:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TextBlock Text="Add / Edit Customer View" />\n\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-042")])]),e._v(" "),a("p",[e._v("We then want to go to the MainWindow View and add another DataTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate DataType="{x:Type cust:AddEditCustomerViewModel}">\n    <cust:AddEditCustomerView />\n</DataTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-043")])]),e._v(" "),a("p",[e._v("\n                        This maps the AddEditCustomerViewModel to the AddEditCustomerView so it can be rendered out.")]),e._v(" "),a("p",[e._v("\n                        With all that in place we can run the application, go to Customers, click on the Edit Button for a\n                        selected Customer and see that we end up in the Add/Edit Customer View:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(602)}}),e._v(" "),a("figcaption",[e._v("Fig 05-044")])]),e._v(" "),a("p",[e._v("And likewise when clicking the Add customer button we end up in the same place.")]),e._v(" "),a("p",[e._v("\n                        Now this might seem like a lot of ceremony: having to define a Command that gets despatched down\n                        into this ViewModel, the ViewModel raises an event to the Parent ViewModel, the Parent ViewModel\n                        handles that event and causes the navigation. The point of all of this is to keep each of these\n                        parts loosely coupled from the other ones. We have all the navigation logic centralized in the\n                        MainWindowViewModel, it just handles its part of the interaction which is to manage the Customer\n                        List and events surrounding it.\n                    ")]),e._v(" "),a("p",[e._v("Now there are certainly other ways to go about this:")]),e._v(" "),a("ul",[a("li",[e._v("You could have a client service that manages navigation for a given container or set of\n                            containers.\n                        ")]),e._v(" "),a("li",[e._v("If you use a framework like Prism you could do something like region navigation")])]),e._v(" "),a("p",[e._v("However, this approach is simple and straightforward and it only takes moments to stub each\n                        navigation out.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In the next module we will finish fleshing out the AddEditCustomerView and in the process of doing\n                        so we will touch on a number of other concepts including:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Wrapping model objects")]),e._v(" "),a("li",[e._v("Using the Visual Studio Designer to scaffold out data entry views")]),e._v(" "),a("li",[e._v("Doing validation on your editable objects")]),e._v(" "),a("li",[e._v("Doing dependency injection for your ViewModels")])]),e._v(" "),a("h2",[e._v("Summary")]),e._v(" "),a("p",[e._v("In this module we saw a number of things and got started building out our application. We saw:")]),e._v(" "),a("ul",[a("li",[e._v("Naming and location of components is important for maintainability and you want to put some\n                            thought into where you want to put things and how you name them so that you don't have to go\n                            hunting around and trying to find a View/ViewModel or Model object that's poorly named for what\n                            it's purpose is.\n                        ")]),e._v(" "),a("li",[e._v("We saw how hierarchical MVVM works and how it can mirror the way you can compose a complex\n                            screen of multiple child views and have the ViewModels mirror that structure and allow parent\n                            ViewModels control child ViewModels and coordinate between them.\n                        ")]),e._v(" "),a("li",[e._v("And then you started to see through the demos that building out an MVVM app is a progressive\n                            sequence of defining Views, ViewModels, navigation and communications to satisfy the requirement\n                            at a granular level for each component.\n                        ")])]),e._v(" "),a("p",[e._v("In the next module we'll continue building out those use cases and we'll look at things like\n                        leveraging the designer in Visual Studio, validating input from the user and using dependency\n                        injection to tie together ViewModels with their client services. So hang in there for one more\n                        module and you'll be an MVVM ninja\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Course Overview")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("p",[e._v("\n                    Hi, this is Brian Noyes, and welcome to this course on WPF Data Binding in Depth. In this course,\n                    you'll get a\n                    good, deep, end-to-end coverage of the data binding capabilities in WPF, enabling you to build rich,\n                    data-driven business applications. You'll see how data binding can really transform the way you go\n                    about\n                    building out your user interface, populating it with data, and rendering out the visual elements\n                    that the user\n                    sees on the screen.\n                ")]),e._v(" "),a("p",[e._v("\n                    We'll start off the course with a Data Binding Overview. We'll cover the fundamentals of data\n                    binding to make\n                    sure everyone has a good level set, even if you have been exposed before, of what the basic building\n                    blocks\n                    with data binding are.\n                ")]),e._v(" "),a("p",[e._v("\n                    Now this course does not attempt to teach you everything you need to know about building XAML\n                    applications. I\n                    would strongly recommend you check out one of the other courses in the Pluralsight library. The\n                    focus in this\n                    course is just going to be on everything to do about data binding.\n                ")]),e._v(" "),a("p",[e._v("\n                    So after we go through the fundamentals, then we'll also talk about data sources, specifically what\n                    kinds of\n                    data objects you can use for data binding and what kinds of support those objects need to have to\n                    participate\n                    properly with the data binding mechanisms. We'll look at things at an entity level, we'll talk about\n                    data\n                    sets, XML, and Collections that you'll work with.\n                ")]),e._v(" "),a("p",[e._v("\n                    Next we'll get into the core concepts of the bindings themselves. We'll talk about how you can\n                    provide\n                    alternate source objects, other than the data context that we've talked about up to that point.\n                    We'll talk\n                    about the Path property and how that indicates what part of the data bound object to use to come up\n                    with a\n                    value, and we'll talk about the direction of flow of data through a binding.\n                ")]),e._v(" "),a("p",[e._v("\n                    In the next module, we'll dive to a deeper level on bindings and we'll go through a whole bunch of\n                    additional\n                    properties that bindings have for advanced scenarios. You probably won't use all of these on a\n                    regular basis,\n                    but you'll want to know they're there and how they work when the situation comes up to use them.\n                    This includes\n                    things like being able to do asynchronous bindings, changing when the data flows in two-way data\n                    binding\n                    scenarios, having fallback values and formatted values, and things like that.\n                ")]),e._v(" "),a("p",[e._v("\n                    In the fifth module, we'll go into data templates. Data templates are one of the most powerful\n                    mechanisms in\n                    data binding that allow you to provide a custom visual representation for the data bound objects\n                    you're\n                    working with, and these get rendered out by WPF itself. So we'll see how to define data templates\n                    and how to\n                    tie them in with your bindings.\n                ")]),e._v(" "),a("p",[e._v("\n                    Next we'll get into Design Time Data Binding, and you'll see that there's some wonderful features in\n                    Visual\n                    Studio for being able to drag-and-drop and generate user interface elements based on the data\n                    objects that\n                    you're working with, and in the process, getting the data bindings hooked up to the appropriate\n                    properties on\n                    those user interface elements. You'll also see how to work with Design Time data, sample data, that\n                    can be\n                    rendered in the Design Time environment to help you get your user interface laid out correctly.\n                ")]),e._v(" "),a("p",[e._v("\n                    In the next module, we'll drill under the covers a little bit and let you see what's going on with\n                    the dynamic\n                    generation of controls in containers based on data binding. We'll also review the collection\n                    controls such as\n                    ListBoxes, ComboBoxes, Tab Controls, and DataGrids, and cover all the important properties and usage\n                    of those\n                    in data bound scenarios.\n                ")]),e._v(" "),a("p",[e._v("\n                    Finally, we'll finish off the course with validation. Anytime you input data and start editing data,\n                    you need\n                    to make sure you're getting good data into the system. Bindings in WPF directly support evaluating\n                    validation\n                    and providing error indications to the user when input values are invalid. So we'll see how all that\n                    works,\n                    what the options are, and how to get it tied in with your bindings. So that's the game plan. Let's\n                    dive right\n                    in and start getting you up and running with data binding.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(220)}}),e._v(" "),a("figcaption",[e._v("Fig00-001")])])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Data Access")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Introduction")]),e._v(" "),n("p")]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Overview")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Application Properties")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("A Cleaner Implementation")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("File System")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("PCLStorage")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Setting Up SQLite")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Using SQLite")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("INotifyPropertyChanged Interface")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Consuming RESTful Services")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Cheat Sheet")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Exercise - ContactBook with SQLite")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Exercise - Netflix Roulette App")]),e._v(" "),n("p")])])])]);
}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Forms and Settings Pages")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Introduction")]),e._v(" "),n("p",[e._v("Up to this point our focus has been purely on displaying data. In this section you are going to\n                    learn how to accept input from the user.")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Switch")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Slider")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Stepper")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Entry and Editor")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Picker")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Date and Time Picker")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Table View")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Custom Cells")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Bindable Properties")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Picker with Navigation")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Cheat Sheet")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Exercise - ContactBook App")]),e._v(" "),n("p")])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Navigation")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("The applications we have built so far have been single page apps. However a lot of real world\n                        applications have more than one page. In this section you will learn about hierarchical navigation\n                        to take the user from one page to another, you'll learn about master-detail pages, tabs, carousel\n                        pages, dsiplaying alerts and action sheets, and finally toolbars.\n                    ")]),e._v(" "),a("h3",[e._v("Hierarchical Navigation")]),e._v(" "),a("p",[e._v("Ok let's start with what we call hierarchical navigation:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(699)}}),e._v(" "),a("figcaption",[e._v("Fig 06-001")])]),e._v(" "),a("p",[e._v("In the screen shown above we have a label and a button. When the button is clicked the app navigates\n                        to another page:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(700)}}),e._v(" "),a("figcaption",[e._v("Fig 06-002")])]),e._v(" "),a("p",[e._v("This page displays a title (Introduction) and a button that takes us back to where we came from. Also\n                        in the middle of the page we have a link and another back Button. This is what we call hierarchical\n                        navigation. You have probably seen this in a lot of applications where the first time you run them\n                        they take you through a tour of how the application works. Another example is a login screen. So\n                        when you login successfully the application navigates you to the next page. ")]),e._v(" "),a("p",[e._v("Here is the same app running in Android:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(701)}}),e._v(" "),a("figcaption",[e._v("Fig 06-003")])]),e._v(" "),a("p",[e._v("You can see they are pretty similar apart from, that by default the navigation bar in Android has a\n                        blue background.")]),e._v(" "),a("p",[e._v("We have control over the colour of the navigation bar, the colour of the text, the visibility of the\n                        navigation bar etc. ")]),e._v(" "),a("p",[e._v("First of all add two Content Pages:")]),e._v(" "),a("ul",[a("li",[e._v("HierarchicalNavigationWelcomePage.xaml")]),e._v(" "),a("li",[e._v("HierarchicalNavigationIntroductionPage.xaml")])]),e._v(" "),a("p",[e._v("The HierarchicalNavigationWelcomePage just contains a StackLayout with a Label and a Button:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.PagHierarchicalNavigationWelcomePage">\n        <StackLayout>\n            <Label Text="Welcome" HorizontalOptions="Center" />\n            <Button Text="Next" Clicked="Button_Clicked" />\n    </StackLayout>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-004")])]),e._v(" "),a("p",[e._v("The HierarchicalNavigationIntroductionPage has the same structure:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.HierarchicalNavigationIntroductionPage">\n    <StackLayout HorizontalOptions="Center" VerticalOptions="Center">\n        <Label Text="This is how the app works." />\n        <Button Text="Back" Clicked="Button_Clicked" />\n    </StackLayout>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-005")])]),e._v(" "),a("p",[e._v("We add a Title attribute for each ContentPage. For HierarchicalNavigationWelcomePage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage Title="Welcome"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-006")])]),e._v(" "),a("p",[e._v("And for HierarchicalNavigationIntroductionPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage Title="Introduction"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-007")])]),e._v(" "),a("p",[e._v("Next in the code-behind for HierarchicalNavigationWelcomePage we implement the event handler for our\n                        button:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("await Navigation.PushAsync(new HierarchicalNavigationIntroductionPage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-008")])]),e._v(" "),a("p",[e._v("When our use clicks this button we want to navigate to the next page. To do this we use the\n                        Navigation property of the page. Each Content Page has a navigation property which is of type\n                        INavigation. We use the PushAsync() method passing in a reference to the page. This method is an\n                        async so we need to add the async and await keywords.")]),e._v(" "),a("p",[e._v("Next on the HierarchicalNavigationIntroductionPage again we have a handler for the Back button.\n                        Normally we do not put a back button on a page explicitly. This is because all platforms display a\n                        back button on the navigation bar plus Android and Windows actually do have a physical back button.\n                        We have added this Back button explicitly to better illustrate how navigation works:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("async void Button_Clicked(object sender, EventArgs e)\n{\n    await Navigation.PopAsync();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-009")])]),e._v(" "),a("p",[e._v("As you might have guessed hierarchical navigation uses a stack structure to manage navigation. So we\n                        push pages onto the Stack:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(702)}}),e._v(" "),a("figcaption",[e._v("Fig 06-010")])]),e._v(" "),a("p",[e._v("And then pop the one that is on the top of the Stack (which is called the Active Page). ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(703)}}),e._v(" "),a("figcaption",[e._v("Fig 06-011")])]),e._v(" "),a("p",[e._v("In our App.cs class, where we set our MainPage, we need to wrap our Welcome page inside a new\n                        NavigationPage:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new NavigationPage(new\n                    UdemyXamarinForms.HierarchicalNavigationWelcomePage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-012")])]),e._v(" "),a("p",[e._v("Now if we run the application we see the welcome page with our Navigation bar and page title:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(704)}}),e._v(" "),a("figcaption",[e._v("Fig 06-013")])]),e._v(" "),a("p",[e._v("If we click next we see the Introduction page:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(705)}}),e._v(" "),a("figcaption",[e._v("Fig 06-014")])]),e._v(" "),a("p",[e._v("So we Push a page on the Stack or Pop the one on the top.")]),e._v(" "),a("p",[e._v("Now, what if you want to hide this navigation bar:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(706)}}),e._v(" "),a("figcaption",[e._v("Fig 06-015")])]),e._v(" "),a("p",[e._v("We use the NavigationPage.HasNavigationBar Attached Bindable Property on the ContentPage element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage NavigationPage.HasNavigationBar="false"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-016")])]),e._v(" "),a("p",[e._v("Now if you run the application you can see the Welcome page no longer displays a NavigationBar:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(707)}}),e._v(" "),a("figcaption",[e._v("Fig 06-017")])]),e._v(" "),a("p",[e._v("However, if we navigate to the Introduction page the Navigation Bar is still present:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(708)}}),e._v(" "),a("figcaption",[e._v("Fig 06-018")])]),e._v(" "),a("p",[e._v("The NavigationBar has to be removed explicitly on every page.")]),e._v(" "),a("p",[e._v("If we want to change the Navigation Bar text or background color we need to go back to the App.cs\n                        class and set the required properties there:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new NavigationPage(new UdemyXamarinForms.HierarchicalNavigationWelcomePage())\n    {\n        BarBackgroundColor = Color.Purple,\n        BarTextColor = Color.Plum\n    };")])]),e._v(" "),a("figcaption",[e._v("Fig 06-019")])]),e._v(" "),a("p",[e._v("Next, if you wish to hide the back button that is displayed in the Navigation Bar by default:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(709)}}),e._v(" "),a("figcaption",[e._v("Fig 06-020")])]),e._v(" "),a("p",[e._v("To do this we use the Attached Bindable Properties of the Navigation class on ContentPage to hide the\n                        Back button:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage Title="Introduction"\n        NavigationPage.HasBackButton="False"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-021")])]),e._v(" "),a("p",[e._v("Now run the application, click next and you will see the back button is no longer displayed in the\n                        Navigation Bar:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(710)}}),e._v(" "),a("figcaption",[e._v("Fig 06-022")])]),e._v(" "),a("p",[e._v("However, if you run the application in Android (or Windows) there is a physical back button on the\n                        device. To disable this as well we must override th OnBackButtonPressed method.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("protected override bool OnBackButtonPressed()\n{\n    return true;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-023")])]),e._v(" "),a("p",[e._v("The default method stub returns base.OnBackButtonPressed() which triggers the default behaviour of\n                        the device which will take us back to the previous page. However in our method override we return\n                        true which disables the Back button functionality.")]),e._v(" "),a("p",[e._v("Next we will discuss displaying modal pages.")]),e._v(" "),a("h3",[e._v("Modal Pages")]),e._v(" "),a("p",[e._v("Now we will discuss displaying Modal Pages. Here is the app from the previous lecture:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(711)}}),e._v(" "),a("figcaption",[e._v("Fig 06-024")])]),e._v(" "),a("p",[e._v("I've made a slight modification here - look what happens when I tap the next button:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(712)}}),e._v(" "),a("figcaption",[e._v("Fig 06-025")])]),e._v(" "),a("p",[e._v("The introduction page pops from the bottom of the page and we no longer have the navigation bar here.\n                        So it forces the user to take some action whether that be filling another form or tapping another\n                        button or something. The point here is that the user cannot navigate away until completing that\n                        task.\n                    ")]),e._v(" "),a("p",[e._v("If you want to display a modal page all you have to do is replace the PushAsync method with\n                        PushModalAsync:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("await Navigation.PushModalAsync(new ModalIntroductionPage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-026")])]),e._v(" "),a("p",[e._v("With a modal page because we no longer have a navigation bar we should explicitly add a button that\n                        will let the user navigate away. We modify the Button clicked code from the previous example to call\n                        PopModalAsync:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("await Navigation.PopModalAsync();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-027")])]),e._v(" "),a("p",[e._v("You should also disable OnBackButtonPressed, as discussed previously:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("protected override bool OnBackButtonPressed()\n{\n    return true;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-028")])]),e._v(" "),a("h3",[e._v("A Simple Master Detail")]),e._v(" "),a("p",[e._v("In a lot of applications we have what we call master/detail. So here is the list of contacts that we\n                        built in the last section:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(713)}}),e._v(" "),a("figcaption",[e._v("Fig 06-029")])]),e._v(" "),a("p",[e._v("If I tap on a contact we go to a new page where we can see details about that contact. Here for\n                        simplicity I am only displaying the contacts name. We could display any number of properties here\n                        but the technique for implementing master/detail remains the same. Also note that the page title is\n                        set to the Contacts name:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(714)}}),e._v(" "),a("figcaption",[e._v("Fig 06-030")])]),e._v(" "),a("p",[e._v("First add two pages to the project:")]),e._v(" "),a("ul",[a("li",[e._v("ContactPage.xaml - where we have a ListView to display the list of contacts.")]),e._v(" "),a("li",[e._v("ContactDetailPage.xaml - where we have a label to display the contacts name.")])]),e._v(" "),a("p",[e._v("Add the following Xaml in the ContactPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                 x:Class="UdemyXamarinForms.ContactPage">\n    <ListView x:Name="listView" ItemSelected="listView_ItemSelected">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <TextCell Text="{Binding Name}" Detail="{Binding Status}"/>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-031")])]),e._v(" "),a("p",[e._v("Next add the following code to the code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ContactPage ()\n{\n    InitializeComponent ();\n\n    listView.ItemsSource = new List<Contact>\n    {\n        new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n        new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status = "Hey let\'s talk!" }\n    };\n}\n\nasync void listView_ItemSelected(object sender, SelectedItemChangedEventArgs e)\n{\n    if (e.SelectedItem == null)\n        return;\n\n    var contact = e.SelectedItem as Contact;\n    await Navigation.PushAsync(new ContactDetailPage(contact));\n    listView.SelectedItem = null;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-032")])]),e._v(" "),a("p",[e._v("First we handle the selection. We get the currently selected Contact. We then send the user to the\n                        target page using the Navigation.PushAsync method. As part of the navigation we need to send this\n                        Contact to the target page. There are several methods that XamarinForms offers to achieve this but\n                        my preferred way is to pass the Contact through as a method argument:\n                    ")]),e._v(" "),a("p",[e._v("Next, add the following code to the code-behind of the ContactDetailPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("\t[XamlCompilation(XamlCompilationOptions.Compile)]\n\tpublic partial class ContactDetailPage : ContentPage\n\t{\n\t\tpublic ContactDetailPage(Contact contact)\n\t\t{\n            if (contact == null)\n                throw new ArgumentNullException();\n\n            BindingContext = contact;\n\n\t\t\tInitializeComponent ();\n\t\t}\n\n\n\t}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-034")])]),e._v(" "),a("p",[e._v("In the code above code we add a Contact argument to the constructor. We are also checking that the\n                        Contact is not null - throwing an exception if it is.")]),e._v(" "),a("p",[e._v("Next it is the responsibility of this class to set it's Binding Context:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("BindingContext = contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-035")])]),e._v(" "),a("p",[e._v("Next in the ContactDetailPage add the following Xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <ContentPage Title="{Binding Name}"\n                 xmlns="http://xamarin.com/schemas/2014/forms"\n                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                 x:Class="UdemyXamarinForms.ContactDetailPage">\n    <Label Text="{Binding Name}"/>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-036")])]),e._v(" "),a("p",[e._v("We use a Binding Expression here to bind the Text property of the Label to the Name of the Contact.\n                        We also use a Binding Expression to set the Title of the page.")]),e._v(" "),a("p",[e._v("Finally in the App class we wrap the ContactPage in a new Navigation Page:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new NavigationPage(new ContactPage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-037")])]),e._v(" "),a("p",[e._v("Now if we run the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(715)}}),e._v(" "),a("figcaption",[e._v("Fig 06-038")])]),e._v(" "),a("p",[e._v("The tap a contact:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(716)}}),e._v(" "),a("figcaption",[e._v("Fig 06-039")])]),e._v(" "),a("p",[e._v("Finally we set the ListView SelectedItem to null so that no items are selected when we return from\n                        the detail page:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("listView.SelectedItem = null;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-040")])]),e._v(" "),a("p",[e._v("This code will result in another ItemSelected event being fired so we add code to the top of the\n                        method to handle this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if (e.SelectedItem == null)\n                return;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-041")])]),e._v(" "),a("p",[e._v("So this is how we implement a very simple master/detail. We also have a type of page called\n                        MasterDetailPage - which is the topic of the next lecture.")]),e._v(" "),a("h3",[e._v("Master Detail Page")]),e._v(" "),a("p",[e._v("We have a type of page in XamarinForms known as MasterDetailPage. The page provides a slightly\n                        different experience than the Master Detail example from the previous section:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(717)}}),e._v(" "),a("figcaption",[e._v("Fig 06-042")])]),e._v(" "),a("p",[e._v("So on the left side is our list of Contacts and on the right side you see a preview of the detail\n                        page. When we select a Contact we are navigated to the detail page. We have a link on the detail\n                        page which takes us back to the MasterPage.\n                    ")]),e._v(" "),a("p",[e._v("The preview looks a bit strange on a mobile device but if you run the app on a tablet this is how it\n                        looks:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(718)}}),e._v(" "),a("figcaption",[e._v("Fig 06-043")])]),e._v(" "),a("p",[e._v("We have the Master panel on the left side and the Detail panel on the right side. To implement this\n                        we can modify a version of the ContactPage that we built in the previous example. Add a new\n                        ContentPage called ContactPage2.xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n                    <MasterDetailPage\n                            xmlns="http://xamarin.com/schemas/2014/forms"\n                            xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                            x:Class="UdemyXamarinForms.ContactPage2"\n                            IsPresented="True">\n    <MasterDetailPage.Master>\n        <ContentPage Title="Contacts">\n            <ListView x:Name="listView" ItemSelected="listView_ItemSelected">\n                <ListView.ItemTemplate>\n                    <DataTemplate>\n                        <TextCell Text="{Binding Name}" Detail="{Binding Status}"/>\n                    </DataTemplate>\n                </ListView.ItemTemplate>\n            </ListView>\n        </ContentPage>\n    </MasterDetailPage.Master>\n    <MasterDetailPage.Detail>\n        <ContentPage/>\n    </MasterDetailPage.Detail>\n</MasterDetailPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-044")])]),e._v(" "),a("p",[e._v("In the code-behind add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[XamlCompilation(XamlCompilationOptions.Compile)]\npublic partial class ContactPage2 : MasterDetailPage\n{\n    public ContactPage2 ()\n    {\n        InitializeComponent ();\n\n        listView.ItemsSource = new List<Contact>\n        {\n            new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n            new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status = "Hey let\'s talk!" }\n        };\n    }\n\n    void listView_ItemSelected(object sender, SelectedItemChangedEventArgs e)\n    {\n        var contact = e.SelectedItem as Contact;\n        Detail = new NavigationPage(new ContactDetailPage(contact));\n        IsPresented = false; // IsMasterPresented\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-045")])]),e._v(" "),a("p",[e._v("We have promoted the page from a Content Page to a MasterDetailPage. In XamarinForms there is an\n                        abstract class called Page which has a few different derivatives:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(719)}}),e._v(" "),a("figcaption",[e._v("Fig 06-046")])]),e._v(" "),a("p",[e._v("One of them is ContentPage which is the one we have used most of the time so far. Another is\n                        MasterDetailPage which is what we are using in this demo.")]),e._v(" "),a("p",[e._v("The MasterDetailPage has two properties: Master and Detail both of which are of type Page which means\n                        you can assign them to an instance of any derivative of the Page class.")]),e._v(" "),a("p",[e._v("We also go into code-behind and change the parent of this class from ContentPage to\n                        MasterDetailPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public partial class ContactPage2 : MasterDetailPage")])]),e._v(" "),a("figcaption",[e._v("Fig 06-047")])]),e._v(" "),a("p",[e._v("Now we need to set the Master and Detail property of the Page. We do this in the Xaml using Property\n                        Element Syntax:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<MasterDetailPage.Master>\n</MasterDetailPage.Master>\n<MasterDetailPage.Detail>\n</MasterDetailPage.Detail>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-048")])]),e._v(" "),a("p",[e._v("Now in the Master we want a page with the list of Contacts - we can move our existing code into the\n                        MasterDetailPage.Master section:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('MasterDetailPage.Master>\n<ContentPage Title="Contacts">\n    <ListView x:Name="listView" ItemSelected="listView_ItemSelected">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <TextCell Text="{Binding Name}" Detail="{Binding Status}"/>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>\n                    </MasterDetailPage.Master>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-049")])]),e._v(" "),a("p",[e._v("Don't forget to move the xml namespace declarations and x:Class declaration from the ContentPage\n                        element to the root MasterDetailPage.")]),e._v(" "),a("p",[e._v("New we need to set the Detail page. The detail page needs to be set dynamically so we will do that in\n                        the code-behind. However the MasterDetailPage has a strict requirement that the Detail element in\n                        Xaml must be set to something (it cannot be left null). So in this example we just set it to a blank\n                        ContentPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("    <MasterDetailPage.Detail>\n    <ContentPage/>\n</MasterDetailPage.Detail>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-050")])]),e._v(" "),a("p",[e._v("When an item is selected we want to replace this detail page with a different Page. To do this we\n                        modify the code behind in the ItemSelected handler. First of all in MasterDetailPages we don't want\n                        to deselect the currently selected item because if the user loads this application in a tablet\n                        (where both the Master and Detail pages are visible simultaneously) you want the master to remain\n                        selected at all times. For this reason we remove the code that sets the SelectedItem to null:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("listView.SelectedItem = null;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-051")])]),e._v(" "),a("p",[e._v("And the code that checks if the SelectedItem is equal to null:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if (e.SelectedItem == null)\n                return;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-052")])]),e._v(" "),a("p",[e._v("So now we get the contact (which is the currently SelectedItem):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var contact = e.SelectedItem as Contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-053")])]),e._v(" "),a("p",[e._v("Now instead of using the Navigation property (as in the previous example) we want to set the Detail\n                        property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Detail = new ContactDetailPage(contact);")])]),e._v(" "),a("figcaption",[e._v("Fig 06-054")])]),e._v(" "),a("p",[e._v("We can also remove the async keyword (because we are no longer using await).")]),e._v(" "),a("p",[e._v("Lastly, in order to present the detail page we need to set IsPresented to false:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("IsPresented = false;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-055")])]),e._v(" "),a("p",[e._v("The name of this property is somewhat confusing! It would be better if this property was called\n                        IsMasterPresented. This is because when we set this to false the Master is hidden and the detail is\n                        brought into view on a mobile device. On a tablet in landscape mode both Master and Detail are\n                        presented at all times.")]),e._v(" "),a("p",[e._v("If we run the application at this point we will see an empty page. When we use MasterDetailPage by\n                        default the detail page is presented which looks a little bit strange because the user should always\n                        select a Master before the detail is presented.\n                    ")]),e._v(" "),a("p",[e._v("To workaround that we go into the Xaml and for the MasterDetailPage element and set IsPresented to\n                        true:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<MasterDetailPage\n    xmlns="http://xamarin.com/schemas/2014/forms"\n    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n    x:Class="UdemyXamarinForms.ContactPage2"\n    IsPresented="True">')])]),e._v(" "),a("figcaption",[e._v("Fig 06-056")])]),e._v(" "),a("p",[e._v("In the App.cs class we no longer use a NavigationPage so we directly assign the MainPage to\n                        ContactPage2:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new ContactPage2();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-057")])]),e._v(" "),a("p",[e._v("If we run the application now:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(720)}}),e._v(" "),a("figcaption",[e._v("Fig 06-058")])]),e._v(" "),a("p",[e._v("Initially we see our Contacts list is displayed with a blank area to the right of the page (this is\n                        our detail preview area). If you select an item the detail page will be displayed but there is no\n                        way to get back to the Master page:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(721)}}),e._v(" "),a("figcaption",[e._v("Fig 06-059")])]),e._v(" "),a("p",[e._v("To fix this we need to go to our ItemSelected handler and wrap the ContactDetailPage inside a\n                        NavigationPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Detail = new NavigationPage(new ContactDetailPage(contact));")])]),e._v(" "),a("figcaption",[e._v("Fig 06-060")])]),e._v(" "),a("p",[e._v("This NavigationPage will add a navigation bar along with a Back button:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(722)}}),e._v(" "),a("figcaption",[e._v("Fig 06-061")])]),e._v(" "),a("p",[e._v("Next we will look at how to add Tabs to your applications.")]),e._v(" "),a("h3",[e._v("Tabbed Page")]),e._v(" "),a("p",[e._v("In this next app we have two tabs on the bottom of the screen - page 1 and page 2:")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(723)}}),e._v(" "),a("figcaption",[e._v("Fig 06-062")])]),e._v(" "),a("p",[e._v("In iOS tabs appear at the bottom of the screen and often they have an Icon. In Android and Windows\n                        they appear on the top of the screen.")]),e._v(" "),a("p",[e._v("Add a Content Page called TabNavigationPage.xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <TabbedPage xmlns="http://xamarin.com/schemas/2014/forms"\n                xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                xmlns:local="clr-namespace:UdemyXamarinForms"\n                x:Class="UdemyXamarinForms.TabNavigationPage">\n    <NavigationPage Title="Contacts" Icon="clock.png">\n        <x:Arguments>\n            <local:ContactPage></local:ContactPage>\n        </x:Arguments>\n    </NavigationPage>\n    <NavigationPage Title="Page1" Icon="clock.png">\n        <x:Arguments>\n            <local:GridPage/>\n        </x:Arguments>\n    </NavigationPage>\n\n    <ContentPage Title="Page2" Icon="clock.png">\n        <Label Text="Content of Page2" HorizontalOptions="Center" VerticalOptions="Center"/>\n    </ContentPage>\n</TabbedPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-063")])]),e._v(" "),a("p",[e._v("In the App.cs assign MainPage to TabNavigationPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new TabNavigationPage();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-064")])]),e._v(" "),a("p",[e._v("We change the type of the page to TabbedPage which is another derivative of the Page class:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(724)}}),e._v(" "),a("figcaption",[e._v("Fig 06-065")])]),e._v(" "),a("p",[e._v("Also don't forget to change the parent class in code-behind from ContentPage to TabbedPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public partial class TabNavigationPage : TabbedPage")])]),e._v(" "),a("figcaption",[e._v("Fig 06-066")])]),e._v(" "),a("p",[e._v("TabbedPage has a property called Children which is of type IList of Page which means we can Add any\n                        derivative of the Page type (ContentPage, NavigationPage etc.) to the Children List:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("this.Children.Add(new ContentPage());\nthis.Children.Add(new NavigationPage(new ContentPage()));\nthis.Children.Add(new ContactPage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-067")])]),e._v(" "),a("p",[e._v("In real world applications, most of the time, we add these pages in the Xaml. The Children property\n                        is the ContentProperty for the TabbedPage which means we can add our pages like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TabbedPage xmlns="http://xamarin.com/schemas/2014/forms"\n   xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n   xmlns:local="clr-namespace:UdemyXamarinForms"\n   x:Class="UdemyXamarinForms.TabNavigationPage">\n    <ContentPage Title="Page1" Icon="clock.png">\n        <Label Text="Content of Page1" HorizontalOptions="Center" VerticalOptions="Center"/>\n    </ContentPage>\n    <ContentPage Title="Page2" Icon="clock.png">\n        <Label Text="Content of Page2" HorizontalOptions="Center" VerticalOptions="Center"/>\n    </ContentPage>\n</TabbedPage')])]),e._v(" "),a("figcaption",[e._v("Fig 06-068")])]),e._v(" "),a("p",[e._v("Now if we run the application we get two tabs:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(725)}}),e._v(" "),a("figcaption",[e._v("Fig 06-069")])]),e._v(" "),a("p",[e._v("In real world applications your pages would be more complex than this example. For that reason it is\n                        better to implement each page in a separate Xaml file and simply reference them here.")]),e._v(" "),a("p",[e._v("To achieve this we first need to add an xml namespace declaration because we are going to use a type\n                        that is not part of the standard Xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:local="clr-namespace:UdemyXamarinForms"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-070")])]),e._v(" "),a("p",[e._v("Next we add another page like so:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<local:ContactPage></local:ContactPage>")])]),e._v(" "),a("figcaption",[e._v("Fig 06-071")])]),e._v(" "),a("p",[e._v("If we run the application we see the first tab is our MasterDetail Page as we implemented it in the\n                        previous example:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(726)}}),e._v(" "),a("figcaption",[e._v("Fig 06-072")])]),e._v(" "),a("p",[e._v("The pages are independent of each other. The second tab just displays a page containing a label:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(727)}}),e._v(" "),a("figcaption",[e._v("Fig 06-074")])]),e._v(" "),a("p",[e._v("What if I want to add a navigation bar here. We need to wrap this page inside a navigation page:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<NavigationPage>\n    <ContentPage Title="Page1" Icon="clock.png">\n        <Label Text="Content of Page1" HorizontalOptions="Center" VerticalOptions="Center"/>\n    </ContentPage>\n</NavigationPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-075")])]),e._v(" "),a("p",[e._v("If we were to try and run the application now we would get an error something like this:")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"csharp"},[e._v("Can not set the content of NavigationPage as it doesn't have a ContentPropertyAttribute")])]),e._v(" "),a("figcaption",[e._v("Fig 06-076")])]),e._v(" "),a("p",[e._v("because NavigationPage needs a root page. Earlier when we created a Navigation page we passed the\n                        target page in the constructor:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("new NavigationPage(new ContactDetailPage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-077")])]),e._v(" "),a("p",[e._v("Now how can we pass an argument to the constructor of a class when using Xaml? We use an element that\n                        is defined in Microsoft Xaml called x:Arguments (just like we have x:Class or x:Name):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<NavigationPage>\n    <x:Arguments>\n        <ContentPage Title="Page1" Icon="clock.png">\n            <Label Text="Content of Page1" HorizontalOptions="Center" VerticalOptions="Center" />\n        </ContentPage>\n    </x:Arguments>\n</NavigationPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-078")])]),e._v(" "),a("p",[e._v("When the Xaml parser parses this file it will create a Navigation page object and it will use this\n                        ContentPage as the argument to the constructor of NavigationPage.\n                    ")]),e._v(" "),a("p",[e._v("If we run the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(728)}}),e._v(" "),a("figcaption",[e._v("Fig 06-079")])]),e._v(" "),a("p",[e._v("Note that our second tab does not have a Title or an Icon. This is because now it is the\n                        NavigationPage element that we are adding to the Children of the TabbedPage. To resolve this we move\n                        the Title and Icon properties from the ContentPage element to the NavigationPage element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<NavigationPage Title="Page1" Icon="clock.png">\n    <x:Arguments>\n        <ContentPage>\n            <Label Text="Content of Page1" HorizontalOptions="Center" VerticalOptions="Center"/>\n        </ContentPage>\n    </x:Arguments>\n</NavigationPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-080")])]),e._v(" "),a("p",[e._v("Finally we can replace the ContentPage defined in Xaml with a reference to an external page:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<NavigationPage Title="Page1" Icon="clock.png">\n        <x:Arguments>\n            <local:GridPage/>\n        </x:Arguments>\n    </NavigationPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-081")])]),e._v(" "),a("p",[e._v("Obviously this page already exists in our project.")]),e._v(" "),a("p",[a("strong",[e._v("Please note - ")]),e._v(" ContactPage is not a very good example to use in the\n                        TabNavigationPage because without the code to in the App.cs file to wrap it in a NavigationPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new NavigationPage(new ContactPage());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-082")])]),e._v(" "),a("p",[e._v("We get an exception:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("PushAsync is not supported globally on Android, please use a NavigationPage.")])]),e._v(" "),a("figcaption",[e._v("Fig 06-083")])]),e._v(" "),a("p",[e._v("Although not described in the Udemy video this can be resolved by wrapping the ContactPage\n                        definition in Xaml in a Navigation Page:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<NavigationPage Title="Contacts" Icon="clock.png">\n    <x:Arguments>\n        <local:ContactPage></local:ContactPage>\n    </x:Arguments>\n</NavigationPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-084")])]),e._v(" "),a("p",[e._v("Although this does appear to introduce some unwanted space at the top of the page display.")]),e._v(" "),a("h3",[e._v("Carousel Page")]),e._v(" "),a("p",[e._v("Now look at this page:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(729)}}),e._v(" "),a("figcaption",[e._v("Fig 06-085")])]),e._v(" "),a("p",[e._v("If I swipe to the left I go to the next page:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(730)}}),e._v(" "),a("figcaption",[e._v("Fig 06-086")])]),e._v(" "),a("p",[e._v("Or if I swipe to the right I go to the previous page. This is what we call a Carousel Page. If\n                        you have used SnapChat you have seen a real world example of a Carousel Page. In terms of\n                        implementation Carousel Page is very similar to Tab Page. Add a new Content Page called\n                        CarouselPage.xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <CarouselPage xmlns="http://xamarin.com/schemas/2014/forms"\n                  xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                  x:Class="UdemyXamarinForms.CarouselPageDemo"\n                  Icon="clock.png">\n    <ContentPage>\n        <Label Text="Content of Page1" HorizontalOptions="Center" VerticalOptions="Center"/>\n    </ContentPage>\n    <ContentPage>\n        <Label Text="Content of Page2" HorizontalOptions="Center" VerticalOptions="Center"/>\n    </ContentPage>\n</CarouselPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-087")])]),e._v(" "),a("p",[e._v("The key difference between a CarouselPage and a TabbedPage is in the Children property - the type\n                        of the Children Property is IList of ContentPage instead of IList of Page. That means we can only\n                        add ContentPage or one of it's derivatives as the Children of CarouselPage. In other words, for\n                        example, I cannot add a NavigationPage here.")]),e._v(" "),a("p",[e._v("Similarly to TabbedPages here you can either add a page inline or you can reference an external\n                        page.")]),e._v(" "),a("h3",[e._v("Displaying Popups")]),e._v(" "),a("p",[e._v("In previous lectures we have worked with alerts. Now I want to show you a different type of alert:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(731)}}),e._v(" "),a("figcaption",[e._v("Fig 06-088")])]),e._v(" "),a("p",[e._v("Here we have an alert with two buttons. We can use this to capture a response from the user. We\n                        also have what is called an Action Sheet:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(732)}}),e._v(" "),a("figcaption",[e._v("Fig 06-089")])]),e._v(" "),a("p",[e._v("An ActionSheet allows the user to choose from several buttons.")]),e._v(" "),a("p",[e._v("Add a new ContentPage called ConfirmationBoxDemo:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.ConfirmationBoxDemo">\n    <Button Text="Click Me" Clicked="Button_Clicked"/>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-090")])]),e._v(" "),a("p",[e._v("In the code-behind we handle the button clicked event. We still use the DisplayAlert method but\n                        this time we use a different overload. The DisplayAlert method has two overloads - the one that\n                        takes three parameters which we used before:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(733)}}),e._v(" "),a("figcaption",[e._v("Fig 06-091")])]),e._v(" "),a("p",[e._v("And one that takes four parameters:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(734)}}),e._v(" "),a("figcaption",[e._v("Fig 06-092")])]),e._v(" "),a("p",[e._v("The return type of this overload is Task of bool which means when await this method you will get\n                        a boolean result. In contrast the other overload has return tye of Task which is void.")]),e._v(" "),a("p",[e._v("So let's use the overload that takes four parameters:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('async void Button_Clicked(object sender, EventArgs e)\n{\n    var response = await DisplayAlert("Warning", "Are you sure?", "Yes", "No");\n    if (response)\n        DisplayAlert("Done", "Your response will be saved!", "OK");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-093")])]),e._v(" "),a("p",[e._v("The yellow underline you will see under the second DisplayAlert method is there because we\n                        haven't awaited the method. In this case whether we add await or not doesn't matter because there\n                        is no code after this line. If we had additional code after this line that you wanted to be\n                        executed after the user taps the ok button then we would have to add an await to the call.")]),e._v(" "),a("p",[e._v("Run the application and click the button:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(735)}}),e._v(" "),a("figcaption",[e._v("Fig 06-094")])]),e._v(" "),a("p",[e._v("Click yes:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(736)}}),e._v(" "),a("figcaption",[e._v("Fig 06-095")])]),e._v(" "),a("p",[e._v("Now let's see how we can display an ActionSheet. Create a new ContentPage called ActionSheetDemo\n                        with the same Xaml as the previous example:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n                    <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n                                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                                 x:Class="UdemyXamarinForms.ActionSheetDemo">\n    <Button Text="Click Me" Clicked="Button_Clicked"/>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-096")])]),e._v(" "),a("p",[e._v("With the following code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('async private void Button_Clicked(object sender, EventArgs e)\n{\n    var response = await DisplayActionSheet("Title", "Cancel", "Delete", "Copy Link", "Message", "Email");\n    await DisplayAlert("Response", response, "OK");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-097")])]),e._v(" "),a("p",[e._v("You can see the call to DisplayActionSheet which has the following parameters:")]),e._v(" "),a("ul",[a("li",[e._v("Title")]),e._v(" "),a("li",[e._v("The Label for the Cancel Button")]),e._v(" "),a("li",[e._v("If one of our buttons is going to perform a destructive operation (e.g. delete a record) we can\n                            add it here and it will be rendered with a different style. If you don't require a button\n                            of this type you can just pass null here.\n                        ")]),e._v(" "),a("li",[e._v('A parameter of type params string[] which means we can add a string array or add as many\n                            arguments as you want (this example has three buttons - "Copy Link", "Message" and "Email" .')])]),e._v(" "),a("p",[e._v("Now run the application and click the button:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(737)}}),e._v(" "),a("figcaption",[e._v("Fig 06-098")])]),e._v(" "),a("p",[e._v("Note that the Delete button is rendered in red because we passed it as the third argument to the\n                        DisplayActionSheet method (string destruction).")]),e._v(" "),a("p",[e._v("If we tap Copy Link you can see the response in an alert:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(738)}}),e._v(" "),a("figcaption",[e._v("Fig 06-099")])]),e._v(" "),a("p",[e._v("In a real-world application, depending on the response, we can do different things.")]),e._v(" "),a("h3",[e._v("Toolbar Items")]),e._v(" "),a("p",[e._v("We are going to wrap up the section with a talk about Toolbar items. So in this demo app we have\n                        a typical navigation bar but we also have a button for adding a new contact:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(739)}}),e._v(" "),a("figcaption",[e._v("Fig 06-100")])]),e._v(" "),a("p",[e._v("These Toolbar items are usually used, as in this example, for adding a new object. Create a new\n                        Content Page called ToolbarItemsDemo:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage Title="Contacts"\n            xmlns="http://xamarin.com/schemas/2014/forms"\n            xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n            x:Class="UdemyXamarinForms.ToolbarItemsDemo">\n    <ContentPage.ToolbarItems>\n        <ToolbarItem Icon="plus.png" Text="New" Activated="ToolbarItem_Activated" Order="Primary"/>\n        <ToolbarItem Icon="plus.png" Text="New" Activated="ToolbarItem_Activated" Order="Secondary"/>\n    </ContentPage.ToolbarItems>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-101")])]),e._v(" "),a("p",[e._v("We set the Title. To add toolbar items we use Property Element Syntax - ContentPage has a\n                        property called ToolbarItems to which you can add one or more ToolbarItem elements. The most\n                        important property of ToolbarItem is icon which you specifies the name of a resource file in one\n                        of our application projects as we have seen before. ")]),e._v(" "),a("p",[e._v("The text property is only shown in certain circumstances. The Activated event hooks up to an\n                        event handler in which we just display an alert:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void ToolbarItem_Activated(object sender, EventArgs e)\n{\n    DisplayAlert("Activated", "ToolbarItem Activate", "OK");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 06-102")])]),e._v(" "),a("p",[e._v("In a real world application when the user taps a ToolbarItem we would display a modal dialogue\n                        box for the user to enter some information such as composing a message or creating a new album.")]),e._v(" "),a("p",[e._v("Back in the Xaml file on the ToolbarItem we add another property called Order with a value of\n                        Primary(the default) or Secondary.")]),e._v(" "),a("p",[e._v("Lastly, a common mistake is to forget to wrap the ToolbarItems in a NavigationPage which will\n                        result in none of the ToolbarItems being visible. In this\n                        example we can do that in the App.cs file:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new NavigationPage(new ToolbarItemsDemo());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-103")])]),e._v(" "),a("p",[e._v("Now if we run the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(740)}}),e._v(" "),a("figcaption",[e._v("Fig 06-104")])]),e._v(" "),a("p",[e._v("You see two ToolbarItems. The one on the top is the Primary and then one below is the Secondary.\n                        Note that the Text property is only shown on the Secondary Toolbar.")]),e._v(" "),a("p",[e._v("When we click either of them for now we just get the alert:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(741)}}),e._v(" "),a("figcaption",[e._v("Fig 06-105")])]),e._v(" "),a("p",[e._v("In Android the icons appear differently. The primary icons appear here:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(742)}}),e._v(" "),a("figcaption",[e._v("Fig 06-106")])]),e._v(" "),a("p",[e._v("And the secondary icons appear under this menu:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(743)}}),e._v(" "),a("figcaption",[e._v("Fig 06-107")])]),e._v(" "),a("p",[e._v("One thing to pay attention to here is that because the navigation bar in Android is blue by\n                        default the icon should be white with a transparent background. In contrast for iOS use a black\n                        icon on a transparent background. When that icon is rendered as a primary toolbar item it will\n                        appear as blue. When it is rendered as a secondary toolbar item it will appear as black. So the\n                        operating system itself will take care of this.")]),e._v(" "),a("h3",[e._v("Cheat Sheet")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Exercise - InstagramApp")]),e._v(" "),a("p")])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h3",[e._v("Applied MVVM Part 2 – Validation and Dependency Injection")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h2",[e._v("Overview")]),e._v(" "),a("p",[e._v("\n                        In this final module we continue to build out use cases surrounding Customers in our Pizza Order Management\n                        Application. This will include fleshing out some data entry for adding and editing Customers by leveraging the\n                        Scaffolding of data-centric Views that is available in Visual Studio. Also anytime your accepting input from a\n                        user you should also be validating that input. So we'll look at a clean way to do validation with what WPF\n                        bindings already support but tying it in to your MVVM components.\n                    ")]),e._v(" "),a("p",[e._v("\n                        When ViewModels take dependencies on client services you will want to make sure those dependencies are loosely\n                        coupled. We will cover dependency injection.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we will cover some of the toolkits and frameworks that can assist when writing applications that\n                        adhere to the MVVM pattern.\n                    ")]),e._v(" "),a("h3",[e._v("Visual Studio Designer and Data Sources")]),e._v(" "),a("p",[e._v("\n                        Now we will implement add and edit Customer use cases. We will use the Visual Studio Data Sources and Designer\n                        Windows. These Visual Studio features make it very quick and easy to scaffold out data bound forms whether\n                        your just presenting data in a DataGrid or you need to have to individual input fields for data entry.\n                    ")]),e._v(" "),a("p",[e._v("The bad news is what it generates is not particularly MVVM friendly. It generates some code that makes\n                        assumptions that your gonna be hooking things up in the XAML's code behind file which we talked about in\n                        module one kind of goes against the MVVM pattern. .\n                    ")]),e._v(" "),a("p",[e._v("The good news is we can easily morph the code into clean MVVM st ructure with just a few minor changes.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Scaffolding an Edit View in Visual Studio")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        Previously we created the AddEditCustomerView.xaml and the navigation to it from the CustomerListView.xaml. We\n                        will now continue to flesh out the AddEditCustomerView.xaml and put the data entry form together by leveraging\n                        the Data Sources window in Visual Studio which allows you to drag and drop into the designer to scaffold out\n                        your data views.\n                    ")]),e._v(" "),a("p",[e._v("First up, get rid of the TextBlock from the previous module's example and then in Visual Studio switch to the\n                        Designer tab and select View>Other Windows>Data Sources:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(603)}}),e._v(" "),a("figcaption",[e._v("Fig06-001")])]),e._v(" "),a("p",[e._v("\n                        Click Add New Datasource either with the hyperlink or the icon at the top left of the Data Sources window.\n                        From the next dialog select the Object Data Source Type. Drill down to the Customers model object definition\n                        under Zza.Data> Zza.Data >Customer. From the Datasources window click on the Dropdown list next to the\n                        Customer Datasource you just generated.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(604)}}),e._v(" "),a("figcaption",[e._v("Fig06-002")])]),e._v(" "),a("p",[e._v("This dropdown allows you to select the output generated:")]),e._v(" "),a("ul",[a("li",[e._v("DataGrid to contain Customers")]),e._v(" "),a("li",[e._v("ListView for Customers")]),e._v(" "),a("li",[e._v("Details – in effect a data entry form")])]),e._v(" "),a("p",[e._v("Select the Details option and expand the result. You'll see it has mappings for each of the properties based on\n                        it's type. Now we're not going to use all these properties for this data entry so I can go and set some of\n                        them to none:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(605)}}),e._v(" "),a("figcaption",[e._v("Fig06-002A")])]),e._v(" "),a("p",[e._v("Trimming it down to just the fields that I want to generate input fields for.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Once you have done this, drag out the Customer object onto the Designer onto my UserControl. And when I\n                        release it's going to do a bunch of code generation for me. You can see it generated a Label and a TextBox for\n                        each one of those fields and if I really wanted to change what's generated you can see I can choose what kind\n                        of control to scaffold:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(606)}}),e._v(" "),a("figcaption",[e._v("Fig06-002B")])]),e._v(" "),a("p",[e._v("Now if we go into the XAML we can see that it wired up a number of things that we don't really want to be here\n                        in an MVVM application. First off, it wired up a Loaded event handler and expects you to do the wiring from\n                        the code behind of your XAML.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Loaded="UserControl_Loaded"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-003")])]),e._v(" "),a("p",[e._v("\n                        Remove the Loaded event handler and the associated method in the Code Behind. Also, remove the\n                        CollectionViewSource that was auto generated in UserControl.Resources. Modify the DataContext of the Grid so\n                        it Binds to a Customer property that we will expose from our ViewModel (that sets the DataContext just for the\n                        fields within this grid which are the Labels and Textboxes to a Customer so it can bind directly to the\n                        individual properties on that Customer:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid x:Name="grid1"\n    HorizontalAlignment="Left"\n    DataContext="{Binding Customer}"\n    Margin="20,24,0,0"\n    VerticalAlignment="Top"\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 06-005")])]),e._v(" "),a("p",[e._v("\n                        When Visual Studio auto-generates the code it will put the properties in alphabetical order by Property Name.\n                        Re-arrange the property order by editing the XAML to the following order (don’t forget to change the Grid\n                        numbers):\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("First Name")]),e._v(" "),a("li",[e._v("Last Name")]),e._v(" "),a("li",[e._v("Email")]),e._v(" "),a("li",[e._v("Phone")])]),e._v(" "),a("p",[e._v("Now when you run the application and Add or Edit a Customer you will see a data entry form.")]),e._v(" "),a("p",[e._v("Now we just have to focus on the ViewModel and the interactions within that View which we'll start into in the\n                        next demo.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Wrapping Model Objects")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        So, now we have to expose a Customer as a property to satisfy the binding for our input fields. We won't\n                        expose the Customer Model object directly. You can't guarantee that your model objects will be in the right\n                        shape to handle data-binding from your View and ViewModel. For example, at a minimum you need an object that\n                        implements INotifyPropertyChanged fully (we can now do this by inheriting from BindableBase). But depending on\n                        way those entities come from and where else their used you may not be able to change out the base class for\n                        your model objects.\n                    ")]),e._v(" "),a("p",[e._v("Additionally, as we'll get to in this module we may need to implement certain things on the Model object to\n                        support validation and again that may not be permissible to do that and have that code affect every other\n                        piece of code that uses that model object.\n                    ")]),e._v(" "),a("p",[e._v("\n                        One way round this dilemma is to create a Wrapped Model Object or a ViewModel Helper. Add a new class to the\n                        Customers folder called SimpleEditableCustomer.cs that inherits from BindableBase and add the Id, FirstName,\n                        LastName, Email and Phone properties ensuring they adhere to the pattern specified in BindableBase for setting\n                        the property:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("public class SimpleEditableCustomer : BindableBase\n{\n    private Guid _id;\n    public Guid Id\n    {\n        get { return _id; }\n        set { SetProperty(ref _id, value); }\n    }\n\n    private string _firstName;\n\n    public string FirstName\n    {\n        get { return _firstName; }\n        set { SetProperty(ref _firstName, value); }\n    }")])]),e._v(" "),a("figcaption",[e._v("Fig 06-006")])]),e._v(" "),a("p",[e._v("Back in AddEditCustomerViewModel we can now add a property of type SimpleEditableCustomer:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private SimpleEditableCustomer _Customer;\npublic SimpleEditableCustomer Customer\n{\n    get { return _Customer; }\n    set { SetProperty(ref _Customer, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-007")])]),e._v(" "),a("p",[e._v("We must populate this property when the Customer object is being passed in from the Parent ViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void SetCustomer(Customer cust)\n{\n    _editingCustomer = cust;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-008")])]),e._v(" "),a("p",[e._v("The two methods shown below achieve the following:")]),e._v(" "),a("ul",[a("li",[e._v("We take the customer and hold onto it so that when we save we do so to the right Customer")]),e._v(" "),a("li",[e._v("Create a new SimpleEditableCustomer object")]),e._v(" "),a("li",[e._v("Use the CopyCustomer helper method to copy the relevant values to the Customer.")])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void SetCustomer(Customer cust)\n{\n    _editingCustomer = cust;\n    Customer = new SimpleEditableCustomer();\n    CopyCustomer(cust, Customer);\n}\n\nprivate void CopyCustomer(Customer source, SimpleEditableCustomer target)\n{\n    target.Id = source.Id;\n    if (EditMode)\n    {\n        target.FirstName = source.FirstName;\n        target.LastName = source.LastName;\n        target.Phone = source.Phone;\n        target.Email = source.Email;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-009")])]),e._v(" "),a("p",[e._v("\n                        Not all the properties are set unless we are in EditMode (as you will see later this is to avoid triggering\n                        validation). We do need to at least set the Id so that we have an Id for the Customer when we start editing.\n                        That Id, if you remember, was being set in CustomerListViewModel when it was first firing the event that says\n                        it is time to add a new Customer.\n                    ")]),e._v(" "),a("p",[e._v("Now if you run the application, click on Customers, click on Edit for a Customer and you will see the data for\n                        our Customer in our data entry form:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(607)}}),e._v(" "),a("figcaption",[e._v("Fig06-010")])]),e._v(" "),a("p",[e._v("If we navigate to add Customer we will be presented with a blank data entry from to start adding to:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(608)}}),e._v(" "),a("figcaption",[e._v("Fig06-011")])]),e._v(" "),a("p",[e._v("So next up we need to add some Command handling to actually complete the process of adding or editing a\n                        Customer and to Cancel and be able to back out of that operation if desired.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Command Handling and Converters")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now we need to wire up the actual command handling to Add or Save an edited Customer as well as cancelling.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Modify the Grid so that it has two rows – one for the data entry fields, the other for the command buttons.\n                        The second row will host another Grid which contains three buttons:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid Grid.Row="1">\n    <Button Content="Save"\n            Command="{Binding SaveCommand}"\n            HorizontalAlignment="Left"\n            Margin="25,5,0,0"\n            VerticalAlignment="Top"\n            Width="75" />\n    <Button Content="Add"\n            Command="{Binding SaveCommand}"\n            HorizontalAlignment="Left"\n            Margin="25,5,0,0"\n            VerticalAlignment="Top"\n            Width="75" />\n    <Button Content="Cancel"\n            Command="{Binding CancelCommand}"\n            HorizontalAlignment="Left"\n            Margin="150,5,0,0"\n            VerticalAlignment="Top"\n            Width="75" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-012")])]),e._v(" "),a("p",[e._v("\n                        Obviously if we have this add/edit mode only one of the buttons really applies depending on which mode you are\n                        in (Edit/Add). So we need to hide or show one of these Buttons.\n                    ")]),e._v(" "),a("p",[e._v("One thing that may immediately occur to you is why don’t we just have one Button and dynamically populate what\n                        the Button says from the ViewModel based on our edit mode. While this may seem like a perfectly viable thing\n                        to do it brings up an important concept about MVVM and the appropriate roles. If you remember from module one\n                        we said it was the Views job to dictate what the User sees on the screen and the ViewModel just provides the\n                        interaction logic and the data manipulation to support that. If your ViewModel is trying to push text to drive\n                        the content of a Button that violates those principles. What if, down the line, you bring a designer into the\n                        mix and he decides to use icons instead of text – should you then be pushing Icons to the View from the\n                        ViewModel? No that’s pure presentation which is the Views job. So to protect against that we will go ahead and\n                        put the two Buttons in there and we will drive their visibility from a property exposed on our ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then you may say - we can just expose a property of type Visibility (note Visibility) from our ViewModel and\n                        we can set the Visibility with a Binding like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Save"\n    Command="{Binding SaveCommand}"\n    Visibility="{Binding SaveVisibility}""\n    HorizontalAlignment="Left"\n    Margin="25,5,0,0"\n    VerticalAlignment="Top"\n    Width="75" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-013")])]),e._v(" "),a("p",[e._v("\n                        Once again, if you look at it from a separation of concerns perspective, Visibility is a pure presentation\n                        aspect which is a responsibility of the View. You really shouldn’t be exposing Visibility properties from your\n                        ViewModel either.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So what's a poor MVVM developer to do? You can easily expose flags or booleans from your ViewModel that are\n                        decoupled from how that flag drives the presentation. So we still want to bind the Visibility property but we\n                        want it to be driven by a boolean flag.\n                    ")]),e._v(" "),a("p",[e._v("\n                        There is a built in boolean to visibility converter that we could use but unfortunately that one doesn't let\n                        you negate what that flag means and it also is hard coded to always use collapsed as the false state. As a\n                        result, we will create a CustomConverter to deal with these kinds of situations.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We will drive the visibility of the buttons from a property exposed on the ViewModel. We will use a flag or\n                        Boolean that is decoupled from how the flag drives the presentation by implementing a Custom Converter.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Add a new Folder called Converters and a class called NegatableBooleanToVisibilityConverter.cs. The class\n                        should inherit from IValueConverter. The class exposes two additional properties that can be set when you\n                        create an instance of this class from your XAML resource dictionary – one to set whether or not the Boolean\n                        flag is negated and the other to drive what the FalseVisibility is. Usually this will be set to either\n                        Collapsed or Hidden – we will default to Collapsed:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class NegatableBooleanToVisibilityConverter : IValueConverter\n{\n    public NegatableBooleanToVisibilityConverter()\n    {\n        FalseVisibility = Visibility.Collapsed;\n    }\n    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)\n    {\n        bool bVal;\n        bool result = bool.TryParse(value.ToString(), out bVal);\n        if (!result) return value;\n        if (bVal && !Negate) return Visibility.Visible;\n        if (bVal && Negate) return FalseVisibility;\n        if (!bVal && Negate) return Visibility.Visible;\n        if (!bVal && !Negate) return FalseVisibility;\n        else return Visibility.Visible;\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n\n    public bool Negate { get; set; }\n    public Visibility FalseVisibility { get; set; }\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-014")])]),e._v(" "),a("p",[e._v("\n                        In the Convert method there is a chunk of logic that combines the boolean flag that comes in from the binding\n                        and the negate flag to say whether we should be Visible or whatever the Visibility of our false Visibility\n                        property is.\n                    ")]),e._v(" "),a("p",[e._v("Next in the AddEditCustomerView add a XAML namespace for the Converters child namespace:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:conv="clr-namespace:ZzaDesktop.Converters"')])]),e._v(" "),a("figcaption",[e._v("Fig 06-015")])]),e._v(" "),a("p",[e._v("Define two instances of the VisibilityConverter (one where we set negate to true and one where we don’t):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n        <conv:NegatableBooleanToVisibilityConverter x:Key="VisConverter" />\n        <conv:NegatableBooleanToVisibilityConverter x:Key="NegVisConverter"\n                                                    Negate="True" />\n\n    </UserControl.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-016")])]),e._v(" "),a("p",[e._v("\n                        Now set the Visibility of the Buttons using our existing EditMode flag on our ViewModel and the appropriate\n                        instance of our VisibilityConverter (VisConverter or NegVisConverter).\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Save"\n        Command="{Binding SaveCommand}"\n        Visibility="{Binding EditMode, Converter={StaticResource VisConverter}}"\n        HorizontalAlignment="Left"\n        Margin="25,5,0,0"\n        VerticalAlignment="Top"\n        Width="75" />\n<Button Content="Add"\n        Command="{Binding SaveCommand}"\n        Visibility="{Binding EditMode, Converter={StaticResource NegVisConverter}}"\n        HorizontalAlignment="Left"\n        Margin="25,5,0,0"\n        VerticalAlignment="Top"\n        Width="75" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-017")])]),e._v(" "),a("p",[e._v("\n                        When in Edit mode the Save Button should be Visible. With the Add Button we negate the meaning of that Edit\n                        Mode in order to hide the Add Button when we are in EditMode.\n                    ")]),e._v(" "),a("p",[e._v("Now let's hook up Command Handling for our SaveCommand and our CancelCommand. In the ViewModel declare the\n                        Commands as properties you can bind to:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand CancelCommand { get; private set; }\npublic RelayCommand SaveCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 06-018")])]),e._v(" "),a("p",[e._v("Construct our Commands in the ViewModel's Constructor pointing to the handling methods.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public AddEditCustomerViewModel(ICustomersRepository repo)\n{\n    _repo = repo;\n    CancelCommand = new RelayCommand(OnCancel);\n    SaveCommand = new RelayCommand(OnSave, CanSave);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-019")])]),e._v(" "),a("p",[e._v("In the case of the SaveCommand we will be implementing validation so we had a CanSave or CanExecute handler .\n                    ")]),e._v(" "),a("p",[e._v("Stub out the OnCancel(), OnSave and CanSave() methods:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnCancel()\n{\n}\n\nprivate async void OnSave()\n{\n}\n\nprivate bool CanSave()\n{\n    return true;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-020")])]),e._v(" "),a("p",[e._v("\n                        Similar to the CustomerListView we need to be able to signal our Parent ViewModel when we are done adding,\n                        editing or if we cancel. We do this by adding an Event called Done which we can raise from the ViewModel and\n                        the Parent can handle to drive navigation:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event Action Done = delegate { };")])]),e._v(" "),a("figcaption",[e._v("Fig 06-021")])]),e._v(" "),a("p",[e._v("In the handling methods, for the moment, just call Done() in each method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnCancel()\n{\n    Done();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-022")])]),e._v(" "),a("p",[e._v("Now in the Parent ViewModel (MainWindowViewModel in this case) add an event handler for the Done event:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("_addEditViewModel.Done += NavToCustomerList;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-023")])]),e._v(" "),a("p",[e._v("\n                        Now add the handler method (NavToCustomerList()) that sets the current ViewModel back to the desired ViewModel\n                        when we are finished editing (_customerListViewModel in this case):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void NavToCustomerList()\n{\n    CurrentViewModel = _customerListViewModel;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-024")])]),e._v(" "),a("p",[e._v("\n                        No if we run the application, click Customers, edit a selected Customer, make a change, click Save and the\n                        changes do not show up! This is because we have not yet wired up any save handling. This will be covered in a\n                        later module.\n                    ")]),e._v(" "),a("p",[e._v("Before we try to Save the added or edited customer we need to validate that data first. So let's talk about\n                        validation.\n                    ")]),e._v(" "),a("h3",[e._v("Validation in MVVM")]),e._v(" "),a("p",[e._v("As soon as you start accepting data input from end users you need to consider validation. WPF has some great\n                        built in features in the binding system for validating input and you can still leverage all those features\n                        when doing MVVM.\n                    ")]),a("p",[e._v("The only thing to keep in mind is that the logic that supports your validation and defines what rules exist for\n                        what properties should be part of the Model or the ViewModel, not the View.\n                    ")]),e._v(" "),a("p",[e._v("You can still use all of the ways of expressing validation that are supported by WPF databinding including:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Throwing Exceptions when a property is set")]),e._v(" "),a("li",[e._v("Implementing the IDataErrorInfo interface")]),e._v(" "),a("li",[e._v("Implementing INotifyDataErrorInfo")]),e._v(" "),a("li",[e._v("Using WPF Validation Rules")])]),e._v(" "),a("p",[e._v("\n                        In general, the recommendation is to use INotifyDataErrorInfo. This was introduced to WPF in .Net 4.5 and it\n                        supports querying the object for errors associated with properties. It fixes a couple of deficiencies that\n                        exist in all the other options:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("It allows asynchronous validation")]),e._v(" "),a("li",[e._v("It allows properties to have more than one error associated with them")])]),e._v(" "),a("p",[e._v("So let's dive into implementing validation for our data entry scenario")]),e._v(" "),a("h3",[e._v("Demo: Adding Validation to an Input View")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        Now we want to add validation support to our data entry form. Validation can be useful in a number of places\n                        in your application (Views, ViewModels, Helper Objects). This makes it a good candidate for a common base\n                        class that we can inherit from in those scenarios. We want the base class to support INotifyDataErrorInfo and\n                        we want it to integrate nicely so that the validation gets triggered when properties change. Since we already\n                        have a base class for Property change handling (BindableBase) it’s a natural step to derive from that class.\n                    ")]),e._v(" "),a("p",[e._v("Create a new class called ValidateableBindableBase which inherits from BindableBase and implements\n                        INotifyDataErrorInfo:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class ValidatableBindableBase : BindableBase, INotifyDataErrorInfo\n{\n    public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged = delegate { };\n\n    public System.Collections.IEnumerable GetErrors(string propertyName)\n    {\n        throw new NotImplementedException();\n    }\n\n    public bool HasErrors\n    {\n        get { throw new NotImplementedException(); }\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-025")])]),e._v(" "),a("p",[e._v("\n                        After we stub the INotifyDataErrorInfo interface out you can see we have a GetErrors method that gets queried\n                        with the propertyName and is expected to return a collection of errors for that property. We need to raise the\n                        ErrorsChanged event whenever new errors are added for a property so that the binding can re-query and call\n                        this again. Then we have to have a boolean flag (HasErrors) that indicates whether there are any errors on the\n                        class. It has to stay in sync with the state of the errors for all the properties on the object.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We can support this interface pretty simply by having a Dictionary as our underlying data store that has a key\n                        of string which is the property name and a list of string per property which are the errors associated with\n                        that property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private Dictionary<string, List<string>> _errors = new Dictionary<string, List<string>>();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-026")])]),e._v(" "),a("p",[e._v("Now we just need to integrate the use of that Dictionary with the members down below:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public System.Collections.IEnumerable GetErrors(string propertyName)\n{\n    if (_errors.ContainsKey(propertyName))\n        return _errors[propertyName];\n    else\n        return null;\n}\n\npublic bool HasErrors\n{\n    get { return _errors.Count > 0; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-027")])]),e._v(" "),a("p",[e._v("\n                        We look into the Dictionary when we are queried for a property. If there are any errors in there return them\n                        as a list of strings. If not return null. We drive the HasErrors flag by checking if there is anything in the\n                        Dictionary or not.\n                    ")]),e._v(" "),a("p",[e._v("Next we need to add a trigger to say when does this thing evaluate errors:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("protected override void SetProperty<T>(ref T member, T val, [CallerMemberName] string propertyName = null)\n{\n    base.SetProperty<T>(ref member, val, propertyName);\n    ValidateProperty(propertyName, val);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-028")])]),e._v(" "),a("p",[e._v("\n                        Since we are inhereting from BindableBase we can override the SetProperty method. We will still want to call\n                        the base so that the INotifyPropertyChange handling occurs but then we can call a method (which we are about\n                        to implement) to trigger the validation because a property has been set.\n                    ")]),e._v(" "),a("p",[e._v("\n                        No we could wire into this ValidateProperty method any number of approaches to validation but the most\n                        prominent approach nowadays is to use Data Annotations:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void ValidateProperty<T>(string propertyName, T value)\n{\n    var results = new List<ValidationResult>();\n    ValidationContext context = new ValidationContext(this);\n    context.MemberName = propertyName;\n    Validator.TryValidateProperty(value, context, results);\n\n    if (results.Any())\n    {\n\n        _errors[propertyName] = results.Select(c => c.ErrorMessage).ToList();\n    }\n    else\n    {\n        _errors.Remove(propertyName);\n    }\n    ErrorsChanged(this, new DataErrorsChangedEventArgs(propertyName));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-029")])]),e._v(" "),a("p",[e._v("\n                        Data Annotations contain the concept of a data validation context. You can point at a given object, say what\n                        member or property on that object is being validated and then call a method (TryValidateProperty) to evaluate\n                        that object. When this method is called it will go to that property on that object and see if there is any\n                        Data Annotation attributes for validation. If so it will execute them and get their results and return them in\n                        the results collection.\n                    ")]),e._v(" "),a("p",[e._v("\n                        If there are any results we set those results as the errors for that property name. If there are not any\n                        errors then we can remove that property from our Dictionary because there are no longer any errors associated\n                        with that property.\n                    ")]),e._v(" "),a("p",[e._v("Next we raise the ErrorsChanged event so that the binding can go and requery for errors.")]),e._v(" "),a("p",[e._v("Back in our AddEditCustomerView we can look at the bindings that were generated from our earlier drag and drop\n                        operations:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="firstNameTextBox"\n     Grid.Column="1"\n     HorizontalAlignment="Left"\n     Height="23"\n     Margin="3"\n     Grid.Row="0"\n     Text="{Binding FirstName, Mode="TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=True}"\n     VerticalAlignment="Center"\n     Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-030")])]),e._v(" "),a("p",[e._v("\n                        We can see they already have Validation and Mode flags on them already. We will replace those flags with the\n                        minimum we need to support NotifyDataErrorInfo:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="firstNameTextBox"\n     Grid.Column="1"\n     HorizontalAlignment="Left"\n     Height="23"\n     Margin="3"\n     Grid.Row="0"\n     Text="{Binding FirstName, ValidatesOnNotifyDataErrors=True}"\n     VerticalAlignment="Center"\n     Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 06-031")])]),e._v(" "),a("p",[e._v("\n                        On each one of the bindings we have added ValidatesOnNotifyDataErrors=True. That causes that binding to look\n                        when it first hooks up to its data bound object, see if it implements INotifyDataErrorInfo and if so start\n                        querying it whenever it gets PropertyChanged notifications for that property.\n                    ")]),e._v(" "),a("p",[e._v("If there are errors returned, then it will set certain Attached Properties on the associated Control such as:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Validation has errors")]),e._v(" "),a("li",[e._v("Validation errors collection")]),e._v(" "),a("li",[e._v("Raising Validation events")])]),e._v(" "),a("p",[e._v("Now we need to add some Data Annotation attributes to SimpleEditableCustomer we will make the FirstName and\n                        LastName required:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private string _firstName;\n[Required]\npublic string FirstName\n{\n    get { return _firstName; }\n    set { SetProperty(ref _firstName, value); }\n}\n\nprivate string _lastName;\n[Required]\npublic string LastName\n{\n    get { return _lastName; }\n    set { SetProperty(ref _lastName, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-032")])]),e._v(" "),a("p",[e._v("Then we will use the built in Email and Phone annotations:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private string _email;\n[EmailAddress]\npublic string Email\n{\n    get { return _email; }\n    set { SetProperty(ref _email, value); }\n}\n\nprivate string _phone;\n[Phone]\npublic string Phone\n{\n    get { return _phone; }\n    set { SetProperty(ref _phone, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-033")])]),e._v(" "),a("p",[e._v("Now we just need to make the base class ValidatableBindableBase instead of BindableBase:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class SimpleEditableCustomer : ValidatableBindableBase")])]),e._v(" "),a("figcaption",[e._v("Fig 06-034")])]),e._v(" "),a("p",[e._v("Now if we run the application, edit a Customer, try to Edit by clearing the FirstName field and we will see it\n                        gets red boxed:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(609)}}),e._v(" "),a("figcaption",[e._v("Fig06-035")])]),e._v(" "),a("p",[e._v("Unfortunately, WPF does'nt have much in the way of validation indications so we will add two enhancements:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("The Save Button should disable when a validation error occurs")]),e._v(" "),a("li",[e._v("We will add a ToolTip on the Control that will display the validation error")])]),e._v(" "),a("p",[e._v("To support disabling the SaveCommand we need to go to the AddEditCustomerViewModel and modify the SetCustomer\n                        method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void SetCustomer(Customer cust)\n{\n    _editingCustomer = cust;\n    if (Customer != null) Customer.ErrorsChanged -= RaiseCanExecuteChanged;\n    Customer = new SimpleEditableCustomer();\n    Customer.ErrorsChanged += RaiseCanExecuteChanged;\n    CopyCustomer(cust, Customer);\n}\n\nprivate void RaiseCanExecuteChanged(object sender, EventArgs e)\n{\n    SaveCommand.RaiseCanExecuteChanged();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-036")])]),e._v(" "),a("p",[e._v("\n                        Now when the Customer is set we subscribe to the ErrorsChanged event and trigger the RaiseCanExecuteChanged.\n                        We will also put a check in to unsubscribe an existing Customer to avoid memory leaks.\n                    ")]),e._v(" "),a("p",[e._v("Next we change our CanSave method to check the HasErrors flag of the Customer object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private bool CanSave()\n{\n    return !Customer.HasErrors;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-037")])]),e._v(" "),a("p",[e._v("\n                        Now run the application and edit a Customer. When you remove the FirstName text you will see the field is red\n                        boxed again and the Save Button is disabled.\n                    ")]),e._v(" "),a("p",[e._v("Adding a ToolTip for the validation error is as simple as defining a style for it to the AddEditCustomerView:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('<Style TargetType="TextBox">\n    <Style.Triggers>\n        <Trigger Property="Validation.HasError"\n                 Value="true">\n            <Setter Property="ToolTip"\n                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},\n                            Path=(Validation.Errors).CurrentItem.ErrorContent}" />\n        </Trigger>\n    </Style.Triggers>\n</Style>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-038")])]),e._v(" "),a("p",[e._v("\n                        In the style we will implicitly target the TextBox within this scope, we will setup a Style Trigger that\n                        watches the Attached Property Validation.HasError. When that is set to true then we will set the ToolTip\n                        property of the TextBox. The Value Binding is a little complex but you can see that it is basically going to\n                        the Validation.Errors Attached Property which is a Collection for this Control, moves to the CurrentItem and\n                        gets the ErrorContent which is the string. It then uses that value to set the ToolTip.\n                    ")]),e._v(" "),a("p",[e._v("Now if we run the application, edit a Customer, cause a validation error, tab off the field, we can see that\n                        the button still disables but then when we hover over the field we and an error indication of what is going on\n                        there:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(610)}}),e._v(" "),a("figcaption",[e._v("Fig06-039")])]),e._v(" "),a("p",[e._v("\n                        Check out the WPF Data Binding in Depth Pluralsight course by Brian Noyes for examples of adding Icons to\n                        indicate validation errors and other techniques.\n                    ")]),e._v(" "),a("p",[e._v("Now we need to wire up the Save handling. For that we need to discuss Dependency Injection.")]),e._v(" "),a("h3",[e._v("Dependency Injection")]),e._v(" "),a("p",[e._v("\n                        Now let’s talk a little bit about Dependency Injection. We have already seen that data binding decouples Views\n                        and ViewModels from each other and allows them to communicate without knowing explicitly what is on the other\n                        end of the communication pipeline.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now we need something similar to decouple or ViewModels from our Client Services. So far in the demos you have\n                        seen that we have hard coded the construction of a Client Service or Customers repository and newing it up\n                        explicitly within the ViewModel and holding onto a reference to it.\n                    ")]),e._v(" "),a("p",[e._v("\n                        That isn’t a bad thing if you are not worried about Unit Testing and if that is the only ViewModel that is\n                        going to use that Client Service. As soon as you want to start having some shared state in your Client\n                        Services that multiple ViewModels see and as soon as you want to write Unit Tests against your ViewModel logic\n                        that uses that Client Service you will have problems with how we have been structuring things. The solution is\n                        to use Dependency Injection and Interfaces on our Services. Those will provide the decoupling we need and you\n                        will see that we can easily wire things together using that.\n                    ")]),e._v(" "),a("p",[e._v("\n                        When you start talking Dependency Injection the subject of containers usually comes up pretty quickly. You can\n                        do manual Dependency Injection but that only gets you so far. Typically, you are going to want to use a\n                        container to help you out here.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Inversion of Control (IoC) and Dependency Injection (DI) are two design patterns that are closely related. A\n                        “Container” is a chunk of infrastructure code that does both of those patterns for you. The IoC pattern is\n                        about delegating responsibility for construction and the Dependency Injection pattern is about providing\n                        dependencies to an object that has already been constructed.\n                    ")]),e._v(" "),a("p",[e._v("They can both be treated as a two phase approach to constructing. When you use a container the container takes\n                        several responsibilities:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("It constructs an object when asked. Instead of newing up objects yourself you will go to the container and\n                            ask it to produce an object for you. ")]),e._v(" "),a("li",[e._v("As part of the process the container will determine what that object depends on. Depending on the\n                            container used it can do that based on parametrized constructors, properties or methods. ")]),e._v(" "),a("li",[e._v("To provide those dependencies the container will then construct those dependencies and will inject them\n                            into the object being constructed ")]),e._v(" "),a("li",[e._v("The dependencies being constructed may have dependencies of their own and so on. So the process is\n                            recursively repeated until an entire object graph is built up from the object you asked for down through\n                            all of its dependencies. ")])]),e._v(" "),a("p",[e._v("\n                        A container can also handle different instancing patterns and produce singleton objects where it constructs\n                        them on the first try and then just hands out a reference to them each other time some object takes a\n                        dependency on them.\n                    ")]),e._v(" "),a("p",[e._v("There are many Containers to choose from:")]),e._v(" "),a("ul",[a("li",[e._v("Unity")]),e._v(" "),a("li",[e._v("AutoFac")]),e._v(" "),a("li",[e._v("Ninject")]),e._v(" "),a("li",[e._v("StructureMap")])]),e._v(" "),a("p",[e._v("\n                        Let’s take a look at how we can use Dependency Injection to break the coupling that we have between the\n                        ViewModels and the Client Services at this point in our code.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Adding Dependency Injection for Client Services")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        So in this demo we want to wire up the Save handling from our Add/Edit form and see how we can use Dependency\n                        Injection related to that. The initial straightforward way to do the Save handling would be to drop into the\n                        AddEditCustomerViewModel and new up an instance of our CustomersRepository.:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ICustomersRepository _repo = new CustomersRepository();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-040")])]),e._v(" "),a("p",[e._v("\n                        Then drop down to the OnSave handling method and call UpdateCustomer or AddCustomer methods of that\n                        repository. There are a couple of issues with this approach:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Testability – this is a hard coded, not exposed, dependency that the AddEditCustomerViewModel now has. Any\n                            method that touches this object is going to be really hard to Unit Test because it is going to actually\n                            try and go out to the database. We don’t want that in a Unit Test environment. We want to be able to\n                            substitute a mock object. ")]),e._v(" "),a("li",[e._v("Another problem is that this ViewModel is newing up its own instance of the CustomersRepository and if you\n                            remember over in the CustomerListViewModel it is newing up a different instance of the\n                            CustomersRepository. So the objects that get read in by those two can be completely separate objects that\n                            really represent the same rows under the covers. When you are doing that kind of thing you really want a\n                            Singleton model for that repository so that you are exposing shared state to the multiple ViewModels that\n                            are going to use it. That is where Dependency Injection comes in. ")])]),e._v(" "),a("p",[e._v("The first thing we want to do is change the code in our ViewModel to take in a reference to an\n                        ICustomersRepository:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public AddEditCustomerViewModel(ICustomersRepository repo)")])]),e._v(" "),a("figcaption",[e._v("Fig 06-041")])]),e._v(" "),a("p",[e._v("\n                        Now you can see this type is not coupled to the concrete type at all just the interface and provides a path\n                        for passing in a mock object in a Unit Test environment. We can go and make a similar change to our\n                        CustomerListViewModel and now likewise our CustomerListViewModel just takes in the interface reference and is\n                        no longer coupled to the concrete type.\n                    ")]),e._v(" "),a("p",[e._v("\n                        For the above code to work we would need to move up to the parent ViewModel and pass that in. So we go to the\n                        MainWindowViewModel and new up the instance of the CustomersRepository here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ICustomersRepository _repo = new CustomersRepository();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-042")])]),e._v(" "),a("p",[e._v("Then change the construction of those child ViewModels to pass it in through the constructor:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("_customerListViewModel = new CustomerListviewModel(_repo);\n_addEditViewModel = new AddEditCustomerViewModel(_repo);")])]),e._v(" "),a("figcaption",[e._v("Fig 06-043")])]),e._v(" "),a("p",[e._v("\n                        So this fixes the problem for our child ViewModels in that they get passed in the appropriate thing at runtime\n                        but can have an alternate thing passed in when in a Unit Test environment and they are only coupled to the\n                        interface now.\n                    ")]),e._v(" "),a("p",[e._v("\n                        However, now our parent type has been somewhat corrupted because it now depends on a concrete type that it\n                        doesn’t even use directly itself. How do we fix that? That leads us to using a Container to do the resolution\n                        of all dependencies. We are going to use the Unity container.\n                    ")]),e._v(" "),a("p",[e._v("Firstly, get Unity from NuGet:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(611)}}),e._v(" "),a("figcaption",[e._v("Fig06-044")])]),e._v(" "),a("p",[e._v("\n                        Now when using a container, you generally have a singleton model for the container itself so we will wire up a\n                        simple helper for the singleton pattern here that we will call ContainerHelper. The ContainerHelper class\n                        exposes a singleton instance of an IUnityContainer container through a static property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public static IUnityContainer Container\n{\n    get { return _container; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-044A")])]),e._v(" "),a("p",[e._v("\n                        It can also be the place where you do your centralized registration of any types that you want the container\n                        to be responsible for creating:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("_container = new UnityContainer();\n_container.RegisterType<ICustomersRepository, CustomersRepository>(\n    new ContainerControlledLifetimeManager());")])]),e._v(" "),a("figcaption",[e._v("Fig 06-045")])]),e._v(" "),a("p",[e._v("\n                        In the API of Unity what we do here is basically say whenever someone asks for an ICustomersRepository give\n                        them the CustomersRepository as the concrete type. The ContainerControlledLifetimeManager indicates to Unity\n                        to make the type a singleton. So when someone tries to get an ICustomersRepository from the Container it will\n                        new up a CustomersRepository and satisfy any dependencies it has. Any subsequent time it will just return the\n                        reference to the singleton.\n                    ")]),e._v(" "),a("p",[e._v("To use this, we go back to the parent ViewModel (MainWindowViewModel) and add a namespace for the Unity\n                        namespace:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("using Microsoft.Practices.Unity;")])]),e._v(" "),a("figcaption",[e._v("Fig 06-046")])]),e._v(" "),a("p",[e._v("Next we will change the way the child ViewModels are created so that they use the Container:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" _customerListViewModel = ContainerHelper.Container.Resolve<CustomerListViewModel>();\n_addEditViewModel = ContainerHelper.Container.Resolve<AddEditCustomerViewModel>();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-047")])]),e._v(" "),a("p",[e._v("\n                        We use a Resolve method in Unity specifying the type that we want to create. When it goes to construct that\n                        object it will satisfy its dependencies based on its parametrized constructor. So it will be able to construct\n                        and inject a singleton instance of ICustomersRepository. Now this parent ViewModel does'nt even have to know\n                        about this dependency so we can delete the line:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ICustomersRepository _repo = new CustomersRepository();")])]),e._v(" "),a("figcaption",[e._v("Fig 06-048")])]),e._v(" "),a("p",[e._v("\n                        Now finally we can wire up the Save handling in our AddEditCustomerViewModel. So now when we call Save we will\n                        first copy the contents of our editing Customer back into the original object that we held a reference to with\n                        another helper method called UpdateCustomer that pushes and pulls the relevant properties:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void UpdateCustomer(SimpleEditableCustomer source, Customer target)\n{\n    target.FirstName = source.FirstName;\n    target.LastName = source.LastName;\n    target.Phone = source.Phone;\n    target.Email = source.Email;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-049")])]),e._v(" "),a("p",[e._v("\n                        You could use a tool like AutoMapper for doing this kind of thing. Then depending on our mode we either call\n                        UpdateCustomerAsync or AddCustomerAsync on our repository:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private async void OnSave()\n{\n    UpdateCustomer(Customer, _editingCustomer);\n    if (EditMode)\n        await _repo.UpdateCustomerAsync(_editingCustomer);\n    else\n        await _repo.AddCustomerAsync(_editingCustomer);\n    Done();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-049A")])]),e._v(" "),a("p",[e._v("\n                        Finally, we signal that we are done. In a production environment we would add error handling in case those\n                        methods threw exceptions.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now if we run the application, select a customer and click Edit, change their name and click Save. You will\n                        see the change has been made successfully. If you stop and restart the application, you will see the change\n                        persists.\n                    ")]),e._v(" "),a("p",[e._v("Now we have Dependency Injection and Validation wrapped up we will cover one more use case scenario – searching\n                        and filtering the Customer list.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Searching and Filtering Data")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-Start\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex06-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 6\\ZzaDesktop-End\\ZzaDesktop.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        The one last use case that we will look at is searching the Customers list and filtering the list based on\n                        your search. Go to the CustomerListView and take the Grid that we had at the top which contains the\n                        AddCustomer button and I will add a\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("A StackPanel that contains")]),e._v(" "),a("ul",[a("li",[e._v("A Search Label")]),e._v(" "),a("li",[e._v("A TextBox to accept search criteria")]),e._v(" "),a("li",[e._v("An X Button to clear out the search criteria")])])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Add Customer"\n            Command="{Binding AddCustomerCommand}"\n            Grid.Column="0"\n            HorizontalAlignment="Left" />\n    <StackPanel Orientation="Horizontal"\n                HorizontalAlignment="Right"\n                Grid.Column="1">\n        <Label Content="Search:" />\n        <TextBox Text="{Binding SearchInput, UpdateSourceTrigger=PropertyChanged}"\n                 Width="150" />\n        <Button Content="X"\n                Command="{Binding ClearSearchCommand}" />\n    </StackPanel>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 06-050")])]),e._v(" "),a("p",[e._v("That means our ViewModel needs to support two new things:")]),e._v(" "),a("ul",[a("li",[e._v("A property called SearchInput that we want to be set every time a keystroke happens so we use the\n                            UpdateSourceTrigger on the binding and set that to PropertyChanged ")]),e._v(" "),a("li",[e._v("We also need a ClearSearchCommand to clear out the search term")])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private string _SearchInput;\n\npublic string SearchInput\n{\n    get { return _SearchInput; }\n    set\n    {\n        SetProperty(ref _SearchInput, value);\n        FilterCustomers(_SearchInput);\n    }\n}\n\nprivate void FilterCustomers(string searchInput)\n{\n    if (string.IsNullOrWhiteSpace(searchInput))\n    {\n        Customers = new ObservableCollection<Customer>(_allCustomers);\n        return;\n    }\n    else\n    {\n        Customers = new ObservableCollection<Customer>(_allCustomers.Where(c => c.FullName.ToLower().Contains(searchInput.ToLower())));\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-051")])]),e._v(" "),a("p",[e._v("\n                        In our CustomerListViewModel we define that SearchInput property so when the property gets set we need to\n                        trigger filtering of the Customers that are being presented. That means we are going to need another Customer\n                        collection. One that contains all Customers and then the exposed one that is data bound to that contains just\n                        the Customers that are to be presented at the current time.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Once we have that and the FilterCustomers gets called we are going to check and see if there is anything as a\n                        search term and if there is we will apply a Where clause to check to see if the FullName property of the\n                        Customer contains our search term. We will use the results of that LINQ query to populate our Customers\n                        property with the filtered list triggering a property change and therefore the screen will update.\n                    ")]),e._v(" "),a("p",[e._v("So we just need to add the _allCustomers collection and we need to populate that when we load our Customers:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private List<Customer> _allCustomers;\n\npublic async void LoadCustomers()\n{\n    _allCustomers = await _repo.GetCustomersAsync();\n    Customers = new ObservableCollection<Customer>(_allCustomers);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-052")])]),e._v(" "),a("p",[e._v("\n                        We declare the list of _allCustomers, we can await and hold onto that and then we can do our initial\n                        population of the Customers property with _allCustomers. Then we just need to support the ClearSearchCommand\n                        using the standard three steps for Command handling:\n                    ")]),e._v(" "),a("p",[e._v("Expose a property for the Command:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand ClearSearchCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 06-053")])]),e._v(" "),a("p",[e._v("Construct the Command and point it to its handling method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("ClearSearchCommand = new RelayCommand(OnClearSearch);")])]),e._v(" "),a("figcaption",[e._v("Fig 06-054")])]),e._v(" "),a("p",[e._v("And define that handling method in this case nulling out the SearchInput:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnClearSearch()\n{\n    SearchInput = null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 06-055")])]),e._v(" "),a("p",[e._v("\n                        Now if we run the application, go to the Customers view, put in a search term and you can see the list\n                        tailoring to your search criteria. Clicking the clear Button will take you back to the full list of Customers.\n                    ")]),e._v(" "),a("h3",[e._v("MVVM Toolkits")]),e._v(" "),a("p",[e._v("\n                        So before we wrap up this module and course let’s talk about some toolkits and frameworks that are out there\n                        that you can leverage so that you don’t have to write a bunch of repetitive code to implement the MVVM pattern\n                        yourself.\n                    ")]),e._v(" "),a("h3",[e._v("Prism")]),e._v(" "),a("p",[e._v("\n                        This was first developed by Microsoft Patterns and Practices. Currently this is an open source project of\n                        which Brian Noyes is one of the authors.\n                    ")]),e._v(" "),a("h3",[e._v("MVVM Light")]),e._v(" "),a("p",[e._v("MVVM Light is developed by Laurent Bugnion and there is a Pluralsight course on MVVM Light.")]),e._v(" "),a("h3",[e._v("Caliburn Micro")]),e._v(" "),a("p",[e._v("Another a small open source framework that helps you implement the MVVM pattern and also supports a number of\n                        things out of the box.\n                    ")]),e._v(" "),a("h3",[e._v("Prism")]),e._v(" "),a("p",[e._v("\n                        Now we will go back to Prism and look at it in more depth. Prism has a number of things out of the box. It has\n                        a BindableBase class similar to the one we implemented earlier in the course.\n                    ")]),e._v(" "),a("p",[e._v("\n                        It has a flexible ViewModelLocator that has conventions to it but also lets you override those conventions and\n                        declaratively hook up your Views and ViewModels in a loosely coupled way.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Modularity – the ability to break up your code into totally loosely coupled class libraries and parts and\n                        bring them together at runtime into a cohesive whole for the end user while the code remains decoupled.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Prism also supports the notion of UI Composition and Regions. The ability to plug Views into Containers\n                        without the View that is doing the plugging needing to have an explicit reference to the UI Container itself.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Prism has navigation features that layer on top of regions that give you things like forward and back\n                        navigation and the navigation stack and allowing your ViewModels to participate in the navigation process\n                        directly.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Prism has Commands. So they have a Delegate Command that is very similar to the RelayCommand that we have been\n                        using throughout the course except it’s got some extra robustness to protect you from memory leaks if you're\n                        Views and ViewModels have different lifetimes. There is also a separate Command implementation called\n                        CompositeCommand that lets you do Commanding in a more loosely coupled way across components.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Finally, Prism has support for Pub/Sub Events. These are loosely coupled events where the publisher and\n                        subscriber can have different lifetimes and do not have to have specific references to each other to\n                        communicate through events.\n                    ")]),e._v(" "),a("p",[e._v("Brian Lagunas, one of the co-authors of the Prism framework has written a number of Pluralsight courses on the\n                        subject.\n                    ")]),e._v(" "),a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("\n                        We have completed our journey through MVVM as a pattern. In this module we saw the Visual Studio Data Designer\n                        can quickly scaffold out your data-centric Views but you can still wire them up easily in an MVVM fashion.\n                    ")]),e._v(" "),a("p",[e._v("\n                        You saw the validation logic belongs on the Model or ViewModel properties but the good news is that in MVVM we\n                        are always binding to those properties so it is very easy to setup the infrastructure for validation and reuse\n                        that across your ViewModel and Model objects.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We looked at Dependency Injection and saw that it makes it so that your ViewModels are only coupled to your\n                        Client Services via the Interfaces that they implement and that you can use a Container to Dependency Inject\n                        those references at runtime for you.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we talked about MVVM frameworks and Toolkits out there and you should look into these and use one to\n                        help you implement MVVM.\n                    ")]),e._v(" "),a("p",[e._v("This course has hopefully helped you understand the MVVM pattern in depth and you could go build your own MVVM\n                        infrastructure based on what you saw here in this course. But leveraging one of those existing frameworks that\n                        each have a large user base and good support from the project owners will just save you time and help you\n                        avoid repetitive code.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("MVVM Pattern Fundamentals")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",{attrs:{id:"Welcome"}},[e._v("Welcome")]),e._v(" "),a("p",[e._v("\n                        Every good WPF developer wants to write great applications that delight their users. You may be able\n                        to achieve that on a first release without putting a lot of consideration into the structure of your\n                        application code and what code belongs where. But if you want to keep adding features, fixing bugs\n                        and getting releases out over time, without your delivery times constantly increasing due to code\n                        complexity, you need to have good clean structure to your code.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The MVVM pattern is all about guiding you in how to organize and structure your code to write\n                        maintainable, testable and extensible applications. This first module is going to cover the high\n                        level concepts of MVVM. Make sure you understand what it does for you, why you would want to use it,\n                        where it comes from and some of the high level concepts around the structural parts of MVVM.\n                    ")]),e._v(" "),a("h3",{attrs:{id:"SeparationOfConcerns"}},[e._v("Separation of Concerns")]),e._v(" "),a("p",[e._v("\n                        First thing to understand about MVVM is that it is mostly about providing a standard structure for\n                        you to apply the principle of separation of concerns. Now that's a pretty lofty phrase that people\n                        throw around without really explaining it so let's talk briefly about what it really means.\n                    ")]),e._v(" "),a("p",[e._v("\n                        To explain separation of concerns I like to use an analogy of something we all have to do:\n                    ")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(541)}}),e._v(" "),a("figcaption",[e._v("Fig 01-001")])]),e._v(" "),a("p",[e._v("\n                        Get dressed to go out in public. If you take your laundry and put it away as it comes out of the\n                        clothes drier – all twisted and tangled with intermingled articles of clothing and stuff them into\n                        an available hole in your drawers or shelves that can really expedite the process of putting away\n                        your clothes at that moment in time.\n                    ")]),e._v(" "),a("p",[e._v("\n                        However, you will pay an ongoing penalty each day when you need to get dressed because you will have\n                        to dig around to find a matching and complete outfit from the tangled mess of clothing.\n                    ")]),e._v(" "),a("p",[e._v("\n                        If, on the other hand, you invest a little bit of time upfront to put the structure in place to\n                        organize your clothes, buy a chest of drawers, put in some shelves, put clothes away neatly each\n                        time the laundry is finished then the daily activity of getting dressed becomes a breeze.")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(542)}}),e._v(" "),a("figcaption",[e._v("Fig 01-002")])]),e._v(" "),a("p",[e._v("\n                        Developers face a very similar choice with the way we write code.\n                    ")]),e._v(" "),a("h3",{attrs:{id:"SeparationOfConcernsInMVVM"}},[e._v("Separation of Concerns in MVVM")]),e._v(" "),a("p",[e._v("\n                        Code like the example below doesn’t look too bad at first glance:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void ComputeCustomerOrdersTotal(object sender, RoutedEventArgs e)\n{\n    var selectedCustomer = this.customerDataGrid.SelectedItem as Customer;\n    var orders = (from order in dbContext.Orders.Include("OrderItems")\n        where order.CustomerId = selectedCustomer.Id\n        select order);\n\n    var sum = 0;\n    foreach (var order in orders)\n    {\n        foreach (var item in order.OrderItems)\n        {\n            sum += item.UnitPrice * item.Quantity;\n        }\n    }\n    this.customerOrderDetail.text = sum.ToString();\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 01-003")])]),e._v(" "),a("p",[e._v("\n                        If you look closely at what the code is doing you can see code that is touching UI elements,\n                        interwoven with code that is doing data access, interwoven with business logic or interaction logic\n                        code. Now take this out of a slides worth of code and put it into the context of real world methods\n                        that I'm sure we have all either written or been asked to maintain where you have the same kind of\n                        interleaving of concerns but spread across a method that is hundreds or thousands of lines of code\n                        long. This the code equivalent of taking your tangled mess of clothing and stuffing it in a drawer.\n                        The developer who wrote this code has tangled up a bunch of different concerns and put them all in\n                        one place.\n                    ")]),e._v(" "),a("p",[e._v("\n                        At some point after that, probably on a somewhat ongoing basis, another developer is going to be\n                        tasked with adding a feature or fixing a bug that requires digging into this tangle and making\n                        changes. That poor soul is going to have to deal with a heap of complexity that goes well beyond\n                        whatever specific problem they are trying to address at the moment and that added complexity because\n                        the developer who originally wrote the code did not take the time to put things in their proper\n                        place up front.\n                    ")]),e._v(" "),a("p",[e._v("So what does MVVM do to address this? Think of it as a set of shelves and drawers that are\n                        pre-defined and well labelled so that each time you go to write code of a certain nature you have a\n                        specific place you should be putting it. There is a shelf for:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("UI Element Access - that is your View definitions.")]),e._v(" "),a("li",[e._v("View Interaction Logic – that is you're ViewModels.")]),e._v(" "),a("li",[e._v("Model Entities – that is your Data Model Objects")])]),e._v(" "),a("p",[e._v("Any true Business Logic should probably be in a separate layer or behind a service boundary along\n                        with data access being well separated from what the UI is doing directly. You might also have some\n                        shared client-side logic that's used by multiple views. And that has it's own shelf too.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(543)}}),e._v(" "),a("figcaption",[e._v("Fig 01-004")])]),e._v(" "),a("p",[e._v("The specific way you setup your shelves and drawers is not really important, it depends on the\n                        solution you are working in, the team that your on, and some personal preference but having well\n                        defined places for different kinds of code to go and a good sense of what code goes there is very\n                        important and is really what MVVM is meant to guide you in doing for developing client application\n                        code.\n                    ")]),e._v(" "),a("h3",{attrs:{id:"MVVMGoalsAndBenefits"}},[e._v("MVVM Goals and Benefits")]),e._v(" "),a("p",[e._v("Beyond achieving separation of concerns and the efficiency that you gain from having that; what are\n                        you really trying to gain from using the MVVM pattern. There are really three key things that flow\n                        out of applying MVVM.\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Maintainability - having that clean separation of different kinds of code should make it easier\n                            to go into one or several of those granular or more focused parts and make changes without\n                            worrying as much about introducing new bugs or breaking existing features. That means you can\n                            remain agile and keep cranking out new releases quickly.\n                        ")]),e._v(" "),a("li",[e._v("Testability - with MVVM each piece of code is more granular and if done right your external\n                            dependencies and UI dependencies are in separate pieces of code from the parts with the core\n                            logic that you would really want to unit test. That makes it a lot easier to write unit tests\n                            against that core logic, make sure it works right when written and keeps working even when\n                            things change in maintenance. Now that being said a lot of teams don't even get round to writing\n                            unit tests or just haven't convinced themselves of the benefits of doing so. That's kind of a\n                            whole separate topic. I'm not going to focus on unit testing in this course but strongly\n                            encourage you to consider unit testing your ViewModel and client services project with a decent\n                            degree of coverage.\n                        ")]),e._v(" "),a("li",[e._v("Extensibility - somewhat overlaps with maintainability because of the clean separation\n                            boundaries and more granular pieces of code you have a better chance of making any of those\n                            parts more pluggable and being able to replace or add new pieces of code that do similar things\n                            into the right places in the architecture.\n                        ")])]),e._v(" "),a("h3",[e._v("Related UI Separation Patterns")]),e._v(" "),a("p",[e._v("\n                        Another thing I think is useful to be aware of is where MVVM came from. MVVM is really an evolution\n                        of other UI separation patterns.In the early 70’s when mainframes or terminals were heavily used the\n                        Model View Controller pattern was first defined. This pattern was about rendering a screen of\n                        information to the user, collecting some input from them and rendering the next screen of\n                        information to them. As a result of that Request/Response nature it is still a good fit for the\n                        modern web and so is used by platforms such as ASP.Net MVC, Ruby on Rails and Angular.\n                    ")]),e._v(" "),a("p",[e._v("\n                        One of the key distinctions between MVVM and MVC is that there is typically a decoupled lifetime\n                        between the Controller and the View. The Controller produces a View but may not stick around after\n                        that until a new request comes in from the user.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(544)}}),e._v(" "),a("figcaption",[e._v("Fig 01-005")])]),e._v(" "),a("p",[e._v("\n                        In the mid 2000’s – Rich/Smart applications were getting a lot of attention. As a result, people\n                        started trying to use separation patterns there. However, because the client Views were more\n                        state-full and stuck around in memory as did their supporting interaction logic, the MVC pattern was\n                        not the perfect fit. What evolved was a nuance on the MVC pattern which was called the Model View\n                        Presenter. The distinction of a Presenter versus a Controller was mostly that the lifetime of the\n                        Presenter and the View were coupled and they generally had a more ongoing conversation as the user\n                        interacted with the View - mostly in the form of method calls back and forth between the two parts.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Finally, that led to the newer MVVM pattern which was first defined in the early days of WPF by the\n                        Expression team at Microsoft. The main difference here is that we are still dealing with rich\n                        desktop client applications and Views that stick around for longer interaction with the user. The\n                        WPF platform offers really rich data-binding so MVVM is really a nuance on MVP where the explicit\n                        method calls between the View and its counterpart are replaced by Two-Way Databinding flowing data\n                        and communications between the View and the ViewModel.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(545)}}),e._v(" "),a("figcaption",[e._v("Fig 01-006")])]),e._v(" "),a("h3",[e._v("MVVM across Platforms")]),e._v(" "),a("p",[e._v("\n                        Since most WPF developers will not be coding exclusively for WPF you should be aware that MVVM can\n                        be used on most modern client applications today such as:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("WPF")]),e._v(" "),a("li",[e._v("Silverlight")]),e._v(" "),a("li",[e._v("Windows 8/WinRT")]),e._v(" "),a("li",[e._v("HTML 5 (Knockout/Angular)")]),e._v(" "),a("li",[e._v("Xamarin/Mobile Apps")]),e._v(" "),a("li",[e._v("Windows 10")])]),e._v(" "),a("h3",[e._v("MVVM Responsibilities")]),e._v(" "),a("p",[e._v("\n                        Each part of the MVVM pattern has a distinct responsibility. MVVM is really a layered architecture\n                        for the client side. The Presentation layer is composed of the Views, the Logic Layer are the\n                        ViewModels and the Persistence Layer is the combination of the Model Objects and the Client Services\n                        that produce and persists them either via data access in a two-tier application or via service calls\n                        in an n-tier application.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(546)}}),e._v(" "),a("figcaption",[e._v("Fig 01-007")])]),e._v(" "),a("h3",[e._v("Model Responsibilities")]),e._v(" "),a("p",[e._v("\n                        The Model is really the client side data model that supports the Views in the application. It is\n                        composed of objects with properties and backing member variables that hold the discreet pieces of\n                        data in memory.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(547)}}),e._v(" "),a("figcaption",[e._v("Fig 01-008")])]),e._v(" "),a("p",[e._v("\n                        Some of those properties may reference other Model objects forming the object graph that is the\n                        model object as a whole. The Model objects may also expose computed properties (properties whose\n                        value is computed based on the value of other properties in the model (e.g. FullName) or information\n                        from the client execution context (e.g. Time).\n                    ")]),e._v(" "),a("p",[e._v("\n                        Because you will often be binding to Model properties the Model objects should raise Property Change\n                        Notifications. For WPF data-binding this means implementing the INotifyPropertyChanged interface and\n                        firing the PropertyChanged event in property Set block.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The last responsibility is optional but often you will embed Validation information on the model\n                        objects so it can work with the WPF data-binding validation features through Interfaces such as\n                        INotifyDataErrorInfo and IDataErrorInfo.\n                    ")]),e._v(" "),a("h3",[e._v("View Responsibilities")]),e._v(" "),a("p",[e._v("\n                        The Views responsibility is to define the structure of what the user sees on the screen. That\n                        structure can be composed of static and dynamic parts. Static being the XAML hierarchy that defines\n                        the controls and layout of controls that the View is composed of and dynamic being any animations or\n                        state changes that are defined as part of the View.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(548)}}),e._v(" "),a("figcaption",[e._v("Fig 01-009")])]),e._v(" "),a("p",[e._v("\n                        There is an overarching goal in MVVM to have “no code behind” in the View. I put no code behind in\n                        quotes here because it's impossible to have zero code-behind. You at least need the constructor and\n                        call to InitializeComponent() that triggers XAML parsing as the the View is being constructed but\n                        the idea is to resist the urge to start dropping event handling code in the code-behind and coding\n                        up the interaction and data manipulation logic there. There are also other types of code that have\n                        to go in the code-behind. Any code that's required to have a reference to a UI element is inherently\n                        view code. Things like animations expressed in code instead of XAML are one example and many\n                        controls have parts of their API that is not conducive to data binding forcing you to program\n                        against them in the code behind. But the key concept here is that when using the MVVM pattern you\n                        should always analyze any code that you start to put in the code-behind and see if there's any way\n                        to make it more declarative in the XAML itself with mechanisms like data binding, commands, or\n                        behaviours to despatch calls into the ViewModel and put that logic there instead.\n                    ")]),e._v(" "),a("h3",[e._v("ViewModel Responsibilities")]),e._v(" "),a("p",[e._v("\n                        Finally we come to the ViewModel which is really the focal point of coding up an MVVM application.\n                        The primary responsibility of a ViewModel is to provide data to the View so the View can put it on the\n                        screen and, if appropriate, let the user interact with and change that data.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(549)}}),e._v(" "),a("figcaption",[e._v("Fig 01-010")])]),e._v(" "),a("p",[e._v("\n                        The other key responsibility of a ViewModel is to encapsulate the interaction logic for a View. That\n                        does not mean that all of the logic of the application should go into the ViewModel. That would just\n                        create a new place where separation of concerns is being violated but what should go there is the\n                        appropriate sequencing of calls to make the right thing happen based on whatever input just came\n                        from the user or whatever change has occurred in the View. The ViewModel should also handle any\n                        navigation logic such as deciding when it is time to navigate to a different view, and any cleanup\n                        it needs to do if it's being navigated away from, and if there's any logic associated with managing\n                        the client application state the ViewModel can manage those changes.\n                    ")]),e._v(" "),a("p",[e._v("In terms of the data that the ViewModel provides to the View there are really three kinds of data to\n                        consider:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("The first is exposing Model objects directly through ViewModel properties meaning something like\n                            a Customer property on a ViewModel that exposes a reference to a Customer model object that\n                            could be a whole object graph itself. This is called exposing the model objects\n                        ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(550)}}),e._v(" "),a("figcaption",[e._v("Fig 01-011")])]),e._v(" "),a("li",[e._v("ViewModel's can also expose what are called Wrapped Model objects meaning properties that are\n                            exposed from the ViewModel that contain data that came from the model but are not Model object\n                            references directly. This is done to either simplify the structure of the data for presentation\n                            purposes or to transform model object values into something that's more conducive for what the\n                            View wants to present. One example would be if a model object contained an enumerated status\n                            flag. The ViewModel might transform this into a boolean flag to drive some aspect of the display\n                            such as showing an alert to the customer if it's in an overdue status. Another example would be\n                            that if the data needed for display was scattered in many places in the object model but you\n                            wanted to present a tabular summary of those bits of data through a collection property for data\n                            binding in a grid. These two approaches are called wrapping the model obejct.\n                        ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(551)}}),e._v(" "),a("figcaption",[e._v("Fig 01-012")])]),e._v(" "),a("li",[e._v("The last kind of data that a ViewModel will often manage is Client application state. Things\n                            like - is the client application online or offline, or is the user logged in. Flags or\n                            properties related to this state can be exposed by the ViewModel to drive the presentation of\n                            the View and may often come from .Net APIs about the client execution context or client side\n                            services that are managing that state.\n                        ")])]),e._v(" "),a("h3",[e._v("Client Services Responsibilities")]),e._v(" "),a("p",[e._v("\n                        Now there's one more layer that is not officially part of the MVVM pattern but is often used with\n                        MVVM to further separate concerns and avoid duplicate code – the Client services layer.\n                    ")]),e._v(" "),a("p",[e._v("Client services encapsulate any shared logic that spans more than one ViewModel. This could be\n                        utility code, data access code, security services and so on. So this layer logically sits underneath\n                        the ViewModels and can allow the ViewModels to remain decoupled from things that may change over\n                        time such as your data access strategy as well as any functionality that's needed in more than one\n                        ViewModel.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(552)}}),e._v(" "),a("figcaption",[e._v("Fig 01-013")])]),e._v(" "),a("p",[e._v("A common form of client service is one that insulates the ViewModel from the specific data access\n                        strategy based on the repository pattern. For example, your app might start out as a simple two-tier\n                        application that talks directly to the database to get and update the data for your module but then\n                        you decide to support a more distributed scenario and you need to change things so the client makes\n                        web service calls to get it's data.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(553)}}),e._v(" "),a("figcaption",[e._v("Fig 01-014")])]),e._v(" "),a("p",[e._v("\n                        If you have the code that reads and writes the data encapsulated in a client service the ViewModel\n                        and View should not have to change at all when this change is made. All the changes would be\n                        encapsulated in the implementation details of the client repository. Additionally, as part of\n                        reading and writing the data to whatever back-end you have, a repository can also act as a client\n                        side in memory cache for data that does not change frequently on the backend such as lookup lists.\n                        You can also cache transient changes made by the client that have not been persisted to the backend\n                        yet even if you navigate off the current View or ViewModel that first managed those changes.\n                    ")]),e._v(" "),a("p",[e._v("So the MVVM pattern forms a layered architecture for the client side, the model objects are produced\n                        by the client services layer and can be used, exposed or wrapped by the ViewModel layer. The View\n                        gains access to the data exposed by the ViewModel through databinding's.\n                    ")]),e._v(" "),a("h3",[e._v("Equation of MVVM")]),e._v(" "),a("p",[e._v("Another key concept to lock in your brain is what is sometimes called the Fundamental equation of\n                        MVVM:\n                    ")]),e._v(" "),a("p",[e._v("View.DataContext = ViewModel")]),e._v(" "),a("p",[e._v("The View’s DataContext property needs to be set to a reference to the ViewModel instance for that\n                        View. This allows data binding to light up and expose all the public properties of the ViewModel so\n                        that any element in the View can easily data bind to them. You will also hear this referred to as\n                        marrying the View and the ViewModel. There are a number of ways to satisfy the equation and I will\n                        show you how to hook it up in various ways throughout the course.\n                    ")]),e._v(" "),a("h3",[e._v("Who’s on First")]),e._v(" "),a("p",[e._v("\n                        That last high level structural topic I want to touch on is who constructs who? You will hear the\n                        terms View-First and ViewModel-First used by many when describing their approach to MVVM. What those\n                        terms refer to is which object gets constructed first and does it construct the other as part of its\n                        own construction or initialization process. You will typically use both of these in different parts\n                        of your application so it's not a matter of choosing one over the other for everything you do but\n                        it's another communication tool to be able to describe how things are hooked up for a given View and\n                        ViewModel in your application.\n                    ")]),e._v(" "),a("p",[e._v("In the case of View-First, not surprisingly, the View is constructed first. This is often the case\n                        for a View that is a Window or that is nested directly in a Window or parent view where the instance\n                        of the View is declared as a child element in the XAML of the parent. So the XAML parsing process is\n                        really what kicks of construction of the View. If you wire things up so that the ViewModel instance\n                        gets constructed and set as the DataContext to the View as part of that View construction process\n                        then you are doing View-First.\n                    ")]),e._v(" "),a("p",[e._v("If instead you construct an instance of the ViewModel explicitly in code somewhere and then you place\n                        the ViewModel instance into a hosting context that causes construction of the View, as you'll see\n                        happens with DataTemplates, then you're doing ViewModel-First construction. Some MVVM frameworks\n                        also support other forms of ViewModel-First construction, such as Prism and Caliburn which we'll\n                        touch on later\n                    ")]),e._v(" "),a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("\n                        We've covered a lot of important concepts surrounding MVVM in this module. You've learnt that the\n                        main reason that you want to use MVVM is that it will guide you in writing well structured and\n                        organized code for your client application that will make it much easier to maintain.\n                    ")]),e._v(" "),a("p",[e._v("Each part of the MVVM pattern:")]),e._v(" "),a("ul",[a("li",[e._v("Model")]),e._v(" "),a("li",[e._v("View")]),e._v(" "),a("li",[e._v("ViewModel")]),e._v(" "),a("li",[e._v("Client Services")])]),e._v(" "),a("p",[e._v("\n                        has specific responsibilities that guide you in putting the right kind of code in the right place.\n                        Finally, to get MVVM up and running you have to satisfy the fundamental equation of MVVM by setting\n                        the Views DataContext to a reference to the ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("View.DataContext = ViewModel;")])]),e._v(" "),a("figcaption",[e._v("Fig 01-015")])]),e._v(" "),a("p",[e._v("\n                        You can do this in a View-First or ViewModel-First way or by just having some code that constructs\n                        both and sets the DataContext appropriately. Through the rest of this course you'll see working\n                        examples of places you'll use each approach and why it's the appropriate choice for that scenario.\n                    ")]),e._v(" "),a("p",[e._v("In the next module we're going to dig in to some code and we'll show some examples of not using MVVM\n                        and using MVVM for the same simple View scenario so that you can see the differences and where the\n                        benefits start to come in.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[e._v("\n        "+e._s(e.pageTitle)+"\n    ")]),e._v(" "),e._m(0)])},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"panel-body"},[a("div",{staticClass:"row"},[a("div",{staticClass:"col-md-12"},[a("h2",[e._v("VSCommands")]),e._v(" "),a("p",[e._v("When I was using the TV as a second monitor I had a requirement to permanently display the editor screens\n                    in Visual Studio at a zoom level of around 120%.")]),e._v(" "),a("p",[e._v("The way I achieved this was by using a Visual Studio Extension called VSCommands:")]),e._v(" "),a("a",{attrs:{href:"http://visualstudiogallery.msdn.microsoft.com/a83505c6-77b3-44a6-b53b-73d77cba84c8"}},[e._v("VSCommands for Visual Studio 2012")]),e._v(" "),a("p",[e._v("Once installed a VSCommands menu item is available under the TOOLS menu. The Zoom settings can be set in\n                    the following screen:")]),e._v(" "),a("p",[a("img",{attrs:{src:n(109),width:"858",height:"445",alt:"Setting the Zoom level in VSCommands"}})]),e._v(" "),a("h2",[e._v("Visual Studio - Escaping the double quotes!")]),e._v(" "),a("p",[e._v('In Visual Studio I find myself editing text files by hand - XAML for example. Intellisense comes in very\n                    handy at this point. For example when I start typing an attribute in a XAML tag Visual Studio will provide\n                    me with a list of relevant options that match the text I have started to type. You can use the down arrow\n                    key to select the desired name from the popup window and then press tab to have it automatically inserted\n                    into the text editor along with the ="" text ready for you to type your attribute value in. However,\n                    after you have filled the attribute value in it is not easy to escape from the double quotes. ')]),e._v(" "),a("p",[e._v("In the end I went to TOOLS>OPTIONS>Environment>Keyboard and setup Edit.WordNext to have a shortcut of Shift+Space.\n                    Usually the same functionality is achieved with the Ctrl+RightArrow key but I find this new keyboard\n                    shortcut more intuitive.")]),e._v(" "),a("img",{attrs:{src:n(110),width:"757",height:"441",alt:"Escaping from the Intellisense double quotes by setting up a keyboard shortcut"}}),a("br"),e._v(" "),a("a",{attrs:{href:"http://stackoverflow.com/questions/1125929/keyboard-command-to-get-out-of-auto-generated-double-quotes"}},[e._v("Get out of autogenerated double quotes question on StackOverflow.")]),e._v(" "),a("h2",[e._v("Indent Guides")]),e._v(" "),a("p",[e._v("Puts dotted lines between your curly braces - you get the idea!")]),e._v(" "),a("a",{attrs:{href:"http://visualstudiogallery.msdn.microsoft.com/e792686d-542b-474a-8c55-630980e72c30"}},[e._v("Indent Guides Visual Studio Extension")]),e._v(" "),a("h2",[e._v("Commenting and Uncommenting code blocks")]),e._v(" "),a("p",[e._v("Ctrl + E C Comment out")]),e._v(" "),a("p",[e._v("Ctrl + E U Uncomment")]),e._v(" "),a("h1",[e._v("Navigating errors")]),e._v(" "),a("p",[e._v("Ctrl+Shift+f12 next error")]),e._v(" "),a("h1",[e._v("Always run Visual Studio as Administrator")]),e._v(" "),a("p",[e._v("Right click on:")]),e._v(" "),a("code",[e._v("C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\devenv.exe")]),e._v(" "),a("p",[e._v('and select troubleshoot compatibility. Next select troubleshoot program then tick "the program requires additional\n                    permissions"')]),e._v(" "),a("p",[e._v("Test the program and then click yes save these settings when prompted")]),e._v(" "),a("h1",[e._v("Turning on Additional Information during the Build Process")]),e._v(" "),a("p",[e._v("Tools>Options>Projects and Solutions>Build and Run")]),e._v(" "),a("p",[e._v("Set the MSBuild project build output verbosity option to the desired setting")])])])]);
}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Lists")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("In a lot of applications we have some kind of list. So in this lecture we are going to learn how to\n                        present data in beautiful interactive lists. You will learn how to handle selections, how to display\n                        context actions, how to implement pull to refresh and how to add a search bar on top of your list.\n                    ")]),e._v(" "),a("h3",[e._v("Populating a Basic List")]),e._v(" "),a("p",[e._v("Let's start with a very simple list. Create a new Content Page called BasicListPage.xaml. In the Xaml\n                        add a ListView element:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.BasicListPage">\n    <ListView x:Name="listView"/>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-001")])]),e._v(" "),a("p",[e._v("To populate this list with data we are going to go in the code-behind and create a list of names then\n                        set the ItemsSource of the listView:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public BasicListPage ()\n{\n    InitializeComponent ();\n\n    var names = new List<string>\n    {\n        "Mosh",\n        "John",\n        "Bob"\n    };\n\n    listView.ItemsSource = names;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-002")])]),e._v(" "),a("p",[e._v("If we run the app we can see our list populated with three names:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(683)}}),e._v(" "),a("figcaption",[e._v("Fig 05-003")])]),e._v(" "),a("p",[e._v("If you look closely you can see we have a feint border below each item - this is a separator. We can\n                        hide this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListView x:Name="listView" SeparatorVisibility="None" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-003")])]),e._v(" "),a("p",[e._v("or change it's colour:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListView x:Name="listView" SeparatorColor="Blue" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-004")])]),e._v(" "),a("p",[e._v("This is a pretty basic list but in most real world applications you want to display complex objects.\n                        That is the topic of the next lecture.\n                    ")]),e._v(" "),a("h3",[e._v("Cell Appearance")]),e._v(" "),a("p",[e._v("Let's say we want to display a list of contacts. Each contact can have a name, a status and an image.\n                    ")]),e._v(" "),a("p",[e._v("First create a new Content Page called ContactListPage.xaml and add a ListView element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.ContactListPage">\n    <ListView x:Name="listView" SeparatorColor="Blue" />\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-005")])]),e._v(" "),a("p",[e._v("Next create a new folder in our shared project called Models - this is where we will store all our\n                        domain classes (e.g. Contact class).\n                    ")]),e._v(" "),a("p",[e._v("Add a new public class to the Models folder called Contact.cs with three properties - Name, Status\n                        and ImageUrl:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class Contact\n{\n    public string Name { get; set; }\n    public string Status { get; set; }\n    public string ImageUrl { get; set; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-006")])]),e._v(" "),a("p",[e._v("Let's go to the code-behind for ContactListPage.xaml and initialize the listView:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ContactListPage ()\n{\n    InitializeComponent ();\n\n    listView.ItemsSource = new List<Contact>\n    {\n        new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n        new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status="Hey let\'s talk!" }\n    };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-007")])]),e._v(" "),a("p",[e._v("If we run the application now we see the following:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(684)}}),e._v(" "),a("figcaption",[e._v("Fig 05-008")])]),e._v(" "),a("p",[e._v("Each item appears as UdemyXamarinForms.Models.Contact. This is because by default the ListView calls\n                        the ToString() method on each item in the list. The default implementation of the ToString() method\n                        returns the fully qualified name of our class. We actually want to render the Name and Status\n                        properties for each Contact.\n                    ")]),e._v(" "),a("p",[e._v("Back in the Xaml edit the ListView to add an ItemTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListView x:Name="listView">\n    <ListView.ItemTemplate>\n        <DataTemplate>\n            <TextCell Text="{Binding Name}" Detail="{Binding Status}" />\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-009")])]),e._v(" "),a("p",[e._v("ListView has a property called ItemTemplate. Just like we have ItemsSource we have ItemTemplate -\n                        which is the Template for each item. Inside ItemTemplate we add a DataTemplate element. Inside\n                        DataTemplate we use the built-in TextCell template. If you want to have more control over the\n                        appearance of each item you can create a custom template which is the topic of the next lecture. The\n                        two built-in templates that we often use with ListView are TextCell and ImageCell.\n                    ")]),e._v(" "),a("p",[e._v("\n                        TextCell has a Text property which we supply with a Binding Expression. Notice we don't set the\n                        Source in this Binding Expression because when we initialize ItemsSource each Contact object will be\n                        the Binding Context for each item in the ListView. Remember Binding Context - we covered that in\n                        Chapter 02 - Xaml Essentials. I explained that if you have multiple elements that have reference the\n                        same object as their Binding Source you can clean up the code by setting the Binding Context on the\n                        Container.\n                    ")]),e._v(" "),a("p",[e._v("In this example each Contact will be the Binding Context for each item in the ListView. So in our\n                        Binding Expression we simply use the name of the target property - in this case Name.\n                    ")]),e._v(" "),a("p",[e._v("TextCell has another property called Detail which we supply with another Binding Expression this time\n                        binding to Status\n                    ")]),e._v(" "),a("p",[e._v("TextCell also has TextColor and DetailColor properties.")]),e._v(" "),a("p"),e._v(" "),a("p",[e._v("Let's run the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(685)}}),e._v(" "),a("figcaption",[e._v("Fig 05-010")])]),e._v(" "),a("p",[e._v("You can see each item has text and detail (where available).")]),e._v(" "),a("p",[e._v("Now if you want to add an image here we can use the other built-in template called ImageCell:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ImageCell Text="{Binding Name}" Detail="{Binding Status}" ImageSource="{Binding ImageUrl}"  />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-011")])]),e._v(" "),a("p",[e._v("Let's look at the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(686)}}),e._v(" "),a("figcaption",[e._v("Fig 05-012")])]),e._v(" "),a("p",[e._v("Now in the next lecture we are going to look at creating a Custom Cell to have full control over the\n                        appearance of each item.\n                    ")]),e._v(" "),a("h3",[e._v("Custom Cells")]),e._v(" "),a("p",[e._v("Alright, let's imagine you want to add a follow button to the right side of each element:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(687)}}),e._v(" "),a("figcaption",[e._v("Fig 05-013")])]),e._v(" "),a("p",[e._v("For this scenario we would need a Custom Template. Create a new Content Page called\n                        CustomTemplateContactListPage.xaml and add the following Xaml:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.CustomTemplateContactListPage">\n    <ListView x:Name="listView">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <ViewCell>\n                    <StackLayout Orientation="Horizontal">\n                        <Image Source="{Binding ImageUrl}"/>\n                        <StackLayout>\n                            <Label Text="{Binding Name}" />\n                            <Label Text="{Binding status}" TextColor="Gray" />\n                        </StackLayout>\n                        <Button Text="Follow" />\n                    </StackLayout>\n                </ViewCell>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-014")])]),e._v(" "),a("p",[e._v("Now let's run the application and see what happens:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(688)}}),e._v(" "),a("figcaption",[e._v("Fig 05-015")])]),e._v(" "),a("p",[e._v("It looks pretty messy. Let's try an workout what's going on here. First of all I'm going to apply a\n                        BackgroundColor to the outer StackLayout:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(689)}}),e._v(" "),a("figcaption",[e._v("Fig 05-016")])]),e._v(" "),a("p",[e._v("So for each item we can see that the StackLayout stretches to fill it's container and each item\n                        contains plenty of unused space. What we want to do is allocate that unused space to this vertical\n                        StackLayout:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(690)}}),e._v(" "),a("figcaption",[e._v("Fig 05-017")])]),e._v(" "),a("p",[e._v("This will push the Follow buttons to the right side of the screen. To achieve this set the inner\n                        StackLayout's HorizontalOptions to StartAndExpand (because I want this StackLayout to be\n                        horizontally on the left):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout HorizontalOptions="StartAndExpand">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-018")])]),e._v(" "),a("p",[e._v("Any option that ends with AndExpand means that any available space should be allocated to this\n                        element.\n                    ")]),e._v(" "),a("p",[e._v("Let's run the application again:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(691)}}),e._v(" "),a("figcaption",[e._v("Fig 05-019")])]),e._v(" "),a("p",[e._v("Ok, that's better! So we can see that any extra space is now allocated to our inner StackLayout.\n                        Another thing that will improve the UI is some padding because currently the image and the follow\n                        button are very close to the edges of the page.\n                    ")]),e._v(" "),a("p",[e._v("Remove the BackgroundColor from the outer StackLayout and instead apply Padding of 5 units:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(692)}}),e._v(" "),a("figcaption",[e._v("Fig 05-020")])]),e._v(" "),a("p",[e._v("Ok so we have some padding around the items but we have introduced another issue - the detail for the\n                        second item is leaking into the third item. The reason for this is that, by default, all rows in a\n                        ListView have the same height. We can easily fix this problem by setting the HasUnevenRows property\n                        on the ListView to true:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListView x:Name="listView" HasUnevenRows="True">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-021")])]),e._v(" "),a("p",[e._v("With this change the height of each item will be based on it's content. Let's take a look at the\n                        result:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(693)}}),e._v(" "),a("figcaption",[e._v("Fig 05-022")])]),e._v(" "),a("h3",[e._v("Grouping Items")]),e._v(" "),a("p",[e._v("Now let's see how to group items in a ListView. For example here I've grouped the contacts based on\n                        their first letter:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(694)}}),e._v(" "),a("figcaption",[e._v("Fig 05-023")])]),e._v(" "),a("p",[e._v("So currently we two groups - M & J. In iOS we also have an index on the right side of the screen:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(695)}}),e._v(" "),a("figcaption",[e._v("Fig 05-024")])]),e._v(" "),a("p",[e._v("This can be handy when going through a list with a lot of items.")]),e._v(" "),a("p",[e._v("Add a Content Page called GroupingItemsPage.xaml")]),e._v(" "),a("p",[e._v("Add another class to the Models folders called ContactGroup.cs")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class ContactGroup : List<Contact>\n{\n    public string Title { get; set; }\n    public string ShortTitle { get; set; }\n\n    public ContactGroup(string title, string shortTitle)\n    {\n        Title = title;\n        ShortTitle = shortTitle;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-025")])]),e._v(" "),a("p",[e._v("We derived the class from List of Contact so it's a List by nature. Next I'm going to define a couple\n                        of properties - Title and ShortTitle. The ShortTitle will be used to render the index on iOS.\n                    ")]),e._v(" "),a("p",[e._v("Next we initialize the properties in the Constructor.")]),e._v(" "),a("p",[e._v("Back in the code-behind for GroupingItemsPage.xaml instead of setting the listView.ItemsSource to a\n                        List of Contacts I want to set it to a list of ContactGroups:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public GroupingItemsPage ()\n{\n    InitializeComponent ();\n\n    listView.ItemsSource = new List<ContactGroup>\n    {\n        new ContactGroup("M", "M")\n        {\n            new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n\n        },\n        new ContactGroup("J", "J")\n        {\n            new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status="Hey let\'s talk!" }\n        }\n    };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-026")])]),e._v(" "),a("p",[e._v("We initialize the ContactGroup List with two new ContactGroups - one for M and one for J. Now because\n                        these ContactGroups are a List of Contacts we initialize them with Contact objects. We don't\n                        necessarily have to use single letters for the ContactGroup Titles. For example in another\n                        application you might have groups like Friends, Family, Colleagues, Acquaintances etc. However in\n                        this app because I am grouping Contacts by the first letter of their name I am using a single letter\n                        as the Group Title.\n                    ")]),e._v(" "),a("p",[e._v("In the Xaml file we need to set a couple properites in our ListView:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.GroupingItemsPage">\n    <ListView x:Name="listView" HasUnevenRows="True"\n              IsGroupingEnabled="true"\n              GroupDisplayBinding="{Binding Title}"\n              GroupShortNameBinding="{Binding ShortTitle}">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <TextCell Text="{Binding Name}" Detail="{Binding Status}" />\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-027")])]),e._v(" "),a("p",[e._v("For the ListView we add a property called IsGroupingEnabled and set it to true. The other property we\n                        set is called GroupDisplayBinding which we set to a Binding Expression that binds to the Title\n                        property of ContactGroup. The last property - GroupShortNameBinding provides the index functionality\n                        we discussed for iOS. We bind this property to ShortTitle of ContactGroup\n                    ")]),e._v(" "),a("p",[e._v("Let's look at the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(696)}}),e._v(" "),a("figcaption",[e._v("Fig 05-028")])]),e._v(" "),a("p",[e._v("Here is our grouped contacts. Next we will discuss working with selections.")]),e._v(" "),a("h3",[e._v("Handling Selections")]),e._v(" "),a("p",[e._v("Now let's see how we can work with Selections. Add another Content Page called\n                        HandlingSelectionsPage.xaml and add the following Xaml:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.HandlingSelectionsPage">\n    <ListView x:Name="listView"\n              ItemTapped="listView_ItemTapped"\n              ItemSelected="listView_ItemSelected"\n              IsGroupingEnabled="True"\n              GroupDisplayBinding="{Binding Title}"\n              GroupShortNameBinding="{Binding ShortTitle}">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <TextCell Text="{Binding Name}" Detail="{Binding Status}" />\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-029")])]),e._v(" "),a("p",[e._v("The Udemy video lecture shows a Xaml file withouth the Grouping attributes but if you miss these out\n                        you will see an error in the Output window saying that Name and Status were not found.\n                    ")]),e._v(" "),a("p",[e._v("We added a couple of events. The first is ItemTapped and we let Visual Studio create the default\n                        event handler.\n                    ")]),e._v(" "),a("p",[e._v("The other event we implement is called ItemSelected and again we let Visual Studio create the default\n                        event handler for us.\n                    ")]),e._v(" "),a("p",[e._v("ItemSelected has an argument called e which gives us information about the SelectedItem. e is of type\n                        object. Because we have bound our ListView to List of Contacts each item in the list is a Contact\n                        object. Which means I can get the Selected Item and cast it as a Contact storing the result in a\n                        variable called contact:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var contact = e.SelectedItem as Contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-030")])]),e._v(" "),a("p",[e._v("Next in this method we display an alert with the Name of the selected Contact:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DisplayAlert("Selected", contact.Name, "OK");')])]),e._v(" "),a("figcaption",[e._v("Fig 05-031")])]),e._v(" "),a("p",[e._v("For the Tapped event the e argument has a property called Item which gives us access to the item that\n                        has been tapped. So first we cast to a Contact and store the result in a variable called contact:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var contact = e.Item as Contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-032")])]),e._v(" "),a("p",[e._v("Then we call DisplayAlert with the Name of the tapped Contact:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var contact = e.Item as Contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-033")])]),e._v(" "),a("p",[e._v("Now if you run the application and tap a Contact you will get the Tapped alert then when you click ok\n                        you will get the Selected alert the first time you tap each Contact.\n                    ")]),e._v(" "),a("p",[e._v("Subsequent taps will only fire the Tapped event until you tap on another contact.")]),e._v(" "),a("p",[e._v("This differs to the behaviour specified in the video which says when we select a Contact we get the\n                        Selected event but not the Tapped event and then subsequent taps result in the Tapped event firing.\n                    ")]),e._v(" "),a("p",[e._v("Which event you want to work with depends on your application but quite often we use the Selected\n                        event. A real world example of this is where a user taps an item to select it perhaps we want to\n                        navigate them to a second page where we can see more detail about an item.\n                    ")]),e._v(" "),a("p",[e._v("If you want to disable Selection in the ItemSelected handler simply set listView.SelectedItem to\n                        null:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void listView_ItemSelected(object sender, SelectedItemChangedEventArgs e)\n{\n    var contact = e.SelectedItem as Contact;\n    DisplayAlert("Selected", contact.Name, "OK");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-034")])]),e._v(" "),a("p",[e._v("Now you will only see the Tapped event and the item will not be Selected (no grey background).")]),e._v(" "),a("p",[e._v("If we didn't handle the Tapped event either basically by commenting out the two lines inside the\n                        ItemTapped event handler:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void listView_ItemTapped(object sender, ItemTappedEventArgs e)\n{\n    //var contact = e.Item as Contact;\n    //DisplayAlert("Tapped", contact.Name, "OK");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-035")])]),e._v(" "),a("p",[e._v("The list wouldn't respond to the Tap or Selected events at all.")]),e._v(" "),a("p",[e._v("Next we are going to discuss context actions.")]),e._v(" "),a("h3",[e._v("Context Actions")]),e._v(" "),a("p",[e._v("Alright - now let's take our ListView to the next level. If I put my finger to the right of an item\n                        and drag it to the left I get two options - Call and Delete:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(697)}}),e._v(" "),a("figcaption",[e._v("Fig 05-036")])]),e._v(" "),a("p",[e._v("These are known as Context Actions. Let's see how to implement these Context Actions. Add another\n                        Content Page called ContextActionsPage.xaml:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage\n        Padding="0, 20, 0, 0"\n        xmlns="http://xamarin.com/schemas/2014/forms"\n        xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n        x:Class="UdemyXamarinForms.ContextActionsPage">\n    <ListView x:Name="listView">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <TextCell Text="{Binding Name}" Detail="{Binding Status}" >\n                    <TextCell.ContextActions>\n                        <MenuItem Text="Call" Clicked="Call_Clicked" CommandParameter="{Binding .}" />\n                        <MenuItem Text="Delete" Clicked="Delete_Clicked" CommandParameter="{Binding .}"  IsDestructive="True"/>\n                    </TextCell.ContextActions>\n                </TextCell>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-037")])]),e._v(" "),a("p",[e._v("We use Property Element Syntax to initialize the ContextAction property of TextCell. Inside the\n                        element we add two MenuItems - Call and Delete. We add an event handler for the Click event for each\n                        MenuItem.\n                    ")]),e._v(" "),a("p",[e._v("For the Delete MenuItem we set another property called IsDestructive to true - this applies different\n                        styling to the item (it turns the background Red).\n                    ")]),e._v(" "),a("p",[e._v("If we were to use a custom ViewCell or an ImageCell instead of the TextCell we are using here the\n                        implementation would be exactly the same.\n                    ")]),e._v(" "),a("p",[e._v("Next we implement the event handlers in the code-behind First of all Call_Clicked:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void Call_Clicked(object sender, EventArgs e)\n        {\n            var menuItem = sender as MenuItem;\n            var contact = menuItem.CommandParameter as Contact;\n\n            DisplayAlert("Call", contact.Name, "OK");\n\n        }')])]),e._v(" "),a("figcaption",[e._v("Fig 05-038")])]),e._v(" "),a("p",[e._v("If we look at the signature of the method we will see that unlike the Selected event our EventArgs\n                        here do not carry any information about the current item - so how do we get a reference to that\n                        item? We can use sender which is actually a MenuItem because this is the item the triggers the\n                        event. So the first thing we do is cast sender to MenuItem. How do we get from a MenuItem to a\n                        Contact? MenuItem has a property called CommandParameter. In the Xaml we bound the parameter to a\n                        contact object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('CommandParameter="{Binding .}"')])]),e._v(" "),a("figcaption",[e._v("Fig 05-039")])]),e._v(" "),a("p",[e._v("We bind the CommandParameter to any property of the Contact (Name, Id etc.) but in this example we\n                        use the . (period) syntax to bind it to the whole Contact object which will give us access to all\n                        properties. We do the same with the Delete MenuItem.\n                    ")]),e._v(" "),a("p",[e._v("Next we assign a new variable called contact to the CommandParameter property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var contact = menuItem.CommandParameter as Contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-040")])]),e._v(" "),a("p",[e._v("Then we just display an alert:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' DisplayAlert("Call", contact.Name, "OK");')])]),e._v(" "),a("figcaption",[e._v("Fig 05-041")])]),e._v(" "),a("p",[e._v("In the delete handler we again use the CommandParameter to get access to the Contact object. This\n                        time we will combine the casting into one line:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var contact = (sender as MenuItem).CommandParameter as Contact;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-042")])]),e._v(" "),a("p",[e._v("We want to remove the item from the list when the Delete MenuItem is clicked. If we scroll to the\n                        constructor and have a look at the ItemsSource:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(698)}}),e._v(" "),a("figcaption",[e._v("Fig 05-043")])]),e._v(" "),a("p",[e._v("We will see it is of type IEnumerable which is the interface implemented by almost all Collections.\n                        IEnumerable is a very lightweight interface. It only allows us to iterate the collection - it\n                        doesn't have methods to add or remove items from a Collection. So how do we remove a Contact from\n                        our List? Well if we declare a private field:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private List<Contact> _contacts;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-044")])]),e._v(" "),a("p",[e._v("Back in the constructor instead of directly setting the ItemsSource we assign our list to the\n                        _contacts variable and then separately assign the list.ItemsSource to our _contacts variable (of\n                        type List<Contact>):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ContextActionsPage ()\n{\n    InitializeComponent ();\n\n    _contacts = new List<Contact>\n    {\n            new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n            new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status="Hey let\'s talk!" }\n    };\n\n    listView.ItemsSource = _contacts;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-045")])]),e._v(" "),a("p",[e._v("We also have access to the _contacts field from our Delete handler. So we can now use the Remove\n                        method of the List type to remove the Contact:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("_contacts.Remove(contact);")])]),e._v(" "),a("figcaption",[e._v("Fig 05-046")])]),e._v(" "),a("p",[e._v("If we run the application and click delete on a Contact the contact still remains in the List. If we\n                        we debut the application and look at the _contacts List after the Remove method runs you will see\n                        that the Contact is in fact removed successfully from the List - the object in memory is updated.\n                        The problem is that the ListView is unaware of this because when we remove an item from a List it\n                        does not fire an event and notify other objects about the removal. To solve this problem we need to\n                        use a special collection type called ObservableCollection. So let's change the _contacts field from\n                        List<Contact> to ObservableCollection<Contact>:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("private ObservableCollection<Contact> _contacts;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-047")])]),e._v(" "),a("p",[e._v("Also, you will need to change the list initialization in the Constructor from List to\n                        ObservableCollection.")]),e._v(" "),a("p",[e._v("You will need to resolve the System.Collections.ObjectModel namespace. Now, when we add or remove\n                        an item from this collection it will fire an event notifying any subscribers interested in this\n                        event. The ListView class in XamarinForms is able to work with this ObservableCollection - we don't\n                        have to write any code for it. So if we use an ObservableCollection under the hood ListView will\n                        be notified and refresh itself.\n                    ")]),e._v(" "),a("p",[e._v("Now if you run the application the item should be removed from the UI as well as the object in\n                        memory.")]),e._v(" "),a("p",[e._v("Next we will look at how to refresh a list by pulling it down.")]),e._v(" "),a("h3",[e._v("Pull to Refresh")]),e._v(" "),a("p",[e._v("In many applications we can refresh a list by swiping (usually with the thumb) from the top of\n                        the screen to the bottom. Let's discuss how to implement this in XamarinForms. First create a new\n                        Content Page called PullToRefreshPage.xaml:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                 x:Class="UdemyXamarinForms.PullToRefreshPage">\n    <ListView x:Name="listView" IsPullToRefreshEnabled="True" Refreshing="listView_Refreshing">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <TextCell Text="{Binding Name}" Detail="{Binding Status}" />\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-048")])]),e._v(" "),a("p",[e._v("With the following code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public partial class PullToRefreshPage : ContentPage\n{\n    public PullToRefreshPage ()\n    {\n        InitializeComponent ();\n\n        listView.ItemsSource = GetContacts();\n    }\n\n    private void listView_Refreshing(object sender, EventArgs e)\n    {\n        listView.ItemsSource = GetContacts();\n    }\n\n    List<Contact> GetContacts()\n    {\n        return new List<Contact> {\n            new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n            new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status = "Hey let\'s talk!" }\n        };\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-049")])]),e._v(" "),a("p",[e._v("The first thing we do in the Xaml is set the IsPullToRefresh attribute to true. Next we add the\n                        Refreshing event and point to an event handler.")]),e._v(" "),a("p",[e._v("In the code-behind we refactor the code in the Constructor which initializes the list out into a\n                        method called GetContacts().")]),e._v(" "),a("p",[e._v("We call the GetContacts method again in the Refreshing event handler.")]),e._v(" "),a("p",[e._v("If we run the application at this stage and pull down the list we just get an activity indicator\n                        which just sits  there.")]),e._v(" "),a("p",[e._v("To make the activity indicator dissapear once we have refreshed the list we should either set\n                        listView.IsRefreshing to false or call the listView.EndRefresh() method. The EndRefresh method\n                        internally sets IsRefreshing to false. Which option you choose is down to personal preference.")]),e._v(" "),a("p",[e._v("If we run the application again now and pull down the list to refresh - the list refreshes and\n                        the activity indicator disappears.")]),e._v(" "),a("p",[e._v("Next we will look at how to add a search bar to the top of the list.")]),e._v(" "),a("h3",[e._v("Search Bar")]),e._v(" "),a("p",[e._v("Finally we will look at how to add a search bar to the top of the list that will filter the list\n                        based on the search criteria we add.")]),e._v(" "),a("p",[e._v("Add a new Content Page called SearchBarPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage\n    Padding="0, 20, 0, 0"\n    xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.SearchBarPage">\n    <StackLayout>\n        <SearchBar Placeholder="Search..." TextChanged="SearchBar_TextChanged" x:Name="searchBar"/>\n        <ListView x:Name="listView">\n            <ListView.ItemTemplate>\n                <DataTemplate>\n                    <TextCell Text="{Binding Name}" Detail="{Binding Status}" />\n                </DataTemplate>\n            </ListView.ItemTemplate>\n        </ListView>\n    </StackLayout>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-050")])]),e._v(" "),a("p",[e._v("With the following code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('\tpublic partial class SearchBarPage : ContentPage\n{\n    public SearchBarPage ()\n    {\n        InitializeComponent ();\n\n        listView.ItemsSource = GetContacts();\n        searchBar.HeightRequest = 25;\n    }\n\n    IEnumerable<Contact> GetContacts(string searchText = null)\n    {\n        var contacts = new List<Contact> {\n            new Contact { Name = "Mosh", ImageUrl = "http://lorempixel.com/100/100/people/1" },\n            new Contact { Name = "John", ImageUrl = "http://lorempixel.com/100/100/people/2", Status = "Hey let\'s talk!" }\n        };\n\n        if (String.IsNullOrWhiteSpace(searchText))\n        {\n            return contacts;\n        }\n        else\n        {\n            return contacts.Where(c => c.Name.StartsWith(searchText));\n        }\n    }\n\n    private void SearchBar_TextChanged(object sender, TextChangedEventArgs e)\n    {\n        listView.ItemsSource = GetContacts(e.NewTextValue);\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-051")])]),e._v(" "),a("p",[e._v("Firstly, in the Xaml, we added a SearchBar element. Now because we have multiple elements on this\n                        page we need to wrap them in a StackLayout so we do that next.")]),e._v(" "),a("p",[e._v("The SearchBar as several properties that may be of interest:")]),e._v(" "),a("ul",[a("li",[e._v('Placecholder (which in this example we set to "Search...")')]),e._v(" "),a("li",[e._v("PlaceholderColor")]),e._v(" "),a("li",[e._v("TextColor")]),e._v(" "),a("li",[e._v("FontSize")]),e._v(" "),a("li",[e._v("FontFamily")])]),e._v(" "),a("p",[e._v("Next we add the TextChanged event to implement searching.")]),e._v(" "),a("p",[e._v("In the code-behind we call GetContacts in the Constructor (as in previous demos) to initialize\n                        the listView.")]),e._v(" "),a("p",[e._v("To implement searching we added a searchString parameter to the GetContacts method (we make it\n                        optional by setting it to null in the method definition). Next we check if the searchText is\n                        EmptyOrWhitespace - in this case we return all contacts.\n                    ")]),e._v(" "),a("p",[e._v("If a searchText has been specified then we use LINQ to filter our List. The Where method returns\n                        an IEnumerable. This is why we have changed our GetContacts method to return an IEnumerable where it\n                        previously returned a List. We could have added ToList onto the end of our LINQ statement - however\n                        in this instance we don't really need the List functionality. In the constructor we simply call\n                        GetContacts() to get an IEnumerable of Contact. That's the data type for ItemsSource.")]),e._v(" "),a("p",[e._v("One more thing to note is that in this demo you are hard coding a list of Contacts as part of the\n                        class. In a real world application that's rarely the case. Usually the Contact data would be stored\n                        locally on the mobile device or somewhere else that we can access using a remote service.")]),e._v(" "),a("p",[e._v("In our TextChanged event handler we have an argument - TextChangedEventArgs e. From this we can\n                        access the NewTextValue and OldTextValue of the searchBar. We get the NewTextValue and pass it\n                        to our GetContacts method as the searchText. Remember, this returns an IEnumerable of Contact\n                        which we can assign to our listView.ItemsSource.\n                    ")]),e._v(" "),a("p",[e._v("Now run the application and you should see the application filtering when you type text into the\n                        SearchBar.")]),e._v(" "),a("p",[e._v("There is another event on the SearchBar - SearchButtonPressed which will fire when the Search\n                        button is clicked to filter the records. These days the TextChanged event is generally the\n                        preferred method.")]),e._v(" "),a("p",[e._v("There is currently a known bug in XamarinForms that affects Android devices running Nougat 7.0 which\n                        you can find details of "),a("a",{attrs:{href:"https://forums.xamarin.com/discussion/79446/is-there-support-for-searchbar-on-nougat-7-0"}},[e._v("\n                            here")]),e._v(". To workaround this I added a HeightRequest for the SearchBar - without this the\n                        SearchBar was not visible on my Motorola G4.")]),e._v(" "),a("h3",[e._v("Cheat Sheet")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Exercise - Airbnb's Recent Searches")]),e._v(" "),a("p")])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Handling Image Upload")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Image Upload Overview")]),e._v(" "),a("p",[e._v("We've now got the ability to render out an image on the screen or in theory all the images that\n                        we fetch from the Imgur API but we still don't have the ability to upload images directly\n                        through our application. So in this section we're going to start working on the UploadForm.\n                    ")]),e._v(" "),a("p",[e._v("Let's review the mockup:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(214)}}),e._v(" "),a("figcaption",[e._v("Fig 08-001")])]),e._v(" "),a("p",[e._v("A user should either be able to drag and drop an image onto the element in the center of the page\n                        to upload it or click the element to display a file select screen.\n                    ")]),e._v(" "),a("p",[e._v("The Imgur API "),a("a",{attrs:{href:"https://apidocs.imgur.com/"}},[e._v("documentation")]),e._v(" provides details on\n                        uploading images. To upload an image we are going to make a POST request to https://api\n                        .imgur.com/3/image that contains an image property. Image is going to be a key in the body of\n                        the request that we make. The value for that property is going to be an actual image file. This\n                        endpoint only allows uploading one image at a time so if we want to upload 5 images we will need\n                        to make 5 separate requests.\n                    ")]),e._v(" "),a("h3",[e._v("Upload Form HTML")]),e._v(" "),a("p",[e._v("In the last section we started talking about the implementation of our UploadForm. We going to\n                        talk about the raw Html involved in building the drag and drop element. The following diagram\n                        illustrates:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(215)}}),e._v(" "),a("figcaption",[e._v("Fig 08-002")])]),e._v(" "),a("p",[e._v("The blue box represents a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" and we're going to be applying all\n                        our styling to that "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" - so the border, border radius,\n                        dimensions, text centering etc. Inside the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" there will two\n                        child elements. One will be a "),a("code",{staticClass:"prettyprint"},[e._v("span")]),e._v(" that will contain some\n                        amount of text inside it. The other will be an invisible input element which will provide the\n                        drag and drop functionality and click the element.\n                    ")]),e._v(" "),a("p",[e._v("Add the following code to the template of the UploadForm component:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="dropper">\n        <input type="file" />\n        <span>Drag file here!</span>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 08-003")])]),e._v(" "),a("p",[e._v("We're going to add one or two quick style rules to this component and then preview it in the\n                        browser:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style>\n    .dropper {\n        height: 30vh;\n        border: 2px dashed black;\n        border-radius: 5px;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 08-004")])]),e._v(" "),a("p",[e._v("The height of 30vh refers to the view height or the view window exposed in the browser which\n                        means it will essentially occupy 30 percent of the overall height of the browser. After that we\n                        setup our border and border radius.\n                    ")]),e._v(" "),a("p",[e._v("Refresh the browser and you should see the styling:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(216)}}),e._v(" "),a("figcaption",[e._v("Fig 08-005")])]),e._v(" "),a("p",[e._v("So now we've got the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" that is taking up pretty much the whole\n                        width of the screen. Also, notice that if I reduce the height of the browser the height of the\n                        div will reduce as well to approx 30% of the available height.\n                    ")]),e._v(" "),a("h3",[e._v("Styling the Upload Form")]),e._v(" "),a("p",[e._v("In this section we are going to continue working on our UploadForm by adding some additional\n                        styling.\n                    ")]),e._v(" "),a("p",[e._v("We will add some styling provided by SemanticUI for margins to our App component so that the\n                        styling gets applied to all the elements in our application:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div>\n        <AppHeader></AppHeader>\n        <div class="ui container">\n            <router-view></router-view>\n        </div>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 08-005")])]),e._v(" "),a("p",[e._v("So we wrapped the "),a("code",{staticClass:"prettyprint"},[e._v("router-view")]),e._v(" in a single "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with a class of "),a("code",{staticClass:"prettyprint"},[e._v("ui container")]),e._v("\n                        which is provided by SemanticUI and should add the desired styling.\n                    ")]),e._v(" "),a("p",[e._v("Next we will fix up the Upload panel in UploadForm. In the style tag at the bottom add the\n                        following:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style>\n    .dropper {\n        height: 30vh;\n        border: 2px dashed black;\n        border-radius: 5px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 08-006")])]),e._v(" "),a("p",[e._v("If you preview in the browser you should see the content is now centered. The "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" tag is still visible. We will add some styling to make the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" invisible and stretch it to fill the whole dropper "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(":\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style>\n    .dropper {\n        height: 30vh;\n        border: 2px dashed black;\n        border-radius: 5px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        position: relative;\n    }\n    input {\n        width: 100%;\n        height: 30vh;\n        position: absolute;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 08-007")])]),e._v(" "),a("p",[e._v("We add some styling rules for "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" to resize it's width and\n                        height. We add a "),a("code",{staticClass:"prettyprint"},[e._v("position")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("\n                            absolute")]),e._v(" and then on the dropper class we add a "),a("code",{staticClass:"prettyprint"},[e._v("position ")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("relative")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("Preview in the browser:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(217)}}),e._v(" "),a("figcaption",[e._v("Fig 08-008")])]),e._v(" "),a("p",[e._v("and you'll see that the "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" has moved to the top left-hand\n                        side. If you hover over anywhere on the dropper "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(' you will\n                        see the "No file chosen" notification. That means the '),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v("\n                        element is now filling up the entire height and width of the div. If you click anywhere in the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" a file selector will be displayed.\n                    ")]),e._v(" "),a("p",[e._v("To change the visibility of the input element add an opacity of 0 to it's styling:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("input {\n    width: 100%;\n    height: 30vh;\n    position: absolute;\n    opacity: 0;\n}")]),e._v(" "),a("figcaption",[e._v("Fig 08-009")])]),e._v(" "),a("p",[e._v("We will add a background color to our dropper div to make it clear that the element is\n                        interactive:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v(".dropper: hover {\n    background-color: #eee;\n}")]),e._v(" "),a("figcaption",[e._v("Fig 08-010")])]),e._v(" "),a("h3",[e._v("The Upload Images Action")]),e._v(" "),a("p",[e._v("We will do some work on the Image module design. Inside images.js add the uploadImages action:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("async uploadImages({ commit }, images) {\n    console.log(images);\n}")]),e._v(" "),a("figcaption",[e._v("Fig 08-011")])]),e._v(" "),a("p",[e._v("We specify our first options argument, as usual, specifying commit to allow us to execute\n                        mutations. As a second argument add in an argument called "),a("code",{staticClass:"prettyprint"},[e._v("images ")]),e._v(" which we will upload to Imgur. We add a temporary\n                        console.log to give us some information about the "),a("code",{staticClass:"prettyprint"},[e._v("images")]),e._v("\n                        object.\n                    ")]),e._v(" "),a("p",[e._v("In the UploadForm component we will map the uploadImages action so we can call it anytime we\n                        select a file. Firstly, import mapActions:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import { mapActions } from 'vuex';")]),e._v(" "),a("figcaption",[e._v("Fig 08-012")])]),e._v(" "),a("p",[e._v("Then add this to our methods property to give us access to the "),a("code",{staticClass:"prettyprint"},[e._v("\n                        uploadImages")]),e._v(" action:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'UploadForm',\n    methods: mapActions(['uploadImages']);\n}")]),e._v(" "),a("figcaption",[e._v("Fig 08-013")])]),e._v(" "),a("h3",[e._v("File Change Event")]),e._v(" "),a("p",[e._v("Now that we've added in our "),a("code",{staticClass:"prettyprint"},[e._v("uploadImages")]),e._v(" action we can make sure\n                        that this action gets called anytime someone selects a file from our "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v("\n                        tag. Add the following binding to the input tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="dropper">\n        <input type="file" @change="uploadImages" />\n        <span>Drag file here!</span>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 08-014")])]),e._v(" "),a("p",[e._v("So we watch for a "),a("code",{staticClass:"prettyprint"},[e._v("change")]),e._v(" event which signals the selection of\n                        that input element has changed. Anytime that occurs we're going to run the "),a("code",{staticClass:"prettyprint"},[e._v("uploadImages")]),e._v(" method.\n                    ")]),e._v(" "),a("p",[e._v("In the browser click the upload element and select a file. You'll notice the console.log that we\n                        get from our action is not actually a list of images at all:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(218)}}),e._v(" "),a("figcaption",[e._v("Fig 08-015")])]),e._v(" "),a("p",[e._v("Inside the event object is a property called target with a value of input which contains a\n                        property called files. This is a file list object which contains a reference to every file that\n                        the user just selected. We will use this object to specify the images which the user wants to\n                        upload to the Imgur API.\n                    ")]),e._v(" "),a("p",[e._v("One other point to consider is that in addition to clicking on the upload element we also want\n                        the user to be able to drag and drop files to upload. If we try dragging and dropping a file\n                        onto the element the "),a("code",{staticClass:"prettyprint"},[e._v("changed")]),e._v(" event will still fire and we still\n                        get the same level of information so both methods should work for uploading files.\n                    ")]),e._v(" "),a("h3",[e._v("Accepting Multiple Image Files")]),e._v(" "),a("p",[e._v("Now we will add some functionality to allow multiple images to be uploaded. First we need to\n                        change the second argument that the uploadImages action receives so that instead of passing in\n                        the whole event object we pass in just the file list object. To do this change the event handler\n                        in UploadForm from the existing syntax:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<input type="file" @change="uploadImages" />')]),e._v(" "),a("figcaption",[e._v("Fig 08-016")])]),e._v(" "),a("p",[e._v("Throughout this course we've used the exact same syntax every time - the "),a("code",{staticClass:"prettyprint"},[e._v("@")]),e._v(" sign followed by the name of the event followed by the method\n                        to call when triggered. We can change the syntax of this statement to send back just the part of\n                        the event object that we are interested in:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<input type="file" @change="uploadImages($event.target.files)" />')]),e._v(" "),a("figcaption",[e._v("Fig 08-017")])]),e._v(" "),a("p",[e._v("Let's explain the reason for the "),a("code",{staticClass:"prettyprint"},[e._v("$")]),e._v(" sign. If ommitted the "),a("code",{staticClass:"prettyprint"},[e._v("$")]),e._v(" sign and just wrote out "),a("code",{staticClass:"prettyprint"},[e._v("event\n                        .target.files")]),e._v(" then anytime the change event is triggered Vue would try to look for an\n                        object, variable, function or something tied to our component called event - which it won't find\n                        so it will throw an error. The "),a("code",{staticClass:"prettyprint"},[e._v("$")]),e._v(" sign tells Vue that we want to\n                        take the "),a("code",{staticClass:"prettyprint"},[e._v("event")]),e._v(" object from triggering the "),a("code",{staticClass:"prettyprint"},[e._v("change")]),e._v(" event and pass through the "),a("code",{staticClass:"prettyprint"},[e._v("\n                            data.files")]),e._v(" property to the "),a("code",{staticClass:"prettyprint"},[e._v("uploadImages")]),e._v(" action.\n                    ")]),e._v(" "),a("p",[e._v("Now, in the browser, if we do a refresh, select an image and then look at the console.log again\n                        we should see just the FileList:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(219)}}),e._v(" "),a("figcaption",[e._v("Fig 08-018")])]),e._v(" "),a("p",[e._v("Next we will add the functionality to upload multiple images. In UploadForm add the following\n                        code to the "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="dropper">\n        <input\n            type="file"\n            @change="uploadImages($event.target.files)"\n            multiple\n            accept="image/*" />\n        <span>Drag file here!</span>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 08-019")])]),e._v("\n                    <\n                    "),a("p",[e._v("Now in the file select Shift+click should allow you to select multiple files. Also you should\n                        only see image files in the file selector.\n                    ")]),e._v(" "),a("h3",[e._v("The Path to Upload")]),e._v(" "),a("p",[e._v("We're now inside of our "),a("code",{staticClass:"prettyprint"},[e._v("uploadImages")]),e._v(" action and we're just about\n                        ready to actually take this list of images and upload them to the Imgur API. Before we do that\n                        let's check the Imgur API documentation for something we did not look at previously in relation\n                        to the Image Upload API endpoint. If you scroll down to the HEADERS section you'll notice that\n                        one of the headers that we have to apply to the API call is the Bearer with the access_token\n                        property on it. You can ignore the other header - Authorization Client ID - we would only use\n                        this header if we wanted to upload an image tied to our developer account. That's not what we're\n                        trying to do. We are trying to upload this image tied to a user's account - so we will use the\n                        Authorization Bearer with the access_token property.\n                    ")]),e._v(" "),a("p",[e._v("So inside the uploadImages action in the Image module we are going to perform the following\n                        steps:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Get the access token")]),e._v(" "),a("li",[e._v("Call the Imgur API and upload the list of images")]),e._v(" "),a("li",[e._v("Redirect the user to the ImageList component.")])]),e._v(" "),a("p",[e._v("We are not going to write the actual upload logic inside of the uploadImages action, instead we\n                        will put the code in the api imgur.js file which is where we've been placing all of our logic\n                        that reaches out to Imgur so far.\n                    ")]),e._v(" "),a("p",[e._v("First let's get the access_token from the Auth module, exactly like we did in the "),a("code",{staticClass:"prettyprint"},[e._v("fetchImages")]),e._v(" action. So rather than making use of the "),a("code",{staticClass:"prettyprint"},[e._v("commit")]),e._v(" function we will swap it for "),a("code",{staticClass:"prettyprint"},[e._v("\n                        rootState")]),e._v(" which gives us access to all the state that contained inside of our Vuex store.\n                    ")]),e._v(" "),a("p",[e._v("So we're going to reach over to the Auth module and get our access_token out of that:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const { token } = rootState.auth;")]),e._v(" "),a("figcaption",[e._v("Fig 08-020")])]),e._v(" "),a("p",[e._v("Next we're going to call our api imgur module to do the actual file upload. We will define a\n                        function called "),a("code",{staticClass:"prettyprint"},[e._v("uploadImages")]),e._v(" shortly but for the moment let's\n                        just add the function call to the "),a("code",{staticClass:"prettyprint"},[e._v("uploadImages")]),e._v(" action:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("await api.uploadImages(images, token);")]),e._v(" "),a("figcaption",[e._v("Fig 08-021")])]),e._v(" "),a("h3",[e._v("Attaching Images with FormData")]),e._v(" "),a("p",[e._v("In the imgur.js api file add a new function called uploadImages:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("uploadImages(images, token) {\n    Array.from(images).map(image => {\n        const formData = new FormData();\n        formData.append('image', image);\n\n        return axios.post(`$(ROOT_URL}/3/image`, formData, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n    });\n}")]),e._v(" "),a("figcaption",[e._v("Fig 08-022")])]),e._v(" "),a("p",[e._v("So first we take the images file list object and turn it into an array - currently it is an array\n                        like object (this is what it is known as in the JavaScript world). We use "),a("code",{staticClass:"prettyprint"},[e._v("Array.from")]),e._v(" and pass in the images file list object. We then\n                        call the "),a("code",{staticClass:"prettyprint"},[e._v("map")]),e._v(" function and use it to iterate over all the images\n                        stored inside of the file list object.\n                    ")]),e._v(" "),a("p",[e._v("Inside the map function we're going to take every image and we're going to do a little bit of\n                        work on it to attempt to upload it to the Imgur API. Regarding uploading the image if you\n                        revisit the "),a("code",{staticClass:"prettyprint"},[e._v("Imgur documentation")]),e._v(" you'll notice that we have to\n                        provide a key of "),a("code",{
staticClass:"prettyprint"},[e._v("image")]),e._v(" which should be a binary file or base64\n                        data - we have to attach the actual image object itself to the request. If you remember back\n                        in the console when we logged out the file list we did not get direct access to the file\n                        itself - instead we got access to kind of a reference to the file instead.\n                    ")]),e._v(" "),a("p",[e._v("In order to take the actual image file and attach it to the request we make use\n                        of something called a "),a("code",{staticClass:"prettyprint"},[e._v("formData")]),e._v(" object. This object is part\n                        of the standard vanilla Javascript spec and it allows us to take a reference to the file and\n                        attach the real file to the post request that we're about to make to the Imgur API:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const formData = new FormData();")]),e._v(" "),a("figcaption",[e._v("Fig 08-023")])]),e._v(" "),a("p",[e._v("Then directly after that we're going to take the formData object and we're going to attach\n                        the reference to the image that was provided to our map function: ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("formData.append('image', image);")]),e._v(" "),a("figcaption",[e._v("Fig 08-024")])]),e._v(" "),a("p",[e._v("I'm using image because if you look back at the Imgur API documentation it specifically\n                        stated that we need to supply a key of image that contains the actual image file itself.")]),e._v(" "),a("p",[e._v("Next we make the actual POST request to the Imgur API that's going to take that formData\n                        object and send off the entire object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("return axios.post(`$(ROOT_URL}/3/image`, formData, {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            });")]),e._v(" "),a("figcaption",[e._v("Fig 08-025")])]),e._v(" "),a("p",[e._v("So first we use the "),a("code",{staticClass:"prettyprint"},[e._v("return")]),e._v(" keyword to make sure we return the\n                        request object. Then we write axios.post and supply the Url as the first argument. As the\n                        second argument we supply the formData object. Then, as the third object, we pass in the\n                        headers, as we did previously, along with the access_token that will give us access to modify\n                        our users account.\n                    ")]),e._v(" "),a("p",[e._v("Ok so that's just about it. The code above is going to take all of our images from inside the\n                        images list, it's going to create a formData object, attach our image to that object which is\n                        going to turn the image reference to a file itself, and then it's going to take the entire\n                        formData and post it off to the Imgur API. It will then repeat the same process again for\n                        every image inside of the image list object.")]),e._v(" "),a("p",[e._v("In the next section we will discuss a small error in logic that we have inside the above\n                        function as it stands.")]),e._v(" "),a("h3",[e._v("Concurrent Uploads")]),e._v(" "),a("p",[e._v("In the last section we put together the uploadImages function that loops over our list of\n                        images and try to upload each one - one at a time. Please note that the upload action is\n                        going to be running in parallel. So even though we use the terminology one at a time that we\n                        are going to upload on image and then move onto the next - it's going to try and upload every\n                        image at the exact same time.\n                    ")]),e._v(" "),a("p",[e._v("That's good, but there is one point we need to be aware of. We need to make sure that this\n                        uploadImages function returns exactly one promise that represents all of these separate\n                        image requests or all these separate uploads so that any other function that calls\n                        uploadImages will know when the overall upload is complete. To do so we are going to take the\n                        list of promises that get's return from the map function:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("Array.from(images).map(image =>")]),e._v(" "),a("figcaption",[e._v("Fig 08-026")])]),e._v(" "),a("p",[e._v("So notice how we are running map function and inside the body we return the result of our\n                        POST request:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("return axios.post(`${ROOT_URL}/3/image`, formData, {\n    headers: {\n        Authorization: `Bearer ${token}`\n    }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 08-027")])]),e._v(" "),a("p",[e._v("That return value is going to be a promise that represents the upload request itself. So\n                        from the entire statement we're going to get an array of promises each of which represents\n                        one individual image upload. So we take the entire list and assign it to a variable called\n                        promises:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("uploadImages(images, token) {\n    const promises = Array.from(images).map(image => {\n        const formData = new FormData();\n        formData.append('image', image);\n\n        return axios.post(`${ROOT_URL}/3/image`, formData, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n    });\n}")]),e._v(" "),a("figcaption",[e._v("Fig 08-028")])]),e._v(" "),a("p",[e._v("Then down at the bottom of this function we're going to add a little bit of code to wait for\n                        this entire array of promises to be resolved before we say - \"Ok everything's done\":")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("return Promise.all(promises);")]),e._v(" "),a("figcaption",[e._v("Fig 08-029")])]),e._v(" "),a("p",[a("code",{staticClass:"prettyprint"},[e._v("Promise.all")]),e._v(" is a built-in Javascript function that takes an\n                        array of promises and waits for every one of those inner promises to resolve and\n                        then resolves itself as well.")]),e._v(" "),a("p",[e._v("So essentially we just added a little bit of code to make sure that we wait for every upload\n                        request to be completed before we allow this function to continue.")]),e._v(" "),a("p",[e._v("Back over in our Images module and we will make sure that after all the work in\n                        uploadImages is completed and then we will automatically navigate our user over to our\n                        ImageList component. First import the router:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import { router } from '../../main';")]),e._v(" "),a("figcaption",[e._v("Fig 08-029")])]),e._v(" "),a("p",[e._v("Then add the following code to the uploadImages function:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("router.push('/');")]),e._v(" "),a("figcaption",[e._v("Fig 08-030")])]),e._v(" "),a("p",[e._v("Test this in the browser. You will notice (if you have your Network tab open in the console)\n                        one or more POST requests that represent each of the individual file uploads. We then get\n                        redirected back over to "),a("code",{staticClass:"prettyprint"},[e._v("locahost:8080")]),e._v(" and we should see our\n                        uploaded image(s) on the screen.\n                    ")]),e._v(" "),a("h3",[e._v("Layout with CSS Grid")]),e._v(" "),a("p",[e._v("We are now able to see a list of the images that we have uploaded using the Imgur API but\n                        they're definitely not showing up that nicely inside of our ImageList component. So in this\n                        section we're going to add in just a little bit of styling to make sure that these images\n                        show up better than they do at the moment.")]),e._v(" "),a("p",[e._v("In the ImageList component you'll recall we have our root div and then we render our a list\n                        of images inside of it. Add the following class to the root div:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="image-container">\n        <img v-for="image in allImages" :src="image.link" />\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 08-030")])]),e._v(" "),a("p",[e._v("Then add a style tag to the bottom of the component: ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style scoped>\n    .image-container {\n        column-count: 3;\n        column-gap: 0;\n    }\n    img {\n        max-width: 100%;\n        padding: 5px;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 08-031")])]),e._v(" "),a("p",[e._v("We are going to use something called CSS grids to style the list of images. We create three\n                        separate columns then have the images automatically lay themselves out inside those three\n                        columns. ")]),e._v(" "),a("p",[e._v("First we add some styling to our class which we added to the div above. We add column-count\n                        of 3 and column-gap of 0. This tells our ImageList component that we want to have three\n                        separate columns rendered containing all of our images. Then, by default, between each of\n                        those columns we're going to have a gap of zero pixels - so by default the columns are going\n                        to be touching. ")]),e._v(" "),a("p",[e._v("Directly after that we add some styling to the "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" tag for\n                        each of the images. We set the "),a("code",{staticClass:"prettyprint"},[e._v("max-width")]),e._v(" to 100% to make\n                        sure that the images dont break out of the column width which they have been assigned. Then\n                        we add a padding of 5 pixels works closely with the column-gap of 0. It's going to make sure\n                        that there's give pixels between every img tag both above and to the side. ")]),e._v(" "),a("p",[e._v("Now when our application loads back up we should see three separate columns and all of our\n                        images rendered neatly inside with 5px around each image (totalling 10px between images).")]),e._v(" "),a("h3",[e._v("Hide Images on Logout")]),e._v(" "),a("p",[e._v("If we log out while on the ImageList component our list of images remain on the screen. We\n                        are going to address this now. In the ImageList component recall that we've got our computed\n                        property fetching a list of all or our images:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: mapGetters(['allImages']),")]),e._v(" "),a("figcaption",[e._v("Fig 08-032")])]),e._v(" "),a("p",[e._v("We will update the computed property to check if the user is currently logged in. We do this\n                        by adding another string:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: mapGetters(['allImages',  'isLoggedIn']),")]),e._v(" "),a("figcaption",[e._v("Fig 08-033")])]),e._v(" "),a("p",[e._v("Now that this getter is wired up we can decide what content to show inside of our component\n                        based upon whether or not the user is logged in. Wrap everything inside the template in a\n                        new div:")]),e._v(" "),a("p",[e._v("We add a v-if expression to check the value of isLoggedIn. If they are render the list of\n                        images as before. If they are not then render the h2 element with the v-else directive.\n                    ")]),e._v(" "),a("h3",[e._v("Expanding the App")]),e._v(" "),a("p",[e._v("We've just about wrapped up our application but before we finish I want to mention one way in\n                        which you could possibly expand this application in the future. The Imgur API documentation\n                        details an Account Favorites endpoint. This endpoint returns a list of all the diferent\n                        images this user has ever liked over on Imgur.com. ")]),e._v(" "),a("p",[e._v("So one way to expand the application would be to add a new component and another tab into the\n                        application that showed a list of all the different images that this user has ever\n                        favourited.")]),e._v(" "),a("p",[e._v("The challenge to this task is this endpoint can return either a Gallery Image or a Gallery\n                        Album. Up until now we have only worked with Gallery Image. Gallery Album is an array of\n                        images. You would need to write code to detect which of the two response models you are\n                        working with.")]),e._v(" "),a("p",[e._v("I hope you enjoyed learning about Vue - goodbye and thanks for all the fish.")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Deep Dive into DataTemplates")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Hi, this is Brian Noyes, and in this module we're going to dive into Data Templates. Data Templates\n                        are a very powerful mechanism of WPF data binding that allows you to provide the visual structure\n                        for some data-bound object and have that mapped up at runtime as the objects get rendered out. So\n                        we'll look at how DataTemplates work and what the variations on DataTemplates are and how to use\n                        them.\n                    ")]),e._v(" "),a("p",[e._v("First we'll talk about the broad concepts of DataTemplates and how they work in general, and how they\n                        get mapped out to the data objects that are being rendered out to provide the visual structure for\n                        rendering on the screen.\n                    ")]),e._v(" "),a("p",[e._v("Next we'll talk about ExplicitDataTemplates, which are the most direct and simple way to use\n                        DataTemplates. As the name implies, it involves a direct hookup between the data-bound control and\n                        the template that should be used for a given collection or data object.\n                    ")]),e._v(" "),a("p",[e._v("Next we'll talk about ImplicitDataTemplates, which are a little more magical in the way that they\n                        work, but it involves an automatic selection of the appropriate DataTemplate based on the type of\n                        the data object that's going to be rendered, and this gives us an awful lot of power for handling\n                        heterogeneous collections of derived types of some data object type, and it becomes vitally\n                        important in Model-View-ViewModel scenarios, which we'll use in the demos to render out different\n                        Views for different ViewModel types.\n                    ")]),e._v(" "),a("p",[e._v("Next, we'll talk about DataTemplateSelectors, which give you a little more explicit control, but\n                        still dynamic control to switch which DataTemplate you use based on whatever logic you need to\n                        invoke to make that selection.\n                    ")]),e._v(" "),a("p",[e._v("\n                        And finally, we'll finish off this module with HierarchicalDataTemplates, which are just a\n                        specialized form of DataTemplate that work in hierarchical data model scenarios such as presenting\n                        data in TreeView control.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("DataTemplates Overview")]),e._v(" "),a("p",[e._v("The way DataTemplates work, in general, is that you are going to have some data-bound control:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentControl Grid.Row="1" Content="{Binding CurrentViewModel}"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-001")])]),e._v(" "),a("p",[e._v("And it's either going to be a ContentControl or some control derived from ItemsControl in general,\n                        such as ListBox, ComboBox or DataGrid.\n                    ")]),e._v(" "),a("p",[e._v("Let's start with the ContentControl case. ContentControl, if you're not familiar, has a single\n                        Content property that can be set to a UI element and it will render that UI element in the child\n                        area, so the child area is really a blank canvas in which the content can be rendered.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(311)}}),e._v(" "),a("figcaption",[e._v("Fig 05-002")])]),e._v(" "),a("p",[e._v("In this case, though, we're supplying the content as a data-bound object. It happens to be a\n                        ViewModel in this case, and this is where DataTemplates come in, is that a DataTemplate can provide\n                        the visual structure for how to render that data object into that child content area.\n                    ")]),e._v(" "),a("p",[e._v("So we then supply a DataTemplate, and the DataTemplate has some structure to it. In this case we've\n                        just got a child user control as the structure of that DataTemplate as the nested element:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate DataType="{x:Type local:HierarchicalDataTemplatesViewModel}">\n    <local:HierarchicalDataTemplatesView />\n</DataTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-003")])]),e._v(" "),a("p",[e._v("And when these come together in the data binding context, that DataTemplate provides the visual\n                        structure for the data-bound object that is the content.\n                    ")]),e._v(" "),a("p",[e._v("Now a really important part of DataTemplates to understand is that when a DataTemplate gets rendered,\n                        the DataContext property of the root element in that DataTemplate, in this case, the\n                        HierarchalDataTemplates view, it's DataContext will be set to the instance of the data-bound object\n                        that is being rendered:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(312)}}),e._v(" "),a("figcaption",[e._v("Fig 05-004")])]),e._v(" "),a("p",[e._v("So in this case, the CurrentViewModel object will be set as the DataContext for that\n                        HierarchalDataTemplatesView.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox" ItemsSource="{Binding Products}"\n         ItemTemplate="{StaticResource ProductTemplate}">\n</ListBox>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-005")])]),e._v(" "),a("p",[e._v("Now in the case of an ItemsControl, such as a ListBox, ComboBox or DataGrid, first off you're going\n                        to be binding to a collection of data objects and the idea is you want to have a visual\n                        representation for each one of those collection objects, so you provide a DataTemplate and hook it\n                        in either implicitly or explicitly, as we'll cover in this module, and that DataTemplate provides\n                        that visual structure for how do I render a single Product object in this case:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox" ItemsSource="{Binding Products}"\n         ItemTemplate="{StaticResource ProductTemplate}">\n</ListBox>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-006")])]),e._v(" "),a("p",[e._v("So here we have a grid with an image and a couple of rows in it to provide the name and description\n                        for that product.\n                    ")]),e._v(" "),a("p",[e._v("So that DataTemplate basically lays down what is the visual structure for that data object:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(313)}}),e._v(" "),a("figcaption",[e._v("Fig 05-007")])]),e._v(" "),a("p",[e._v("Within the DataTemplate we have individual bindings and you can see that they're just binding with\n                        simple paths to properties on a single Product object.\n                    ")]),e._v(" "),a("p",[e._v("This works because, again, whenever a DataTemplate is rendered, the DataContext of the root element\n                        is set to the data object it's being rendered for, in this case, a Product object. So that\n                        DataContext flows down the visual tree of this DataTemplate, making that DataContext available to\n                        those child bindings.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(314)}}),e._v(" "),a("figcaption",[e._v("Fig 05-008")])]),e._v(" "),a("p",[e._v("And then in the case of an ItemsControl, this all comes together in that the ListBox, in this case,\n                        will render out a single instance of that DataTemplate for each product object in the collection\n                        it's bound to, setting the DataContext of that single instance to that product object:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(315)}}),e._v(" "),a("figcaption",[e._v("Fig 05-009")])]),e._v(" "),a("p",[e._v("And that's basically how DataTemplates work at a high level. So now let's look at the different ways\n                        to get them hooked up and the different variants of DataTemplates.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Explicit DataTemplates")]),e._v(" "),a("p",[e._v("So first let's look at ExplicitDataTemplates because they're the most straightforward in terms of the\n                        way the DataTemplate gets hooked up to the data-bound control.\n                    ")]),e._v(" "),a("p",[e._v("First off, you're going to define a DataTemplate somewhere, and usually that's going to be in a\n                        Resource dictionary, and again, you define that DataTemplate with some visual structure for some\n                        data object that you want to render out:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl>\n    <UserControl.Resources>\n        <DataTemplate x:Key="ProductTemplate">\n            <Grid>...</Grid>\n        </DataTemplate>\n    </UserControl.Resources>\n    <Grid>\n        <ListBox ItemTemplate="{StaticResource ProductTemplate}"\n                 ItemsSource="{Binding Products}" />\n    </Grid>\n</UserControl>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-010")])]),e._v(" "),a("p",[e._v("You're going to give that DataTemplate a key if it lives in the Resource dictionary, so that you can\n                        then refer to it by pointing to it with a StaticResource or DynamicResource markup extension from\n                        the appropriate property of the data-bound control.\n                    ")]),e._v(" "),a("p",[e._v("The property we're talking about here is either going to be the ContentTemplate property of a\n                        ContentControl or the ItemTemplate of an ItemsControl, such as a ListBox. That tells that control to\n                        use that specific DataTemplate when it's rendering out the data-bound objects that it's pointed to.\n                    ")]),e._v(" "),a("p",[e._v("Then at runtime it's going to be used to render out those data-bound objects and provide the visual\n                        representation of those objects, and again, the DataTemplate can contain bindings to the properties\n                        of that data-bound object. So let's take a look at a demo of using ExplicitDataTemplates to render\n                        out some data.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Explicit DataTemplates")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\before\\DataTemplates - Start\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\after\\DataTemplates\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I want to show you how you can use ExplicitDataTemplates to provide the visual\n                        structure for a data-bound object that's being rendered in a control.\n                    ")]),e._v(" "),a("p",[e._v("Our starting point for this demo, and the rest of the demos in this module is this DataTemplates\n                        project, which is just a stock WPF project with a couple things added at this point. We've got this\n                        Images subfolder that has some product images that we'll use for rendering purposes:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(316)}}),e._v(" "),a("figcaption",[e._v("Fig 05-011")])]),e._v(" "),a("p",[e._v("And we've got a RelayCommand, which we've seen in previous modules for hooking up Command scenarios.\n                        We've also got our ZzaData data layer that brings in data via Entity Framework from a Zza database.\n                    ")]),e._v(" "),a("p",[e._v("Now in this demo, I'm going to go ahead and use the Model-View-ViewModel, or MVVM pattern, in a very\n                        simplistic form. You don't have to get too wrapped up in that, I'm using it as just another example\n                        of data binding and also because in MVVM DataTemplates become fairly important.\n                    ")]),e._v(" "),a("p",[e._v("So the first thing I'm going to do is add a View in ViewModel. The View will be called\n                        ExplicitDataTemplatesView and it will be a User Control.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(317)}}),e._v(" "),a("figcaption",[e._v("Fig 05-012")])]),e._v(" "),a("p",[e._v("And then I'll add a class called ExplicitDataTemplatesViewModel. I'm going to replace this class with\n                        a fleshed-out definition and just explain the code here quickly.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class ExplicitDataTemplatesViewModel : INotifyPropertyChanged\n{\n    private ObservableCollection<Product> _Products;\n\n    public ExplicitDataTemplatesViewModel()\n    {\n        if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))\n        {\n            ZzaDbContext context = new ZzaDbContext();\n            Products = new ObservableCollection<Product>(context.Products.ToList());\n            Products.ToList().ForEach(p => p.Image = "Images/" + p.Image);\n        }\n    }\n    public ObservableCollection<Product> Products\n    {\n        get\n        {\n            return _Products;\n        }\n        set\n        {\n            if (value != _Products)\n            {\n                _Products = value;\n                PropertyChanged(this, new PropertyChangedEventArgs("Products"));\n            }\n        }\n    }')])]),e._v(" "),a("figcaption",[e._v("Fig 05-013")])]),e._v(" "),a("p",[e._v("Okay, so the fleshed out definition here is a class that implements INotifyPropertyChanged, so that\n                        it can participate nicely in data binding.\n                    ")]),e._v(" "),a("p",[e._v("It exposes one property called Products, which is an observable collection of products suitable for\n                        data binding, again:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ObservableCollection<Product> Products\n{\n    get\n    {\n        return _Products;\n    }\n    set\n    {\n        if (value != _Products)\n        {\n            _Products = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Products"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-014")])]),e._v(" "),a("p",[e._v("And then it has a Constructor that only when you're not in the DesignTime environment, and you can do\n                        that by checking this Designer properties GetIsInDesignMode property.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))")])]),e._v(" "),a("figcaption",[e._v("Fig 05-015")])]),e._v(" "),a("p",[e._v("If it's true, then you're in the designer, if it's false you're not. So only if we're not in the\n                        Designer, do we go out to the database and populate our products by going to the Products collection\n                        of our Zza DBContext.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))\n{\n    ZzaDbContext context = new ZzaDbContext();\n    Products = new ObservableCollection<Product>(context.Products.ToList());\n    Products.ToList().ForEach(p => p.Image = "Images/" + p.Image);\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-016")])]),e._v(" "),a("p",[e._v("And then we're looping over each product after we get it, and modifying the Image property to have\n                        this relative path down into the Images folder that's part of our project.\n                    ")]),e._v(" "),a("p",[e._v("Now we need a View that's going to data bind to this, and whenever you do the MVVM pattern, the\n                        ViewModel is going to be set as the DataContext for the View. So the View elements can just bind to\n                        the exposed properties of that ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("So let's go into our View and add a local namespace so that we can get to the other objects defined\n                        in our project\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl x:Class="DataTemplates.ExplicitDataTemplatesView"\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:local="clr-namespace:DataTemplates"\n             mc:Ignorable="d"\n             d:DesignHeight="300" d:DesignWidth="300">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-017")])]),e._v(" "),a("p",[e._v("and then we're going to set the DataContext of this View declaratively by setting the DataContext\n                        property to an instance of our new ViewModel\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("<UserControl.DataContext>\n    <local:ExplicitDataTemplatesViewModel />\n</UserControl.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 05-018")])]),e._v(" "),a("p",[e._v("Now we can add elements to this View that bind to the exposed properties of that ViewModel.")]),e._v(" "),a("p",[e._v("So I'm going to add a ListBox that's bound to our Products collection. So I'll drop down here in the\n                        Grid and add that ListBox, and we can see we just set Binding to Products:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ListBox x:Name="ProductsListBox"\n             ItemsSource="{Binding Products" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-019")])]),e._v(" "),a("p",[e._v("and because there is a Products property that exposes a collection on our ViewModel, we should be\n                        good to go here. Now to actually see this View, we're going to have to put it into our MainWindow.\n                        So I'm going to drop over to my MainWindow, build to make sure that Visual Studio knows about those,\n                        and open up my Toolbox. And up here at the top you can see that our ExplicitDataTemplateView shows\n                        up:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(318)}}),e._v(" "),a("figcaption",[e._v("Fig 05-020")])]),e._v(" "),a("p",[e._v("I can drag and drop that into the Grid of the MainWindow. If I go ahead and run at this point, we can\n                        see that I do, in fact, get products rendered out:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(319)}}),e._v(" "),a("figcaption",[e._v("Fig 05-021")])]),e._v(" "),a("p",[e._v("but I'm just getting a ToString on the Product object, not very functional. So the simplest thing we\n                        could do is drop here to our ListBox and add the DisplayMemberPath property pointing to the Name\n                        property of each of the products.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ListBox x:Name="ProductsListBox"\n        ItemsSource="{Binding Products}"\n        DisplayMemberPath="Name">\n    </ListBox>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-022")])]),e._v(" "),a("p",[e._v("If we run with that we get a slightly more functional ListBox where we see the Product name, but it's\n                        not very pretty to look at. This is WPF and we can put a little more visual flare on presenting a\n                        Product, and that's where DataTemplates come in.\n                    ")]),e._v(" "),a("p",[e._v("Now normally when you define DataTemplates, you're going to want to make them reusable. That means\n                        you're going to put them into a Resource dictionary. So I'm going to go into the\n                        UserControl.Resources here and declare myself a DataTemplate called ProductTemplate:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n    <DataTemplate x:Key="ProductTemplate">\n\n    </DataTemplate>\n</UserControl.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-023")])]),e._v(" "),a("p",[e._v("A DataTemplate is just an element that you can create inside of a Resource dictionary and it has some\n                        content to it. The content of the DataTemplate is the visual structure that's going to be rendered\n                        out when that DataTemplate is used. So we want some visual structure to render out a product here.\n                    ")]),e._v(" "),a("p",[e._v("I'm going to drop into my DataTemplate and add some XAML:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="Auto" />\n    </Grid.ColumnDefinitions>\n    <Image x:Name="ProductImage"\n           Source="{Binding Image}"\n           Margin="5"\n           Width="100" />\n    <Grid Grid.Column="1">\n        <Grid.RowDefinitions>\n            <RowDefinition Height="Auto" />\n            <RowDefinition Height="Auto" />\n        </Grid.RowDefinitions>\n        <TextBlock Text="{Binding Name}"\n                   FontFamily="Arial"\n                   FontSize="14"\n                   FontWeight="Bold" />\n        <TextBlock Grid.Row="1"\n                   Text="{Binding Description}"\n                   TextWrapping="Wrap"\n                   Width="300" />\n    </Grid>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-024")])]),e._v(" "),a("p",[e._v("And we can see what I've added here is a root Grid that has two columns. In the first column is an\n                        Image control that's going to render out our Image property of an individual Product. Then there's a\n                        nested Grid that has two rows. The first row is going to show the Name of the Product and the second\n                        row is going to show the Description of the Product. Notice that each of these bindings is assuming\n                        that the DataContext is going to be set to an individual Product, and that's an important part of\n                        how DataTemplates work.\n                    ")]),e._v(" "),a("p",[e._v("An instance of this DataTemplate and its contents is going to be rendered out for each data-bound\n                        object in a bound context. So in the case of a ListBox, we're going to have a collection of\n                        Products. For each Product in that collection, it's going to render out an instance of the contents\n                        of this DataTemplate.\n                    ")]),e._v(" "),a("p",[e._v("And as part of that process, conceptually, it is setting the DataContext property to that Product\n                        object that is being rendered:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate x:Key="ProductTemplate" >\n    <Grid DataContext="Product">\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width="Auto" />\n            <ColumnDefinition Width="Auto" />\n        </Grid.ColumnDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-025")])]),e._v(" "),a("p",[e._v("Now you don't explicitly put that there, that's going to happen automatically for you when the\n                        DataTemplate is rendered, but the root elements DataContext is going to be set to the data- bound\n                        object, and that means that DataContext will flow down and nested bindings within that template can\n                        just use a Path property off of that DataContext object.\n                    ")]),e._v(" "),a("p",[e._v("Now that we have our template defined, we need to tie it into our ListBox, so we're going to get rid\n                        of the DisplayMemberPath and instead use a property called ItemTemplate.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox"\n     ItemsSource="{Binding Products}"\n     ItemTemplate="{StaticResource ProductTemplate} " />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-026")])]),e._v(" "),a("p",[e._v("We're going to point to our template through a StaticResource to the ProductTemplate.")]),e._v(" "),a("p",[e._v("And with that in place, we can go ahead and run:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(320)}}),e._v(" "),a("figcaption",[e._v("Fig 05-027")])]),e._v(" "),a("p",[e._v("and now we see a much more visually-appealing presentation of our products in the ListBox.")]),e._v(" "),a("p",[e._v("And we can put whatever structure we want into this DataTemplate to render out the data that is\n                        associated with whatever visual elements we want to present them.\n                    ")]),e._v(" "),a("p",[e._v("Now we could make some further modifications to our DataTemplate. If I go to this nested grid and set\n                        a Height property, I can actually use other forms of bindings that we've talked about with\n                        ElementName and RelativeSource bindings, for example, to point to other elements within our\n                        DataTemplate:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Image x:Name="ProductImage"\n   Source="{Binding Image}"\n   Margin="5"\n   Width="100" />\n<Grid Grid.Column="1"\n   Height="{Binding ElementName=ProductImage, Path=Height}">\n<Grid.RowDefinitions>\n   <RowDefinition Height="Auto" />\n   <RowDefinition Height="Auto" />\n</Grid.RowDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-028")])]),e._v(" "),a("p",[e._v("So, in this case, you can see that we gave a name to our Image called ProductImage and we can use an\n                        ElementName binding to point to that and modify the height of our Grid based on the height of that\n                        image, and really this should say ActualHeight.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid Grid.Column="1"\n    Height="{Binding ElementName=ProductImage, Path=ActualHeight}">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-029")])]),e._v(" "),a("p",[e._v("Whenever you bind to a Height or Width, make sure you're binding to the ActualHeight or\n                        ActualWidth.")]),e._v(" "),a("p",[e._v("Likewise, I could add a couple more Row definitions to this nested Grid, and then drop down and add a\n                        couple more TextBlocks:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBlock Grid.Row="2"\n    Text="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=ItemsSource.Count}" />\n<TextBlock Grid.Row="3"\n    Text="{Binding ElementName=ProductsListBox, Path=ItemsSource.Count}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-030")])]),e._v(" "),a("p",[e._v("In this case, one of these is using a RelativeSource binding and you can see it's going to walk all\n                        the way up using the AncestorType to get to the ListBox that this is going to be rendered in.\n                    ")]),e._v(" "),a("p",[e._v("Even though this DataTemplate itself does not explicitly know about the ListBox, this stuff all comes\n                        together at runtime into the Visual Tree. So an ancestor of this TextBlock element will be somewhere\n                        up the chain, will be the ListBox itself.\n                    ")]),e._v(" "),a("p",[e._v("So we can walk all the way up there, use the ListBox as our Source object, and then we could us a\n                        Path that dots down to the ItemsSource, which will be our Products Collection, and the Count on that\n                        Collection, and render that out in a TextBox.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBlock Grid.Row="2"\n    Text="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=ItemsSource.Count}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-031")])]),e._v(" "),a("p",[e._v("Likewise, we can even use ElementName bindings that are outside of our CurrentDataTemplate. So the\n                        name of our ListBox is ProductsListBox:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBlock Grid.Row="3"\n   Text="{Binding ElementName=ProductsListBox, Path=ItemsSource.Count" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-032")])]),e._v(" "),a("p",[e._v("That's out here in the main visual tree")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ListBox x:Name="ProductsListBox" ItemsSource="{Binding Products}"\n                ItemTemplate="{StaticResource ProductTemplate}">\n    </ListBox>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-033")])]),e._v(" "),a("p",[e._v("but at runtime, this TextBlock will be rendered as part of the overall UI so it's able to use an\n                        ElementName binding to locate another element within that same UI, and in this case we're going to\n                        do the same thing, dot down through the ItemsSource to the Count.\n                    ")]),e._v(" "),a("p",[e._v("With those in place, if I run right now, it's actually not going to render right because of this\n                        ActualHeight.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid Grid.Column="1"\n    Height="{Binding ElementName=ProductImage, Path=ActualHeight">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-034")])]),e._v(" "),a("p",[e._v("I wanted to show that as an example, but it'll end up truncating those fields that we just added\n                        because the image won't be big enough. So I'm just going to take this Height off of here and run.\n                        And now we can see the two 41's there:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(321)}}),e._v(" "),a("figcaption",[e._v("Fig 05-035")])]),e._v(" "),a("p",[e._v("41 products in our collection, getting one by walking up the Element Tree to the ListBox, and getting\n                        the Products collection off of the ItemsSource there, the other one using the ElementName binding to\n                        get to the ListBox and gets the Products collection from there.\n                    ")]),e._v(" "),a("p",[e._v("Now one last thing to show is I'm going to cut this DataTemplate out of the Resource dictionary:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.DataContext>\n    <local:ExplicitDataTemplatesViewModel />\n</UserControl.DataContext>\n<UserControl.Resources>\n</UserControl.Resources>\n<Grid>\n    <ListBox x:Name="ProductsListBox"\n             ItemsSource="{Binding Products}"\n             ItemTemplat="{StaticResource ProductTemplate" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-036")])]),e._v(" "),a("p",[e._v("and show you that you can define it nested directly on the element itself.")]),e._v(" "),a("p",[e._v("So if I go onto my ListBox and set the ItemTemplate property as a nested element here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox"\n    ItemsSource="{Binding Products}">\n         <ListBox.ItemTemplate>\n\n         </ListBox.ItemTemplate>\n</ListBox>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-037")])]),e._v(" "),a("p",[e._v("and I paste that DataTemplate in there and get rid of the key because it's no longer in the Resource\n                        dictionary:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox"\n         ItemsSource="{Binding Products}">\n    <ListBox.ItemTemplate>\n        <DataTemplate x:Key="ProductTemplate">\n            <Grid>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width="Auto" />\n                    <ColumnDefinition Width="Auto" />\n                </Grid.ColumnDefinitions>\n                <Image x:Name="ProductImage"\n                       Source="{Binding Image}"\n                       Margin="5"\n                       Width="100" />\n                <Grid Grid.Column="1">\n                    <Grid.RowDefinitions>\n                        <RowDefinition Height="Auto" />\n                        <RowDefinition Height="Auto" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-038")])]),e._v(" "),a("p",[e._v("now the structure here is similar to what we did with our DataContext being set to an instance of a\n                        ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("Here we're really just setting the ItemTemplate property of the ListBox explicitly to an instance of\n                        a DataTemplate. That works exactly the same:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(322)}}),e._v(" "),a("figcaption",[e._v("Fig 05-039")])]),e._v(" "),a("p",[e._v("We can see the same visual rendering of our elements. The difference here is this DataTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox"\n         ItemsSource="{Binding Products}">\n    <ListBox.ItemTemplate>\n        <DataTemplate x:Key="ProductTemplate">\n            <Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-040")])]),e._v(" "),a("p",[e._v("Is no longer reusable, it's only available within the context of this ListBox. So generally, I'll\n                        stick to defining my DataTemplate as part of a Resource dictionary, giving it a key, and then\n                        referring to that from the ItemTemplate property with a StaticResource.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox x:Name="ProductsListBox"\n         ItemsSource="{Binding Products}">\n         ItemTemplate="{StaticResource ProductTemplate}"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-041")])]),e._v(" "),a("p",[e._v("Then you could potentially move that DataTemplate out from the User Control to an application-scoped\n                        resource or even in the reusable class library and use it over and over again in multiple places in\n                        your applications.\n                    ")]),e._v(" "),a("p",[e._v("So that's how you use ExplicitDataTemplates. Specifically point to one through the ItemTemplate\n                        property of a ListBox or we'll see another example is a ContentTemplate property of a\n                        ContentControl.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Implicit DataTemplates")]),e._v(" "),a("p",[e._v("Now let's talk about ImplicitDataTemplates. ImplicitDataTemplates give you a lot more power and\n                        flexibility to address scenarios where you may not have a one-to-one mapping between a given\n                        DataObject type and the control where a specific DataTemplate is supposed to be used for that object\n                        type.\n                    ")]),e._v(" "),a("p",[e._v("Basically, an ImplicitDataTemplate gets associated automatically with a data-bound object based on\n                        the type of that object when it's being rendered. For ImplicitDataTemplates to work, the\n                        DataTemplate has to be defined in the Resource dictionary that is in-scope wherever that data-bound\n                        control is going to be.\n                    ")]),e._v(" "),a("p",[e._v("So down below you can see we have a ContentControl that's binding to a CurrentViewModel:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(323)}}),e._v(" "),a("figcaption",[e._v("Fig 05-042")])]),e._v(" "),a("p",[e._v("And we placed the DataTemplate in a Resource dictionary that is somewhere upstream of that.")]),e._v(" "),a("p",[e._v("It could be a Resource dictionary directly on the ContentControl, on the containing Grid, on the\n                        containing window or out at application scope, as long as it is at the same scope or a higher scope,\n                        in terms of resources, from the control that's going to be data binding and looking for a\n                        DataTemplate.\n                    ")]),e._v(" "),a("p",[e._v("Next we have to have a DataType property on our DataTemplate that matches up to the concrete type of\n                        the data-bound object in that data binding context. So our content down below is binding to a\n                        CurrentViewModel\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(324)}}),e._v(" "),a("figcaption",[e._v("Fig 05-043")])]),e._v(" "),a("p",[e._v("That CurrentViewModel can be one of several types and, in this case, it's checking the Type of that\n                        object and if it matches up to be an ExplicitDataTemplatesViewModel, then this is the appropriate\n                        DataTemplate for it, and it will automatically select that and use it to render it out.\n                    ")]),e._v(" "),a("p",[e._v("Note the use of the x:Type markup extension, make sure you use that. It's very tempting to just put\n                        the Type name itself in quotes there, and then the DataTemplate won't work as expected. And\n                        basically, ImplicitDataTemplates give you a lot of flexibility now, because the object that shows up\n                        through a binding, such as this CurrentViewModel can dynamically change over time, between different\n                        Types and then the DataTemplate can select the appropriate visual representation based on that Type.\n                    ")]),e._v(" "),a("p",[e._v("So it could either be pushing a different ViewModel into this Content property as shown in this\n                        example, or it could be something like a ListBox with a collection of different types of objects in\n                        the collection based on some common base Type, such as Product, where each derived type has its own\n                        specific DataTemplate mapped to it. So let's take a look at a demo of using ImplicitDataTemplates to\n                        facilitate View switching in a ViewModel scenario.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Implicit DataTemplates")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\before\\DataTemplates - Start\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\after\\DataTemplates\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to show you how to use ImplicitDataTemplates to automatically associate a\n                        DataTemplate with a data-bound object based on its type. Starting point for this demo is the ending\n                        point from the last one where we showed ExplicitDataTemplates.\n                    ")]),e._v(" "),a("p",[e._v("Let's get started here. I'm going to add a new View in ViewModel. I'm going to call the View\n                        DataTemplateSelectorsView because we're going to use it in the subsequent demo for that purpose:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(325)}}),e._v(" "),a("figcaption",[e._v("Fig 05-044")])]),e._v(" "),a("p",[e._v("And then I'll add a class that's called DataTemplateSelectorsViewModel.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(326)}}),e._v(" "),a("figcaption",[e._v("Fig 05-045")])]),e._v(" "),a("p",[e._v("In the view, I'm going to add a single element, which is a TextBlock that just says\n                        DataTemplateSelectorsView so we know when that view is presented.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TextBlock Text="DataTemplate Selectors View"\n               HorizontalAlignment="Center"\n               VerticalAlignment="Center"\n               FontSize="20" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-046")])]),e._v(" "),a("p",[e._v("Basically what we're going to be setting up here is the ability to switch between child views,\n                        between our ExplicitDataTemplateView and our DataTemplateSelectorsView, and do that using\n                        ImplicitDataTemplates. So I'm going to go back to my ExplicitDataTemplateView and get rid of the\n                        explicit setting of the DataContext here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<UserControl.DataContext>\n    <local:ExplicitDataTemplatesViewModel />\n</UserControl.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 05-047")])]),e._v(" "),a("p",[e._v("because this is going to end up being done now automatically through ImplicitDataTemplates.")]),e._v(" "),a("p",[e._v("Now we're going to need some logic to switch between the ExplicitDataTemplateView and the\n                        DataTemplateSelectorsView, and we're going to put that logic in a ViewModel for the MainWindow. So\n                        I'm going to add a new ViewModel called MainWindowViewModel.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(327)}}),e._v(" "),a("figcaption",[e._v("Fig 05-048")])]),e._v(" "),a("p",[e._v("And we're going to first make this a proper ViewModel by implementing the INotifyPropertyChanged\n                        interface:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class MainWindowViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged = delegate {};\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-049")])]),e._v(" "),a("p",[e._v("and then we're going to statically wire this up to our MainWindow by setting the DataContext in the\n                        MainWindow, similar to what we saw in a previous demo.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n    xmlns:local="clr-namespace:DataTemplates"\n    x:Class="DataTemplates.MainWindow"\n    Title="MainWindow"\n    Height="350"\n    Width="525">\n<Window.DataContext>\n    <local:MainWindowViewModel />\n</Window.DataContext>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-050")])]),e._v(" "),a("p",[e._v("I'm going to get rid of this explicit instance of our ExplicitDataTemplatesView:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Window.DataContext>\n        <local:MainWindowViewModel />\n    </Window.DataContext>\n    <Grid><local:ExplicitDataTemplateView />\n    </Grid>\n</Window>")])]),e._v(" "),a("figcaption",[e._v("Fig 05-051")])]),e._v(" "),a("p",[e._v("And what we're going to do is drop back into our ViewModel and declare a property called\n                        CurrentViewModel:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public object CurrentViewModel\n{\n    get\n    {\n        return _CurrentViewModel;\n    }\n    set\n    {\n        _CurrentViewModel = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("CurrentViewModel"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-052")])]),e._v(" "),a("p",[e._v("So the idea is that we can set an instance of a ViewModel into this property and data bind to it from\n                        the MainWindow, and that will cause the current rendered child view to switch out.\n                    ")]),e._v(" "),a("p",[e._v("So now we need some ViewModels to switch between. I'm going to pop in here two more MemberVariables,\n                        one an instance of our ExplicitDataTemplatesViewModel and one an instance of our\n                        DataTemplateSelectorsViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private object _CurrentViewModel;\nExplicitDataTemplatesViewModel _ViewModel1 = new ExplicitDataTemplatesViewModel();\nDataTemplateSelectorsViewModel _ViewModel2 = new DataTemplateSelectorsViewModel();")])]),e._v(" "),a("figcaption",[e._v("Fig 05-053")])]),e._v(" "),a("p",[e._v("Now we need some logic that's actually going to switch between those two and we're going to do that\n                        with Commands.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindowViewModel()\n{\n    View1Command = new RelayCommand(ShowView1);\n    View2Command = new RelayCommand(ShowView2);\n    CurrentViewModel = _ViewModel1;\n}\npublic RelayCommand View1Command { get; set; }\npublic RelayCommand View2Command { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-054")])]),e._v(" "),a("p",[e._v("So I've added two RelayCommands to my MainWindowViewModel, View1Command and View2Command, that can be\n                        triggered from the MainWindow. You can see the handling is simply to set the CurrentViewModel to the\n                        respective ViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void ShowView1()\n{\n    CurrentViewModel = _ViewModel1;\n}\n\nprivate void ShowView2()\n{\n    CurrentViewModel = _ViewModel2;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-055")])]),e._v(" "),a("p",[e._v("That will trigger a PropertyChanged:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public object CurrentViewModel\n{\n    get\n    {\n        return _CurrentViewModel;\n    }\n    set\n    {\n        _CurrentViewModel = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("CurrentViewModel"));\n    }\n}\n\npublic event PropertyChangedEventHandler PropertyChanged = delegate { };')])]),e._v(" "),a("figcaption",[e._v("Fig 05-056")])]),e._v(" "),a("p",[e._v("and now we can set up some data binding in the view to cause the right view to be rendered for that\n                        ViewModel using ImplicitDataTemplates. So we're going to go up here to our MainWindow and replace\n                        our main Grid with a grid that has two rows in it.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height="Auto"/>\n        <RowDefinition Height="*"/>\n    </Grid.RowDefinitions>\n    <StackPanel Grid.Row="0" Orientation="Horizontal">\n        <Button Content="Explicit DataTemplates View" Command="{Binding View1Command}"/>\n        <Button Content="DataTemplateSelectors View" Command="{Binding View2Command}"/>\n    </StackPanel>\n    <ContentControl Grid.Row="1" Content="{Binding CurrentViewModel}"/>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-057")])]),e._v(" "),a("p",[e._v("The first row has a StackPanel with two Buttons. Each Button is wired up to its respective Command,\n                        view1Command and View2Command, on the current DataContext, which is our MainWindowViewModel.\n                    ")]),e._v(" "),a("p",[e._v("Then in the second row we just have a ContentControl:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentControl Grid.Row="1" Content="{Binding CurrentViewModel}"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-058")])]),e._v(" "),a("p",[e._v("The ContentControl in WPF is a nice little container control that you set the content to some UI\n                        element and that UI element will be rendered out in the child area of that control. Now you can set\n                        the Content property explicitly to a UI element, or you can set the Content property to a data-bound\n                        object and use DataTemplates to render out that object.\n                    ")]),e._v(" "),a("p",[e._v("So here you can see I'm setting the Content property to our CurrentViewModel property back in our\n                        MainWindowViewModel.\n                    ")]),e._v(" "),a("p",[e._v("Now as we saw in previous demos, if we did nothing else it would just do a ToString on whatever that\n                        ViewModel is and it wouldn't look the way we want it, so what we want to do is supply a DataTemplate\n                        that's going to be automatically married up with the appropriate ViewModel Type to render out a\n                        corresponding view for that ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("So what I can do is go up here in my Window and add a Resources section.")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <DataTemplate DataType="{x:Type local:ExplicitDataTemplatesViewModel}">\n        <local:ExplicitDataTemplatesView/>\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type local:DataTemplateSelectorsViewModel}">\n        <local:DataTemplateSelectorsView/>\n    </DataTemplate>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-059")])]),e._v(" "),a("p",[e._v("And in that Resource section I define two DataTemplates, one that is mapped through the DataType\n                        property to the ExplicitDataTemplateViewModel Type. Notice the x:Type markup extension here, it's\n                        very easy to forget this, and if so, your DataTemplates won't work correctly.\n                    ")]),e._v(" "),a("p",[e._v("But anytime you set the DataType property, notice we don't have to set a key even though we're in a\n                        Resource dictionary, because the key will implicitly be the DataType. But what's going to happen\n                        here is that anything that's data-bound where this Resource is in scope, specifically our\n                        ContentControl:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentControl Grid.Row="1"\n    Content="{Binding CurrentViewModel" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-060")])]),e._v(" "),a("p",[e._v("that's binding content to one or the other of those ViewModel Types. The data binding is actually\n                        going to look out into all the Resources that are currently in scope, see if there is a DataTemplate\n                        mapped to the type of the object that's currently being rendered, and if so, it will render out\n                        whatever the contents of that DataTemplate are.\n                    ")]),e._v(" "),a("p",[e._v("The contents of this DataTemplate is nothing more than our User Control that represents our view in\n                        the MVVM pattern. And remember that I said in a previous demo that whenever a DataTemplate is\n                        rendered out, whatever the root element of that DataTemplate is will have its DataContext set to the\n                        DataObject for which it's being rendered.\n                    ")]),e._v(" "),a("p",[e._v("So basically, the view's DataContext will be set to the instance of the ViewModel that it's being\n                        rendered out for. So we have one map to one ViewModel Type, one map to another ViewModel Type, and\n                        again, we're switching which ViewModel is being set in the Command handling of our\n                        MainWindowViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void ShowView1()\n{\n    CurrentViewModel = _ViewModel1;\n}\n\nprivate void ShowView2()\n{\n    CurrentViewModel = _ViewModel2;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-061")])]),e._v(" "),a("p",[e._v("With that code in place, I can go ahead and run, and now we can see the two buttons up at the top, I\n                        can click on the DataTemplateSelectorsView, we switch to that one.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(328)}}),e._v(" "),a("figcaption",[e._v("Fig 05-062")])]),e._v(" "),a("p",[e._v("I can click on the ExplicitDataTemplatesView and we switch to that one.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(329)}}),e._v(" "),a("figcaption",[e._v("Fig 05-063")])]),e._v(" "),a("p",[e._v("And again, the chain of events there are, we're clicking on the button that fires the Command:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Explicit DataTemplates View"\n                    Command="{Binding View1Command}"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-064")])]),e._v(" "),a("p",[e._v("The Command is wired up to set one or the other ViewModel as the CurrentViewModel:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void ShowView1()\n{\n    CurrentViewModel = _ViewModel1;\n}\n\nprivate void ShowView2()\n{\n    CurrentViewModel = _ViewModel2;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-065")])]),e._v(" "),a("p",[e._v("That triggers a PropertyChange on the CurrentViewModel:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public object CurrentViewModel\n{\n    get\n    {\n        return _CurrentViewModel;\n    }\n    set\n    {\n        _CurrentViewModel = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("CurrentViewModel"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-066")])]),e._v(" "),a("p",[e._v("which is bound to the Content property.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentControl Grid.Row="1" Content="{Binding CurrentViewModel}"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-067")])]),e._v(" "),a("p",[e._v("Now that a new DataObject has shown up in the Content property through a binding, Control goes out\n                        and looks in the available Resources, finds the corresponding DataTemplate mapped to that DataType:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <DataTemplate DataType="{x:Type local:ExplicitDataTemplatesViewModel}">\n        <local:ExplicitDataTemplatesView/>\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type local:DataTemplateSelectorsViewModel}">\n        <local:DataTemplateSelectorsView/>\n    </DataTemplate>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-068")])]),e._v(" "),a("p",[e._v("And renders out the corresponding view for it, setting the DataContext of that root element of the\n                        DataTemplate to whatever the DataObject is it's mapped to. And that's how you can use\n                        ImplicitDataTemplates to render out views and ViewModels.\n                    ")]),e._v(" "),a("p",[e._v("ImplicitDataTemplates can also certainly be used for heterogeneous collections. Say that you had a\n                        bunch of subtypes of product that you were going to render out in a ListBox and you wanted to have a\n                        different DataTemplate for each subtype of a product. You could use the DataType to map to those\n                        concrete types of the derived types, and then you could have a ListBox bound to a collection of\n                        products. And then as it looped through, rendering out each product, it would find the corresponding\n                        DataTemplate based on the DataType for the concrete type of product that you're dealing with, and\n                        would render out that template.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("DataTemplateSelectors")]),e._v(" "),a("p",[e._v("Sometimes when you want to use DataTemplates, things may be a little more dynamic and you may need to\n                        dynamically select the appropriate DataTemplate based on some criteria that goes beyond just the\n                        type of the data-bound object.\n                    ")]),e._v(" "),a("p",[e._v("As we just covered, if the criteria is just simply based on the type of the data-bound object, you\n                        could use ImplicitDataTemplates, but you might need to select based on some property value on the\n                        data-bound object itself, or other logic within the application, and that's where\n                        DataTemplateSelectors come in.\n                    ")]),e._v(" "),a("p",[e._v("DataTemplateSelectors at a high level let you dynamically select the right DataTemplate based on\n                        whatever logic you need to derive that, and the most common example would be to inspect some\n                        property value on the data-bound object and select the appropriate template based on that.\n                    ")]),e._v(" "),a("p",[e._v("So what you do is you derive a class from a base class called DataTemplateSelector in the framework.\n                        In that class, you override a SelectTemplate method so the simplest possible implementation would\n                        look something like this:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class ProductTemplateSelector : DataTemplateSelector\n{\n    public override DataTemplate SelectTemplate(object item, DependencyObject container)\n    {\n        DataTemplate template = LocalTemplate(item, container);\n        return template;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-069")])]),e._v(" "),a("p",[e._v("We derive our class from DataTemplateSelector, we override the SelectTemplate method.")]),e._v(" "),a("p",[e._v("That takes in two parameters. The first one is going to be passed the data-bound object that you're\n                        supposed to come up with a DataTemplate for. The second parameter is the element on which the\n                        binding is that this DataTemplateSelector is being used from, and you can use either of those\n                        criteria and possibly other logic in your application, such as who the user is, what time of day it\n                        is, and other criteria such as that, to determine what template to return.\n                    ")]),e._v(" "),a("p",[e._v("Ultimately, you invoke some logic and you come up with a DataTemplate. That logic could dynamically\n                        build that DataTemplate in memory, but most often you're going to go out and locate it inside of a\n                        Resource dictionary so that those can be declared in the DesignTime environment as XAML.\n                    ")]),e._v(" "),a("p",[e._v("So basically, you use whatever logic is needed and come up with a DataTemplate and return it. And\n                        then finally, you need to hook it up, so you're going to set the ItemTemplateSelector or\n                        ContentTemplateSelector property on your data-bound control depending on whether it's an\n                        ItemsControl or a ContentControl.\n                    ")]),e._v(" "),a("p",[e._v("So let's take a look at a demo of using DataTemplateSelectors to dynamically select the appropriate\n                        DataTemplate.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: DataTemplateSelectors")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\before\\DataTemplates - Start\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\after\\DataTemplates\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to show you how to use DataTemplateSelectors to dynamically select an\n                        appropriate DataTemplate based on some property of the data-bound objects. To do this, I'm first\n                        going to need to define a DataTemplateSelector, which is nothing more than a class.\n                    ")]),e._v(" "),a("p",[e._v("So I'm going to add a class here called ProductTemplateSelector.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(330)}}),e._v(" "),a("figcaption",[e._v("Fig 05-070")])]),e._v(" "),a("p",[e._v("I'm going to flesh it out here by inheriting from the DataTemplateSelector class and overriding the\n                        SelectTemplate method on that base class, which you can see returns a DataTemplate:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('namespace DataTemplates\n{\n    public class ProductTemplateSelector : DataTemplateSelector\n    {\n        public override DataTemplate SelectTemplate(object item, DependencyObject container)\n        {\n            Product product = item as Product;\n            FrameworkElement element = container as FrameworkElement;\n            if (product == null || element == null) return null;\n\n            DataTemplate template = element.FindResource(product.Type + "Template") as DataTemplate;\n            return template;\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-071")])]),e._v(" "),a("p",[e._v("It takes in two arguments, the first of which is the data-bound object that's being rendered through\n                        a binding. The second is the element on which the binding is attached to. From there, your logic can\n                        figure out however it needs to, how to come up with a DataTemplate.\n                    ")]),e._v(" "),a("p",[e._v("Now the implementation I'm showing here is a simple reusable version where I know that I'm going to\n                        be using this for Products, so I can go ahead and cast the data-bound object to a Product object.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Product product = item as Product;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-072")])]),e._v(" "),a("p",[e._v("Likewise, I can cast the container to a framework element.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("FrameworkElement element = container as FrameworkElement;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-073")])]),e._v(" "),a("p",[e._v("As long as both of those casts succeeded, this TemplateSelector must be hooked up in the place I\n                        expect it to be. If not, I can just punt here and return null.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if (product == null || element == null) return null;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-074")])]),e._v(" "),a("p",[e._v("But as long as I got that far, then I can go and invoke some logic to figure out what DataTemplate to\n                        use based on the product that I'm seeing. Now the simple logic I have wired up here is that a\n                        product has a Type property on it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DataTemplate template = element.FindResource(product.Type + "Template") as DataTemplate;')])]),e._v(" "),a("figcaption",[e._v("Fig 05-075")])]),e._v(" "),a("p",[e._v("and that Type is going to be pizza, salad or drink in our Zza data examples.")]),e._v(" "),a("p",[e._v("If I just concatenate Template onto the end of that and assume that out in the current Resource\n                        dictionary for the element that this binding is on, there is a DataTemplate named that template,\n                        then I can locate it with a FindResource and just return that.\n                    ")]),e._v(" "),a("p",[e._v("Now obviously, you could have whatever convoluted logic you want here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DataTemplate template = element.FindResource(product.Type + "Template") as DataTemplate;\n            return template;')])]),e._v(" "),a("figcaption",[e._v("Fig 05-076")])]),e._v(" "),a("p",[e._v("you could new up a DataTemplate from scratch and dynamically populate its elements from programmatic\n                        code. Generally you're going to want to declare these in XAML and locate them as a Resource, as I'm\n                        doing here, through some kind of naming convention. Now we need to go ahead and hook this up to our\n                        data-bound context.\n                    ")]),e._v(" "),a("p",[e._v("So what I'm going to do is go out to a View I created in a previous demo called\n                        DataTemplateSelectorsView, and I'm going to add in a Resources section that creates an instance of\n                        my ProductTemplateSelector, and I'll need a local namespace up above.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('    xmlns:local="clr-namespace:DataTemplates"\n    mc:Ignorable="d"\n    d:DesignHeight="300"\n    d:DesignWidth="300">\n<UserControl.Resources>\n    <local:ProductTemplateSelector x:Key="ProductTemplateSelector" />\n</UserControl.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-077")])]),e._v(" "),a("p",[e._v("Now that I have an instance of that Selector available, I can use it in the data-bound Context. So\n                        I'm going to replace my TextBox down here with a ListBox. We'll bind the ItemsSource of that ListBox\n                        to Products and we'll set a property called ItemTemplateSelector, pointing through a StaticResource\n                        to the instance of our ProductTemplateSelector.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ListBox ItemsSource="{Binding Products}"\n             ItemTemplateSelector="{StaticResource ProductTemplateSelector}" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-078")])]),e._v(" "),a("p",[e._v("Now we just need to get these products from somewhere, so I'm going to wire that up in the ViewModel\n                        for this View. So if I go to the DataTemplateSelectorsViewModel and replace that class with\n                        something similar to what we've seen before:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class DataTemplateSelectorsViewModel : INotifyPropertyChanged\n{\n    private ObservableCollection<Product> _Products;\n\n    public DataTemplateSelectorsViewModel()\n    {\n        if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))\n        {\n            ZzaDbContext context = new ZzaDbContext();\n            Products = new ObservableCollection<Product>(context.Products.ToList());\n        }\n    }\n    public ObservableCollection<Product> Products\n    {\n        get\n        {\n            return _Products;\n        }\n        set\n        {\n            if (value != _Products)\n            {\n                _Products = value;")])]),e._v(" "),a("figcaption",[e._v("Fig 05-079")])]),e._v(" "),a("p",[e._v("We have a Products collection exposed. We only populate that Products collection from the database if\n                        we're not in Design mode and it raises PropertyChanged events when it gets set.\n                    ")]),e._v(" "),a("p",[e._v("So now how is that ViewModel getting hooked up to our view? Well, if you remember from the\n                        ImplicitDataTemplates demo, it's being automatically associated through the DataTemplates out in the\n                        MainWindow.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <DataTemplate DataType="{x:Type local:ExplicitDataTemplatesViewModel}">\n        <local:ExplicitDataTemplatesView/>\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type local:DataTemplateSelectorsViewModel}">\n        <local:DataTemplateSelectorsView/>\n    </DataTemplate>\n    <DataTemplate DataType="{x:Type local:HierachicalDataTemplatesViewModel}">\n        <local:HierarchicalDataTemplatesView/>\n    </DataTemplate>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-080")])]),e._v(" "),a("p",[e._v("So remember we had this DataTemplateSelectorViewModel ImplicitDataTemplate rendering out the\n                        DataTemplateSelectorsView, which will set its DataContext to the instance of the ViewModel\n                    ")]),e._v(" "),a("p",[e._v("So the only thing we have left to do is define the DataTemplates that are going to be rendered out by\n                        our ProductTemplateSelector. So if we add into our Resources section here, three DataTemplates:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n        <local:ProductTemplateSelector x:Key="ProductTemplateSelector" />\n        <DataTemplate x:Key="pizzaTemplate">\n            <Grid>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width="Auto" />\n                    <ColumnDefinition Width="*" />\n                </Grid.ColumnDefinitions>\n                <Image Source="Images/pizza.jpg"\n                       Width="100"\n                       Height="100" />\n                <TextBlock Text="{Binding Name}"\n                           Grid.Column="1" />\n            </Grid>\n        </DataTemplate>\n        <DataTemplate x:Key="saladTemplate">\n            <Grid>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width="Auto" />\n                    <ColumnDefinition Width="*" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-081")])]),e._v(" "),a("p",[e._v("One called pizzaTemplate, one called saladTemplate, and one called drinkTemplate, the Type property\n                        on the product is going to be salad, drink or pizza, and we concatenate that template name onto it\n                        inside of our ProductTemplateSelector. Each of these:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate x:Key="pizzaTemplate">\n    <Grid>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width="Auto" />\n            <ColumnDefinition Width="*" />\n        </Grid.ColumnDefinitions>\n        <Image Source="Images/pizza.jpg"\n               Width="100"\n               Height="100" />\n        <TextBlock Text="{Binding Name}"\n                   Grid.Column="1" />\n    </Grid>\n</DataTemplate>\n<DataTemplate x:Key="saladTemplate">')])]),e._v(" "),a("figcaption",[e._v("Fig 05-082")])]),e._v(" "),a("p",[e._v("is just going to render out a simple representation of a pizza, salad or drink. So by setting that\n                        ItemTemplateSelector, it will invoke our DataTemplateSelector, and we can run, go to the\n                        DataTemplateSelectorsView, and there you can see the pizzas look like that:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(331)}}),e._v(" "),a("figcaption",[e._v("Fig 05-083")])]),e._v(" "),a("p",[e._v("the salads look like that:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(332)}}),e._v(" "),a("figcaption",[e._v("Fig 05-084")])]),e._v(" "),a("p",[e._v("and the drinks look like that.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(333)}}),e._v(" "),a("figcaption",[e._v("Fig 05-085")])]),e._v(" "),a("p",[e._v("So by defining your own DataTemplateSelector, overriding the SelectTemplate, and invoking whatever\n                        logic is needed inside your DataTemplateSelector, you can dynamically return whatever DataTemplate\n                        is needed for your scenario.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("HierarchicalDataTemplates")]),e._v(" "),a("p",[e._v("The last kind of DataTemplate we'll look at here is called a HierarchicalDataTemplate, and it's\n                        specifically designed to address hierarchical data models presented in a TreeView control in WPF,\n                        but it can also be used with some third party controls that present hierarchical data as well.\n                    ")]),e._v(" "),a("p",[e._v("The general idea is that similar to a DataTemplate, it contains a chunk of XAML that represents the\n                        visual structure of a data object that's going to be rendered as a node within the tree, but it has\n                        a number of additional properties to it to capture the fact that there are child collections and\n                        child hierarchies that also need to be rendered.\n                    ")]),e._v(" "),a("p",[e._v("The first of those is the ItemsSource property on the HierarchicalDataTemplate. Basically, this\n                        points to a property on the current node object that should be a child collection of objects, and it\n                        indicates to the TreeView control that there are more child items to be rendered there.\n                    ")]),e._v(" "),a("p",[e._v("Then there is the ItemTemplate property on the HierarchicalDataTemplate. This provides a DataTemplate\n                        for how do you render those child objects in that child collection.\n                    ")]),e._v(" "),a("p",[e._v("If you have fairly static structure to the object model, this is all you'll need. If you have a more\n                        dynamic scenario, there is an ItemTemplateSelector property so you can use a DataTemplateSelector,\n                        as we covered earlier in the module, to dynamically determine which DataTemplate to use given the\n                        type or property values on the data-bound child objects.\n                    ")]),e._v(" "),a("p",[e._v("You can also use ImplicitDataTemplates with HierarchicalDataTemplates, so it has a DataType property\n                        just like a normal DataTemplate does, that you can set to a Type and it can automatically map up\n                        based on the concrete type of the node that's being rendered which DataTemplate to use. So let's\n                        take a look at a demo of using HierarchicalDataTemplates.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: HierarchicalDataTemplates")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\before\\DataTemplates - Start\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex06-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 6\\after\\DataTemplates\\DataTemplates.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex06-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to show you how to work with HierarchicalDataTemplates, which are a special\n                        kind of DataTemplate that work with TreeView controls, as well as with other hierarchical data-bound\n                        third party vendor components.\n                    ")]),e._v(" "),a("p",[e._v("The starting point here is where we left off in the last demo where we had our ImplicitDataTemplates\n                        allowing us to switch between multiple views, the ExplicitDataTemplatesViewModel and the\n                        DataTemplateSelectorsViewModel.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(334)}}),e._v(" "),a("figcaption",[e._v("Fig 05-086")])]),e._v(" "),a("p",[e._v("I've added one more view here that we're going to start fleshing out in this demo called\n                        HierarchicalDataTemplateView and ViewModel. And to get those switching, the way we did the other\n                        views, I added another ViewModel instance to the MainWindowViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class MainWindowViewModel : INotifyPropertyChanged\n{\n    private object _CurrentViewModel;\n    ExplicitDataTemplatesViewModel _ViewModel1 = new ExplicitDataTemplatesViewModel();\n    DataTemplateSelectorsViewModel _ViewModel2 = new DataTemplateSelectorsViewModel();\n    HierachicalDataTemplatesViewModel _ViewModel3 = new HierachicalDataTemplatesViewModel();")])]),e._v(" "),a("figcaption",[e._v("Fig 05-087")])]),e._v(" "),a("p",[e._v("another Command to trigger switching to that view:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public MainWindowViewModel()\n{\n    View1Command = new RelayCommand(ShowView1);\n    View2Command = new RelayCommand(ShowView2);\n    View3Command = new RelayCommand(ShowView3);\n    CurrentViewModel = _ViewModel1;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-088")])]),e._v(" "),a("p",[e._v("and the Command handler that sets that as the CurrentViewModel on the MainWindowViewModel.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void ShowView3()\n{\n    CurrentViewModel = _ViewModel3;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 05-089")])]),e._v(" "),a("p",[e._v("So that should all look familiar from the ImplicitDataTemplates demo. So if I run at this point, I\n                        can start up the app. We'll have three buttons now at the top of the screen:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(335)}}),e._v(" "),a("figcaption",[e._v("Fig 05-090")])]),e._v(" "),a("p",[e._v("and I can switch between the DataTemplateSelectorsView, the ExplicitDataTemplatesView, and this new\n                        blank HierarchicalDataTemplatesView and its corresponding ViewModel.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(336)}}),e._v(" "),a("figcaption",[e._v("Fig 05-091")])]),e._v(" "),a("p",[e._v("So the first thing we're going to want is some real data to work with, in our ViewModel, so I fleshed\n                        out some code here. You can see that our ViewModel implements INotifyPropertyChanged, as usual:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class HierachicalDataTemplatesViewModel : INotifyPropertyChanged")])]),e._v(" "),a("figcaption",[e._v("Fig 05-092")])]),e._v(" "),a("p",[e._v("We have a constructor that is, only when we're not in the Designer, going out to the database through\n                        our DBContext and retrieving the Customers collection from our DBContext.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public HierachicalDataTemplatesViewModel()\n{\n    if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))\n    {\n        using (ZzaDbContext context = new ZzaDbContext())\n        {\n            Customers = new ObservableCollection<Customer>(\n                context.Customers.Include("Orders")\n                .Include("Orders.OrderItems")\n                .Include("Orders.OrderItems.Product").ToList());\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 05-093")])]),e._v(" "),a("p",[e._v("In this case, however, it's also using the .Include method of Entity Framework to retrieve the\n                        related Orders, OrderItems, and the Product for each OrderItem, which sets up a hierarchical data\n                        object graph for us to work with in this demo.\n                    ")]),e._v(" "),a("p",[e._v("The exposed property from our ViewModel is just the root Customers collection:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('private ObservableCollection<Customer> _Customers;\npublic ObservableCollection<Customer> Customers\n{\n    get\n    {\n        return _Customers;\n    }\n    set\n    {\n        _Customers = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("Customers"));\n    }\n}\npublic event PropertyChangedEventHandler PropertyChanged = delegate { };')])]),e._v(" "),a("figcaption",[e._v("Fig 05-094")])]),e._v(" "),a("p",[e._v("and we're going to data bind to that in a TreeView control. So now let's go over to the view for this\n                        HierarchicalDataTemplate and let's add a little bit of XAML:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n    <DataTemplate x:Key="CustomerTemplate">\n        <StackPanel Orientation="Horizontal">\n            <Image Source="Images/person.jpg" Margin="3" />\n            <TextBlock Text="{Binding LastName}" Margin="5"/>\n        </StackPanel>\n    </DataTemplate>\n</UserControl.Resources>\n<Grid>\n    <TreeView ItemsSouce="{Binding Customers}"\n              ItemTemplate="{StaticResource CustomerTemplate}" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-095")])]),e._v(" "),a("p",[e._v("What I added here in terms of the root structure of the View is a TreeView control. You can see that\n                        the ItemsSource is pointing to our Customers collection, which will be on our DataContext that is\n                        our ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("Then we use the ItemTemplate as we did before with the ExplicitDataTemplates demo, to point to a\n                        Resource that has a DataTemplate. That DataTemplate is up at the top, named CustomerTemplate, and\n                        it's just got some simple structure, which is a StackPanel with an Image and a TextBlock in it.\n                    ")]),e._v(" "),a("p",[e._v("If we run our demo at this point, and we switch to the HierarchicalDataTemplatesView:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(337)}}),e._v(" "),a("figcaption",[e._v("Fig 05-096")])]),e._v(" "),a("p",[e._v("you can see that we are getting data rendered out based on our DataTemplate, but notice there's no\n                        expander nodes next to these Customer objects, it's really more like a ListBox at this point, and\n                        we're not really getting that hierarchical presentation that we want. This is where\n                        HierarchicalDataTemplates come in.\n                    ")]),e._v(" "),a("p",[e._v("So I'm going to change out this normal DataTemplate for a HierarchicalDataTemplate for Customers that\n                        goes one level deeper to the Orders.\n                    ")]),e._v(" "),a("p",[e._v("So now you can see what we have is a HierarchicalDataTemplate:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n    <HierarchicalDataTemplate x:Key="CustomerTemplate"\n                              ItemsSource="{Binding Orders}">\n        <StackPanel Orientation="Horizontal">\n            <Image Source="Images/person.jpg"\n                   Margin="3"\n                   Width="50" />\n            <TextBlock Text="{Binding LastName}"\n                       Margin="5"/>\n        </StackPanel>\n        <HierarchicalDataTemplate.ItemTemplate>\n            <DataTemplate>\n                <StackPanel Orientation="Horizontal">\n                    <Image Source="Images/checkmark.jpg"\n                           Margin="3"\n                           Width=""50" />\n                    <TextBlock Text="{Binding Path=OrderDate, StringFormat=d}"\n                               Margin="5" />\n                </StackPanel>\n            </DataTemplate>\n        </HierarchicalDataTemplate.ItemTemplate>\n    </HierarchicalDataTemplate>\n</UserControl.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-097")])]),e._v(" "),a("p",[e._v("It still has the same key as before, so that the ItemTemplate can point to it. It's got the same root\n                        level structure of a StackPanel with an Image and a TextBlock next to it, but then it's got two\n                        additional things.\n                    ")]),e._v(" "),a("p",[e._v("The first is the ItemsSource property.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<HierarchicalDataTemplate x:Key="CustomerTemplate"\n        ItemsSource="{Binding Orders}">\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 05-098")])]),e._v(" "),a("p",[e._v("The ItemsSource property on a HierarchicalDataTemplate points to some property hanging off of the\n                        current node object, which will be a customer, in this case, that is a collection itself, a child\n                        collection. So in this case, the child collection of orders for a given customer will be on an\n                        Orders property of the Customer object. That sets up the notion that there's more to render at a\n                        child level, and then the ItemTemplate property of the HierarchicalDataTemplate allows us to supply\n                        what is the DataTemplate that is going to be used to render that.\n                    ")]),e._v(" "),a("p",[e._v("And here, one level down:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<HierarchicalDataTemplate.ItemTemplate>\n    <DataTemplate>\n        <StackPanel Orientation="Horizontal">\n            <Image Source="Images/checkmark.jpg"\n                   Margin="3"\n                   Width=""50" />\n            <TextBlock Text="{Binding Path=OrderDate, StringFormat=d}"\n                       Margin="5" />\n        </StackPanel>\n    </DataTemplate>\n</HierarchicalDataTemplate.ItemTemplate>\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 05-099")])]),e._v(" "),a("p",[e._v("we can see we can just use a normal DataTemplate at that level and we have some simple structure\n                        there with another StackPanel with an Image and a TextBlock, in this case, binding against the\n                        OrderDate using a StringFormat for a short Date string and we'll have the Image pointing to some\n                        stock image there.\n                    ")]),e._v(" "),a("p",[e._v("With that in place, if we run, we'll get one level of expansion based on that Orders collection, on\n                        each customer. So we go to the HierarchicalDataTemplatesView, you can see we have the Expander icon\n                        here, and when we expand, we see the orders for Puckett and the orders for Russell, and so on.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(338)}}),e._v(" "),a("figcaption",[e._v("Fig 05-100")])]),e._v(" "),a("p",[e._v("Now we can take this even deeper and I can replace this HierarchicalDataTemplate with an even bigger\n                        one that goes one level deeper. So we still have the root HierarchicalDataTemplate that our\n                        ItemTemplate is pointing to.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n    <HierarchicalDataTemplate x:Key="CustomerTemplate"\n                              ItemsSource="{Binding Orders}">\n        <StackPanel Orientation="Horizontal">\n            <Image Source="Images/person.jpg"\n                   Margin="3"\n                   Width="50" />\n            <TextBlock Text="{Binding LastName}"\n                       Margin="5"/>\n        </StackPanel>\n        <HierarchicalDataTemplate.ItemTemplate>\n            <HierarchicalDataTemplate ItemsSource="{Binding OrderItems}">\n                <StackPanel Orientation="Horizontal">\n                    <Image Source="Images/checkmark.jpg"\n                           Margin="3"\n                           Width=""50" />\n                    <TextBlock Text="{Binding Path=OrderDate, StringFormat=d}"\n                               Margin="5" />')])]),e._v(" "),a("figcaption",[e._v("Fig 05-101")])]),e._v(" "),a("p",[e._v("It's got the binding to the Orders collection on each customer and the structure for each customer.\n                        Then it's got the ItemTemplate for each Order in that Orders collection, which again, has its root\n                        structure that's a StackPanel, but then it has its own ItemsSource that says each order has an\n                        OrderItems property.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<HierarchicalDataTemplate.ItemTemplate>\n    <HierarchicalDataTemplate ItemsSource="{Binding OrderItems}">\n        <StackPanel Orientation="Horizontal">\n            <Image Source="Images/checkmark.jpg" Margin="3" Width="50"/>\n            <TextBlock Text="{Binding Path=OrderDate, StringFormat=d}" Margin="5"/>\n        </StackPanel>\n        <HierarchicalDataTemplate.ItemTemplate>\n            <DataTemplate>\n                <StackPanel Orientation="Horizontal">\n                    <Border BorderBrush="Blue" BorderThickness="2" CornerRadius="3">\n                        <Image Source="Images/items.jpg" Margin="3" Width="50"/>\n                    </Border>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-102")])]),e._v(" "),a("p",[e._v("For each OrderItem, what is the template for that? We go another level down and specify the\n                        ItemTemplate for that child HierarchicalDataTemplate and give it some structure:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<HierarchicalDataTemplate.ItemTemplate>\n    <DataTemplate>\n        <StackPanel Orientation="Horizontal">\n            <Border BorderBrush="Blue" BorderThickness="2" CornerRadius="3">\n                <Image Source="Images/items.jpg" Margin="3" Width="50"/>\n            </Border>\n            <TextBlock Text="{Binding Path=Product.Name, StringFormat=d}" Margin="5" VerticalAlignment="Center"/>\n        </StackPanel>\n    </DataTemplate>\n</HierarchicalDataTemplate.ItemTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-103")])]),e._v(" "),a("p",[e._v("And in this case, if this is our leaf node, we can just use a standard DataTemplate. So if we run\n                        this, go to the HierarchicalDataTemplatesView, expand down to Orders, and expand down to OrderItems,\n                        then we can see we have different icons and different levels for those.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(339)}}),e._v(" "),a("figcaption",[e._v("Fig 05-104")])]),e._v(" "),a("p",[e._v("Now the problem with what we've shown so far is, this works if there's a single child collection per\n                        level of the hierarchy that you want to drill down into, but what if there's multiple child\n                        collections and what if they are composed of heterogeneous derived types from some base type, such\n                        as Product as a base type and then specific product-derived types that have their own DataTemplates?\n                        Well, the good news is, you can mix HierarchicalDataTemplates with the concept of\n                        ImplicitDataTemplates.\n                    ")]),e._v(" "),a("p",[e._v("So I'm going to replace all of these HierarchicalDataTemplates with a series of three DataTemplates\n                        in our Resource collection.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n    <HierarchicalDataTemplate DataType="{x:Type data:Customer}" ItemsSource="{Binding Orders}">\n        <TextBlock Text="{Binding LastName}"/>\n    </HierarchicalDataTemplate>\n    <HierarchicalDataTemplate DataType="{x:Type data:Order}" ItemsSource="{Binding OrderItems}">\n        <TextBlock Text="{Binding OrderDate}"/>\n    </HierarchicalDataTemplate>\n    <DataTemplate DataType="{x:Type data:OrderItem}">\n        <TextBlock Text="{Binding Product.Name}"/>\n    </DataTemplate>\n</UserControl.Resources>\n<Grid>\n    <TreeView ItemsSource="{Binding Customers}"/>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-105")])]),e._v(" "),a("p",[e._v("Notice these are ImplicitDataTemplates using the DataType property to say, if a given data-bound node\n                        happens to be a Customer object, then we render it out with this content\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<HierarchicalDataTemplate DataType="{x:Type data:Customer}" ItemsSource="{Binding Orders}">\n    <TextBlock Text="{Binding LastName}"/>\n</HierarchicalDataTemplate>\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 05-106")])]),e._v(" "),a("p",[e._v("as our DataTemplate and we can have an ItemSource for that. Now we don't have to specify the\n                        ItemTemplate here for those orders, because that can be matched up with a separate\n                        ImplicitDataTemplate:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<HierarchicalDataTemplate DataType="{x:Type data:Order}" ItemsSource="{Binding OrderItems}">\n    <TextBlock Text="{Binding OrderDate}"/>\n</HierarchicalDataTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-107")])]),e._v(" "),a("p",[e._v("so here we have another ImplicitDataTemplate that maps to Order objects and it knows how to render\n                        out those nodes and what child collection it can bind against on those nodes.\n                    ")]),e._v(" "),a("p",[e._v("And then finally, down at the leaf node level, for OrderItem, it's got the structure for those")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate DataType="{x:Type data:OrderItem}">\n    <TextBlock Text="{Binding Product.Name}"/>\n</DataTemplate>\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 05-108")])]),e._v(" "),a("p",[e._v("So then we just get rid of the ItemTemplate down here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <TreeView ItemsSource="{Binding Customers}"/>\n    <!--<TreeView ItemsSource="{Binding Customers}" ItemTemplate="{StaticResource CustomerTemplate}"/>-->\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 05-109")])]),e._v(" "),a("p",[e._v("and go ahead and run, switch to the HierarchicalDataTemplatesView, and now you can see the rendering\n                        is simpler.\n                    ")]),e._v(" "),a("p",[e._v("I don't have images involved in the templates now, but you can see we've got the name of the\n                        customer, the Order Date for the order, and the Product name for the OrderItems.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(340)}}),e._v(" "),a("figcaption",[e._v("Fig 05-110")])]),e._v(" "),a("p",[e._v("So it's able to match up the right DataTemplate for the right node in the Tree based on the type of\n                        the data object being rendered.\n                    ")]),e._v(" "),a("p",[e._v("And again, this would allow us to have multiple derived types in a heterogeneous collection in those\n                        child collections, and each one could render out its respective DataTemplate, similar to what we saw\n                        with rendering different Views for different ViewModel Types.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("In this module, we saw how you could use DataTemplates to start to put together a much more complex\n                        visual structure for the way you render out individual data-bound objects.\n                    ")]),e._v(" "),a("p",[e._v("We saw that at a high level, DataTemplates supply that visual structure for the way you're going to\n                        render out a given data-bound object in a data binding scenario. And we talked about the fact that\n                        the main place this is going to apply is in ContentControls or ItemsControls, which certainly could\n                        be nested down inside of something like a cell of a DataGrid.\n                    ")]),e._v(" "),a("p",[e._v("First we dove into ExplicitDataTemplates where you saw you define a DataTemplate, you give it a name,\n                        and you explicitly hook it up to the data-bound control through the ItemTemplate property or the\n                        ContentTemplate property.\n                    ")]),e._v(" "),a("p",[e._v("Next, we looked at ImplicitDataTemplates, which can auto-associate an appropriate DataTemplate based\n                        on the data-bound object type, using the DataType property of the DataTemplate and the x:Type markup\n                        extension to point to the data object type.\n                    ")]),e._v(" "),a("p",[e._v("Then we covered DataTemplateSelectors, which give you a chunk of logic that you can write to\n                        dynamically determine which DataTemplate to use for a given data-bound object, and that logic can be\n                        based on whatever criteria you want. It could be based on property values on the data-bound object,\n                        or other contextual information about the execution environment, such as who the user is or what day\n                        it is.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we finished off with HierarchicalDataTemplates, which apply the same capabilities to define\n                        the visual structure, but now we're talking about nodes in a hierarchical tree based on a\n                        hierarchical data model. We saw that HierarchicalDataTemplates let you specify what the child\n                        collections are at a given level in the hierarchy, as well as what DataTemplate to use for the\n                        objects in that level.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Authentication in Vue with OAuth2")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("OAuth Overview")]),e._v(" "),a("p",[e._v("In the last section we started doing a little bit of a detour away from the AppHeader component\n                        to discuss the Imgur API. We are going to continue our detour by discussing how we are going to\n                        make use of the Imgur API to handle authentication inside of our application.\n                    ")]),e._v(" "),a("p",[e._v("The following diagram illustrates the flow of authenticating our users through the Imgur API:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(164)}}),e._v(" "),a("figcaption",[e._v("Fig 05-001")])]),e._v(" "),a("p",[e._v("So this is a high level overview of the general flow that you and I are going to use. We are\n                        making a very big assumption that the users of our application already have an Imgur account .\n                        You and I are not going to have to require users to enter emails or passwords to identify\n                        themselves because they will have already done that through the Imgur service. So we are going\n                        to rely on Imgur's Authentication system to also authenticate users inside of our app as well.\n                    ")]),e._v(" "),a("p",[e._v("If you have seen the buttons that say Login with Facebook or Login with Google you will have\n                        experienced an OAuth flow in action. So applications that show those buttons delegate our the\n                        process of authenticating the user to some outside service like Facebook, Google, Linked In or\n                        Imgur.\n                    ")]),e._v(" "),a("p",[e._v("So everythings going to begin by a user coming to our application and clicking the Login button\n                        at which point we will forcibly navigate our users over to the Imgr OAuth flow. This means we\n                        literally change the Url inside the users browser to go to a page on the Imgur website that\n                        tells Imgur that we are attempting to authenticate the user inside of our application. The user\n                        will be prompted with a message that the Image Storage application want to get access to your\n                        account for the purposes of authentication. They can either allow this or not.\n                    ")]),e._v(" "),a("p",[e._v("Assuming the user authorizes Imgur to allow access to the Image Store application Imgur will\n                        redirect the user back to our application - changing the Url back to our application. When the\n                        redirect is performed Imgur inserts a token at the end of the Url. This is a string of random\n                        numbers and letters that defines that this application has been given access to this users\n                        account and has the ability to perform certain actions on the Imgur web site on behalf of the\n                        user such as uploading images.\n                    ")]),e._v(" "),a("h3",[e._v("Imgur API Signup")]),e._v(" "),a("p",[e._v("In this section we're going to create a new Imgur account which is going to allow us to sign up\n                        for a developer set of credentials to work with the Imgur API directly.\n                    ")]),e._v(" "),a("p",[e._v("On the Imgur website click the Signup button and provide the required details. This will create a\n                        regular user account. To enable a developer account with API keys we need to "),a("a",{attrs:{href:"https://apidocs.imgur.com/"}},[e._v("register our application")]),e._v(" - the link to do this is\n                        available from the Imgur documentation. Enter the following details:\n                    ")]),e._v(" "),a("table",[a("tr",[a("td",[e._v("Application Name")]),e._v(" "),a("td",[e._v("Vue Image Storage App")])]),e._v(" "),a("tr",[a("td",[e._v("Authorization Type")]),e._v(" "),a("td",[e._v("OAuth 2 authorization with a callback URL")])]),e._v(" "),a("tr",[a("td",[e._v("Authorization callback URL")]),e._v(" "),a("td",[e._v("http://localhost:8080/oauth2/callback")])]),e._v(" "),a("tr",[a("td",[e._v("Email")]),e._v(" "),a("td",[e._v("maxsage@gmail.com")])]),e._v(" "),a("tr",[a("td",[e._v("Description")]),e._v(" "),a("td",[e._v("Test application for Image upload")])])]),e._v(" "),a("p",[e._v("We get a Client ID and Client secret which should be copied to Notepad. The Client ID identifies\n                        our application to Imgur and the Client Secret allows us to do some more secure actions on the\n                        Imgur API.\n                    ")]),e._v(" "),a("p",[e._v("That completes our signup for Imgur API. Next we will implement the OAuth flow.")]),e._v(" "),a("h3",[e._v("Handling App Logic")]),e._v(" "),a("p",[e._v("Now we will write the actual code that will let a use navigate over to the Imgur flow, send them\n                        back to our application with a token and then presumably do some interesting things inside of\n                        our application.\n                    ")]),e._v(" "),a("p",[e._v("One consideration is where to place all the code for handling this authentication flow.")]),e._v(" "),a("p",[e._v("If we think back to our VideoBrowser application you'll remember we had the App component,\n                        VideoDetail, VideoList, VideoListItem and the SearchBar. When it came to state or data inside of\n                        our application it was all concentrated inside of the App component - so it stored the list of\n                        videos and the currently selected video.\n                    ")]),e._v(" "),a("p",[e._v("It was very simple to have the App in charge of knowing the currently selected video because it\n                        could then very easily communicate that down to the VideoDetail and each time the user clicked\n                        on a video from the VideoListItem that got communicated up to the App.\n                    ")]),e._v(" "),a("p",[e._v("However, as we start to work on this App, things are bit different. The following diagram details\n                        some of the components:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(165)}}),e._v(" "),a("figcaption",[e._v("Fig 05-002.png")])]),e._v(" "),a("p",[e._v("In total we are probably going to end up with fewer components than in the VideoBrowser\n                        application. However the amount of information that is going to be exchanged between these\n                        components is going to be dramatically increased.\n                    ")]),e._v(" "),a("p",[e._v("We are going to have the token which needs to be known by the App component so that it can modify\n                        the display of the AppHeader. In addition the ImageList will need to know whether the user is\n                        signed in and if so who they are so that the ImageList can fetch the list of images that have\n                        been uploaded by the user. And then finally the UploadForm definitely needs to know about the\n                        token and wheter the user is logged in or not because we have to use that token to actually\n                        handle image upload over to the Imgur API.\n                    ")]),e._v(" "),a("p",[e._v("So even though it might still sound like all the components are just using pieces of information\n                        that can be handled by the App component consider if the application was to grow in complexity:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(166)}}),e._v(" "),a("figcaption",[e._v("Fig 05-003")])]),e._v(" "),a("p",[e._v("So maybe inside of the app you've got the AppHeader which has some AuthButtons and ProfileImage\n                        components. Perhaps the UploadForm has some fancy drag and drop functionality or progress bar\n                        tied to it that you add to an ImageUploader component. Maybe the ImageListItem component shows\n                        comments and for each comment we display a ProfileImage component as well.\n                    ")]),e._v(" "),a("p",[e._v("If you think about the above component structure and consider how you would share whether or not\n                        a user was logged in throughout all of these components you can start to see how that would be a\n                        little bit of a hassle.\n                    ")]),e._v(" "),a("p",[e._v("Almost every single link in the chain in the diagram above would need to pass down information\n                        about whether or not a user was signed in down to it's child component.\n                    ")]),e._v(" "),a("p",[e._v("A better way to store information in our application is to use the Vuex library which we will\n                        look at in the next section.\n                    ")]),e._v(" "),a("h3",[e._v("Vuex Introduction")]),e._v(" "),a("p",[e._v("So as soon as we start dealing with larger applications that have many different components that\n                        need to exchange a lot of different information between components we might start to run into\n                        some scaling issues if we stick to using just the Vue library.\n                    ")]),e._v(" "),a("p",[e._v("To solve this issue of maintaining information in larger applications you and I are going to make\n                        use of a library called Vuex. You'll recall we spoke briefly about that library when we\n                        discussed some of the issues that we might encounter whilst creating our application in the App\n                        Overview section earlier.\n                    ")]),e._v(" "),a("p",[e._v("We will look at what our completed application will look like then we will discuss what Vuex is\n                        actually doing internally to help us:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(167)}}),e._v(" "),a("figcaption",[e._v("Fig 05-004.png")])]),e._v(" "),a("p",[e._v("So in addition to our existing components you and I are going to add the Vuex library to handle\n                        the flow and updating of information inside of our App. We are going to create two separate\n                        modules inside of Vuex. The first module is going to be the Auth Module and the second is going\n                        to be the Image Module. These modules will contain all of the code and data related to their\n                        particular purpose. So the Auth Module will:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Storing whether the user is logged in or not")]),e._v(" "),a("li",[e._v("Signing the user in")]),e._v(" "),a("li",[e._v("Signing the user out")])]),e._v(" "),a("p",[e._v("The Image Module will:")]),e._v(" "),a("ul",[a("li",[e._v("Fetch all the images that the user has uploaded")]),e._v(" "),a("li",[e._v("Handle uploading images")])]),e._v(" "),a("p",[e._v("When we start to locate all of this kind of business logic inside these two modules it means we\n                        will be writing far less business logic inside of our components which means the component can\n                        focus on presenting information to the user. So the components will still have things like click\n                        events inside them but they wont, for example, make Ajax requests using Axios.\n                    ")]),e._v(" "),a("h3",[e._v("Vuex Modules")]),e._v(" "),a("p",[e._v("In the last section we started talking about how our application is going to have two separate\n                        Vuex modules - the Auth Module and the Image Module. In this section we will dive a bit deeper\n                        into how these modules will be structured and the kind of code we will be adding to them.\n                    ")]),e._v(" "),a("p",[e._v("First off every module that you and I create is going to have four separate parts to it:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(168)}}),e._v(" "),a("figcaption",[e._v("Fig 05-005")])]),e._v(" "),a("p",[e._v("Instead of giving you some boring definition of what each of the parts do we will go through a\n                        very practical example of a module. We're going to imagine that we are going to create a Vuex\n                        module for handling Car inventory at an imaginary dealership.\n                    ")]),e._v(" "),a("p",[e._v("We're going to first start off with state:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(169)}}),e._v(" "),a("figcaption",[e._v("Fig 05-006")])]),e._v(" "),a("p",[e._v("State is probably the easiest part to picture in your head and get a sense of what it's really\n                        doing for us. The state section of a module holds all of the raw data related to this particular\n                        module. So in the case of a Car Inventory the raw record or most core unit would probably be a\n                        Car - probably an object with key value pairs describing the year that the car was built, it's\n                        make/model, price and other Car related details.\n                    ")]),e._v(" "),a("p",[e._v("So inside the state section you and I are going to have a bunch of different records that\n                        describe some core unit of data inside our application. You can think of this state section as\n                        being like a big bucket of data. As we start to fetch more records for our application we're\n                        just going to continually throw them into the big bucket of data we call state.\n                    ")]),e._v(" "),a("p",[e._v('At some point a customer will come into our car dealership and say to a salesperson "Hey, I\'m\n                        looking for budget cars" or "Hey, I\'m looking for a sports car". The Car salesperson won\'t want\n                        to look at a big list of cars and examine each record for the relevant information.\n                    ')]),e._v(" "),a("p",[e._v("So to handle the functionality of automatically sorting through records we use Getters:\n                    ")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(170)}}),e._v(" "),a("figcaption",[e._v("Fig 05-007")])]),e._v(" "),a("p",[e._v('So getters are functions that take the entire state object and do some filtering or computation\n                        on those records. So inside of our Car Inventory module you and I might decide to define some\n                        getters to retrieve all the cars that are defined as "budget vehicles" or all the cars that are\n                        defined as "off road". So, again, these are all functions that will take all of our records\n                        stored in state and return some subset.\n                    ')]),e._v(" "),a("p",[e._v("Getters don't necessarily have to do just a filtering operation - they can be used for any type\n                        of operation you can possibly imagine. Anything that is going to take our list of records in\n                        state and perform any type of operation.\n                    ")]),e._v(" "),a("p",[e._v("So we could, instead, have some getter defined inside of here called numberOfCars:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(171)}}),e._v(" "),a("figcaption",[e._v("Fig 05-008")])]),e._v(" "),a("p",[e._v("Which, because we have six cars currently in state, might just return the number six. So, as we\n                        said, the getters do not have to be used for just filtering operations. They can be used for any\n                        type of operation we might want to do on our records stored inside of state.\n                    ")]),e._v(" "),a("p",[e._v("Getters can be used to simply say return all the cars or all the records we have stored inside\n                        state. So we could define a getter called allCars and when we call that function it would simply\n                        return all the records we have stored inside of our state object.\n                    ")]),e._v(" "),a("p",[e._v("It is worth pointing out that State and Getters are closely related - so we've got the state\n                        defined and we've got the set of getters that somehow operate on that state.\n                    ")]),e._v(" "),a("p",[e._v("Now, the next two parts of a Vuex module - Mutations and Actions have a somewhat similar\n                        relationship to the one that is shared by State and Getters.\n                    ")]),e._v(" "),a("p",[e._v("With Mutations, we think of very explicit individual single step ways in which you and I would\n                        want to change the data stored inside of the state:\n                    ")]),e._v(" "),a("p",[e._v("So, in the context of a car dealership, some ways that we might operate on the state are:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(172)}}),e._v(" "),a("figcaption",[e._v("Fig 05-009")])]),e._v(" "),a("p",[e._v("All the above are single operations that might occur on the list of cars in state. The single\n                        operations are called Mutations. A mutation is a function that is going to operate on our list\n                        of records stored inside of state and make some small change. For example, we might call the\n                        setCarAsSold mutation on the Ford F150 which will set it as sold preventing any one else from\n                        purchasing it.\n                    ")]),e._v(" "),a("p",[e._v("Or maybe we would define a mutation that receives a new car from a manufacturer and adds it to\n                        our inventory. So we would call addCarToInventory that takes one individual car and adds it into\n                        our state object.\n                    ")]),e._v(" "),a("p",[e._v("We obviously attempt to name the mutations so they indicate what their purpose is.")]),e._v(" "),a("p",[e._v("As we discussed, our last part, Actions have a very close relationship to mutations. Actions\n                        allow us to define functions that assemble together multiple mutations to make some intelligent\n                        change to the list of records that are stored inside our state.\n                    ")]),e._v(" "),a("p",[e._v("So, for example, we might define an action as a function called SellCar:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(173)}}),e._v(" "),a("figcaption",[e._v("Fig 05-010")])]),e._v(" "),a("p",[e._v("So anytime we sell a car chances are we are going to perform several different Mutations to our\n                        list of records stored inside of the state object.\n                    ")]),e._v(" "),a("p",[e._v("So an action is a function that assembles together multiple mutations and it calls them all in\n                        some sequence. It isn't mandatory for an Action to call multiple mutations - we could define an\n                        action that does just one single mutation:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(174)}}),e._v(" "),a("figcaption",[e._v("Fig 05-011.png")])]),e._v(" "),a("p",[e._v("However, in general, the idea behind actions is that we're going to take multiple mutations and\n                        call them all in some distinct order.\n                    ")]),e._v(" "),a("p",[e._v("Ok so that wraps up our first take on Vuex modules.")]),e._v(" "),a("h3",[e._v("Connecting Vuex to Vue")]),e._v(" "),a("p",[e._v("In the last section we had a long discussion about Vuex modules. We are now going to create the\n                        Auth module. We are also going to perform some one-time setup of Vuex within our project . After\n                        that is complete we can add as many modules as we want to.\n                    ")]),e._v(" "),a("p",[e._v("Create a new folder in the src directory called store. This folder is going to contain all of our\n                        Vue related code.\n                    ")]),e._v(" "),a("p",[e._v("Create a new file in the store directory called index.js. This is way the initial setup of Vue is\n                        going to take place. Add the following code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import Vuex from 'vuex';\nimport Vue from 'vue';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    modules: {}\n});")]),e._v(" "),a("figcaption",[e._v("Fig 05-012")])]),e._v(" "),a("p",[e._v("We import the Vuex library, then we import the Vue library and issue the "),a("code",{staticClass:"prettyprint"},[e._v("use")]),e._v(" command to tell Vue that we want to use the Vuex library.\n                        Vuex can be used with other libraries.\n                    ")]),e._v(" "),a("p",[e._v("Next we create a new Vuex store and pass an object called modules. As we create more modules we\n                        will register them with Vuex by adding them to the modules object.\n                    ")]),e._v(" "),a("p",[e._v("As we've been working on Vue we've been creating components and we've said several times that\n                        those components have a relationship to Vue instances. We think of the Vue instances as being\n                        like instances of a class. It is a similar story with the Vuex Store. The Store is an\n                        overarching term for a collection of modules that have been assembled together and can then be\n                        interfaced with from our Vue code.\n                    ")]),e._v(" "),a("p",[e._v("We are now going to add code to our main.js and import our newly created Store and hook it up to\n                        the Vue instance:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import Vue from 'vue';\nimport App from './App';\nimport store from './store'\n\nnew Vue ({\n    store,\n    render: h => h(App)\n}).$mount('#app');\n")]),e._v(" "),a("figcaption",[e._v("Fig 05-013")])]),e._v(" "),a("p",[e._v("Notice the import statement:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import store from './store'")]),e._v(" "),a("figcaption",[e._v("Fig 05-014")])]),e._v(" "),a("p",[e._v("We don't need to add the "),a("code",{staticClass:"prettyprint"},[e._v("/index")]),e._v(" because whenever we have a file\n                        called "),a("code",{staticClass:"prettyprint"},[e._v("index.js")]),e._v(" we can just import the directory that it is\n                        contained in and Webpack will just assume that we are looking for the index.js file inside.\n                    ")]),e._v(" "),a("p",[e._v("Next we pass the store into the Vue instance. Again, because the key and the value are\n                        identically named we can use the condensed form of just "),a("code",{staticClass:"prettyprint"},[e._v("store ")]),e._v("\n                        instead of "),a("code",{staticClass:"prettyprint"},[e._v("store: store,")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("So back in the index.js the statement "),a("code",{staticClass:"prettyprint"},[e._v("Vue.use(Vuex)")]),e._v(" tells Vue\n                        that it needs to use the Vuex library. So it kinds of wires the two together and let's the two\n                        know that they exist. But an additional part to that is providing the store to the Vue instance\n                        which is the purpose of passing in the store when we create the new Vue instance in main.js.\n                    ")]),e._v(" "),a("h3",[e._v("Initial Auth Module Design")]),e._v(" "),a("p",[e._v("We are now going to start working on our Auth module which will contain all the code relate to\n                        Authentication.\n                    ")]),e._v(" "),a("p",[e._v("Create a new directory called "),a("code",{staticClass:"prettyprint"},[e._v("modules")]),e._v(" in the "),a("code",{staticClass:"prettyprint"},[e._v("store")]),e._v(" directory. Create a new file called auth.js.\n                    ")]),e._v(" "),a("p",[e._v("Let's briefly discuss the design of this module.")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(175)}}),e._v(" "),a("figcaption",[e._v("Fig 05-015")])]),e._v(" "),a("p",[e._v("Let's begin by doing a quick review of the overall authentication process. As discussed, we will\n                        be making use of Imgur's OAuth flow. So it all begins with the user clicking on the Log In\n                        button:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(176)}}),e._v(" "),a("figcaption",[e._v("Fig 05-016")])]),e._v(" "),a("p",[e._v("We then navigate the user to the Imgur OAuth flow, the user gives our app permission to access\n                        their Imgur account, the user comes back to our application with a token generated by Imgur (the\n                        token contains the information required to access the users account).\n                    ")]),e._v(" "),a("p",[e._v("The token is a very critical piece of information to our application - it's related to our actual\n                        authentication process. For this reason we will add it directly to our State object:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(177)}}),e._v(" "),a("figcaption",[e._v("Fig 05-017")])]),e._v(" "),a("p",[e._v("Now the chances are that when our application first starts up and the user has not logged in we\n                        will almost definitely not have a token when we get started. Initially we will set the token to\n                        null.\n                    ")]),e._v(" "),a("p",[e._v("So that takes care of our initial design of State. You might be surprised but there's really not\n                        a lot of other very root core variables in here tied to our core authentication process. You\n                        might be thinking that the API key or Client Id that we got when we signed up to Imgur might be\n                        classed as a piece of state. However the Client Id is actually a constant inside of our\n                        application which will never change.\n                    ")]),e._v(" "),a("p",[e._v("So the next thing to think about is Getters. Remember Getters allow us to do some type of\n                        computation on our state object. That saves us the time of having to rerun the computation\n                        inside of some individual component. So as we look at the application design we can start to\n                        think about where we want to make use of the information stored inside of the Auth module.\n                    ")]),e._v(" "),a("p",[e._v("In order to determine whether the user is logged in or not we will create a Getter function\n                        called isLoggedIn:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(178)}}),e._v(" "),a("figcaption",[e._v("Fig 05-018")])]),e._v(" "),a("p",[e._v("This function will look at our state object and check for the presence of a token. This will\n                        indicate if the user has successfully gone through our authentication process - null means the\n                        user has not performed the authentication process and is not logged in.\n                    ")]),e._v(" "),a("p",[e._v("Ok I can't think of any other getter that we might want to define around our authentication\n                        module.\n                    ")]),e._v(" "),a("h3",[e._v("Auth Module Mutations")]),e._v(" "),a("p",[e._v("Next we will discuss the Mutations and Actions that we might want to add into our Auth module. We\n                        will begin with the mutations section - remember mutations are functions that modify our state\n                        in some very particular fashion. They're intended to one very exact singular job and nothing\n                        else related to our state object.\n                    ")]),e._v(" "),a("p",[e._v("So in our case we have only one value inside of our state and it's going to only ever be null or\n                        an actual token. So as far as changing this very singular value I think that we really only need\n                        exactly one mutation. Let's call this mutation setToken - which will be a small function that is\n                        intended to only update the value of our token object inside the state object:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(179)}}),e._v(" "),a("figcaption",[e._v("Fig 05-019")])]),e._v(" "),a("p",[e._v("In the case of Actions we are going to have a little bit more stuff going on. So let's visit our\n                        OAuth flow and think through the actual process:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(180)}}),e._v(" "),a("figcaption",[e._v("Fig 05-020.png-")])]),e._v(" "),a("p",[e._v("Remember the purpose of actions is to call a mutation at a very particular time or call multiple\n                        mutations in a very particular order. So the only times I can think of where we would want to\n                        call that mutation at all is when we come back from the Imgur API to our application with the\n                        token inside the Url. At that point in time we're going to want to take that token out of the\n                        Url and call the setToken mutation.\n                    ")]),e._v(" "),a("p",[e._v("So we will call our Action finalizeLogin:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(181)}}),e._v(" "),a("figcaption",[e._v("Fig 05-021")])]),e._v(" "),a("p",[e._v("We use finalize because this is really the last step in our authentication process. So the\n                        finalizeLogin Action will get the token that was provided to us by Imgur and call the setToken\n                        mutation.\n                    ")]),e._v(" "),a("p",[e._v("I think there will be one more action that we will want in our application - logout:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(182)}}),e._v(" "),a("figcaption",[e._v("Fig 05-022")])]),e._v(" "),a("p",[e._v("So if the presence of a token inside of our state object indicates whether or not the user is\n                        logged in we can log a user out by setting the token to be "),a("code",{staticClass:"prettyprint"},[e._v("null")]),e._v(".\n                        So the "),a("code",{staticClass:"prettyprint"},[e._v("logout")]),e._v(" function also needs to call "),a("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" and make sure that it attempts to update the token\n                        value in state to be "),a("code",{staticClass:"prettyprint"},[e._v("null")]),e._v(" - hence the arrow in the diagram.\n                    ")]),e._v(" "),a("p",[e._v("We will add one more additional action called login which will be responsible for kicking off the\n                        initial authentication flow:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(183)}}),e._v(" "),a("figcaption",[e._v("Fig 05-023")])]),e._v(" "),a("p",[e._v("The login Action is not going to call a mutation or anything like that. We are just putting the\n                        login function in the Actions section of our module because it makes a lot of sense to group all\n                        the authentication stuff together.\n                    ")]),e._v(" "),a("p",[e._v("That concludes our initial Auth module design")]),e._v(" "),a("h3",[e._v("Auth Module State and Getters")]),e._v(" "),a("p",[e._v("We are now going to work on adding code to the auth.js file we created earlier. Inside this file\n                        we are going to define four separate objects which will map to one the different pieces of our\n                        module that we've been discussing in the last couple of sections:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const state = {\n\n};\n\nconst getters = {\n\n};\n\nconst actions = {\n\n};\n\nconst mutations = {\n\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-024")])]),e._v(" "),a("p",[e._v("We will now add a couple of properties to each of these four objects to map up against the design\n                        that we just created in the last section. We'll get started by working on State with the token\n                        property with an initial value of null:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const state = {\n    token: null\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-025")])]),e._v(" "),a("p",[e._v("Next we will look at the Getters section. The only getter that we're going to have for this\n                        module is "),a("code",{staticClass:"prettyprint"},[e._v("isLoggedIn")]),e._v(". Remember that, in this case, these are\n                        functions which are going to take our entire state object do some computation on it and then\n                        return if from the function:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const getters = {\n    isLoggedIn: (state) => {\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-026")])]),e._v(" "),a("p",[e._v("This function is going to be automatically called with the entire state object. One thing I want\n                        to clarify is that when I write state in the isLoggedIn function it is an argument to the\n                        function. It is not the same variable as state object we created earlier.\n                    ")]),e._v(" "),a("p",[e._v("So, as we said, to determine whether a user is logged in we are going to look at the value of the\n                        token property in the state object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const getters = {\n    isLoggedIn: (state) => {\n        return !!state.token\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-027")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("!!")]),e._v(" syntax is an easy way to turn a variable into a boolean.\n                        The two possible values of "),a("code",{staticClass:"prettyprint"},[e._v("token")]),e._v(" are going to be either "),a("code",{staticClass:"prettyprint"},[e._v("null")]),e._v(" or a string that has a random series of numbers and\n                        letters in it (the actual token)\n                    ")]),e._v(" "),a("p",[e._v("The boolean equivalent of null is "),a("code",{staticClass:"prettyprint"},[e._v("false")]),e._v(" so:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("!!null")]),e._v(" "),a("figcaption",[e._v("Fig 05-028")])]),e._v(" "),a("p",[e._v("Will return "),a("code",{staticClass:"prettyprint"},[e._v("false")]),e._v(". However the following statement:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("!!'jaij3i2o235o2i3j5io2oa'")]),e._v(" "),a("figcaption",[e._v("Fig 05-029")])]),e._v(" "),a("p",[e._v("Will return "),a("code",{staticClass:"prettyprint"},[e._v("true")]),e._v(".")]),e._v(" "),a("p",[e._v("We an make the function more concise by using the ES2015 arrow function syntax:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const getters = {\n    isLoggedIn: state => !!state.token\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-030")])]),e._v(" "),a("p",[e._v("So we have the function name of isLoggedIn, the argument that we are passing (our state object),\n                        our arrow "),a("code",{staticClass:"prettyprint"},[e._v("=>")]),e._v(", and then the flip of the state token to return\n                        a boolean.\n                    ")]),e._v(" "),a("h3",[e._v("Updating State Values")]),e._v(" "),a("p",[e._v("We've put together our state and getters objects. We're now going to look at the mutations\n                        object. Remember our mutations object has exactly one mutation assigned to it - this is going to\n                        be a function called "),a("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" which will try to update the\n                        value of "),a("code",{staticClass:"prettyprint"},[e._v("token")]),e._v(" inside of our State object. The "),a("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" function can be called from either "),a("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" or "),a("code",{staticClass:"prettyprint"},[e._v("logout:")]),e._v(".\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const mutations = {\n    setToken: (state, token) => {\n        state.token = token;\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-031")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" function always called with one initial first\n                        argument and then possibly some additional arguments. So you are always guaranteed to get the\n                        argument state as the very first argument. The second argument will depend on the which function\n                        calls the setToken function.\n                    ")]),e._v(" "),a("p",[e._v("Inside the "),a("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" function we are going to update our state\n                        object. In reality this doesn't involve any API calls or anything like that, we just literally\n                        update the values stored inside of our state object.\n                    ")]),e._v(" "),a("p",[e._v("That's pretty much it for mutations.")]),e._v(" "),a("h3",[e._v("Logging Out with Actions")]),e._v(" "),a("p",[e._v("We will now look at the Action object which, as you may remember, is going to have three\n                        functions tied to it: login, finalizeLogin, logout.\n                    ")]),e._v(" "),a("p",[e._v("Let's start with logout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    logout: ({ commit }) => {\n        commit('setToken', null);\n\n}")]),e._v(" "),a("figcaption",[e._v("Fig 05-032")])]),e._v(" "),a("p",[e._v("The actions we create are going to have a very similar method signature to what we discussed with\n                        mutations. So the first argument to the actions is always going to be guaranteed to be some\n                        particular value (that we will discuss in just a second) and then any additional arguments will\n                        be optionally provided.\n                    ")]),e._v(" "),a("p",[e._v("So the first argument inside of every single action is going be an object that has a couple of\n                        different properties assigned to it that allow us to work with the Vuex instance that we are\n                        contained in. We are interested in the "),a("code",{staticClass:"prettyprint"},[e._v("commit")]),e._v(" property. The\n                        "),a("code",{staticClass:"prettyprint"},[e._v("commit")]),e._v(" property is a function which is used to call the\n                        mutations we have defined. We do not call mutations in the following way:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("mutations.setToken // bad !!")]),e._v(" "),a("figcaption",[e._v("Fig 05-033")])]),e._v(" "),a("p",[e._v("So, to call a mutation we write "),a("code",{staticClass:"prettyprint"},[e._v("commit('mutationName');")]),e._v(".\n                        Remember that in the case of our logout action to logout a user all we need to do is set our\n                        token in state to null:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("commit('setToken', null);")]),e._v(" "),a("figcaption",[e._v("Fig 05-034")])]),e._v(" "),a("p",[e._v("The first argument is the mutation name. The second argument - null is going to be the token\n                        argument that get's provided to the mutation.\n                    ")]),e._v(" "),a("p",[e._v("It may seem unnecessary to have the additional layer of an action here just to call the mutation\n                        - why don't we just call setToken directly ourselves? Remember the idea behind an action is we\n                        might want to call multiple mutations from inside of one action or we might want to say make an\n                        Ajax request where we might want to perform some asynchronous operation.\n                    ")]),e._v(" "),a("p",[e._v("So even though our logout action is very simple we might eventually have actions that span many\n                        different lines of code and make many different network requests, calling many different\n                        mutations. So the idea is that we try to stuff as much complexity inside our Vuex store into\n                        these actions. We can then leave our mutations, state and getters a little bit more simple and\n                        straightforward.\n                    ")]),e._v(" "),a("p",[e._v("We can't really test this action yet because we don't even have the ability to login to our\n                        application. We will resolve this shortly.\n                    ")]),e._v(" "),a("h3",[e._v("Separate API Helpers")]),e._v(" "),a("p",[e._v("We are now going to work on the login action. The Imgur documentation contains a section on "),a("a",{attrs:{href:"https://apidocs.imgur.com/#authorization-and-oauth"}},[e._v("Authorization and OAuth")]),e._v(". To\n                        access a user's account we have to get the user to authorize our application so we can get an\n                        access token. To do this we point a browser (pop-up, or full page redirect if needed) to a URL\n                        and include a set of query string parameters.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("https://api.imgur.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&response_type=REQUESTED_RESPONSE_TYPE&state=APPLICATION_STATE")]),e._v(" "),a("figcaption",[e._v("Fig 05-035")])]),e._v(" "),a("p",[e._v("We have the route url with a path of oauth2/authorize. After that we have a couple of parameters\n                        which we need to specify:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("client_id: The Id we received when we signed up for the Imgur API")]),e._v(" "),a("li",[e._v("response_type: Now deprecated. There used to be a couple of different ways of getting\n                            information back from Imgur API and then performing actions on the users behalf. Now token\n                            is the only option.\n                        ")]),e._v(" "),a("li",[e._v("state: Gives the ability to optionally pass in some information about this particular user\n                            as they are going through the OAuth flow.\n                        ")])]),e._v(" "),a("p",[e._v("Next we will add the code to redirect the user to the above Url. Bear in mind that later we will\n                        create an Images module:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(184)}}),e._v(" "),a("figcaption",[e._v("Fig 05-036")])]),e._v(" "),a("p",[e._v("Chances are that the Images module will also need to work with the Imgur API. If we were to\n                        locate all our logic directly with the API inside these actions then we're probably going to end\n                        up with a lot of duplicated code in the two (or more) modules shown above.\n                    ")]),e._v(" "),a("p",[e._v("I suggest we create a new file - so this is not a separate Vuex module or anything - just a\n                        separate file called imgur.js. We will add all the code to make network requests and work with\n                        the Imgur API etc. to this file. The login and fetchImages functions can then call the code in\n                        that file instead:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(185)}}),e._v(" "),a("figcaption",[e._v("Fig 05-037")])]),e._v(" "),a("p",[e._v("This will dramatically reduce the amount of networking related code that we would otherwise be\n                        duplicating.\n                    ")]),e._v(" "),a("h3",[e._v("Forming the OAuth2 URL")]),e._v(" "),a("p",[e._v("Create a new folder under the "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" directory called "),a("code",{staticClass:"prettyprint"},[e._v("api")]),e._v(" and add a new file to this directory called "),a("code",{staticClass:"prettyprint"},[e._v("imgur.js")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("So the first thing we need to do is setup some function inside of here that will kick off our\n                        login process. To achieve this we will create an object. We will add a couple of properties to\n                        this object over time.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    login() {\n\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-037")])]),e._v(" "),a("p",[e._v("Define the Imgur ClientId that we were allocated when we created our Imgur account as a constant\n                        (hence the capitals) to enable it to be used by several different functions:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const CLIENT_ID = 'c3feb8623a2803b';")]),e._v(" "),a("figcaption",[e._v("Fig 05-038")])]),e._v(" "),a("p",[e._v("Next we define a helper variable to hold the root Url. This will save us lots of retyping the\n                        same Url over and over again:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const ROOT_URL = 'https://api.imgur.com';")]),e._v(" "),a("figcaption",[e._v("Fig 05-039")])]),e._v(" "),a("p",[e._v("Inside the login function add the following code:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[e._v("import qs from 'qs';\n\nconst CLIENT_ID = 'c3feb8623a2803b';\nconst ROOT_URL = 'https://api.imgur.com';\n\nexport default {\n    login() {\n        const querystring = {\n            client_id: CLIENT_ID,\n            response_type: 'token'\n        };\n\n        window.location = `${ROOT_URL}/oauth2/authorize?${qs.stringify(querystring )}`;\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-040")])]),e._v(" "),a("p",[e._v("At the top of the file we import the qs library that we discussed in a (much) earlier section. We\n                        create a template string by using the back tick "),a("code",{staticClass:"prettyprint"},[e._v("`")]),e._v(" character. We\n                        first add the "),a("code",{staticClass:"prettyprint"},[e._v("ROOT_URL")]),e._v(" and append the /oauth2/authorize? the\n                        question mark indicates the start\n                        of the query string. We use the "),a("code",{staticClass:"prettyprint"},[e._v("stringify")]),e._v(" function and pass\n                        in the "),a("code",{staticClass:"prettyprint"},[e._v("querystring")]),e._v(" constant.\n                    ")]),e._v(" "),a("p",[e._v("We assign the expression we just defined to "),a("code",{staticClass:"prettyprint"},[e._v("window.location ")]),e._v("\n                        which will redirect the user's browser to the location specified.\n                    ")]),e._v(" "),a("h3",[e._v("Initiating the Login Flow")]),e._v(" "),a("p",[e._v("Now that we've create this login function we need to make sure we have the ability to call it\n                        from within our auth module.\n                    ")]),e._v(" "),a("p",[e._v("In auth.js we need to import our helper file:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import api from '../../api/imgur';")]),e._v(" "),a("figcaption",[e._v("Fig 05-041")])]),e._v(" "),a("p",[e._v("So the "),a("code",{staticClass:"prettyprint"},[e._v("api")]),e._v(" variable we just declared in the "),a("code",{staticClass:"prettyprint"},[e._v("import")]),e._v(" statement above is now this entire object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("login() {\n        const querystring = {\n            client_id: CLIENT_ID,\n            response_type: 'token'\n        };\n\n        window.location = `${ROOT_URL}/oauth2/authorize?${qs.stringify(querystring )}`;\n    }")]),e._v(" "),a("figcaption",[e._v("Fig 05-042")])]),e._v(" "),a("p",[e._v("So one variable or one function on the "),a("code",{staticClass:"prettyprint"},[e._v("api")]),e._v(" object is the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("login")]),e._v(" function. Next we will create a new action called\n                        "),a("code",{staticClass:"prettyprint"},[e._v("login")]),e._v(" in the "),a("code",{staticClass:"prettyprint"},[e._v("auth")]),e._v(" module to\n                        kick off the actual login attempt. This action will call the api login function:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const actions = {\n    login: () => {\n        api.login();\n    },\n    logout: ({ commit }) => {\n        commit('setToken', null);\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-043")])]),e._v(" "),a("p",[e._v("As soon as we call "),a("code",{staticClass:"prettyprint"},[e._v("api.login")]),e._v(" it's going to cause our browser\n                        to automatically navigate away from our application.")]),e._v(" "),a("p",[e._v("We can't immediately test this because there are one or two last little steps we have to\n                        perform. At this point in time we have created our auth module inside the auth.js file but\n                        we have not actually hooked this file up to anything inside of our application. We have not\n                        connected this module, we've not connected state, getters, actions to anything inside of our\n                        application yet.\n                    ")]),e._v(" "),a("h3",[e._v("Wiring in the Auth Module")]),e._v(" "),a("p",[e._v("We are now going to wire up the auth module. Inside the auth module add an export statement to\n                        the bottom of the file to export our state object, getters and mutations:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    state,\n    getters,\n    actions,\n    mutations\n};")]),e._v(" "),a("figcaption",[e._v("Fig 05-044")])]),e._v(" "),a("p",[e._v("Again because the keys and values are identical we use the ES 2015 shorthand syntax. Now one\n                        thing to keep in mind here is that the names of each of these objects are very important\n                        because we specifically want to have a key called state that contains our state object. ")]),e._v(" "),a("p",[e._v("Now that we've exported those four pieces from the auth module we're going to open up our\n                        index.js file inside of our store directory and wire it up: ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import Vuex from 'vuex';\nimport Vue from 'vue';\nimport auth from './modules/auth';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    modules: {\n        auth\n    }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 05-045")])]),e._v(" "),a("p",[e._v("Firstly we import the auth module. Nex we add the auth module to the modules object. One thing\n                        that's key to keep in mind here is that whatever name or key that you use inside the modules\n                        object is going to affect how you actually access data from within your Vue components - we\n                        use a key of auth and again because the key and value are identical we condense it down to auth.\n                    ")]),e._v(" "),a("p",[e._v("Ok so the above code wires up our auth module to our Vuex instance. Remember that back inside\n                        of our main.js file we then took that instance that we created:")]),e._v(" "),a("code",{staticClass:"prettyprint"},[e._v("import store from './store';")]),e._v(" "),a("p",[e._v("and we hooked it up to Vue:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue ({\n    store,")]),e._v(" "),a("figcaption",[e._v("Fig 05-046")])]),e._v(" "),a("p",[e._v("Also remember that back inside the index.js file we also did that "),a("code",{staticClass:"prettyprint"},[e._v("\n                        Vue.use(Vuex);")]),e._v(" statement. This was like the initial handshake or the initial\n                        communication and then we followed that up by passing our stoe into a Vue instance and\n                        that's what actually followed up on that communication and said ok here's all the data,\n                        actions, mutations, that you need to be aware of.\n                    ")]),e._v(" "),a("p",[e._v("So our Auth module is complete. The last thing that we have to do is make sure that there is some\n                        component inside of our application that actually attempts to call that login action we just\n                        created.")]),e._v(" "),a("h3",[e._v("Initial OAuth Request")]),e._v(" "),a("p",[e._v("To enable us to invoke the login attempt that we've now defined inside of our login action in\n                        the Auth module we have to do one last piece of configuration to tell our Vue application about\n                        these actions we've defined inside of the Vuex module:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(186)}}),e._v(" "),a("figcaption",[e._v("Fig 05-047.png")])]),e._v(" "),a("p",[e._v("At the top of the figure we have a diagram of our application. At this point we have only\n                        created the App and the AppHeader. We want the AppHeader to attempt to call the login action\n                        any time a user clicks on the Login button that will eventually exist inside there.")]),e._v(" "),a("p",[e._v("So anytime we want to access a Vuex module and update some data or cause some change inside\n                        of our application we're going to wire up an action to our Vue component:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(187)}}),e._v(" "),a("figcaption",[e._v("Fig 05-048")])]),e._v(" "),a("p",[e._v("So we're going to form a connection between the actions that we've defined inside of our auth\n                        module to the AppHeader component.")]),e._v(" "),a("p",[e._v("At some point in time we also want to make sure that the AppHeader has the ability to figure\n                        out what set of buttons it should be showing to the user. In other words make sure that the\n                        AppHeader knows whether or not the user is logged in. That's going to be the purpose of the\n                        getter properties that we defined. So we will eventually wire up that set of getters defined\n                        inside of our auth module to the AppHeader component as well:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(188)}}),e._v(" "),a("figcaption",[e._v("Fig 05-049")])]),e._v(" "),a("p",[e._v("So, to recap, we call actions to change data and we call getters to retrieve data from a Vuex\n                        module.")]),e._v(" "),a("p",[e._v("With that in mind let's now open up our AppHeader component and figure out how we connect an\n                        action to the AppHeader. This process always involves the exact same sequence of actions.\n                        Inside the script tag we will import a Vuex helper:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import { mapActions } from 'vuex';")]),e._v(" "),a("figcaption",[e._v("Fig 05-050")])]),e._v(" "),a("p",[a("code",{staticClass:"prettyprint"},[e._v("mapActions")]),e._v(" is a function that will automatically connect\n                        different actions that we have created inside of our modules to an actual component instance\n                        - like our AppHeader. So to actually take that login action that we defined and wire it up to\n                        our component we are going to connect it as a method.\n                    ")]),e._v(" "),a("p",[e._v("Remember what methods are inside of components. We use methods to somehow instigate change or\n                        react to user events. So in the context of actions that makes a lot of sense. Methods change\n                        things inside of our application and as we just discussed we call methods to modify data so the\n                        marriage between a method and a component and an action inside of a module makes a lot of\n                        sense.")]),e._v(" "),a("p",[e._v("In AppHeader.vue add the following code to the component definition:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    import { mapActions } from 'vuex';\n\n    export default {\n        name: 'AppHeader',\n        methods: mapActions(['login'])\n    };\n</script>\n")]),e._v(" "),a("figcaption",[e._v("Fig 05-051")])]),e._v(" "),a("p",[e._v("We add a "),a("code",{staticClass:"prettyprint"},[e._v("methods")]),e._v(" property to our default export and call the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("mapActions()")]),e._v(" function. We to pass in an array of strings to\n                        this function that lists all the different modules that we've hooked up to our Vuex instance\n                        that we want to somehow import into this component. At this point the only action that we want\n                        to hookup is login:"),a("code",{staticClass:"prettyprint"},[e._v(" mapActions('login') ")])]),e._v(" "),a("p",[e._v("That's it, that's how we connect an action to a component. So now anywhere within the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("AppHeader")]),e._v(" component or it's template we can freely call the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("login")]),e._v(" action. We wil look at that in just a moment. Before\n                        we do, in the official Vuex documentation you will see a slightly different syntax that\n                        looks like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("..mapActions(['login'])")]),e._v(" "),a("figcaption",[e._v("Fig 05-052")])]),e._v(" "),a("p",[e._v("So, to be clear, the above code and the code we just wrote is operationally completely\n                        identical. The reason that you see the "),a("code",{staticClass:"prettyprint"},[e._v("...")]),e._v(" is that it takes\n                        all the different actions that we are trying to pull out of the Vuex module and it adds them to\n                        the method object. Using this syntax allows use to define other methods on this component as\n                        well. So maybe we would want another method called "),a("code",{staticClass:"prettyprint"},[e._v("onLogonClick\n                            ()")]),e._v(" that could be called whenever someone clicked on our ImageStorage logo:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    ...mapActions(['login']),\n    onLogoClick() {\n    }")]),e._v(" "),a("figcaption",[e._v("Fig 05-053")])]),e._v(" "),a("p",[e._v("So when you see this alternate ... syntax it is being used just so you can add in other\n                        methods as well. If you do not have any other methods or anything like the "),a("code",{staticClass:"prettyprint"},[e._v("onLogoClick()")]),e._v(" method then you don't need to do the ...\n                        syntax or the wrapping object.\n                    ")]),e._v(" "),a("p",[e._v("So we've now mapped up this login action to our AppHeader component the last thing we\n                        have to do is actually call it. We can call this action from inside any method that we\n                        define, any lifecycle method (which we've yet to discuss) or we can call it as part of an\n                        event handler placed on a template which is what we're going to do in this case.\n                    ")]),e._v(" "),a("p",[e._v("Add the following code to the AppHeader template:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="ui secondary pointing menu">\n        <a href="/" class="active item">\n            Image Storage\n        </a>\n\n        <div class="right menu">\n            <a href="#" class="ui item" @click="login">\n                Login\n            </a>\n        </div>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 05-054")])]),e._v(" "),a("p",[e._v("So, again, this is an extremely repeatable process. To make sure a component has access to an\n                        action and can call it we always use the same sequence:")]),e._v(" "),a("ul",[a("li",[e._v("Import mapActions")]),e._v(" "),a("li",[e._v("Define the methods object")]),e._v(" "),a("li",[e._v("Setup mapActions by passing in an array with a list of strings that define all the\n                            actions you want to be available to this component.\n                        ")])]),e._v(" "),a("p",[e._v("One quick thing that might be surprising - notice how when we wrote "),a("code",{staticClass:"prettyprint"},[e._v("\n                        mapActions")]),e._v(" and passed the "),a("code",{staticClass:"prettyprint"},[e._v("login")]),e._v(" action we did not\n                        have to specify the "),a("code",{staticClass:"prettyprint"},[e._v("Auth")]),e._v(" module. There is nothing in the\n                        statment that says to look inside the Auth module and find the login function. Vuex just\n                        automatically looks through all the actions on all the different modules to find one called\n                        "),a("code",{staticClass:"prettyprint"},[e._v("login")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("Refresh the browser and you should see the Login button. At this point you should notice\n                        the Url changes to "),a("code",{staticClass:"prettyprint"},[e._v("https://api.imgur.com")]),e._v(" with the clientId\n                        and response_type specifed in the querystring (thanks to our use of the qs module).\n                    ")]),e._v(" "),a("p",[e._v("So now we're being prompted to grant access to the application called Vue Image Storage App.\n                        I logged in with an actual Imgur account and clicked. This willwill take you to stage 2 of our\n                        OAuth flow.")]),e._v(" "),a("p",[e._v("If you break down the url:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("http://localhost:8080/oauth2/callback")]),e._v(" "),a("figcaption",[e._v("Fig 05-055")])]),e._v(" "),a("p",[e._v("This is the exact callback Url we specified.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("#access_token=00ed3cd52279d5673ae039d326aea44f42729071")]),e._v(" "),a("figcaption",[e._v("Fig 05-056")])]),e._v(" "),a("p",[e._v("The access_token is essentially total power (within reason) over this users account. It\n                        allows us to post information, delete posts, make comments, just about anything you can\n                        imagine on behalf of the user. So the access_token is extremely important and it's the same\n                        token that we've been talking about all along with respect to our module.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("&expires_in=315360000")]),e._v(" "),a("figcaption",[e._v("Fig 05-057")])]),e._v(" "),a("p",[e._v("expires_in specifies when the token expires")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("&token_type=bearer")]),e._v(" "),a("figcaption",[e._v("Fig 05-058")])]),e._v(" "),a("p",[e._v("token_type of bearer dictates how we provide this token back to the imgur API when we want to\n                        make a request on the user's behalf. We'll see an example of this in a short while.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("&refresh_token=27660c25c3430b2ab26dea766a24b71276ed158e")]),e._v(" "),a("figcaption",[e._v("Fig 05-059")])]),e._v(" "),a("p",[e._v("refresh_token allows us to request another token after the initial token expires. Now we're\n                        not going to this in our application because it's a little bit out of scope of what we're\n                        trying to do.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("&account_username=maxsage")]),e._v(" "),a("figcaption",[e._v("Fig 05-060")])]),e._v(" "),a("p",[e._v("account_username specifies the account username")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("&account_id=91444873")]),e._v(" "),a("figcaption",[e._v("Fig 05-061")])]),e._v(" "),a("p",[e._v("account_id specifies the account id")]),e._v(" "),a("p",[e._v("Ok so we now have access to the access_token which allows us to perform actions on behalf of\n                        the user. There's just one issue.")]),e._v(" "),a("p",[e._v("Notice how the Url contains all this very important information that we want to get access to\n                        and remember we also said that during our initial Auth module design that whenever a user\n                        gets redirected back to our application we want to call the "),a("code",{staticClass:"prettyprint"},[e._v("\n                            finalizeLogin")]),e._v(" action which takes the token out of the Url and calls the setToken\n                        mutation with it. We will cover this in the next section.")]),e._v(" "),a("h3",[e._v("Extracting the Access Token")]),e._v(" "),a("p",[e._v("We've now been successfully redirected back to our application from the OAuth flow on the\n                        Imgur API with the access_token present in the Url. We need to somehow extract the token out\n                        of the Url and send it back over to our "),a("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" action\n                        inside of our Auth module. We have not yet created the "),a("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v("\n                        action but it was the one that we said we were going to create to take the token and update\n                        the "),a("code",{staticClass:"prettyprint"},[e._v("token")]),e._v(" in our "),a("code",{staticClass:"prettyprint"},[e._v("state")]),e._v("\n                        object in "),a("code",{staticClass:"prettyprint"},[e._v("auth.js")]),e._v(". That's the next big challenge we're going\n                        to have. Getting the token out of the Url is not a big challenge\n                    ")]),e._v(" "),a("p",[e._v("Inside the browser we can write out "),a("code",{staticClass:"prettyprint"},[e._v("window.location")]),e._v(" which\n                        will print out some information about the current Url we are visiting. So inside that\n                        "),a("code",{staticClass:"prettyprint"},[e._v("window.location")]),e._v(" object is a hash property which contains the\n                        entire string that appears after the "),a("code",{staticClass:"prettyprint"},[e._v("#")]),e._v(" character in the Url\n                        including the access_token. So we could definitely write a little bit of logic to somehow\n                        extract the required string out of the hash. The challenge is where to place the code and\n                        ensuring that the code only runs when we get redirected back to our application from the\n                        Imgur OAuth flow. I don't want the code to run when a user is visiting, for example,\n                        http://localhost:8080.")]),e._v(" "),a("p",[e._v("To achieve this we will be making use of the Vue router library that\n                        we installed much earlier inside of our project. The Vue router library is intended to do\n                        different thinks inside of our application based on the Url that the user is visiting in our\n                        application. So we're going to use that Vue library to look at the Url and if the Url has a\n                        path of /oauth2/callback then at that point we will run the code to try to get the\n                        access_token and call the appropriate action inside of our auth module.\n                    ")]),e._v(" "),a("p",[e._v("The following diagram illustrates how navigation is going to work inside of our project:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(189)}}),e._v(" "),a("figcaption",[e._v("Fig 05-062.png")])]),e._v(" "),a("p",[e._v("So inside our project we are going to have a couple of different routes. These routes are\n                        going to be defined as logic pointing at the Vue router library. We're going to create the\n                        Vue router library inside of our project and then we're going to instruct it about what\n                        components it should show on the screen based on the current route we are visiting. On the\n                        right hand side of the above diagram notice that we have not yet created the\n                        ImageList or UploadForm component but you can imagine what the purpose of each of those is.")]),e._v(" "),a("p",[e._v("So if a user is visiting the root route of our application we probably want to show them a\n                        list of all the images they have uploaded which means displaying the ImageList component. If\n                        they visit a route of something like "),a("code",{staticClass:"prettyprint"},[e._v("/upload")]),e._v(" we will show them\n                        and UploadForm component that will allow them to upload new images. Finally, the bit that's\n                        relevant to us right now, if a user visits /oauth2/callback/ route (which we arrive at when\n                        we come back from Imgur) then we will show the AuthHandler component.\n                    ")]),e._v(" "),a("p",[e._v("The AuthHandler component that you and I are going to create is not going to have a lot of\n                        template logic in it. It wont display anything on the screen as such. Instead, it's purpose\n                        will be to extract the token from the Url and call the "),a("code",{staticClass:"prettyprint"},[e._v("\n                            finalizeLogin")]),e._v(" action.")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Home")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("p",[e._v("This is the homepage")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Wiring up Vue Router")]),e._v(" "),n("p",[e._v("In the last section we spoke about how we're going to use a Vue router library to customize what\n                        is displayed on the screen based on the current Url. We're going to use this library to watch\n                        for this /oauth2/callback route. Whenever the user ends up on this route we're going to show the\n                        AuthHandler component who's sole purpose is going to be to extract the token from the Url and\n                        call the appropriate action.\n                    ")]),e._v(" "),n("p",[e._v("So in this section we're going to start doing the setup of the router inside of our application.\n                        Let's first get a good idea of the different steps that we're going to have to do to setup the\n                        router:\n                    ")]),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("We're going to first start off by creating a new Vue router instance. We're going to do this\n                        inside of our main.js file when we create this new view. When we create this new Vue router\n                        instance we're also going to pass it a configuration object that tells it about different routes\n                        that are going to be available inside of our application.\n                    ")]),e._v(" "),n("p",[e._v("After we setup the initial Vue router instance we're going to tell our Vue instance that the\n                        router exists. In the exact same way that we have to connect together Vuex and Vue libraries in\n                        the previous sections we also have to connect together Vue Router and Vue as well.\n                    ")]),e._v(" "),e._m(2),e._v(" "),n("p",[e._v("Ok, let's flip back over to our code editor and we'll get started with step number one first. In\n                        main.js add the following import statement:\n                    ")]),e._v(" "),e._m(3),e._v(" "),n("p",[e._v("Recall that we already installed the Vue Router library a little bit ago at the very start of the\n                        this project so there's no need to do this again.\n                    ")]),e._v(" "),n("p",[e._v("Next we will tell the Vue library about the existence of the Vue Router:")]),e._v(" "),e._m(4),e._v(" "),n("p",[e._v("Next we'll create our actual Vue router instance. This is where we pass in that initial\n                        configuration that tells Vue Router about the different routes that are going to be available\n                        inside of our application:\n                    ")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),n("p",[e._v("Now we need to create the AuthHandler component that's going to be displayed anytime a user\n                        visits this route and then we need to make sure that we import it into this main.js file. So\n                        first add a new file called AuthHandler.vue to the components directory with the following code:\n                    ")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),n("h3",[e._v("Browser vs Hash Routers")]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),n("p",[e._v("When we wired up our Vue Router we got a very default set of options created for us:")]),e._v(" "),e._m(17),e._v(" "),n("p",[e._v("One of the default options that was set when we created our new router was the type of router\n                        that was used. By default Vue router tries to use something called a hash router. The hash\n                        router is a reference to what portion of the Url is going to be used when Vue router tries to\n                        figure out what set of components it needs to show on screen.\n                    ")]),e._v(" "),n("p",[e._v("When we use Hash Router Vue Router is going to look at only characters to the right-hand side of\n                        the hash inside the Url to figure out what components need to be shown on screen.\n                    ")]),e._v(" "),n("p",[e._v("This is going to cause some unintended side effects when we start working with OAuth inside of\n                        our application. Remember just a moment ago when we got redirected back over to our application\n                        from the Imgur OAuth flow it sent us back here with the route of something like:\n                    ")]),e._v(" "),e._m(18),e._v(" "),n("p",[e._v("So if we leave this default implementation of the router as it's standing right now it's going to\n                        look to the characters to the right-hand side of the hash to figure out what set of components\n                        to show on the screen. Currently this will break the routing because it won't have any idea how\n                        to interpret access_token and the other query string variables.\n                    ")]),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),n("p",[e._v("We add in a new key called mode and set the value to history which tells VueRouter to use the\n                        Browser Router mode instead of the default.\n                    ")]),e._v(" "),e._m(22),e._v(" "),n("h3",[e._v("Component Insertion Point")]),e._v(" "),n("p",[e._v("We've now taken care of steps 1 and 2 of setting up VueRouter inside of our application:")]),e._v(" "),e._m(23),e._v(" "),n("p",[e._v("We're now going to move onto step number 3 which is going to tell Vue Router what to do anytime\n                        it matches a route against the Url that's in the users address bar. Essentially we just need to\n                        add a little tag inside of some template in our application that says \"Hey Vue Router if you\n                        ever match a component try to stick it into this tag\". In App.vue we are currently showing just\n                        the AppHeader component. We will want to display other content under the AppHeader. Insert the\n                        following code into the template:\n                    ")]),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),n("p",[e._v("In the browser navigate to /oauth2/callback and we should see the AuthHanlder component appear on\n                        the screen:\n                    ")]),e._v(" "),e._m(26),e._v(" "),n("p",[e._v("Chances are that, in the vast majority of applications, you'll add this tag into one of the more\n                        root components of your application like an App component or Layout component.\n                    ")]),e._v(" "),n("h3",[e._v("Component Lifecycle Methods")]),e._v(" "),n("p",[e._v("We've now got our AuthHandler component visible on the screen which means we can start adding\n                        some code to it to extract the access_token from the Url. The required steps are illustrated in\n                        the following diagram:\n                    ")]),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),n("p",[e._v("It will be invoked automatically any time the component is about to be created.")]),e._v(" "),n("p",[e._v("So you can follow this diagram down and everyone of the red boxes that you see:")]),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),n("p",[e._v("The lifecycle methods:")]),e._v(" "),e._m(39),e._v(" "),n("p",[e._v("All get called before the component actually shows up in the DOM. The process of actually showing\n                        up in the DOM is called the 'mounted point'.\n                    ")]),e._v(" "),e._m(40),e._v(" "),n("h3",[e._v("Calling Actions")]),e._v(" "),e._m(41),e._v(" "),n("p",[e._v("Let's first wire up the finalizeLogin action to the AuthHanlder component and then we'll go over\n                        to the Auth moduleand start to define it - firsst we import mapActions:\n                    ")]),e._v(" "),e._m(42),e._v(" "),n("p",[e._v("and hook it up to the methods property listing out the action name(s) that we want to connect to\n                        this component:\n                    ")]),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),e._m(46),e._v(" "),n("p",[e._v("So when we call this action we are going to want to get the entire hash out of the Url and pass\n                        it into the action where it will be parsed to pull the access_token out of the Url and get it to\n                        updated the internal state of the AuthModule.\n                    ")]),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),n("h3",[e._v("Parsing the Access Token")]),e._v(" "),e._m(49),e._v(" "),n("p",[e._v("In the browser click the login button. If you have the console open you may see an error:")]),e._v(" "),e._m(50),e._v(" "),e._m(51),e._v(" "),e._m(52),e._v(" "),n("p",[e._v("You will receive the following value which has been formatted for readability:")]),e._v(" "),n("pre",[e._v('#access_token=3e43a278fdcd17c2bae234779abcc71b42bb18c8\n&expires_in=315360000&token_type=bearer\n&refresh_token=e6f9d8870f2b4b04bf4a8d2e57261d7a59f48a58\n&account_username=maxsage&account_id=91444873"\n')]),e._v(" "),n("p",[e._v("Add the following code in the Auth module under the login action:")]),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),e._m(58),e._v(" "),n("p",[e._v("Add the following code to extract the access_token from the hash:")]),e._v(" "),e._m(59),e._v(" "),e._m(60),e._v(" "),n("p",[e._v("We pass the remaining string into the qs module which is used to manipulate, parse and generate\n                        query strings. Firstly, import the qs module:\n                    ")]),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),e._m(63),e._v(" "),e._m(64),e._v(" "),e._m(65),e._v(" "),e._m(66),e._v(" "),n("p",[e._v("That's going to update our state object with that new token.")]),e._v(" "),n("p",[e._v("Even though we are not making use of the token from our state let's test this in the browser just\n                        to make sure we don't get any errors.\n                    ")]),e._v(" "),n("p",[e._v("Click login, that sends us to Imgur, which sends us straight back, check for errors in the\n                        console and hopefully you will see there aren't any.\n                    ")]),e._v(" "),n("h3",[e._v("Data in Components with MapGetters")]),e._v(" "),n("p",[e._v("In the last section we finished up or finalizeLogin action and we assumed that the code we wrote\n                        would update the state inside the Auth although we have not yet proved this. We will add some\n                        code to verify this. Remember when we were first discussing Vuex:\n                    ")]),e._v(" "),e._m(67),e._v(" "),n("p",[e._v("In our Auth module there are actions that we can call modify data and at some point in time we're\n                        going to want to also read data - that was the purpose of the getters which we defined:\n                    ")]),e._v(" "),e._m(68),e._v(" "),e._m(69),e._v(" "),e._m(70),e._v(" "),n("p",[e._v("In the AppHeader component's script section import the mapGetters function from Vuex:")]),e._v(" "),e._m(71),e._v(" "),n("p",[e._v("So we're going to use this mapGetters function to pull some information out of the Auth module\n                        and add it directly to the AppHeader. We use a similar syntax to what we just did with the\n                        mapActions:\n                    ")]),e._v(" "),e._m(72),e._v(" "),n("p",[e._v("However instead of using methods which we use to modify data or react to events inside of our\n                        application we are going to use a computed property. Remember computed is how we read our data\n                        and get access to it inside our template:\n                    ")]),e._v(" "),e._m(73),e._v(" "),n("p",[e._v("Now that we've defined this getter of isLoggedIn and assigned it to the component we can\n                        reference it in our template:\n                    ")]),e._v(" "),e._m(74),e._v(" "),n("p",[e._v("Remember whenever we are working with our templates we dont have to write out this. or this\n                        .computed or anything like that we just supply the name of the computed property - in this case\n                        isLoggedIn .\n                    ")]),e._v(" "),n("p",[e._v("Refresh the browser and you should see true indicating that the user is logged in:")]),e._v(" "),e._m(75),e._v(" "),e._m(76),e._v(" "),e._m(77),e._v(" "),n("h3",[e._v("The V-Else Directive")]),e._v(" "),e._m(78),e._v(" "),n("p",[e._v("First of all delete the "),n("code",{
staticClass:"prettyprint v-pre"},[e._v(e._s(e.isLoggedIn))]),e._v(" that we just\n                        added to the AppHeader component.\n                    ")]),e._v(" "),n("p",[e._v("Add the following Html inside the existing right menu div:")]),e._v(" "),e._m(79),e._v(" "),e._m(80),e._v(" "),n("p",[e._v("If we test this in the browser we should now see the placeholder text when we are logged in and\n                        the Login button when we are not.\n                    ")]),e._v(" "),n("h3",[e._v("Persisting Login State")]),e._v(" "),e._m(81),e._v(" "),e._m(82),e._v(" "),n("p",[e._v("So this means that anytime our application is loaded up from scratch inside the browser, for\n                        example when we do a full refresh, all of the state contained in the auth Vuex module gets\n                        dumped and the token reverts to the initial state of null. So this is why I was able to log in\n                        and refresh the page and see that I was suddenly not logged in. Every time my application\n                        restarts in the browser all this state gets completely wiped away and starts over again from\n                        scratch.\n                    ")]),e._v(" "),n("p",[e._v("So that kind of sequence is not really what you would expect when it comes to authentication. If\n                        you sign in to an application you probably expect to stay signed in even if you navigate away\n                        from the page and come back to it later.\n                    ")]),e._v(" "),n("p",[e._v("There's any easy fix which we can add to the auth module to make sure that we persist the\n                        authentication status of our user even if they close this page and come back to it again\n                        tomorrow. To do this we are going to use a native storage feature that is available on all major\n                        browsers called local storage.\n                    ")]),e._v(" "),e._m(83),e._v(" "),n("p",[e._v("So you and I can take this access_token and put it into this localStorage object whenever a user\n                        signs into the application. Then when they come back to our application at some point in the\n                        future we can look inside that localStorage and see if that access token is available . If it is\n                        then we'll assume that the user is still logged in.\n                    ")]),e._v(" "),n("p",[e._v("The code for this is quite easy to put together. First inside the auth module locate the initial\n                        state object:\n                    ")]),e._v(" "),e._m(84),e._v(" "),n("p",[e._v("So by default the token is set to null which equates to not logged in. So rather than starting\n                        off with null in every single case we're going to replace this and say that we're going to look\n                        inside that localStorage object and check to see if we have saved an access token:\n                    ")]),e._v(" "),e._m(85),e._v(" "),n("p",[e._v("So now every time our application starts up we're going to look to see is there's been a token\n                        stored and if there is we are going to assign it to the token property and then our application\n                        is going to appear to say \"OK user you're still logged in\".\n                    ")]),e._v(" "),n("p",[e._v("Now just adding the piece of code above is'nt enough. We need to make sure that whenever the user\n                        signs in we add the actual access token to local storage as well. We can do this in the\n                        finalizeLogin action after we commit the token to the setToken mutation - we can also take that\n                        token and add it to our localStorage:\n                    ")]),e._v(" "),e._m(86),e._v(" "),n("p",[e._v("So now, anytime a user signs in for the first time, we're going to take that token and store it\n                        on localStorage and then any time a user comes back to our application we'll check to see if the\n                        tokens there and if it is we will assign it to our initial token state.\n                    ")]),e._v(" "),e._m(87),e._v(" "),e._m(88),e._v(" "),e._m(89),e._v(" "),n("h3",[e._v("Button Styling")]),e._v(" "),n("p",[e._v("In this section we're going to style and add logic to our buttons in the AppHeader. So,\n                        initially, we will add some temporary anchor tags:\n                    ")]),e._v(" "),e._m(90),e._v(" "),n("p",[e._v("If we view the application in the browser the styling looks good as far as the size of the\n                        buttons and the text they contain but you'll notice that they're all stacking up:\n                    ")]),e._v(" "),e._m(91),e._v(" "),n("p",[e._v("So the reason they're stacking up like this is because we added this extra div:")]),e._v(" "),e._m(92),e._v(" "),e._m(93),e._v(" "),e._m(94),e._v(" "),n("p",[e._v("Add a style tag to the bottom of the AppHeader component:")]),e._v(" "),e._m(95),e._v(" "),n("p",[e._v("Apply this style to the div with the v-if directive:")]),e._v(" "),e._m(96),e._v(" "),n("p",[e._v("Back in the browser, perform a refresh - because we added a new chunk of CSS that did not exist\n                        before, and you will see those buttons now appear side by side:\n                    ")]),e._v(" "),e._m(97),e._v(" "),n("p",[e._v("Ok, so that looks.")]),e._v(" "),n("h3",[e._v("Logging Out Users")]),e._v(" "),e._m(98),e._v(" "),n("p",[e._v("In your code editor navigate to the AppHeader component's definition. You'll recall that to get\n                        an action wired up to a component we make use of the mapActions function. So we currently have\n                        one action mapped up. To add further actions we add them as a string to the array:\n                    ")]),e._v(" "),e._m(99),e._v(" "),e._m(100),e._v(" "),e._m(101),e._v(" "),n("p",[e._v("In the browser, perform a refresh, and click the Logout button. You should see the header revert\n                        back to the not logged in state and the Login button should appear which is the behaviour we\n                        want.\n                    ")]),e._v(" "),n("h3",[e._v("Automatic Component Updates")]),e._v(" "),n("p",[e._v("In the last section we added in our Logout functionality. Anytime the user clicks on the Logout\n                        button the header instantly updates to indicate the user has been logged out. Behind the scenes\n                        when a user clicks on the button it calls the logout action defined inside of our Auth module.\n                        That action updates the state of our Auth module. Anytime we call an action that updates our\n                        state it causes every single component that is using one of that modules getters to update as\n                        well. So, in other words, when we call the logout action to update isLoggedIn in the Auth module\n                        the getter of isLoggedIn automatically got rerun as well and caused AppHeader component to\n                        update.\n                    ")]),e._v(" "),n("p",[e._v("So what that means is that you and I do not have to call any manual update functions. There's no\n                        need for you and I to say - \"Oh, some data that the AppHeader relies upon just changed - we need\n                        to somehow forcibly re-render the AppHeader component\". We don't need to do that. All you and I\n                        have to do is call an action to update our state and then our component is going to just\n                        magically update for us.\n                    ")]),e._v(" "),n("h3",[e._v("Clearing LocalStorage Tokens")]),e._v(" "),n("p",[e._v("Ok, our application is looking pretty good, but there's still some rough edges around our\n                        authentication process.\n                    ")]),e._v(" "),n("p",[e._v("Firstly, you might notice, that if I click the logout button and then do a navigation attempt\n                        back to localhost:8080 the application thinks that I am still logged in. The reason that the app\n                        thinks we're still logged in is that even though we are updating our piece of state - token when\n                        we call that logout action inside of our Auth module we are not emptying ouf the localStorage\n                        record of that access token.\n                    ")]),e._v(" "),n("p",[e._v("So we need to make sure that anytime the logout action is called we also clear out that\n                        imgur_token localStorage item so that when a user refreshes the page that tokens not inside of\n                        localStorage:\n                    ")]),e._v(" "),e._m(102),e._v(" "),n("p",[e._v("To clear out an item that has been defined inside of localStorage we use a function called\n                        removeItem passing the name/key of the property - 'imgur_token'.\n                    ")]),e._v(" "),n("p",[e._v("So if we now test this inside the browser perform a refresh. Now click on logout which will log\n                        you out. Refresh the page again and you should see you are still logged out - this is now the\n                        desired behaviour.\n                    ")]),e._v(" "),n("h3",[e._v("Programmatic Navigation")]),e._v(" "),e._m(103),e._v(" "),e._m(104),e._v(" "),n("p",[e._v("Instead we're going to be making use of some built-in functionality directly inside of Vue router\n                        which allows us to change the route without causing a full refresh of the entire page.\n                    ")]),e._v(" "),n("p",[e._v("You'll remember in our main.js file we imported VueRouter:")]),e._v(" "),e._m(105),e._v(" "),n("p",[e._v("Then we created a new router instance")]),e._v(" "),e._m(106),e._v(" "),n("p",[e._v("This router object allows us to programmatically navigate our users around our application. So\n                        really what we want to do is get access to this router object at the point we need to redirect\n                        our user (the finalizeLogin action in this application).\n                    ")]),e._v(" "),n("p",[e._v("To achieve that we export the router object from the main.js file.")]),e._v(" "),e._m(107),e._v(" "),n("p",[e._v("Now in the Auth module we can import the router object:")]),e._v(" "),e._m(108),e._v(" "),n("p",[e._v("Notice the use of the curly braces. That's because this export of router we setup above in\n                        main.js is referred to as a named export. We did not use the default keyword for the router\n                        which is why we need the curly braces on the import statement.\n                    ")]),e._v(" "),n("p",[e._v("Now we can use the router object to navigate in the finalizeLogin action:")]),e._v(" "),e._m(109),e._v(" "),e._m(110),e._v(" "),n("h3",[e._v("Additional Route Config")]),e._v(" "),n("p",[e._v("Our authentication system is in a pretty good spot at this point in time. So we're now going to\n                        start thinking about the galleries page and the upload page as well. Before we start working on\n                        either of those components we probably will want to make sure that our user has the ability to\n                        navigate over to the Gallery and Upload screens.\n                    ")]),e._v(" "),n("p",[e._v("Let's get started by adding some boilerplate to get the Gallery and Upload buttons to navigate to\n                        an actual page.\n                    ")]),e._v(" "),n("p",[e._v("Create two new files inside the components directory:")]),e._v(" "),e._m(111),e._v(" "),n("p",[e._v("Add the following boilerplate code to the UploadForm component:")]),e._v(" "),e._m(112),e._v(" "),n("p",[e._v("Add the following boilerplate code to the ImageList component:")]),e._v(" "),e._m(113),e._v(" "),n("p",[e._v("Next we will create some routing rules inside our router instance which is located in main.js.\n                        Remember our routing diagram:\n                    ")]),e._v(" "),e._m(114),e._v(" "),n("p",[e._v("In main.js firstly, import the two components we just created:")]),e._v(" "),e._m(115),e._v(" "),n("p",[e._v("Next add two new objects to the routes array:")]),e._v(" "),e._m(116),e._v(" "),e._m(117),e._v(" "),e._m(118),e._v(" "),e._m(119),e._v(" "),e._m(120),e._v(" "),n("h3",[e._v("Navigation with Router-Link")]),e._v(" "),n("p",[e._v("Now that we've created the UploadForm and ImageList components we need to make sure that the user\n                        has the ability to navigate to those anytime they click on the relevant button in the AppHeader.\n                        Using anchor tags results in a full page refresh which, as we said earlier, is not a good thing\n                        in a SPA.\n                    ")]),e._v(" "),e._m(121),e._v(" "),n("p",[e._v("Update the Galleries, Upload and Image Storage links in the AppHeader to use router-link tags\n                        instead of anchor tags:\n                    ")]),e._v(" "),e._m(122),e._v(" "),e._m(123),e._v(" "),e._m(124)])])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Navigation with Vue Router")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(190)}}),e._v(" "),a("figcaption",[e._v("Fig 06-001")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Finally the third step is to tell Vue Router whenever it sees a Url that it cares about or a path\n                        that it cares about you have to tell it where to put the corresponding component on the screen.\n                        So if, for example, a user browses to "),n("code",{staticClass:"prettyprint"},[e._v("/oauth2/callback")]),e._v(' and Vue\n                        Router says "Ok, I need to show AuthHandler" somewhere on the screen we have to make sure we\n                        tell the router exactly where it is supposed to put that component because just saying "Hey, put\n                        it on the screen is not quite enough." We have to specifically designate where it\'s going to\n                        show up.\n                    ')])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import VueRouter from 'vue-router';")]),e._v(" "),n("figcaption",[e._v("Fig 06-002")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("Vue.use(VueRouter);")]),e._v(" "),n("figcaption",[e._v("Fig 06-003")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const router = new VueRouter ({\n  routes: [\n  ]\n});")]),e._v(" "),n("figcaption",[e._v("Fig 06-004")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("We pass in an object containing a property called "),n("code",{staticClass:"prettyprint"},[e._v("routes")]),e._v(". This\n                        is going to be an array which will contain a collection of different object. In each of these\n                        objects we are going to tell Vue Router about one of the possible routes that can be visited\n                        inside of our application.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("The first route that you and I are going to define is going to be the "),n("code",{staticClass:"prettyprint"},[e._v("/oauth2/callback")]),e._v("\n                        route:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const router = new VueRouter ({\n  routes: [\n      { path: '/oauth2/callback', component: AuthHandler }\n  ]\n});")]),e._v(" "),n("figcaption",[e._v("Fig 06-005")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("We haven't yet created the AuthHandler Vue component - so we will need to do that and then import\n                        it into "),n("code",{staticClass:"prettyprint"},[e._v("main.js")]),e._v(". Before we do that we need to complete one more\n                        step. At the bottom of the file where we create our actual instance remember that in the exact\n                        same way with Vuex we did the initial use statement and then finally passed the store into Vue.\n                        We have to do the exact same thing with Vue Router as well. So we can think of the "),n("code",{staticClass:"prettyprint"},[e._v("Vue.use")]),e._v(" as the initial handshake and now we need to pass the\n                        actual instance into our Vue instance as well:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("new Vue ({\n    router,\n    store,\n    render: h => h(App)\n}).$mount('#app');")]),e._v(" "),n("figcaption",[e._v("Fig 06-006")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        Please wait...\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'AuthHandler'\n    }\n</script>")]),e._v(" "),n("figcaption",[e._v("Fig 06-007")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Remember that anytime a user comes back to our application and sees that "),n("code",{staticClass:"prettyprint"},[e._v("/oauth2/callback")]),e._v(' route it will probably only be displayed for a\n                        split second as we try and access the Url and pull the token out of it. We just want to display\n                        something that says "Hey just give us a moment we\'re getting the token" hence the "Please\n                        wait..." message.\n                    ')])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("In main.js we will wire the AuthHandler component up by adding an "),n("code",{staticClass:"prettyprint"},[e._v("\n                        import")]),e._v(" statement:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import AuthHandler from './components/AuthHandler';")]),e._v(" "),n("figcaption",[e._v("Fig 06-008")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("In the last section we added Vue Router to our application. If we now refresh the browser and\n                        look at the address bar we will see a "),n("code",{staticClass:"prettyprint"},[e._v("#")]),e._v(" sign is now present in\n                        the Url:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("http://localhost:8080/#/")]),e._v(" "),n("figcaption",[e._v("Fig 06-008")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(191)}}),e._v(" "),a("figcaption",[e._v("Fig 06-009")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("/oauth2/callback#access_token....")]),e._v(" "),n("figcaption",[e._v("Fig 06-010")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("We can modify the router configuration to use Browser Router instead of Hash Router. The Browser\n                        Router option causes the router to look at all the characters between the domain "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(" and the hash on the right-hand side to figure\n                        out what route or what set of components need to be shown on screen. So the behaviour of Browser\n                        Router is a better fit for our requirements. We can still add further information after the\n                        "),n("code",{staticClass:"prettyprint"},[e._v("#")]),e._v(" such as our access_token etc.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("To switch to using the Browser Router we will modify our router configuration in "),n("code",{staticClass:"prettyprint"},[e._v("main.js")]),e._v(":\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const router = new VueRouter ({\n    mode: 'history',\n    routes: [\n        { path: '/oauth2/callback', component: AuthHandler }\n  ]\n});")]),e._v(" "),n("figcaption",[e._v("Fig 06-011")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Back in the browser navigate to "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(" and you'll notice\n                        the page reloads but does not automatically add the hash inside the Url anymore.\n                    ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(192)}}),e._v(" "),a("figcaption",[e._v("Fig 06-012")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        <AppHeader></AppHeader>\n        <router-view></router-view>\n    </div>\n</template>")]),e._v(" "),n("figcaption",[e._v("Fig 06-013")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So now anytime VueRouter matches up a route that's going to take that component and put it inside\n                        the "),n("code",{staticClass:"prettyprint"},[e._v("vue-router")]),e._v(" tag.\n                    ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(193)}}),e._v(" "),a("figcaption",[e._v("Fig 06-014")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(194)}}),e._v(" "),a("figcaption",[e._v("Fig 06-015")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("The key here is making sure that the instant we know AuthHandler is about to render on the screen\n                        we want it to call the "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" right away. We achieve\n                        this using a feature of Vue components called life cycle methods.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Life cycle methods are functions that we can define on a component that are called automatically\n                        during certain points inside of a components lifecycle. The term lifecycle refers to the\n                        sequence of steps a component goes through whenever it's about to be:\n                    "),n("ul",[n("li",[e._v("rendered on the screen")]),e._v(" "),n("li",[e._v("taken off the screen")]),e._v(" "),n("li",[e._v("updated with new content")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("The official Vue documentation has a fantastic "),n("a",{attrs:{href:"https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram"}},[e._v("Lifecycle Diagram")]),e._v(" to\n                        give you a better idea of how these lifecycle methods work.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("It's important to understand the lifecycle methods and their names. We start off at the very top\n                        where we create a new Vue instance. When we call "),n("code",{staticClass:"prettyprint"},[e._v("new Vue")]),e._v(" it\n                        kicks off some initial events and internal code handling stuff to setup this Vue instance.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("After that initial bit of configuration and setup a lifecycle method called "),n("code",{staticClass:"prettyprint"},[e._v("beforeCreate")]),e._v(" is then automatically called. If we define a\n                        function with a name of "),n("code",{staticClass:"prettyprint"},[e._v("beforeCreate")]),e._v(" in a component:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n        name: 'AuthHandler',\n        beforeCreate() {\n\n        }\n    };\n</script>")]),e._v(" "),n("figcaption",[e._v("Fig 06-016")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("beforeCreate")]),e._v(" "),n("li",[e._v("created")]),e._v(" "),n("li",[e._v("beforeMount")]),e._v(" "),n("li",[e._v("mounted")]),e._v(" "),n("li",[e._v("beforeUpdate")]),e._v(" "),n("li",[e._v("beforeDestroy")]),e._v(" "),n("li",[e._v("updated")]),e._v(" "),n("li",[e._v("destroyed")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("is a different lifecycle method that will be called at some point inside this component's\n                        lifecycle. For example, right after calling "),n("code",{staticClass:"prettyprint"},[e._v("beforeCreate")]),e._v(" we\n                        then setup some further configuration, immediately after that a second lifecycle method named\n                        "),n("code",{staticClass:"prettyprint"},[e._v("created")]),e._v(" is called. So, again, if we add the following code:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n        name: 'AuthHandler',\n        beforeCreate() {\n\n        },\n        created() {\n\n        }\n    };\n</script>")]),e._v(" "),n("figcaption",[e._v("Fig 06-017")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("The "),n("code",{staticClass:"prettyprint"},[e._v("created")]),e._v(" method we defined will be called automatically when\n                        the lifecycle method of the same name runs.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("For our current application, we want to make sure that the instant the component is created we\n                        try to call the "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" action that we're going to\n                        eventually create inside of our application. It's probably most appropriate for us to make use\n                        of the "),n("code",{staticClass:"prettyprint"},[e._v("created")]),e._v(" lifecycle method.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("beforeCreate")]),e._v(" "),n("li",[e._v("created")]),e._v(" "),n("li",[e._v("beforeMount")]),e._v(" "),n("li",[e._v("mounted")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("If you look at the official Vue Router documentation then it's going to suggest the "),n("code",{staticClass:"prettyprint"},[e._v("created")]),e._v(" lifecycle method is the optimal location to do any\n                        initial data loading. We will take advantage of this when we start to implement the ability to\n                        list out images that our user has uploaded.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("In the last section we spoke about the presence of lifecycle methods inside of components. Next\n                        we have to make sure that when the "),n("code",{staticClass:"prettyprint"},[e._v("created()")]),e._v(" method we defined\n                        is invoked we call the appropriate action in the Auth module - "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(".\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import { mapActions } from 'vuex';")]),e._v(" "),n("figcaption",[e._v("Fig 06-018")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("methods: mapActions(['finalizeLogin']),")]),e._v(" "),n("figcaption",[e._v("Fig 06-019")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Now we can invoke the "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" action from the "),n("code",{staticClass:"prettyprint"},[e._v("created()")]),e._v(" method:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("created() {\n    this.finalizeLogin();\n}")]),e._v(" "),n("figcaption",[e._v("Fig 06-020")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So to call an action that's been bound to our methods object from the lifecycle method all we\n                        have to do is use the "),n("code",{staticClass:"prettyprint"},[e._v("this")]),e._v(" keyword followed by a period and\n                        then the name of the action - in this case "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(". We\n                        don't have to do anything like "),n("code",{staticClass:"prettyprint"},[e._v("this.actions")]),e._v(" it's simply "),n("code",{staticClass:"prettyprint"},[e._v("this.finalizeLogin")]),e._v(".\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("To get the hash from the Url we write "),n("code",{staticClass:"prettyprint"},[e._v("window.location.hash")]),e._v(" this\n                        will return everything from the "),n("code",{staticClass:"prettyprint"},[e._v("#")]),e._v(" symbol to the right hand side\n                        of the Url:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("created() {\n    this.finalizeLogin(window.location.hash);\n}")]),e._v(" "),n("figcaption",[e._v("Fig 06-020a")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Next we will work on the "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" action to extract the\n                        access_token out of the Url and then call the "),n("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v("\n                        mutation.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("[vuex] unknown action type: finalizeLogin")]),e._v(" "),n("figcaption",[e._v("Fig 06-021")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("This error occurs because we haven't created the "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin ")]),e._v("\n                        action yet. In the console if you write:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("window.location.hash")]),e._v(" "),n("figcaption",[e._v("Fig 06-022")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("finalizeLogin() {\n},")]),e._v(" "),n("figcaption",[e._v("Fig 06-023")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;
return n("p",[e._v("When we call "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" from our AuthHandler component we\n                        pass in "),n("code",{staticClass:"prettyprint"},[e._v("window.location.hash")]),e._v(":\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("this.finalizeLogin(window.location.hash);")]),e._v(" "),n("figcaption",[e._v("Fig 06-024")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So this argument is going to show up as the second argument to the "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v("\n                        action. Remember the first argument that gets passed to any action is an object that has a bunch\n                        of helper methods tied to it that allow us to modify our Vuex module - for example it might\n                        contain the "),n("code",{staticClass:"prettyprint"},[e._v("commit")]),e._v(" function that allows us to call mutations:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("finalizeLogin({ commit }, hash) {\n},")]),e._v(" "),n("figcaption",[e._v("Fig 06-025")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So we supply the "),n("code",{staticClass:"prettyprint"},[e._v("commit")]),e._v(" function again in the first argument.\n                        Remember we supplied the "),n("code",{staticClass:"prettyprint"},[e._v("window.location.hash")]),e._v(" property to the\n                        call to "),n("code",{staticClass:"prettyprint"},[e._v("finalizeLogin")]),e._v(" in the "),n("code",{staticClass:"prettyprint"},[e._v("\n                            created")]),e._v(" lifecycle method hook so that hash will be the second argument to this\n                        action. We simply call it hash.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("finalizeLogin({ commit }, hash) {\n    const queryString = qs.parse(hash.replace('#', ''));\n\n    commit('setToken', queryString.access_token);\n},\n                    ")]),e._v(" "),n("figcaption",[e._v("Fig 06-026")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",{staticClass:"prettyprint"},[e._v("hash.replace('#', '')")]),e._v(" removes the "),n("code",{staticClass:"prettyprint"},[e._v("# ")]),e._v(" character from the start of the string.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import qs from 'qs';")]),e._v(" "),n("figcaption",[e._v("Fig 06-027")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Then pass our string into the "),n("code",{staticClass:"prettyprint"},[e._v("qs.parse")]),e._v(" function and assign it to\n                        a variable called "),n("code",{staticClass:"prettyprint"},[e._v("queryString")]),e._v(":\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const queryString = qs.parse(hash.replace('#', ''));")]),e._v(" "),n("figcaption",[e._v("Fig 06-028")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",{staticClass:"prettyprint"},[e._v("qs.parse")]),e._v(" will return an object that contains the properties and\n                        values from the string we pass. So in this case there will be keys like access_token,\n                        refresh_token etc. and the corresponding values.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Next we call the "),n("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" mutation and pass in the access_token\n                        from our queryString:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("commit('setToken', queryString.access_token);")]),e._v(" "),n("figcaption",[e._v("Fig 06-029")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(195)}}),e._v(" "),a("figcaption",[e._v("Fig 06-030.png-")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const getters = {\n    isLoggedIn: state => !!state.token\n};")]),e._v(" "),n("figcaption",[e._v("Fig 06-031")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("We have defined one getter called "),n("code",{staticClass:"prettyprint"},[e._v("isLoggedIn")]),e._v(" which returns a\n                        boolean value indicating if our user is authenticated with our application.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("We will use the "),n("code",{staticClass:"prettyprint"},[e._v("isLoggedIn")]),e._v(" getter to supply that information to\n                        our AppHeader component allowing us to customize it's template depending on the value we\n                        receive.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import { mapActions, mapGetters } from 'vuex';")]),e._v(" "),n("figcaption",[e._v("Fig 06-032")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("methods: mapActions(['login'])")]),e._v(" "),n("figcaption",[e._v("Fig 06-033")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'AppHeader',\n    computed: mapGetters(['isLoggedIn']),\n    methods:\n        mapActions(['login'])\n};")]),e._v(" "),n("figcaption",[e._v("Fig 06-034")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("{{ isLoggedIn }}")]),e._v(" "),n("figcaption",[e._v("Fig 06-035")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(196)}}),e._v(" "),a("figcaption",[e._v("Fig 06-036")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("If you browse to the application root instead "),n("code",{staticClass:"prettyprint"},[e._v("http://localhost\n                        :8080")]),e._v(" the access_token will no longer be available inside the Url. This means the\n                        AuthHandler component can't get the token which will result in the AppHeader displaying false:\n                    ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(197)}}),e._v(" "),a("figcaption",[e._v("Fig 06-037")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Our AppHeader component is now aware of whether or not the user is actually signed into our\n                        application. We will now use the "),n("code",{staticClass:"prettyprint"},[e._v("v-else")]),e._v(" directive to show\n                        different buttons and layout depending on the status of the user.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="ui secondary pointing menu">\n        <a href="/" class="active item">\n            Image Storage\n        </a>\n        <div class="right menu">\n            <div v-if="isLoggedIn">\n                Galleries button\n                Upload button\n                Logout button\n            </div>\n            <a v-else href="#" class="ui item" @click="login">\n                Login\n            </a>\n        </div>\n    </div>\n</template>\n')]),e._v(" "),n("figcaption",[e._v("Fig 06-038")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So we use the "),n("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" directive to say if "),n("code",{staticClass:"prettyprint"},[e._v("isLoggedIn")]),e._v(" is equal to "),n("code",{staticClass:"prettyprint"},[e._v(">true")]),e._v("\n                        then display the buttons (or placeholders at the moment) inside of the div. We then use the\n                        "),n("code",{staticClass:"prettyprint"},[e._v("v-else")]),e._v(" directive to handle the opposite case of when a user is\n                        not logged in. We could have used another "),n("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" directive here\n                        with "),n("code",{staticClass:"prettyprint"},[e._v("!isLoggedIn")]),e._v(" but instead we us "),n("code",{staticClass:"prettyprint"},[e._v("v-else")]),e._v("\n                        which is a slightly shorter syntax. The "),n("code",{staticClass:"prettyprint"},[e._v("v-else")]),e._v(" directive must\n                        occur on the element directly after an element using the "),n("code",{staticClass:"prettyprint"},[e._v("v-if ")]),e._v("\n                        directive.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("In the last section we added in a v-if directive to our AppHeader to conditionally change the\n                        content displayed inside of it. Now one thing you might have noticed is that when we manually\n                        navigate to "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(" the AppHeader reverts to saying that\n                        we are logged out. So let's try and clear up how Vuex works in this respect because there are\n                        some misconceptions. So inside of our auth.js Vuex module we have the initial state of token set\n                        to null:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const state = {\n    token: null\n};")]),e._v(" "),n("figcaption",[e._v("Fig 06-039")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("You can access local storage by writing "),n("code",{staticClass:"prettyprint"},[e._v("localStorage")]),e._v(" in the\n                        browser console. localStorage allows us to store variables that will be persisted specifically\n                        for the current domain we are on (in our case "),n("code",{staticClass:"prettyprint"},[e._v(" localhost:8080")]),e._v(".\n                        We can use this as a little spot to store a tiny bit of information customized for this\n                        particular user on their browser on specifically this domain of "),n("code",{staticClass:"prettyprint"},[e._v("\n                            localhost:8080")]),e._v(". If we were to browse to another domain like for example google.com\n                        that same localStorage would no longer be available - localhost:8080 has it's own little bucket\n                        of storage.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const state = {\n    token: null\n};")]),e._v(" "),n("figcaption",[e._v("Fig 06-040")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const state = {\n    token: window.localStorage.getItem('imgur_token');\n};")]),e._v(" "),n("figcaption",[e._v("Fig 06-041")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("    finalizeLogin({ commit }, hash) {\n        const queryString = qs.parse(hash.replace('#', ''));\n\n        commit('setToken', queryString.access_token);\n        window.localStorage.setItem('imgure_token', queryString.access_token);\n    },")]),e._v(" "),n("figcaption",[e._v("Fig 06-042")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So I'm going to save this, flip back over to the browser and test our authentication flow again.\n                        If we refresh, then click the Login button. Once we return to our application our finalizeLogin\n                        action is going to take that token store it in localStorage. We can confirm this by writing\n                        "),n("code",{staticClass:"prettyprint"},[e._v("localStorage.getItem('imgur_token')")]),e._v(" I will see my token stored\n                        inside there. So the token displayed will exactly match the access_token in the Url:\n                    ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(198)}}),e._v(" "),a("figcaption",[e._v("Fig 06-043")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So now I should be able to navigate back to "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(" do a\n                        complete refresh and still see that I am logged into the application.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v('<div class="right menu">\n    <div v-if="isLoggedIn">\n        <a class="item">Galleries</a>\n        <a class="item">Upload</a>\n        <a class="item">Logout</a>\n    </div>\n    <a v-else href="#" class="ui item" @click="login">\n        Login\n    </a>\n</div>')]),e._v(" "),n("figcaption",[e._v("Fig 06-044")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(199)}}),e._v(" "),a("figcaption",[e._v("Fig 06-045")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v('<div class="right menu">\n<div v-if="isLoggedIn">')]),e._v(" "),n("figcaption",[e._v("Fig 06-045")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("We want to keep this "),n("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" because we need to use the "),n("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" directive to make sure that we either show the set of\n                        buttons or the anchor tag that contains the Login functionality.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("However, the "),n("a",{attrs:{href:"https://semantic-ui.com/"}},[e._v("SemanticUI")]),e._v(" library that we are using does not\n                        expect there to be a bunch of anchor tags inside of this "),n("code",{staticClass:"prettyprint"},[e._v("right\n                            menu")]),e._v(" class. We're basically breaking the rules of what SemanticUI expects to see but\n                        for a very good reason - so we can use that "),n("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" directive.\n                        We're going to add in a little bit of custom styling using CSS to make sue that the buttons\n                        appear horizontally.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<style scoped>\n    .horizontal {\n        display: flex;\n        flex-direction: row;\n    }\n</style>")]),e._v(" "),n("figcaption",[e._v("Fig 06-046")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v('<div v-if="isLoggedIn" class="horizontal">')]),e._v(" "),n("figcaption",[e._v("Fig 06-046a")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(200)}}),e._v(" "),a("figcaption",[e._v("Fig 06-047")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Next we will work on the logout functionality to make sure that when a user clicks the Logout\n                        button the "),n("code",{staticClass:"prettyprint"},[e._v("logout")]),e._v(" action is executed which will call the "),n("code",{staticClass:"prettyprint"},[e._v("setToken")]),e._v(" mutation which in turn sets the token in state to\n                        null. If token is null that indicates our user is not logged in.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'AppHeader',\n    computed: mapGetters(['isLoggedIn']),\n    methods:\n        mapActions(['login', 'logout'])\n};")]),e._v(" "),n("figcaption",[e._v("Fig 06-048")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("So now we can make use of this "),n("code",{staticClass:"prettyprint"},[e._v("logout")]),e._v(" action that's been added\n                        to the "),n("code",{staticClass:"prettyprint"},[e._v("methods")]),e._v(" object by going up to the "),n("code",{staticClass:"prettyprint"},[e._v("logout")]),e._v(" anchor tag and adding a click event handler to it:\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v(' <a class="item" @click="logout">Logout</a>')]),e._v(" "),n("figcaption",[e._v("Fig 06-049")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("logout: ({ commit }) => {\n    commit('setToken', null);\n    window.localStorage.removeItem('imgur_token');\n}")]),e._v(" "),n("figcaption",[e._v("Fig 06-050")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v('Another issue we have is when a user comes back to our application from the Oauth2 flow we always\n                        see the text "Please wait..." on the screen. In reality we probably want to make sure that\n                        anytime someone comes back to the '),n("code",{staticClass:"prettyprint"},[e._v("/oauth2/callback")]),e._v(" route that\n                        we get access to their token, we do some work on it, then what we need to do is redirect them to\n                        a suitable location in our application - in our case our root route - "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(".\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("You have already seen an example of us manipulating the user's browser by setting the "),n("code",{staticClass:"prettyprint"},[e._v("window.location")]),e._v(" property to the Url that we wanted the browser to\n                        navigate to. However, an important distinction to remember here, anytime we use this function or\n                        this way of changing the user's address it causes a hard refresh of the entire page - in Single\n                        Page Application we do not want to accidentally reload the page unless we really have to.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import VueRouter from 'vue-router';")]),e._v(" "),n("figcaption",[e._v("Fig 06-051")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("const router = new VueRouter({\n    mode: 'history',\n    routes: [{ path: '/oauth2/callback', component\n});")]),e._v(" "),n("figcaption",[e._v("Fig 06-052")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("export const router = new VueRouter ({\n    mode: 'history',\n    routes: [\n        { path: '/oauth2/callback', component: AuthHandler }\n  ]\n});")]),e._v(" "),n("figcaption",[e._v("Fig 06-053")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import { router }  from '../../main';")]),e._v(" "),n("figcaption",[e._v("Fig 06-054")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("finalizeLogin({ commit }, hash) {\n    const queryString = qs.parse(hash.replace('#', ''));\n\n    commit('setToken', queryString.access_token);\n    window.localStorage.setItem('imgur_token', queryString.access_token);\n    router.push('/');\n},")]),e._v(" "),n("figcaption",[e._v("Fig 06-055")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("In the browser, Login to the application and you should see that after "),n("code",{staticClass:"prettyprint"},[e._v("/oauth2/callback/")]),e._v("\n                        the browser is redirected to "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(". So that's the\n                        automatic refresh in action.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("ImageList.vue")]),e._v(" "),n("li",[e._v("UploadForm.vue")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        Upload form\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'UploadForm'\n    }\n</script>")]),e._v(" "),n("figcaption",[e._v("Fig 06-056")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        Image List\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'ImageList'\n    }\n</script>")]),e._v(" "),n("figcaption",[e._v("Fig 06-057")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(201)}}),e._v(" "),a("figcaption",[e._v("Fig 06-058")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("import ImageList from './components/ImageList';\nimport UploadForm from './components/UploadForm';")]),e._v(" "),n("figcaption",[e._v("Fig 06-058")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v("export const router = new VueRouter ({\n    mode: 'history',\n    routes: [\n        { path :'/', component: ImageList },\n        { path : '/upload', component: UploadForm },\n        { path: '/oauth2/callback', component: AuthHandler },\n\n  ]\n});")]),e._v(" "),n("figcaption",[e._v("Fig 06-059")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Back in the browser and reload the page and make sure the address is set to "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(". You should see the ImageList component on the\n                        screen:\n                    ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(202)}}),e._v(" "),a("figcaption",[e._v("Fig 06-060")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Now if you browse to "),n("code",{staticClass:"prettyprint"},[e._v("localhost:8080/upload")]),e._v(" you should see the\n                        UploadForm component appear:\n                    ")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("figure",[a("img",{attrs:{src:n(203)}}),e._v(" "),a("figcaption",[e._v("Fig 06-061")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("To resolve this Vue router provides the "),n("code",{staticClass:"prettyprint"},[e._v("router-link")]),e._v(" tag which\n                        still renders an anchor tag but if the user clicks on it a full page reload will not occur.\n                        Instead it will just very quickly update the Url at the top of the screen and, without reloading\n                        the entire page, Vue router will automatically update the content on the screen.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("figure",[n("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="ui secondary pointing menu">\n        <router-link to="/" class="active item">\n            Image Storage\n        </router-link>\n        <div class="right menu">\n            <div v-if="isLoggedIn" class="horizontal">\n                <router-link to="/" class="item">Galleries</router-link>\n                <router-link to="/upload" class="item">Upload</router-link>\n                <a class="item" @click="logout">Logout</a>\n            </div>\n            <a v-else href="#" class="ui item" @click="login">\n                Login\n            </a>\n        </div>\n    </div>\n</template>')]),e._v(" "),n("figcaption",[e._v("Fig 06-062")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Note that we do not change all the anchor tags to "),n("code",{staticClass:"prettyprint"},[e._v("router-link")]),e._v("\n                        tags - only those links that are used to navigate around inside our application. The logout\n                        anchor tag is a good example of where we are not trying to perform any actual navigation -\n                        clicking on this button is just going execute the logout action. The same is true for the Login\n                        tag.\n                    ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("In the browser if you click on one of the "),n("code",{staticClass:"prettyprint"},[e._v("router-link")]),e._v(" tags\n                        and then inspect it in Chrome you will see that an anchor tag is still being rendered in the\n                        background. However this anchor tag has some special click event handlers tied to it to make\n                        sure that it does not cause a full page reload. Instead it's just going to update the Url\n                        which is going to tell Vue router to change the components visible on the page without doing\n                        a full reload.\n                    ")])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Data Sources")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("\n                        Hi, this is Brian Noyes, and in this module we're going to focus on data sources for data binding,\n                        where the data comes from to support your UI. Specifically, we're going to talk about the different\n                        kinds of data source objects that you can data bind to and some of the support those data objects\n                        may need to fully participate in data binding.\n                    ")]),e._v(" "),a("p",[e._v("\n                        First we're going to talk about Entity Data Sources, and this includes individual objects that you\n                        want to data bind to and their properties for something like a data entry form, as well as\n                        collections of entities for something like a DataGrid or a ComboBox. Next we're going to talk about\n                        Change Notifications. This is support that these entities will need in order to fully participate in\n                        data binding, meaning that if their properties can change behind the scenes, they've got to raise\n                        Change Notifications so that the binding can update the UI and keep it fresh with the real state of\n                        the data behind the scenes.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Next we're going to talk about some of the other aspects of the support that entities can have for\n                        data binding, inluding the ability to back out changes when multiple properties have been changed.\n                        Those are called EditableObjects, and CollectionViews, which are things that wrap collections when\n                        you data bind to them to maintain the notion of currency or what is the current object within the\n                        collection. Towards the end of the module, we'll start talking about other kinds of things besides\n                        entities including DataSets and XML Data Sources, and how you can go about data binding to those.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(242)}}),e._v(" "),a("figcaption",[e._v("Fig 02-001")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Binding to Entities and Collections")]),e._v(" "),a("p",[e._v("\n                        Data binding in XAML technologies including WPF, support binding to Plain Old CLR Objects or POCOs.\n                        These are basic classes that expose properties and those properties can either be primitive values\n                        such as strings, integers, DateTimes, and GUIDs or they can expose a reference to another complex\n                        type object that itself has other properties with values in it. So you can have whole object\n                        hierarchies or graphs that you data bind to in this way.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Data binding does not support binding to member variables. You really shouldn't be exposing member\n                        variables publicly, they should be fully encapsulated, so the WPF framework team tried to prevent\n                        you from doing the wrong thing here and won't let you bind to your member variables. Likewise,\n                        bindings can't target methods, so you can't invoke a method through a binding, you can only call a\n                        property to get a value out of that property or to set a value in the case of two-way data binding.\n                    ")]),e._v(" "),a("p",[e._v("\n                        A lot of data binding scenarios revolve around binding to collections and presenting that data in\n                        DataGrids, ComboBoxes, ListViews, ListBoxes, and so on. The minimum bar to support data binding to\n                        collections is pretty low in .NET. It basically just has to be a proper collection in .NET, meaning\n                        it implements the IEnumerable interface. So this includes everything down to a simple array of\n                        integers or strings that you could data bind to, but it could be a more sophisticated collection\n                        such as a list<T> or a collection<T>, where you have the generic-type safety, as well as\n                        additional features around the manipulation of that collection.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So when it comes to data binding to these entities or entity collections, basically what you're\n                        going to do is set the DataContext to some object that exposes properties that are either entities\n                        or entity collections so that you can start binding to those.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Once you've set that DataContext and it flows down to the elements of your view, the bindings on\n                        those elements just need to identify the path they're going to bind to, and that path is generally\n                        the property name on the DataContext object or it could be a complex path because the property\n                        exposed from the top level data object may be a complex object itself, so you may need to dot your\n                        way down to something like Customer.Address.Street to get to a discrete value to put into a property\n                        of an element. So let's take a look at a demo of some basic data binding scenarios with entities and\n                        entity collections.\n                    ")])]),e._v(" "),a("div",{
staticClass:"panel-body"},[a("h3",[e._v("Demo: Binding to Entities and Collections")]),e._v(" "),a("div",{staticClass:"panel-body"},[a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            In this series of demos, I want to cover some of the key concepts when it comes to data binding\n                            to entities. Our starting point for this demo is a window that's laid out like this.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(243)}}),e._v(" "),a("figcaption",[e._v("Fig 02-002")])]),e._v(" "),a("p",[e._v("\n                            We're going to have a list of customers at the top in a drop-down ComboBox, we're going to have\n                            individual fields here for FirstName, LastName, and Email on the SelectedCustomer that are\n                            editable so we can see some of the change impacts there. We've got a DataGrid in the middle\n                            that's going to list out recent orders for that customer, and then we've got a data form down\n                            below where we can create a new order and add it to the collection up above. So those are the\n                            scenarios we want to support here and we are going to do it by data binding to entities. The\n                            entities we're going to be working with are already defined in the solution here under this\n                            model folder.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(244)}}),e._v(" "),a("figcaption",[e._v("Fig 02-003")])]),e._v(" "),a("p",[e._v("\n                            We've got a customer as a top level object, you can see this is a Plain Old CLR Object, just\n                            simple auto-implemented properties here, for an Id, a FirstName, a LastName, an Email, a\n                            Collection of Orders as a List. And then notice you can also have computed properties here, ones\n                            that are read-only, and in this case computed from the FirstName and LastName property and those\n                            are data bindable as well.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class Customer\n{\n    public Guid Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string Email { get; set; }\n    public List<Order> Orders { get; set; }\n    public string FullName { get { return string.Format("{0} {1}",FirstName,LastName); } }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-004")])]),e._v(" "),a("p",[e._v("\n                            We've got an OrderObject that has an Id, a parent CustomerId, an OrderDate, and a related object\n                            and OrderStatusId that will set through a drop-down ComboBox, and then finally an ItemsTotal.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public class Order\n{\n    public long Id { get; set; }\n    public Guid CustomerId { get; set; }\n    public DateTime OrderDate { get; set; }\n    public int OrderStatusId { get; set; }\n    public decimal ItemsTotal { get; set; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-005")])]),e._v(" "),a("p",[e._v("\n                            The OrderStatus object is just a simple lookup list kind of thing with an Id and a Name.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class OrderStatus\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-006")])]),e._v(" "),a("p",[e._v("\n                            And then the way we're populating those entities for these demos is through an Entity Framework\n                            DbContext a Code First DbContext, and you can see we're just exposing DbSets for Customers,\n                            Orders, OrderStatuses, and then we've got some ModelBuilder stuff down here.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class ZzaDbContext : DbContext\n{\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Order> Orders { get; set; }\n    public DbSet<OrderStatus> OrderStatuses { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        // Table names match entity names by default (don't pluralize)\n        modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();\n        // Globally disable the convention for cascading deletes\n        modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();\n\n        modelBuilder.Entity<Customer>()\n                    .Property(c => c.Id) // Client must set the ID.\n                    .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-007")])]),e._v(" "),a("p",[e._v("\n                            Again, I don't expect you to necessarily know how to do Entity Framework at all to understand\n                            these demos. We're focusing on the data binding, not how we get those objects in the memory. The\n                            code-behind of the MainWindow currently is mostly empty, it's just got stubbed out event\n                            handlers for the drop-down list selection, the Add and Cancel buttons for adding orders.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" private void OnCustomerSelected(object sender, SelectionChangedEventArgs e)\n{\n\n}\n\nprivate void OnAdd(object sender, RoutedEventArgs e)\n{\n\n}\n\nprivate void OnCancel(object sender, RoutedEventArgs e)\n{\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-008")])]),e._v(" "),a("p",[e._v("\n                            So the first thing we might need is to expose some data that we can data bind to. For this demo,\n                            I'm just going to put things as properties exposed from the MainWindow itself, so we're not\n                            doing MVVM, we just want to expose objects from our code-behind so that we can data bind to\n                            them. In simplest form, we could do that by just exposing normal auto-implemented properties on\n                            our Window class here. So I've got a list of customers here that I can put into my ComboBox, and\n                            I've got a SelectedCustomer that I can use to drive those individual input fields for the\n                            SelectedCustomer.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public List<Customer> Customers { get; set; }\npublic Customer SelectedCustomer { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 02-009")])]),e._v(" "),a("p",[e._v("\n                            I'm going to need an instance of my DbContext to go ahead and populate that data, and then I\n                            could go into my constructor here and go ahead and execute a query through my DbContext to get\n                            back all the customers as a list and push those into my Customers property that I declared down\n                            below. Then I could go to the ComboBox that has an ID of CustomersCombo, set the SelectedItem to\n                            the first customer in the list, and then if I set the DataContext of the Window itself to a\n                            reference to the Window, then any of the properties exposed by the Window are now accessible on\n                            the DataContext for bindings to use.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("ZzaDbContext _DbContext = new ZzaDbContext();\n\npublic MainWindow()\n{\n    InitializeComponent();\n    Customers = _DbContext.Customers.ToList();\n    CustomersCombo.SelectedItem = Customers[0];\n    DataContext = this;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-010")])]),e._v(" "),a("p",[e._v("\n                            I need one other thing in the code-behind here before we go to the XAML is in our\n                            CustomerComboBox, when we make a selection, we need to set that SelectedCustomer property, which\n                            is defined right up above, to the customer that was selected. So we can go out to the\n                            CustomersCombo, grab the SelectedItem, cast it to a Customer, and set that as our Customer\n                            property.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public List<Customer> Customers { get; set; }\npublic Customer SelectedCustomer { get; set; }\n\nprivate void OnCustomerSelected(object sender, SelectionChangedEventArgs e)\n{\n    SelectedCustomer = CustomersCombo.SelectedItem as Customer;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-011")])]),e._v(" "),a("p",[e._v("\n                            Later in the course we'll get to, there's better ways to do this where you can do this through\n                            binding as well, but this will be sufficient for what we're showing now. Now we need to get\n                            things hooked up in the XAML. So I'm going to switch over to XAML, I'm going to go down to our\n                            ComboBox here, and I'm going to add in some data binding properties.\n                        ")]),e._v(" "),a("p",[e._v("\n                            First we're going to set the ItemsSource to the Customers property exposed on our DataContext,\n                            which is the Window instance itself. Each item in that collection is a whole Customer object and\n                            we don't want it to ToString that for us, so we'll set the DisplayMemberPath property to\n                            FullName, that computed property on our Entity and we'll set the SelectedValuePath to the Id\n                            property.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="Customers" />\n<ComboBox x:Name="CustomersCombo"\n          Grid.Column="1"\n          Width="250"\n          HorizontalAlignment="Left"\n          ItemsSource="{Binding Customers}"\n          DisplayMemberPath="FullName"\n          SelectedValuePath="Id"\n          SelectionChanged="OnCustomerSelected" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-012")])]),e._v(" "),a("p",[e._v("\n                            And then I'll go down to my data form here and I'll add a Binding for the FirstName property,\n                            we'll point that Binding to the SelectedCustomer property that's on our DataContext, which is\n                            the Window, and then we can dot down to the FirstName property on that SelectedCustomer to set\n                            the text there, likewise, for the LastName and for the Email.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox Grid.Column="1"\n   Text="{Binding SelectedCustomer.LastName}" />\n<Label Content="Last Name:"\n   Grid.Column="2" />\n<TextBox Grid.Column="3"\n   Text="{Binding SelectedCustomer.FirstName}" />\n<Label Content="Email:"\n   Grid.Column="4" />\n<TextBox Grid.Column="5"\n   Text="{Binding SelectedCustomer.Email}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-013")])]),e._v(" "),a("p",[e._v("\n                            So with that code in place, we can fire this thing up and we can see our ComboBox is bound.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(245)}}),e._v(" "),a("figcaption",[e._v("Fig 02-014")])]),e._v(" "),a("p",[e._v("\n                            The problem is, as we select things we can see that the TextBoxes (FirstName, LastName and\n                            Email) are not updating. To make matters worse, if I go and edit something like Last Name here\n                            and tab out of the field, which is what causes it to get written\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(246)}}),e._v(" "),a("figcaption",[e._v("Fig 02-015")])]),e._v(" "),a("p",[e._v("\n                            The Last Name jumps at that point to the actual value of the currently selected customer, but\n                            the First Name and Email are out of sync now.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(247)}}),e._v(" "),a("figcaption",[e._v("Fig 02-016")])]),e._v(" "),a("p",[e._v("\n                            And if I go look at the ComboBox list and go back to Derek, his Last Name hasn't been modified\n                            there:\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(248)}}),e._v(" "),a("figcaption",[e._v("Fig 02-017")])]),e._v(" "),a("p",[e._v("\n                            But if I click on it then the modification shows up.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(249)}}),e._v(" "),a("figcaption",[e._v("Fig 02-018")])]),e._v(" "),a("p",[e._v("\n                            So things are wildly out of sync here because our entities are not properly defined to really\n                            support Data Binding. So in the next couple of demos, we'll fix that by supporting Change\n                            Notifications when things are changing.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Change Notifications")]),e._v(" "),a("p",[e._v("\n                            Now one of the most important concepts when dealing with Data Binding to Entities and Data\n                            Objects where you're building a rich interactive UI around those Objects, is Property and\n                            Collection Change Notifications. Basically, Change Notifications are going to be necessary if\n                            those Source Object Properties that you're Binding to or the Collections can be modified by any\n                            other code, other than the Binding itself.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So this includes things like if you go out and do an Asynchronous service call to load some Data\n                            into your UI's memory space, you're going to end up setting Properties or populating Collections\n                            behind the scenes after the UI has already rendered and the XAML has been parsed. Another\n                            scenario is if you have a Command or Event Handler in code and that reaches out and modifies the\n                            Data Source Object for another control. And certainly if you have any background Threads or\n                            things going on in the background that are modifying your Data Objects, that's another source\n                            where things are going to change behind the scenes, not directly from user input, through the\n                            bound control.\n                        ")]),e._v(" "),a("p",[e._v("\n                            In any of these scenarios, you're going to need Property or collection Change Notifications to\n                            make sure that the UI stays fresh, because if there's no notification, the UI is going to\n                            continue to show the value that was in the Source property at the initial Binding, the point\n                            where the XAML was parsed. So to keep that UI fresh and in sync with the Data Source Object, the\n                            Data Source Object has to raise Change Notifications to tell the binding in the UI, hey, come\n                            and read my value again because it's changed.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now when it comes to supporting Property level Change Notifications, you really have two\n                            options. The first is to support the INotifyPropertyChanged interface, which I'll often call\n                            INPC for short based on the capitals in that name. INotifyPropertyChanged is a simple interface\n                            with a single Member on it called PropertyChanged, an event that you're supposed to raise\n                            whenever the properties on your object change.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(250)}}),e._v(" "),a("figcaption",[e._v("Fig 02-019")])]),e._v(" "),a("p",[e._v("\n                            Bindings are aware of this interface and when they go to Data Bind to a Source Object, they will\n                            query it to see if it supports this interface. And if it does, then the Binding itself will\n                            subscribe to that PropertyChanged event so it can be notified and refresh the bound Property if\n                            that PropertyChanged event indicates that that Property has changed.\n                        ")]),e._v(" "),a("p",[e._v("\n                            The other option you have is to use DependencyProperties. If your Source object inherits from\n                            DependencyObject as a base class and the Properties that it's exposing that you're binding to\n                            are DependencyProperties, there's an internal mechanism that can raise Change Notifications to\n                            bindings so that they know to refresh.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So let's look a little deeper at the first of these doing INotifyPropertyChanged. Basically,\n                            what you're going to do is implement that interface on your data object class, so this is going\n                            to be your entity class that you're using as a data source object. In addition to declaring that\n                            interface on the class definition itself, you're going to expose a public event with a signature\n                            of "),a("span",{staticClass:"code"},[e._v("public event PropertyChangedEventHandler")]),e._v(" and give that event the\n                            name "),a("span",{staticClass:"code"},[e._v("PropertyChanged")]),e._v(". Once you've defined that event, you're going to\n                            be responsible for raising that event in each of your property setters on that object, but you\n                            should generally check and see that the value being set is not the value that's already there,\n                            and not raise the event if the setter is being called with the current value. So let's take a\n                            look at a demo of implementing INotifyPropertyChanged and how it syncs up our UI better for the\n                            demo scenarios we've been covering.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Implementing INotifyPropertyChanged")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            So in the last demo we saw the synchronization problem because we're using simple Plain Old CLR\n                            Object Entities that when we are making selections they're not reflecting in the fields. If we edit\n                            a field and then tab out, then it jumps to the current object it didn't update in the list here,\n                            but if we select the guy, then the change shows up. Now part of that is caused by the lack of\n                            support for INotifyPropertyChanged, which is what we're going to remedy here.\n                        ")]),e._v(" "),a("p",[e._v("\n                            If we go to our Customer object, you can see it's just a simple Plain Old CLR Object.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class Customer\n{\n    public Guid Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string Email { get; set; }\n    public List<Order> Orders { get; set; }\n    public string FullName { get { return string.Format("{0} {1}",FirstName,LastName); } }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-020")])]),e._v(" "),a("p",[e._v("\n                            Anytime you're doing data binding to a complex object like this, you're going to want it to\n                            support the INotifyPropertyChanged interface. To do that, I'm going to modify the Customer class\n                            here and what I did is you can see it got a lot bigger. First off, I'm implementing the\n                            INotifyPropertyChanged interface.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class Customer : INotifyPropertyChanged")])]),e._v(" "),a("figcaption",[e._v("Fig 02-021")])]),e._v(" "),a("p",[e._v("\n                            I'm going to call this INPC for short in a lot of the course here. So the INPC interface here\n                            requires that you expose a public event called PropertyChanged on your type of Type\n                            PropertyChangedEventHandler.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event PropertyChangedEventHandler PropertyChanged = delegate { };")])]),e._v(" "),a("figcaption",[e._v("Fig 02-022")])]),e._v(" "),a("p",[e._v("\n                            Now this syntax at the end of the line above, if you haven't seen it, is kind of a nice trick\n                            called the delegate trick, that if you assign an empty anonymous delegate into that event, then\n                            it's basically a no-op subscriber that's always there and can't be removed, so you no longer\n                            have to check for nulls before firing your events in C#.\n                        ")]),e._v(" "),a("p",[e._v("\n                            You can see that our property is expanded to backing member variables and individual properties\n                            with getters and setters on those member variables.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class Customer : INotifyPropertyChanged\n{\npublic event PropertyChangedEventHandler PropertyChanged = delegate { };\n\n\nprivate Guid _Id;\nprivate ObservableCollection<Order> _Orders;\nprivate string _Email;\nprivate string _LastName;\nprivate string _FirstName;\n\npublic Guid Id\n{\n    get\n    {\n        return _Id;\n    }\n    set\n    {\n        _Id = value;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-023")])]),e._v(" "),a("p",[e._v("\n                            Now this Id property you might treat as invariant. In this case it's a GUID so it actually does\n                            have to be set. What you really want to be doing on every Property is what the other ones are\n                            doing, which is raising the PropertyChanged event, passing a reference for the Object Sender of\n                            this, and then a PropertyChangedEventArg that takes the name of the Property that's being\n                            changed.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string FirstName\n{\n    get\n    {\n        return _FirstName;\n    }\n    set\n    {\n        _FirstName = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("FirstName"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-024")])]),e._v(" "),a("p",[e._v("\n                            So I should really add this PropertyChanged to the Id as well and make sure the name of the\n                            Property is Id. So on any object that implements INotifyPropertyChanged, the way to think about\n                            it is any of the public properties you expose that have a set block should raise\n                            PropertyChanged. Now if we slide down to the bottom, we've still got our FullName property that\n                            we're actually binding to in the ComboBox, and it's computed based off the FirstName and\n                            LastName.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string FullName { get { return string.Format("{0} {1}", FirstName, LastName); } }')])]),e._v(" "),a("figcaption",[e._v("Fig 02-025")])]),e._v(" "),a("p",[e._v("\n                            It doesn't have a set block that we can put a PropertyChangedEvent in, but we basically need the\n                            PropertyChanged to fire on that whenever FirstName or LastName changes. So a little trick for\n                            dealing with that is if we go up here to the two DependentProperties, FirstName and LastName, we\n                            can raise other PropertyChanged events in their set block. The first PropertyChanged says yes,\n                            in fact the FirstName PropertyChanged, but it also pretends that the FullName property has\n                            changed because effectively it has.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string FirstName\n{\n    get\n    {\n        return _FirstName;\n    }\n    set\n    {\n        _FirstName = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("FirstName"));\n        PropertyChanged(this, new PropertyChangedEventArgs("FullName"));\n    }\n}\npublic string LastName\n{\n    get\n    {\n        return _LastName;\n    }\n    set\n    {\n        _LastName = value;\n        PropertyChanged(this, new PropertyChangedEventArgs("LastName"));\n        PropertyChanged(this, new PropertyChangedEventArgs("FullName"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-026")])]),e._v(" "),a("p",[e._v("\n                            So if we raise PropertyChanged for FullName on both the DependentProperties, then the right\n                            thing will happen there. So if we go ahead and run, now we modify Pucket's Last Name here and\n                            tab out of the field, and we see that it immediately updates in the ComboBox, both there and in\n                            the drop-down list, because the object is raising the appropriate Change Notifications. Now our\n                            selection problem is not yet fixed, we'll have to fix that in the next demo.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("DependencyProperties")]),e._v(" "),a("p",[e._v("\n                            Now the other option that you have for raising Change Notifications at the property level, that\n                            we discussed, is to data bind to DependencyProperties as your source properties.\n                        ")]),e._v(" "),a("p",[e._v("\n                            DependencyProperties can be implemented on any "),a("span",{staticClass:"code"},[e._v("class")]),e._v(" that derives from\n                            DependencyObject, either directly or indirectly through an inheritance chain. Now it turns out\n                            there is another kind of DependencyProperty called an Attached Property, and these are actually\n                            implemented on a "),a("span",{staticClass:"code"},[e._v("static class")]),e._v(" that doesn't have to have any\n                            inheritance requirement there, but these are not directly relevant to the discussion of data\n                            source objects and binding. They can tie in with data binding in other ways, but we're not going\n                            to go into that in this module.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So the reason DependencyProperties will work here is that when you set a DependencyProperty\n                            there's an internal notification the bindings are able to monitor directly, so they satisfy the\n                            same purpose as an INotifyPropertyChanged object that they can make sure that that binding knows\n                            when to refresh itself, if the underlying source object property is changed.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now you're typically only going to use DependencyProperties for properties exposed on UI\n                            elements, controls, and views, and those are the things that are typically the target, not the\n                            source of a binding. But as we'll see later in the module, you can bind from one element to\n                            another, for example, in which case one element can be the source and a different element the\n                            target. So in those cases, you're going to leverage the fact that those Source properties are\n                            probably DependencyProperties if it's a framework element, but we'll also see in demos that you\n                            can expose your own DependencyProperties as your Source objects or your DataContext properties\n                            so that you get the appropriate Change Notifications when those are set.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Another important thing to re-emphasize about bindings is that the target of a binding does have\n                            to be a DependencyProperty itself. So this doesn't really tie into the Change Notifications,\n                            it's just a requirement of a binding, the target has to be a DependencyProperty. Now when it\n                            comes to implementing your own DependencyProperties, what you're going to do is declare"),a("span",{
staticClass:"code"},[e._v(" a public static readonly")]),e._v(" member variable on your class of type\n                            DependencyProperty. And there's a particular signature to this you're going to have to follow,\n                            as well as naming conventions for the property itself. The easiest way to follow these\n                            conventions is to use a built-in code snippet in Visual Studio called "),a("span",{staticClass:"code"},[e._v("propdp")]),e._v(" and you'll see that in the demos.\n                        ")]),e._v(" "),a("p",[e._v("\n                            When you declare a DependencyProperty in addition to the "),a("span",{staticClass:"code"},[e._v("public static readonly")]),e._v("\n                            member variable that's the real DependencyProperty, you're also going to declare what's called a\n                            \"wrapper property\". This is a normal .NET property that's "),a("span",{staticClass:"code"},[e._v("get")]),e._v(" and\n                            "),a("span",{staticClass:"code"},[e._v("set")]),e._v(" blocks just delegate down to the base class "),a("span",{staticClass:"code"},[e._v("GetValue")]),e._v("\n                            and "),a("span",{staticClass:"code"},[e._v("SetValue")]),e._v(" methods that are the way you really read and write from a\n                            DependencyProperty. It's important to understand that the wrapper property is really just there\n                            for programmatic access from your own code, even though based on the naming convention, as\n                            you'll see in the code, it's going to look like your binding is pointing at the wrapper\n                            property, not the DependencyProperty, but the way it really works out is the binding is pointing\n                            to the DependencyProperty and it's actually going to be calling "),a("span",{staticClass:"code"},[e._v("GetValue")]),e._v(" and "),a("span",{staticClass:"code"},[e._v("SetValue")]),e._v(" on the DependencyObject\n                            base class and completely ignoring that wrapper property. So the important impact to that is it\n                            means you should not put side effects such as validation and things like that in your Set block\n                            of your wrapper property because those are not going to be called in the binding process, but\n                            we'll get into more details on validation in a later module.\n                        ")]),e._v(" "),a("p",[e._v("\n                            However, this wrapper property is part of the overall signature of declaring a\n                            DependencyProperty, so you're really always going to be defining two things, the actual\n                            DependencyProperty itself that's the "),a("span",{staticClass:"code"},[e._v("public static readonly")]),e._v(" member,\n                            and then the wrapper property that matches the naming conventions to expose that for\n                            programmatic access.\n                        ")]),e._v(" "),a("p",[e._v("\n                            When you define the DependencyProperty, you do have an option to pass a metadata object to the\n                            factory method you used to create it, and that metadata can contain several things.\n                        ")]),e._v(" "),a("p",[e._v("\n                            First is, it contains a default value that's going to be used if the property is never\n                            explicitly set, and it can also be used to define the default data binding directionality. We'll\n                            get into more on directionality in a later module, but that has to do with whether it's a\n                            one-way binding, two-way binding or some of the other variants supported there. There's also\n                            some other things you can do through that metadata object we won't go into in this course, that\n                            have to do with more advanced framework aspects. So let's take a look at declaring custom\n                            DependencyProperties on our view when we're using our view as our DataContext to get the Change\n                            Notifications we need so we can set those at any time and have the UI stay fresh.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: DependencyProperties")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            Okay, so we saw that implementing INotifyPropertyChanged fixed part of the problem for us, that\n                            when the individual properties change, such as FirstName and LastName, they can raise Change\n                            Notifications and even raise Change Notifications for other properties such as the computed\n                            FullName property that depends on them, and get the UI to update.\n                        ")]),e._v(" "),a("p",[e._v("\n                            But we still have that selection problem that when we selected things in the ComboBox, it wasn't\n                            updating on the UI. Now the reason for that is this right here.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public List<Customer> Customers { get; set; }\npublic Customer SelectedCustomer { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 02-027")])]),e._v(" "),a("p",[e._v("\n                            We're setting this SelectedCustomer property, but it's just a plain C# property itself, and\n                            raises no Change Notifications. So we have a couple options to fix that. One is, we could go up\n                            there to the Window class and we could implement INotifyPropertyChanged up here:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public partial class MainWindow : Window, INotifyPropertyChanged")])]),e._v(" "),a("figcaption",[e._v("Fig 02-028")])]),e._v(" "),a("p",[e._v("\n                            and then expand the Customers and SelectedCustomer properties to raise PropertyChanged events as\n                            well. And if these properties were on something like a ViewModel, that would be the right thing\n                            to do. However, since we're in a Window class, which is also a DependencyObject, another option\n                            you have is to use DependencyProperties. So I can delete off the existing Customers and\n                            SelectedCustomer properties and add them back in using a code snippet that's built in to Visual\n                            Studio called propdp. I can hit tab, tab, and then I start filling in the blanks,\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' public int MyProperty\n{\n    get { return (int)GetValue(MyPropertyProperty); }\n    set { SetValue(MyPropertyProperty, value); }\n}\n\n// Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty MyPropertyProperty =\n    DependencyProperty.Register("MyProperty", typeof(int), typeof(ownerclass), new PropertyMetadata(0));')])]),e._v(" "),a("figcaption",[e._v("Fig 02-029")])]),e._v(" "),a("p",[e._v("\n                            The first one was my List of Customers called Customers:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public List<Customer> Customers { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 02-030")])]),e._v(" "),a("p",[e._v("\n                            And then I tab down to the bottom right here and you can see it wants an Owner class that's\n                            going to be the main window, and then I'll tab right one more time and there's a default value\n                            which I'll set to null.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public static readonly DependencyProperty CustomersProperty =\n    DependencyProperty.Register("Customers",\n    typeof(List<Customer>),\n    typeof(MainWindow),\n    new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 02-031")])]),e._v(" "),a("p",[e._v("\n                            So let me just clean that up a little bit:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public List<Customer> Customers\n{\n    get { return (List<Customer>)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}\n\npublic static readonly DependencyProperty CustomersProperty =\n    DependencyProperty.Register("Customers",\n    typeof(List<Customer>),\n    typeof(MainWindow),\n    new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 02-032")])]),e._v(" "),a("p",[e._v("\n                            So here you can see the cleaned up Customers DependencyProperty, and just to review these, if\n                            you haven't had a lot of exposure, a DependencyProperty is a "),a("span",{staticClass:"code"},[e._v("public static readonly")]),e._v(" member variable on the class that declares it.\n                            That class will have to derive directly or indirectly from DependencyObject. The\n                            DependencyProperty itself always has a suffix of property with the name of the property that's\n                            being exposed as part of the registration, declares what the type of that property is, what the\n                            type of the containing type is, and then optionally it can provide a default value through\n                            metadata.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Then paired with your DependencyProperty, you'll always have what's called a wrapper property:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public List<Customer> Customers\n{\n    get { return (List<Customer>)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-033")])]),e._v(" "),a("p",[e._v("\n                            Which is always just a .NET property with the same name, Customers, and you can see it uses the\n                            DependencyObject base class to call "),a("span",{staticClass:"code"},[e._v("GetValue")]),e._v(" and "),a("span",{staticClass:"code"},[e._v("SetValue")]),e._v("\n                            to read and write the underlying value of that DependencyProperty.\n                        ")]),e._v(" "),a("p",[e._v("\n                            This normal property is just there to make it easier to get and set the value from programmatic\n                            code. The thing that's important to understand is the XAML when you bind to Customers, it's\n                            actually only going to be using the DependencyProperty, and the binding itself is going to call\n                            "),a("span",{staticClass:"code"},[e._v("GetValue")]),e._v(" and "),a("span",{staticClass:"code"},[e._v("SetValue")]),e._v(" just like you see up\n                            above, it's not going to be calling the getters and setters of this .NET property.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So we define one DependencyProperty for Customers, and I'll define another one for the\n                            SelectedCustomer. So now we have a DependencyProperty for the SelectedCustomer as well. Now why\n                            did I do all this, it's a lot of syntax. The reason is that DependencyProperties raise their own\n                            Change Notifications and bindings are aware of those, so if the properties are bound to our\n                            DependencyProperties, you don't have to worry about raising any kind of change notification,\n                            that'll happen under the covers automatically.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Our code that goes and sets properties doesn't have to change because they're actually using the\n                            wrapper property here, and it's when the "),a("span",{staticClass:"code"},[e._v("SetValue")]),e._v(" on the\n                            DependencyProperty gets called that the change notification actually gets raised under the\n                            covers that the binding is listening for. So with that in place, if we go and run, now we make\n                            our selections and you can see the boxes below are updating with those selections because when\n                            SelectedCustomer changes, each of these is bound to select Customer and some property on that\n                            and it knows to re-render based on that property change.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(251)}}),e._v(" "),a("figcaption",[e._v("Fig 02-034")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("ObservableCollections")]),e._v(" "),a("p",[e._v("\n                            Now when it comes to Collections that we're going to Data Bind to, we have a change notification\n                            challenge there as well. If we're just using something like a simple array or even the "),a("span",{staticClass:"code"},[e._v("List<T>")]),e._v(" and we're adding and removing items from that collection,\n                            the binding is not going to know anything about that and we're not going to see the changes\n                            reflected on the screen. This is where "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>")]),e._v(" and the "),a("span",{staticClass:"code"},[e._v("INotifyCollectionChanged")]),e._v("\n                            interface come into play. The base level support you need to ensure that the UI stays fresh is\n                            that your collection type needs to implement an interface called "),a("span",{staticClass:"code"},[e._v("INotifyCollectionChanged")]),e._v("\n                            and you should see the similarity here to "),a("span",{staticClass:"code"},[e._v("INotifyPropertyChanged")]),e._v(".\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(252)}}),e._v(" "),a("figcaption",[e._v("Fig 02-035")])]),e._v(" "),a("p",[a("span",{staticClass:"code"},[e._v("INotifyCollectionChanged")]),e._v(" raises a "),a("span",{staticClass:"code"},[e._v("CollectionChanged")]),e._v(" event, so it's the conceptual dual or parallel to the\n                            INPC interface. And this one covers changes to the collection meaning additions and removals\n                            changes of what objects are currently in the collection. If you've come from previous\n                            technologies such as Windows Forms, it's important to realize that the "),a("span",{staticClass:"code"},[e._v("CollectionChanged")]),e._v("\n                            event is only going to fire for these add, remove, replace, and clear type operations, things\n                            that change the overall set of objects in the collection. You won't get a "),a("span",{staticClass:"code"},[e._v("CollectionChanged")]),e._v("\n                            event fired if a property on one of the objects within the collection has been modified.\n                        ")]),e._v(" "),a("p",[e._v("\n                            If you want to know about those, then the objects that are in the collection will need to\n                            implement "),a("span",{staticClass:"code"},[e._v("INotifyPropertyChanged")]),e._v(" or be DependencyObjects with\n                            DependencyProperties to get those property level notifications for the objects in the\n                            collection. Now the best way to go about this, as the title of the slide suggests, is to not\n                            implement anything yourself. There's a built-in collection type called "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>")]),e._v("\n                            that already implements the INCC interface or "),a("span",{staticClass:"code"},[e._v("INotifyCollectionChanged")]),e._v(",\n                            and will raise those "),a("span",{staticClass:"code"},[e._v("CollectionChanged")]),e._v(" events for adds, removes, and so on.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So, in general, the easiest way to think of things is anytime you're going to expose a property\n                            that is a collection and you want to data bind directly to that collection, make sure that that\n                            property is defined as an "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>")]),e._v(". This means\n                            that if your objects are coming in, say, from a service call or you've read them in from a\n                            database, they're not necessarily already going to be an "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>")]),e._v(".\n                            The good news is that type has a constructor that takes an "),a("span",{staticClass:"code"},[e._v("IEnumerable")]),e._v("\n                            so you can pass in any other collection type and it'll basically just iterate through that\n                            collection and add references to those same objects into your new "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>")]),e._v(",\n                            and that's what you can expose for data binding. So let's take a look at the demo and see how\n                            using "),a("span",{staticClass:"code"},[e._v("ObservableCollections")]),e._v(" instead of other collection types solves\n                            our UI synchronization problems for collections.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: ObservableCollections")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            So in this demo I'm going to hook up the rest of this form with this List of Orders for the\n                            "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v(" and then the ability to add new orders to that list\n                            from the form at the bottom. To do that, we're going to drop into the code-behind here and we're\n                            going to need a couple more properties, which I'll go ahead and define as DependencyProperties\n                            so that they can have Change Notifications as we discussed in the last demo.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So first off, for the new order form at the bottom we're going to have an "),a("span",{staticClass:"code"},[e._v("Order")]),e._v("\n                            object that those fields can bind to called "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public Order NewOrder\n{\n    get { return (Order)GetValue(NewOrderProperty); }\n    set { SetValue(NewOrderProperty, value); }\n}\n\npublic static readonly DependencyProperty NewOrderProperty =\n    DependencyProperty.Register("NewOrder", typeof(Order), typeof(MainWindow), new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 02-036")])]),e._v(" "),a("p",[e._v("\n                            Then for the "),a("span",{staticClass:"code"},[e._v("ComboBox")]),e._v(" in the form we're going to have one called "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v(" that's going to be populated with the choices for "),a("span",{staticClass:"code"},[e._v("OrderStatus")]),e._v(" from the database.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public List<OrderStatus> OrderStatuses\n{\n    get { return (List<OrderStatus>>)GetValue(OrderStatusesProperty); }\n    set { SetValue(OrderStatusesProperty, value); }\n}\n\npublic static readonly DependencyProperty OrderStatusesProperty =\n    DependencyProperty.Register("OrderStatuses", typeof(List<OrderStatus>), typeof(MainWindow), new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 02-037")])]),e._v(" "),a("p",[e._v("\n                            Next we're going to need to populate the Orders, so I'm going to go up here to where we are\n                            initializing our Customer information in our DataContext and add a few more things.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    DataContext = this;\n\n    Customers = new ObservableCollection<Customer>(_DbContext.Customers);\n    OrderStatuses = _DbContext.OrderStatuses.ToList();\n    CustomersCombo.SelectedItem = Customers[0];\n    OrderStatusCombo.SelectedIndex = 0;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-038")])]),e._v(" "),a("p",[e._v("\n                            First off, we're going to populate that "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v(" collection with\n                            the list of "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v(" from the database. We're still selecting the\n                            first "),a("span",{staticClass:"code"},[e._v("Customer")]),e._v(" like we were doing before and we're setting the\n                            DataContext still to the window as a whole.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Just to emphasize from the previous demo, I could actually move the line where the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" is set now to some point before we start populating the\n                            properties on whatever that DataContext is:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    DataContext = this;\n\n    Customers = new ObservableCollection<Customer>(_DbContext.Customers);\n    OrderStatuses = _DbContext.OrderStatuses.ToList();\n    CustomersCombo.SelectedItem = Customers[0];\n    OrderStatusCombo.SelectedIndex = 0;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-039")])]),e._v(" "),a("p",[e._v("\n                            As long as those properties raise appropriate Change Notifications, which the\n                            DependencyProperties do, then it's okay to change these after the fact of setting the\n                            DataContext.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now we also need to populate that "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" object, so if I go down to\n                            my "),a("span",{staticClass:"code"},[e._v("CustomerSelected")]),e._v(" handler, and then add in some code:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnCustomerSelected(object sender, SelectionChangedEventArgs e)\n{\n    SelectedCustomer = CustomersCombo.SelectedItem as Customer;\n    NewOrder = new Order();\n    NewOrder.BeginEdit();\n    NewOrder.CustomerId = SelectedCustomer.Id;\n    SelectedCustomer.Orders = new ObservableCollection<Order>(_DbContext.Orders.Where(o => o.CustomerId == SelectedCustomer.Id));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-040")])]),e._v(" "),a("p",[e._v("\n                            That code is going to new up an "),a("span",{staticClass:"code"},[e._v("Order")]),e._v(" object and set it as the "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(", and set the "),a("span",{staticClass:"code"},[e._v("CustomerId")]),e._v(" of that "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" to the "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v(" in the\n                            ComboBox. Then we're going to go execute a query to get the orders for that corresponding\n                            customer and push it in the "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" collection of the "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v(" object.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now we just need to update our bindings a little bit in the UI. So first I can go into the XAML\n                            and I can come find my DataGrid that the Orders are supposed to show up in. I can add a binding\n                            here for the ItemsSource property pointing to that "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v("\n                            object and the "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" collection that hangs off of it.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid ItemsSource="{Binding SelectedCustomer.Orders}"')])]),e._v(" "),a("figcaption",[e._v("Fig 02-041")])]),e._v(" "),a("p",[e._v("\n                            Now we don't have any columns to find here, so it's going to auto-generate the columns based on\n                            the properties on that object.\n                        ")]),e._v(" "),a("p",[e._v("\n                            And then I'm going to slide down and update the fields in our Order form to include appropriate\n                            bindings.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="Order ID:" />\n<Label Content="{Binding Id}"\n    Grid.Column="1" />\n<Label Content="Order Date:"\n    Grid.Row="1" />\n<TextBox Grid.Column="1"\n    Grid.Row="1"\n    Text="{Binding OrderDate}" />\n<Label Content="Order Total:"\n    Grid.Row="2" />\n<TextBox Grid.Column="1"\n    Grid.Row="2"\n    Text="{Binding ItemsTotal}" />\n<Label Content="Order Status:"\n    Grid.Row="3" />\n<ComboBox x:Name="OrderStatusCombo"\n    ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.OrderStatuses}"\n    DisplayMemberPath="Name"\n    SelectedValuePath="Id"\n    SelectedValue="{Binding Path=NewOrder.OrderStatusId, Mode=TwoWay}"')])]),e._v(" "),a("figcaption",[e._v("Fig 02-042")])]),e._v(" "),a("p",[e._v("\n                            So you can see we're binding the "),a("span",{staticClass:"code"},[e._v("OrderId")]),e._v(" to the "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v("\n                            object's "),a("span",{staticClass:"code"},[e._v("Id")]),e._v(", "),a("span",{staticClass:"code"},[e._v("NewOrder.OrderDate")]),e._v(", "),a("span",{staticClass:"code"},[e._v("NewOrder.ItemsTotal")]),e._v(", and then for the "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v(" ComboBox we bind that to our "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v("\n                            collection on the window.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So that we can push the "),a("span",{staticClass:"code"},[e._v("SelectedValue")]),e._v(" from that "),a("span",{staticClass:"code"},[e._v("ComboBox")]),e._v("\n                            into the underlying object, we have a binding on the "),a("span",{staticClass:"code"},[e._v("SelectedValue")]),e._v("\n                            that points to the "),a("span",{staticClass:"code"},[e._v("NewOrder.OrderStatusId")]),e._v(", but "),a("span",{staticClass:"code"},[e._v("SelectedValue")]),e._v("\n                            is not a two-way binding property by default, so we have to set the "),a("span",{staticClass:"code"},[e._v("Mode")]),e._v(" property here of the binding to "),a("span",{staticClass:"code"},[e._v("TwoWay")]),e._v(".\n                            We'll get into more details on directionality of bindings in a later module.\n                        ")]),e._v(" "),a("p",[e._v("\n                            One other thing we're going to want to modify in the code-behind here is our "),a("span",{staticClass:"code"},[e._v("Add")]),e._v("\n                            handler:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnAdd(object sender, RoutedEventArgs e)\n{\n    SelectedCustomer.Orders.Add(NewOrder);\n    _DbContext.Orders.Add(NewOrder);\n    _DbContext.SaveChanges();\n    NewOrder = new Order { CustomerId = SelectedCustomer.Id };\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-043")])]),e._v(" "),a("p",[e._v("\n                            So I'm going to add some code to that basically takes that "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" object at the point where the "),a("span",{staticClass:"code"},[e._v("Add")]),e._v("\n                            button is pressed and adds that object into the "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" collection on\n                            the "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v(". We're also going to persist that change so you\n                            can see that we're taking that "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(", adding it to our "),a("span",{
staticClass:"code"},[e._v("DbContext")]),e._v(" "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" collection, and calling "),a("span",{staticClass:"code"},[e._v("SaveChanges")]),e._v(".\n                            And then you can see we're setting the "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" to a new "),a("span",{staticClass:"code"},[e._v("Order")]),e._v(" object, clearing it\n                            out basically, but setting the "),a("span",{staticClass:"code"},[e._v("CustomerId")]),e._v(" in case we're going to have\n                            multiple orders.\n                        ")]),e._v(" "),a("p",[e._v("\n                            If I go ahead and run here, we've got the orders populated for the "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v(".\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(253)}}),e._v(" "),a("figcaption",[e._v("Fig 02-044")])]),e._v(" "),a("p",[e._v("\n                            If we pick another customer, you can see it's updating to show just the orders for that current\n                            customer. Now if I go to one that's only got a couple showing here, and I go to enter a new\n                            order, I'll pick Halloween here as a date, we'll go with 99.90 as an Order Total, and an Order\n                            Status of PickedUp, and I click on Add.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now you can see the order cleared out at the bottom, but nothing happened up in the grid. If we\n                            go ahead and close, startup again, pick that same customer, we can see that new order was\n                            actually placed and it was even added to the data bound collection, it just didn't show up. And\n                            this is, again, because we need Change Notifications now at a collection level instead of a\n                            property level when you're adding and removing things from a data bound collection.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So if we go look at our "),a("span",{staticClass:"code"},[e._v("Customer")]),e._v(" object, we can see the root problem\n                            here is that that "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" collection on the "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v(" is just declared as a "),a("span",{staticClass:"code"},[e._v("List")]),e._v(" of\n                            "),a("span",{staticClass:"code"},[e._v("Order")]),e._v(".\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public List<Order> Orders\n{\n    get\n    {\n        return _Orders\n    }\n    set\n    {\n        _Orders = value;\n        PropertyChanged(this, new PropertyChangedEventArs("Orders"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-045")])]),e._v(" "),a("p",[e._v("\n                            If we set the "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" property as a whole, changed out the whole\n                            collection, we would have been fine because a PropertyChanged would have been raised and the\n                            binding would have re-bound to that new collection. But in this case we're not swapping out the\n                            whole collection, we're just reaching into that collection and adding a new item. "),a("span",{staticClass:"code"},[e._v("List<T>")]),e._v(" has no Change Notifications associated with that. So what\n                            we're going to want to do is change our property here to be an "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>,")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ObservableCollection<Order> Orders")])]),e._v(" "),a("figcaption",[e._v("Fig 02-046")])]),e._v(" "),a("p",[e._v("\n                            We will also have to go change the member variable, as well, to be an "),a("span",{staticClass:"code"},[e._v("ObservableCollection")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ObservableCollection<Order> _Orders;")])]),e._v(" "),a("figcaption",[e._v("Fig 02-047")])]),e._v(" "),a("p",[e._v("\n                            And there's one other place in the code-behind where we first populate that "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v("\n                            collection, so we're now newing up an "),a("span",{staticClass:"code"},[e._v("ObservableCollection")]),e._v(" and passing\n                            in the "),a("span",{staticClass:"code"},[e._v("IEnumerable")]),e._v(" that comes out of this LINQ expression to populate\n                            that collection.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("SelectedCustomer.Orders = new ObservableCollection<Order>(_DbContext.Orders.Where(o => o.CustomerId == SelectedCustomer.Id));")])]),e._v(" "),a("figcaption",[e._v("Fig 02-048")])]),e._v(" "),a("p",[e._v("\n                            With that code in place, we can go ahead and run, we can make our selection, let's add a new\n                            order, this one for January 1, 33.30, and Delivered, and watch the grid up above when we click Add.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(254)}}),e._v(" "),a("figcaption",[e._v("Fig 02-049")])]),e._v(" "),a("p",[e._v("\n                            It shows up immediately because that "),a("span",{staticClass:"code"},[e._v("ObservableCollection")]),e._v(" class raises\n                            a "),a("span",{staticClass:"code"},[e._v("CollectionChanged")]),e._v(" event the bindings are watching for, and the\n                            binding will re-render the content based on that.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now in a similar fashion, I really should go up here in the code-behind:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public List<Customer> Customers\n{\n    get { return (List<Customer>)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-050")])]),e._v(" "),a("p",[e._v("\n                            If you remember from previous demo, we had defined this list of customers that we were binding\n                            to. I'm going to replace that with "),a("span",{staticClass:"code"},[e._v("ObservableCollection")]),e._v(" as the type of\n                            that collection:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ObservableCollection<Customer> Customers\n{\n    get { return (ObservableCollection<Customer>)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-051")])]),e._v(" "),a("p",[e._v("\n                            Basically, anytime you're exposing a collection for data binding purposes, if there is any\n                            chance whatsoever that items will be added and removed to it, then that collection should be an\n                            "),a("span",{staticClass:"code"},[e._v("ObservableCollection")]),e._v(", not something like a List.\n                        ")]),e._v(" "),a("p",[e._v("\n                            And because of that change, we have to change the initialization code for the "),a("span",{staticClass:"code"},[e._v("Customers")]),e._v(" collection in the constructor:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    DataContext = this;\n\n    InitializeComponent();\n    Customers = new ObservableCollection<Customer>(_DbContext.Customers);\n    OrderStatuses = _DbContext.OrderStatuses.ToList();\n    CustomersCombo.SelectedItem = Customers[0];\n    OrderStatusCombo.SelectedItem = SelectedCustomer;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-052")])]),e._v(" "),a("p",[e._v("\n                            We just do a similar thing. We call the constructor of "),a("span",{staticClass:"code"},[e._v("ObservableCollection<T>")]),e._v(",\n                            passing in an Enumerable to populate it, and assigning that into our property.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Editable Objects")]),e._v(" "),a("p",[e._v("\n                            Now another thing you can support on your entities, that honestly is not often used, but I\n                            wanted to get you exposed to it anyway here since it does relate to entities as data source\n                            objects, is "),a("span",{staticClass:"code"},[e._v("EditableObject")]),e._v(" support based on the "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" interface. What this is all about is that you may want\n                            your objects to be able to back out changes that have been made on multiple properties.\n                        ")]),e._v(" "),a("p",[e._v("\n                            The canonical scenario here is that your object is data bound in a DataGrid, the user goes and\n                            changes one field, tabs to the next, makes a change, tabs to the next, makes a change, and then\n                            decides, I want to back that out. DataGrids support this inherently and allow you to hit the\n                            escape key and they will actually back out those changes in memory separate from the data object\n                            itself that it's data bound to.\n                        ")]),e._v(" "),a("p",[e._v("\n                            But you may want to support this in something like a data entry form, as well, that you want the\n                            user to be able to tab from field to field and then maybe hit a Cancel button and back all those\n                            changes out as well. Additionally, you may have custom logic that needs to execute even in the\n                            DataGrid scenario, that when the changes are backed out you may need to do other things to\n                            related objects, for example.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So the way you go about doing this is to simply implement the "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" interface on your data source object entity. When you do\n                            that, you're going to implement its API, which includes three members.\n                        ")]),e._v(" "),a("p",[e._v("One is a method called "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(", and this will be called implicitly\n                            for you by a DataGrid, but you can call it explicitly in the case of a data form. And the\n                            concept behind "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(" is that you're going to save off your\n                            original values for the current entity somewhere. It can just be in some temporary member\n                            variables within the entity itself, or you could push it out to a cache somewhere that you could\n                            retrieve it from.\n                        ")]),e._v(" "),a("p",[e._v("\n                            If the "),a("span",{staticClass:"code"},[e._v("EndEdit")]),e._v(" method is called, then the idea is you can just discard\n                            those original values. Think of that as a commit in a transactional type of system. You're\n                            basically saying that I have successfully ended the Edit operation and so I should go ahead and\n                            keep those values around that have been modified. But if you want to back things out, the member\n                            you're going to implement there is called "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(", and this is\n                            where you would basically get those original values and override the current values of all the\n                            properties with those to restore the state of the entity back to what it was when the "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(" method was called.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Again, these are going to be called implicitly for you by a "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v("\n                            if your object supports it, but you can call them explicitly in other editing scenarios as well\n                            to give this kind of transactional back out of changes at an entity level. And we haven't\n                            covered DataSets yet, we will later in this module, but I should point out that DataSets\n                            implement "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" for all the Row objects, so they inherently\n                            support this API as well. So let's take a look at a demo of how you can implement "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" on your entities and the scenarios where it can help you\n                            out.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Editable Objects")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            In this demo, I want to show you how, where, and why you might want to implement "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" for transactional changes on entities that you're data\n                            binding to. The starting point for this one is the ending point of previous demos in the module,\n                            and what we're going to be focusing on here is the Order objects.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class Order\n{\n    public long Id { get; set; }\n    public Guid CustomerId { get; set; }\n    public DateTime OrderDate { get; set; }\n    public int OrderStatusId { get; set; }\n    public decimal ItemsTotal { get; set; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-053")])]),e._v(" "),a("p",[e._v("\n                            If we go ahead and run the app, the first thing to notice is that the DataGrid in WPF already\n                            has support for backing out changes or rolling back changes as you edit an object. As soon as\n                            you put a row into Edit mode, like I've just done by clicking into a cell, and start modifying\n                            the values there, as long as my focus stays on that row I can hit escape and you can see it\n                            backed out the changes.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(255)}}),e._v(" "),a("figcaption",[e._v("Fig 02-054")])]),e._v(" "),a("p",[e._v("\n                            So, really, while a row is in Edit mode it's creating a temporary object in memory and modifying\n                            the values on that. Now there's a data binding Update mode we'll get to in a later module where\n                            it might be pushing those changes as you tab out of the field. So I could make this change, tab\n                            out of the field, and you can get it to write it to the underlying object immediately, but by\n                            default it's not doing that.\n                        ")]),e._v(" "),a("p",[e._v("\n                            If we hit escape, then it backs those things out.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(256)}}),e._v(" "),a("figcaption",[e._v("Fig 02-055")])]),e._v(" "),a("p",[e._v("\n                            Now whether you support the immediate update mode or not, you might want to have your object\n                            notified, because it might need to refresh its values from the database, for example, instead of\n                            just directly from memory. So that's one place where "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v("\n                            comes in. The other would be if we were editing our order down at the bottom and wanted to back\n                            out changes here when we click Cancel, then one way to go about it would be to support "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" on that order object.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So how do we go about doing that? Well, first off, if we're data binding to these order\n                            entities, as we covered in a previous demo, we really should be supporting "),a("span",{staticClass:"code"},[e._v("INotifyPropertyChanged")]),e._v("\n                            on this object. So the first change I'm going to make is to do that.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace EntityDataBinding\n{\n    public class Order : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged = delegate { };\n\n        private decimal _ItemsTotal;\n        private int _OrderStatusId;\n        private DateTime _OrderDate;\n        private Guid _CustomerId;\n        private long _Id;\n        private Order _TempValues;\n\n        public long Id\n        {\n            get\n            {\n                return _Id;\n            }\n            set\n            {\n                _Id = value;")])]),e._v(" "),a("figcaption",[e._v("Fig 02-056")])]),e._v(" "),a("p",[e._v("\n                            So you can see I've added the "),a("span",{staticClass:"code"},[e._v("INotifyPropertyChanged")]),e._v(" interface and the\n                            corresponding event onto my Order object, I've expanded all the properties to have backing\n                            member variables and to raise the "),a("span",{staticClass:"code"},[e._v("PropertyChanged")]),e._v(" event when those\n                            change. So that's the starting point is make it a good object for data binding. The second part\n                            is to implement the "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" interface, so I declare that I\n                            want to implement that interface:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace EntityDataBinding\n{\n    public class Order : INotifyPropertyChanged, IEditableObject")])]),e._v(" "),a("figcaption",[e._v("Fig 02-057")])]),e._v(" "),a("p",[e._v("\n                            I can stub out the implementation using Visual Studio. So you can see the interface defines\n                            three methods, "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(", "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(", and\n                            "),a("span",{staticClass:"code"},[e._v("EndEdit")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void BeginEdit()\n{\n    throw new NotImplementedException();\n}\n\npublic void CancelEdit()\n{\n    throw new NotImplementedException();\n}\n\npublic void EndEdit()\n{\n    throw new NotImplementedException();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-058")])]),e._v(" "),a("p",[e._v("\n                            The idea here is that when you go into an Edit mode, such as in the DataGrid row, you can call\n                            the "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(" method. If the user escapes and cancels those changes,\n                            it can call "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(", and if they complete the changes normally then\n                            it'll call "),a("span",{staticClass:"code"},[e._v("EndEdit")]),e._v(".\n                        ")]),e._v(" "),a("p",[e._v("\n                            In the case of the DataGrid, that would happen when the row focus changes to a different row. So\n                            what do we really need to do on these methods? Well let me add some implementation:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void BeginEdit()\n{\n    _TempValues = new Order()\n    {\n        Id = Id,\n        CustomerId = CustomerId,\n        OrderDate = OrderDate,\n        OrderStatusId = OrderStatusId,\n        ItemsTotal = ItemsTotal\n    };\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-059")])]),e._v(" "),a("p",[e._v("\n                            And you can see what I'm doing here is I've got a "),a("span",{staticClass:"code"},[e._v("TempValues")]),e._v(" object\n                            that's declared as a member variable on the class that is an "),a("span",{staticClass:"code"},[e._v("Order")]),e._v("\n                            itself:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private Order _TempValues;")])]),e._v(" "),a("figcaption",[e._v("Fig 02-060")])]),e._v(" "),a("p",[e._v("\n                            So it's just a place to stash the temporary values for each of our properties. And you can see I\n                            new up an "),a("span",{staticClass:"code"},[e._v("Order")]),e._v(" object when we go into the "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v("\n                            mode and stash off all the values of my properties into the properties of that temporary object.\n                        ")]),e._v(" "),a("p",[e._v("\n                            If "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(" is called, we just restore the property values to those\n                            original values:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void CancelEdit()\n{\n    Id = _TempValues.Id;\n    CustomerId = _TempValues.CustomerId;\n    OrderDate = _TempValues.OrderDate;\n    OrderStatusId = _TempValues.OrderStatusId;\n    ItemsTotal = _TempValues.ItemsTotal;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-061")])]),e._v(" "),a("p",[e._v("\n                            If "),a("span",{staticClass:"code"},[e._v("EndEdit")]),e._v(" is called we throw away our temporary values because\n                            they're no longer needed\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public void EndEdit()\n{\n    _TempValues = null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-062")])]),e._v(" "),a("p",[e._v("\n                            So just a simple, straightforward, brute-force kind of approach to implementing "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(".\n                        ")]),e._v(" "),a("p",[e._v("\n                            With that in place, I can set some breakpoints here (on the first lines of the BeginEdit and\n                            CancelEdit methods) and go ahead and run:\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now we'll see as I click into a cell, "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(" is called.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So we have a chance to stash off our values and we can go ahead and start editing that. I can\n                            tab off the fields and it's holding onto those values, I can change the OrderStatusId to 3,\n                            maybe change the ItemsTotal to 99, and as long as I don't tab out, which will take me to the\n                            next row, I can hit escape and now our "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(" is being called.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So it just gives your code a chance to be involved in that "),a("span",{staticClass:"code"},[e._v("EditCancel")]),e._v("\n                            process and to do whatever is necessary to restore the state of your object on Cancel.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now what if we wanted to leverage this for our entry form down below for creating a new order\n                            for when the Cancel button is hit? If we wanted to back out the changes to the "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" object that's being held in the window?\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(257)}}),e._v(" "),a("figcaption",[e._v("Fig 02-066")])]),e._v(" "),a("p",[e._v("\n                            To do that, we'd want to go to the place where the "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" is\n                            initiated and that editing can begin.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnCustomerSelected(object sender, SelectionChangedEventArgs e)\n{\n    SelectedCustomer = CustomersCombo.SelectedItem as Customer;\n    NewOrder = new Order();\n    NewOrder.BeginEdit();\n    NewOrder.CustomerId = SelectedCustomer.Id;\n    SelectedCustomer.Orders = new ObservableCollection<Order>(_DbContext.Orders.Where(o => o.CustomerId == SelectedCustomer.Id));\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-067")])]),e._v(" "),a("p",[e._v("\n                            So in our case, that's as soon as the "),a("span",{staticClass:"code"},[e._v("Customer")]),e._v(" is selected we could\n                            call "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v(" on the "),a("span",{staticClass:"code"},[e._v("NewOrder")]),e._v(" object. Then\n                            when the Add button is pressed, that's basically the success case, we would call "),a("span",{staticClass:"code"},[e._v("EndEdit")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnAdd(object sender, RoutedEventArgs e)\n{\n    SelectedCustomer.Orders.Add(NewOrder);\n    _DbContext.Orders.Add(NewOrder);\n    _DbContext.SaveChanges();\n    NewOrder = new Order { CustomerId = SelectedCustomer.Id };\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-068")])]),e._v(" "),a("p",[e._v("\n                            and then in "),a("span",{staticClass:"code"},[e._v("Cancel")]),e._v(", naturally we would call "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(".\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("\n        private void OnCancel(object sender, RoutedEventArgs e)\n        {\n            NewOrder.CancelEdit();\n        }")])]),e._v(" "),a("figcaption",[e._v("Fig 02-069")])]),e._v(" "),a("p",[e._v("\n                            With those changes in place, we can run, we could go down here and start editing our Order\n                            object (Order Date, Order Total and Order Status):\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(258)}}),e._v(" "),a("figcaption",[e._v("Fig 02-070")])]),e._v(" "),a("p",[e._v("\n                            Then if I click the Cancel button, watch the fields revert back to their defaults.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(259)}}),e._v(" "),a("figcaption",[e._v("Fig 02-071")])]),e._v(" "),a("p",[e._v("\n                            So that's all there is to "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(", implement the interface,\n                            define the "),a("span",{staticClass:"code"},[e._v("Begin")]),e._v(", "),a("span",{staticClass:"code"},[e._v("Cancel")]),e._v(", and "),a("span",{staticClass:"code"},[e._v("End Edit")]),e._v(" methods, stashing off the values somewhere appropriate, and\n                            being able to restore those values on "),a("span",{staticClass:"code"},[e._v("CancelEdit")]),e._v(". And then if you have\n                            explicit Start and End processes for editing and forms, you can call "),a("span",{staticClass:"code"},[e._v("BeginEdit")]),e._v("\n                            and then call "),a("span",{staticClass:"code"},[e._v("EndEdit")]),e._v(" at the appropriate point or "),a("span",{staticClass:"code"},[e._v("Cancel")]),e._v("\n                            if you need to back out changes.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Collection Views")]),e._v(" "),a("p",[e._v('\n                            Now another common concept in data binding and collections is the concept of the "Current"\n                            object in the collection. If you came from a Windows Forms background, there was a thing called\n                            the Currency Manager under the covers of a form that managed this aspect of data binding. WPF\n                            has something equivalent.\n                        ')]),e._v(" "),a("p",[e._v("\n                            Basically what happens is when you data bind to a collection in WPF, WPF is always going to wrap\n                            that collection in an implementation of the "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v(" interface.\n                            This "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v(' interface does a number of things, but one of the\n                            main things it does that we\'ll talk about in this module is the concept of keeping track of what\n                            is the "current" object in that bound collection.\n                        ')]),e._v(" "),a("p",[e._v("\n                            Because, when data binding in WPF, you can have your data source or your "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v("\n                            be an entire collection of objects, but you can have bindings within the elements that expect a\n                            single object, and the single object they're going to pick is the current object. So, for\n                            example, if you set the overall "),a("span",{
staticClass:"code"},[e._v("DataContext")]),e._v(" for the entire form to be\n                            a collection of customers, but then you have a "),a("span",{staticClass:"code"},[e._v("TextBox.Text")]),e._v(" property\n                            that's bound to "),a("span",{staticClass:"code"},[e._v("Customer Name")]),e._v(", it's just going to get the name off of\n                            the current customer, and it does that because of this "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v("\n                            support.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So through the "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v(", you can obtain a reference to the\n                            current object. There's also APIs on that interface to be able to control the current index to\n                            move to next, move to previous, and things like that to support paging type operations. So the\n                            "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v(" exposes other capabilities as well, including sorting,\n                            filtering, and paging, and we'll take a look at those in a later module. Here we're just going\n                            to focus on this currency aspect of the "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v(", so let's take a look at a demo of how this affects us\n                            and how you can use it.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Collection Views")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\EntityDataBinding\\EntityDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            In this demo, I want to show you some of the basics of "),a("span",{staticClass:"code"},[e._v("CollectionViews")]),e._v("\n                            and working with those to control the current object within a data bound collection. And then\n                            we'll change the way our form works slightly so that when an order is selected in the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" in the middle here:\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(260)}}),e._v(" "),a("figcaption",[e._v("Fig 02-072")])]),e._v(" "),a("p",[e._v("\n                            Its details show up in the fields down below:\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(261)}}),e._v(" "),a("figcaption",[e._v("Fig 02-073")])]),e._v(" "),a("p",[e._v("\n                            To do that implies some currency between the form at the bottom and the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v("\n                            in the middle.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So the first thing I'm going to do is I'm going to go into the XAML and go find my "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" and add another property on it called "),a("span",{staticClass:"code"},[e._v("IsSynchronizedWithCurrentItem")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid ItemsSource="{Binding SelectedCustomer.Orders}"\n                      IsSynchronizedWithCurrentItem="True">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-074")])]),e._v(" "),a("p",[e._v("\n                            Now the key thing to understand here is, anytime you data bind to a collection, such as "),a("span",{staticClass:"code"},[e._v("Orders")]),e._v(" here:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid ItemsSource="{Binding SelectedCustomer.Orders}"\n                      IsSynchronizedWithCurrentItem="True">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-075")])]),e._v(" "),a("p",[a("span",{staticClass:"code"},[e._v("Customers")]),e._v(" here,\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox x:Name="CustomersCombo"\n    ItemsSource="{Binding Customers}"\n    DisplayMemberPath="FullName"\n    SelectedValuePath="Id"\n    SelectionChanged="OnCustomerSelected" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-076")])]),e._v(" "),a("p",[e._v("\n                            or "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v(" here:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox x:Name="OrderStatusCombo"\n    ItemsSource="{Binding OrderStatuses}"\n    DisplayMemberPath="Name"\n    SelectedValuePath="Id"\n    SelectedValue="{Binding Path=NewOrder.OrderStatusId, Mode=TwoWay}"\n    Grid.Column="1"\n    Grid.Row="3"\n    Width="200"\n    HorizontalAlignment="Left" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-077")])]),e._v(" "),a("p",[e._v("\n                            WPF is always going to be wrapping your collection in a "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v("\n                            and "),a("span",{staticClass:"code"},[e._v("CollectionViews")]),e._v(" are something that support a number of things,\n                            we'll look at more details in a later module on binding collection-oriented controls, but one of\n                            the most important things a "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" does is keeps track of a\n                            current item within a data bound collection. That current item in our case can correspond to a\n                            selected item in something like a "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(", "),a("span",{staticClass:"code"},[e._v("ComboBox")]),e._v("\n                            or "),a("span",{staticClass:"code"},[e._v("ListBox")]),e._v(". And the "),a("span",{staticClass:"code"},[e._v("IsSynchronizedWithCurrentItem")]),e._v(" is basically a signal to WPF that says, I\n                            already know you're going to wrap this collection in the "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(", so anytime I select something on this, make sure it is\n                            marked as the "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v(" in the corresponding "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" for this collection.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Next, I'm going to drop in here and replace the "),a("span",{staticClass:"code"},[e._v("Grid")]),e._v(" that has our\n                            "),a("span",{staticClass:"code"},[e._v("AddOrder")]),e._v(" form in it. All I did here is I put some minor changes. One\n                            is that at a "),a("span",{staticClass:"code"},[e._v("Grid")]),e._v(" level, notice that I'm setting the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" for the grid as a whole to the exact same collection that my\n                            "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" is bound to:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid ItemsSource="{Binding SelectedCustomer.Orders}"\n                      IsSynchronizedWithCurrentItem="True">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-078")])]),e._v(" "),a("p",[e._v("\n                            When WPF wraps a collection in the "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(", it'll create one\n                            "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" for all references to that same collection. So even\n                            though this "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" is pointing through this binding and this\n                            "),a("span",{staticClass:"code"},[e._v("ItemsSource")]),e._v(" is pointing through this binding, they end up pointing\n                            to the same "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" instance.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So if I select an item in the DataGrid and it sets the "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v(",\n                            it's also implicitly setting the "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v(" for the "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" that's going to be used for the "),a("span",{staticClass:"code"},[e._v("Grid")]),e._v(" below it.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Down inside of the "),a("span",{staticClass:"code"},[e._v("Grid")]),e._v(" now, instead of saying "),a("span",{staticClass:"code"},[e._v("NewOrder.Id")]),e._v(",\n                            and "),a("span",{staticClass:"code"},[e._v("NewOrder.OrderDate")]),e._v(", and "),a("span",{staticClass:"code"},[e._v("NewOrder.ItemsTotal")]),e._v(", we're just saying "),a("span",{staticClass:"code"},[e._v("Id")]),e._v(",\n                            "),a("span",{staticClass:"code"},[e._v("OrderDate")]),e._v(", and "),a("span",{staticClass:"code"},[e._v("ItemsTotal")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="Order ID:" />\n<Label Content="{Binding Id}"\n    Grid.Column="1" />\n<Label Content="Order Date:"\n    Grid.Row="1" />\n<TextBox Grid.Column="1"\n    Grid.Row="1"\n    Text="{Binding OrderDate}" />\n            ')])]),e._v(" "),a("figcaption",[e._v("Fig 02-079")])]),e._v(" "),a("p",[e._v("\n                            Because the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" has already been restricted down implicitly to\n                            a single order, even though the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" is pointing to an entire\n                            collection here when you have a binding that results in a single value like this, it knows\n                            enough to use the value off of the "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v(" in that collection. If\n                            it sees that the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" is a collection, it will grab the "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v("\n                            in that collection through the "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" and then this path will\n                            resolve against that "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v(".\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now because of restricting the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" for this entire "),a("span",{staticClass:"code"},[e._v("Grid")]),e._v(" to that collection, I have to do some additional gymnastics here\n                            for binding this "),a("span",{staticClass:"code"},[e._v("ComboBox")]),e._v(", which really wants to get to the "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v("\n                            collection that's on the window itself:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox x:Name="OrderStatusCombo"\n    ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.OrderStatuses}"\n    DisplayMemberPath="Name"\n    SelectedValuePath="Id"\n    SelectedValue="{Binding Path=NewOrder.OrderStatusId, Mode=TwoWay}" />')])]),e._v(" "),a("figcaption",[e._v("Fig02-080")])]),e._v(" "),a("p",[e._v("\n                            I'll get into more details on "),a("span",{staticClass:"code"},[e._v("RelativeSource")]),e._v(" bindings in the next\n                            module, but conceptually, what this binding is doing is reaching up to the window level, dotting\n                            down to its "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(", which happens to be a reference to the window\n                            itself, and then going to the "),a("span",{staticClass:"code"},[e._v("OrderStatuses")]),e._v(" property that's on that.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So with those bindings in place, I can now go ahead and run, and notice that when I select in\n                            the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(", the order that the form is bound to at the bottom is\n                            changing along with my selections:\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(262)}}),e._v(" "),a("figcaption",[e._v("Fig 02-081")])]),e._v(" "),a("p",[e._v("\n                            And that's happening even though the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" for those individual\n                            elements is really a collection the bindings themselves are smart enough to go to that\n                            collection, see it's a "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(", ask for the "),a("span",{staticClass:"code"},[e._v("Current")]),e._v("\n                            object, and then apply their path to the "),a("span",{staticClass:"code"},[e._v("Current")]),e._v(" object.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Now what if we wanted to programmatically control what the "),a("span",{staticClass:"code"},[e._v("CurrentItem")]),e._v("\n                            is, I'm going to go up here and replace my "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" with a "),a("span",{staticClass:"code"},[e._v("StackPanel")]),e._v(" that contains the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <StackPanel Grid.Row="2">\n    <StackPanel Orientation="Horizontal">\n        <Button Click="OnMoveDown">\n            <Image Source="Resources/arrow-down.jpg"\n                   Width="30" />\n        </Button>\n        <Button Click="OnMoveUp">\n            <Image Source="Resources/arrow-up.jpg"\n                   Width="30" />\n        </Button>\n    </StackPanel>\n    <DataGrid ItemsSource="{Binding SelectedCustomer.Orders}"\n              IsSynchronizedWithCurrentItem="True">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-082")])]),e._v(" "),a("p",[e._v("\n                            Inside that "),a("span",{staticClass:"code"},[e._v("StackPanel")]),e._v(" I have two buttons sitting right atop the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" that allow me to move the focus, if you will, or the selection\n                            within the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" up and down, and then I still have the "),a("span",{staticClass:"code"},[e._v("IsSynchronizedWithCurrentItem")]),e._v(" on my DataGrid.\n                        ")]),e._v(" "),a("p",[e._v("\n                            The additional stuff here is just some styling to make it very apparent what the selected row is\n                            by drawing a blue box around it:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid ItemsSource="{Binding SelectedCustomer.Orders}"\n        IsSynchronizedWithCurrentItem="True">\n    <DataGrid.RowStyle>\n        <Style TargetType="DataGridRow">\n            <Style.Triggers>\n                <Trigger Property="IsSelected"\n                         Value="True">\n                    <Setter Property="BorderBrush"\n                            Value="Blue" />\n                    <Setter Property="BorderThickness"\n                            Value="2" />\n                </Trigger>\n            </Style.Triggers>\n        </Style>\n    </DataGrid.RowStyle>\n</DataGrid>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-083")])]),e._v(" "),a("p",[e._v("\n                            Now I need some "),a("span",{staticClass:"code"},[e._v("Click")]),e._v(" event handlers for those buttons so I'll drop\n                            into the code-behind. So I'm just going to go to the bottom of the code-behind here and add the\n                            event handlers.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnMoveDown(object sender, RoutedEventArgs e)\n{\n    ICollectionView collView = CollectionViewSource.GetDefaultView(SelectedCustomer.Orders);\n    if (collView.CurrentPosition > 0)\n        collView.MoveCurrentToPrevious();\n}\n\nprivate void OnMoveUp(object sender, RoutedEventArgs e)\n{\n    ICollectionView collView = CollectionViewSource.GetDefaultView(SelectedCustomer.Orders);\n    if (collView.CurrentPosition < SelectedCustomer.Orders.Count - 1)\n        collView.MoveCurrentToNext();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-084")])]),e._v(" "),a("p",[e._v("\n                            In the "),a("span",{staticClass:"code"},[e._v("MoveDown")]),e._v(" one you can see what we're doing is we're going to a\n                            class called "),a("span",{staticClass:"code"},[e._v("CollectionViewSource")]),e._v(", and we call "),a("span",{staticClass:"code"},[e._v("GetDefaultView")]),e._v(",\n                            and we pass it a reference to the same collection that was being data bound to by both the "),a("span",{staticClass:"code"},[e._v("DataGrid")]),e._v(" and the grid for the order form. Calling this basically gives\n                            you a reference to that "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" that's wrapping that collection\n                            that both bindings are using.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Once we have that reference, we can use the exposed API on "),a("span",{staticClass:"code"},[e._v("CollectionView")]),e._v(" to do a number of things. One thing is we can check the\n                            "),a("span",{staticClass:"code"},[e._v("CurrentPosition")]),e._v(" and get an index back of where it is in the\n                            collection, and then we can command it to move to different positions. So in this case, to move\n                            down, we're making sure we're not already at the last item with this comparison\n                        ")]),e._v(" "),a("p",[e._v("\n                            For moving up we're making sure we're not already on the first item. To move down we say "),a("span",{staticClass:"code"},[e._v("MoveCurrentToNext")]),e._v(", to move up we say "),a("span",{staticClass:"code"},[e._v("MoveCurrentToPrevious")]),e._v(".\n                        ")]),e._v(" "),a("p",[e._v("\n                            So with that code in place, I can run, I can click the down arrow, and you can see the highlight\n                            moving, click the up arrow and it moves back up:\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(263)}}),e._v(" "),a("figcaption",[e._v("Fig 02-085")])]),e._v(" "),a("p",[e._v("\n                            So we're able to control the "),a("span",{staticClass:"code"},[e._v("currentPosition")]),e._v(" programmatically using\n                            the "),a("span",{staticClass:"code"},[e._v("ICollectionView")]),e._v(" interface. And, again, we'll see other things we\n                            can do "),a("span",{staticClass:"code"},[e._v("CollectionViews")]),e._v(" more in a later module.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Binding to DataSets")]),e._v(" "),a("p",[e._v("\n                            Now let's talk about data binding to DataSets. The venerable DataSet has been around a long time\n                            in the .NET space. Back in Windows Forms 1.0 and 2.0 days there was a lot of guidance from\n                            Microsoft and others saying DataSets are the way to go, you put all of your data in the DataSet\n                            and life is good.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Well the truth is, DataSets are kind of fading in popularity. Most of the modern capabilities\n                            coming out in the .NET framework and in other technologies are really focused on entities,\n                            simple objects with properties to contain data instead of treating everything as a relational\n                            set of data. And part of the reason for this is that with lots of flexibility comes complexity.\n                            When you use untyped DataSets, you typically ended up with a lot of fragile, untyped code, lots\n                            of casting indexing into columns with indexes or column names, and it tended to be very\n                            unmaintainable code.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Once Typed DataSets came out in .NET 2.0, you could at least get away from the untyped aspects\n                            of that. And you could have objects with properties and dot into those properties as if they\n                            were entities, but they were really a poor-man's entity because you couldn't really leverage\n                            inheritance and polymorphism, and the concept of encapsulation that they had was a bit clunky.\n                        ")]),e._v(" "),a("p",[e._v("\n                            To have a single-entity object, you always had to have a table with a single row in it, so you\n                            always had this extra layer of everything as a collection, even if it's not, which was a little\n                            weird to deal with. And the way that you would write code that was logically encapsulated by the\n                            DataSet, just didn't match up well with object-oriented concepts.\n                        ")]),e._v(" "),a("p",[e._v("\n                            However, all that being said, DataSets are still out there and they're still useful at times.\n                            Untyped DataSets, in particular, can still be useful in this modern day if you have places where\n                            you allow end users to formulate ad hoc queries where you don't know what the columns are going\n                            to be in the resulting record set. And the reality is, none of us can start from scratch on\n                            every single application we build, we often need to maintain an existing application, maybe move\n                            it forward to a new UI technology like WPF, but we have to carry along some legacy code, and\n                            that legacy code itself may be dependent on DataSets.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So the good news is you can still use those in WPF. WPF data binding works just fine with\n                            DataSets, both untyped DataSets and typed DataSets. However, it is worth pointing out that the\n                            later XAML stacks, Silverlight, Windows Phone, and WinRT, do not support data binding to\n                            DataSets. So that's something to take into consideration if you're going to be writing code that\n                            supports your views, that pulls in your data sources, and you might be trying to move that\n                            forward to one of these other technologies in the future, then you would definitely want to\n                            avoid DataSets.\n                        ")]),e._v(" "),a("p",[e._v("\n                            But with all that being said, let's dive into a demo and show you how you can easily work with\n                            DataSets. And you'll see that the XAML really doesn't care, it treats those as objects and\n                            doesn't care whether it's working with columns or properties, the syntax is the same.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Binding to DataSets")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-013",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\DataSetDataBinding\\DataSetDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-013"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-014",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\DataSetDataBinding\\DataSetDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-014"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                            In this demo, I want to show you how you can data bind to DataSets. Now DataSets are kind of\n                            falling out of vogue. I generally wouldn't use DataSets in any new projects I was working on, I\n                            would favor using entities. But if you're stuck moving some legacy code over or migrating an\n                            application maybe from Windows Forms, they use DataSets extensively and you can't afford to\n                            rewrite all that code, I want you to see how you can easily still data bind to those DataSets in\n                            WPF.\n                        ")]),e._v(" "),a("p",[e._v("\n                            The DataSet we're going to be using here is a typed DataSet, but I'll show you, you can also use\n                            untyped DataSets. The schema is the same Zza database that we've been using and it's got\n                            Customer, Order, and OrderStatus as a minimal part of that schema.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(264)}}),e._v(" "),a("figcaption",[e._v("Fig 02-086")])]),e._v(" "),a("p",[e._v("\n                            The UI we'll be using for this demo is just the top portion of a demo that we've been using\n                            before that has the drop-down list of customers, and when you select one it fills out the fields\n                            for First Name, Last Name, and Email for the SelectedCustomer:\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(265)}}),e._v(" "),a("figcaption",[e._v("Fig 02-087")])]),e._v(" "),a("p",[e._v("\n                            If we go to the XAML, you can see here's our "),a("span",{staticClass:"code"},[e._v("ComboBox")]),e._v(" and the binding\n                            is not really going to look any different here. It's going to say, I'm expecting my DataContext\n                            to provide me a property called Customers, and in that Customers I'm expecting a bindable\n                            collection of something:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox x:Name="CustomersCombo"\n    Grid.Column="1"\n    Width="250"\n    HorizontalAlignment="Left"\n    ItemsSource="{Binding Customers}"\n    DisplayMemberPath="FullName"\n    SelectedValuePath="Id"\n    SelectionChanged="OnCustomerSelected" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-088")])]),e._v(" "),a("p",[e._v("\n                            When working with DataSets, the bindable something is going to be what's called a DataRowView.\n                            It's a view on top of a data row similar to the ICollectionView we talked about earlier, but one\n                            that's built in to the overall schema of DataSets, and bindings are aware of those.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Then when it comes to specifying binding Paths, such as the DisplayMemberPath, and the\n                            SelectedValuePath shown above, these become column names. Now they could be strongly-typed\n                            property names if you're working with a strongly-typed DataSet, but if you have untyped DataSets\n                            they can just be the column name\n                        ")]),e._v(" "),a("p",[e._v("\n                            Down below you can see we have SelectedCustomer.LastName, .FirstName, .Email, just like we had\n                            in earlier demos with entities:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="First Name:" />\n<TextBox Grid.Column="1"\n         Text="{Binding SelectedCustomer.LastName}" />\n<Label Content="Last Name:"\n       Grid.Column="2" />\n<TextBox Grid.Column="3"\n         Text="{Binding SelectedCustomer.FirstName}" />\n<Label Content="Email:"\n       Grid.Column="4" />\n<TextBox Grid.Column="5"\n         Text="{Binding SelectedCustomer.Email}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-089")])]),e._v(" "),a("p",[e._v("\n                            So the syntax at a binding level is no different if you're working with DataSets or with\n                            entities. The only thing that's going to be a little different is the way you do the data\n                            access.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public CustomersDataSet.CustomerDataTable Customers\n{\n    get { return (CustomersDataSet.CustomerDataTable)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}\n\npublic static readonly DependencyProperty CustomersProperty =\n    DependencyProperty.Register("Customers",\n    typeof(CustomersDataSet.CustomerDataTable),\n    typeof(MainWindow),\n    new PropertyMetadata(null));\n\npublic DataRowView SelectedCustomer\n{\n    get { return (DataRowView)GetValue(SelectedCustomerProperty); }\n    set { SetValue(SelectedCustomerProperty, value); }\n}\n\npublic static readonly DependencyProperty SelectedCustomerProperty =\n    DependencyProperty.Register("SelectedCustomer",\n    typeof(DataRowView),\n    typeof(MainWindow),\n    new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 02-090")])]),e._v(" "),a("p",[e._v("\n                            So, the first thing I need to do is declare a couple of properties that the bindings were\n                            expecting in the XAML. Those are a Customers collection and a SelectedCustomer. The types of\n                            those properties, if I'm starting with the typed DataSets are going to be a CustomersDataTable\n                            for the Customers collection and a DataRowView for the SelectedCustomer.\n                        ")]),e._v(" "),a("p",[e._v("\n                            The individual objects in the data table are actually data rows, but once you bind to them, it's\n                            actually going to be a DataRowView object that the binding is expecting to see. Otherwise, these\n                            are just DependencyProperties as we've seen in previous demos that will raise Change\n                            Notifications if their values are set.\n                        ")]),e._v(" "),a("p",[e._v("\n                            Next, we just need to load data using DataSets. So the first thing I'll do is I need to set my\n                            DataContext to the Window as I did in previous demos. I use a CustomerTableAdapter here and I go\n                            out and I call "),a("span",{
attrs:{id:"code"}},[e._v("GetData")]),e._v(" on that "),a("span",{attrs:{id:"code"}},[e._v("tableAdapter")]),e._v(".\n                            That's going to return me with a strongly-typed DataSet, it returns me one of those "),a("span",{attrs:{id:"code"}},[e._v("CustomerDataTables")]),e._v(", which I can just write directly into my wrapper\n                            property for my "),a("span",{attrs:{id:""}},[e._v("DependencyProperty")]),e._v(" Customers:\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    DataContext = this;\n    CustomerTableAdapter tableAdapter = new CustomerTableAdapter();\n    Customers = tableAdapter.GetData();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-091")])]),e._v(" "),a("p",[e._v("\n                            Next, I need to handle the Selection, so I'll set the "),a("span",{staticClass:"code"},[e._v("SelectedCustomer")]),e._v("\n                            property to a "),a("span",{staticClass:"code"},[e._v("DataRowView")]),e._v(", which I can do by going to the "),a("span",{staticClass:"code"},[e._v("CustomersCombo")]),e._v(" and getting the "),a("span",{staticClass:"code"},[e._v("SelectedItem")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnCustomerSelected(object sender, SelectionChangedEventArgs e)\n{\n    SelectedCustomer = CustomersCombo.SelectedItem as DataRowView;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-092")])]),e._v(" "),a("p",[e._v("\n                            If you try to cast that to "),a("span",{staticClass:"code"},[e._v("DataRow")]),e._v(" it's going to fail because it's\n                            wrapped it in one of these "),a("span",{staticClass:"code"},[e._v("DataRowViews")]),e._v(" at the point where you data\n                            bind to the "),a("span",{staticClass:"code"},[e._v("Customers")]),e._v(" collection.\n                        ")]),e._v(" "),a("p",[e._v("\n                            With that in place, I can go ahead and run, I can select a customer, and we can see the fields\n                            are filling in and it's really getting values out of the fields in the "),a("span",{staticClass:"code"},[e._v("DataRow")]),e._v("\n                            from a "),a("span",{staticClass:"code"},[e._v("DataTable")]),e._v(" as opposed to working with entities and properties.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(266)}}),e._v(" "),a("figcaption",[e._v("Fig 02-093")])]),e._v(" "),a("p",[e._v("\n                            Now just to show that this can also work with untyped DataSets, I'm going to replace my "),a("span",{staticClass:"code"},[e._v("Customers")]),e._v(" property here with a "),a("span",{staticClass:"code"},[e._v("DataTable")]),e._v(" one,\n                            a non-strongly-typed "),a("span",{staticClass:"code"},[e._v("DataTable")]),e._v(":\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public DataTable Customers\n{\n    get { return (DataTable)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-094")])]),e._v(" "),a("p",[e._v("\n                            Then I'll go up to the top and replace my data loading by declaring a DataSet, an untyped\n                            DataSet, and then I create an instance of a "),a("span",{staticClass:"code"},[e._v("SqlDataAdapter")]),e._v(", do a "),a("span",{staticClass:"code"},[e._v('"SELECT * FROM Customer"')]),e._v(", pass an appropriate connection to it, and then\n                            do a "),a("span",{staticClass:"code"},[e._v("Fill")]),e._v(" on the adapter passing in the DataSet.\n                        ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindow()\n{\n    InitializeComponent();\n    DataContext = this;\n    DataAdapter adapter = new SqlDataAdapter(\n                "SELECT * FROM Customer",\n                new SqlConnection("server=.;database=Zza;trusted_Connection=true"));\n    adapter.Fill(_DataSet);\n    Customers = _DataSet.Tables["Table"];\n}')])]),e._v(" "),a("figcaption",[e._v("Fig02-095")])]),e._v(" "),a("p",[e._v("\n                            Then to populate my "),a("span",{staticClass:"code"},[e._v("Customers")]),e._v(" "),a("span",{staticClass:"code"},[e._v("DataTable")]),e._v("\n                            property, I can just go to the "),a("span",{staticClass:"code"},[e._v("DataSet.Tables")]),e._v(" collection and when you\n                            do a fill like this it names the Tables "),a("span",{staticClass:"code"},[e._v("Table")]),e._v(", "),a("span",{staticClass:"code"},[e._v("Table1")]),e._v(",\n                            "),a("span",{staticClass:"code"},[e._v("Table2")]),e._v(", so that first fill actually populated a Table named "),a("span",{staticClass:"code"},[e._v("Table")]),e._v(". I could go rename that, but since I'm just grabbing its value\n                            here and passing it into my property, it doesn't matter. I don't need any changes to the XAML\n                            itself.\n                        ")]),e._v(" "),a("p",[e._v("\n                            I could go ahead and run again and we can see things are populating just fine even though we\n                            have no type information now, it's just an untyped DataSet with columns and rows.\n                        ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(267)}}),e._v(" "),a("figcaption",[e._v("Fig 02-096")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Binding to XML")]),e._v(" "),a("p",[e._v("\n                            Finally, let's talk about binding to XML directly. WPF does support allowing you to point to an\n                            XML document and set up your bindings to point to the values that are contained within the XML\n                            elements or attributes within that document.\n                        ")]),e._v(" "),a("p",[e._v("\n                            In general, I would recommend you avoid using this capability of WPF from a architecture\n                            perspective, you don't really want to couple your UI code to how you're doing data persistence,\n                            and XML is really a low-level data persistence mechanism, leaking that all the way up into the\n                            bindings of your view, locks you into a persistence mechanism you may not want to stick to in\n                            the future.\n                        ")]),e._v(" "),a("p",[e._v("\n                            This is kind of the moral equivalent to putting SQL statements in your views, which you also\n                            shouldn't be doing, because that locks you into using SQL as your persistence mechanism and\n                            that's something you don't want to do, you want to have logical layers and you probably want to\n                            have a data layer behind the scenes that encapsulates how data persistence is done and just\n                            brings it in as entities.\n                        ")]),e._v(" "),a("p",[e._v("\n                            But all that being said, you may have some XML documents around that perfectly fit what you want\n                            to show on the screen, so the good news is you can do that. What you do is, there's an object\n                            called an XML data provider and you can put that in your XAML, point it to a document as a\n                            source, and then you use "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v(" on your data bindings to refine what\n                            part of the DataContext that you set up as the XML data provider that you want to use for\n                            display purposes.\n                        ")]),e._v(" "),a("p",[e._v("\n                            So you're basically using "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v(" to reach down into that document, pull\n                            out portions of it, you can set those as child DataContext, for example, you could reach down in\n                            and find a collection of elements within the document and set that as the for something like a\n                            DataGrid. So let's look at a demo that shows us how to do this.\n                        ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Binding to XML")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-015",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\before\\XmlDataBinding\\XmlDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-015"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex03-016",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 3\\after\\XmlDataBinding\\XmlDataBinding.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-016"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo, I want to show you how you can easily bind to XML data sources to pull in hierarchal\n                        data and display that in the UI. Now just like I said for DataSets, I generally stay away from XML\n                        data binding because you're too tightly coupling the UI to the particular way the data is getting\n                        into your application. If you want to build a nice loosely coupled application that can evolve over\n                        time and be easily maintained, you don't want to assume that now and for all time your data is\n                        coming in as a chunk of XML.\n                    ")]),e._v(" "),a("p",[e._v("\n                        You want to separate that out into a data layer that produces objects for binding instead of raw\n                        XML. But with that caution in mind, let's show you how you can do it if you really need to.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So down here you can see we've got a Zza xml file that's really a dump of some of the customers and\n                        their orders from the Zza database:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0"?>\n<Customers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n  <Customer>\n    <Id>7462c7c8-e24c-484a-8f93-013f1c479615</Id>\n    <StoreId xsi:nil="true" />\n    <FirstName>Derek</FirstName>\n    <LastName>Puckett</LastName>\n    <Phone>(954) 594-9355</Phone>\n    <Email>derek.puckett@vulputate.net</Email>\n    <Street>P.O. Box 914, 9990 Dapibus St.</Street>\n    <City>Quam</City>\n    <State>OH</State>\n    <Zip>55154</Zip>\n    <Orders>\n      <Order>\n        <Id>1</Id>\n        <StoreId xsi:nil="true" />\n        <CustomerId>7462c7c8-e24c-484a-8f93-013f1c479615</CustomerId>\n        <OrderStatusId>2</OrderStatusId>\n        <OrderDate>2013-03-12T17:30:00</OrderDate>\n        <DeliveryDate>2013-03-12T18:07:00</DeliveryDate>\n        <DeliveryCharge>0.0000</DeliveryCharge>\n        <ItemsTotal>31.9500</ItemsTotal>\n        <Phone>(954) 594-9355</Phone>\n        <OrderItems />\n      </Order>\n      <Order>\n        <Id>2</Id>\n        <StoreId xsi:nil="true" />\n        <CustomerId>7462c7c8-e24c-484a-8f93-013f1c479615</CustomerId>\n        <OrderStatusId>2</OrderStatusId>\n        <OrderDate>2013-04-15T01:50:00</OrderDate>\n        <DeliveryDate>2013-04-15T02:34:00</DeliveryDate>\n        <DeliveryCharge>0.0000</DeliveryCharge>\n        <ItemsTotal>31.6500</ItemsTotal>\n        <Phone>(954) 594-9355</Phone>\n        <OrderItems />\n      </Order>\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 02-097")])]),e._v(" "),a("p",[e._v("\n                        That's going to be our data source for this. The window we're going to deal with is similar to the\n                        last demo, that we have a Customers drop-down and we have some data bound fields on the current\n                        customer selected in that drop-down, and we want to support that same scenario, put data binding\n                        directly to a collection of customers in XML.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(268)}}),e._v(" "),a("figcaption",[e._v("Fig 02-098")])]),e._v(" "),a("p",[e._v("\n                        Code-behind for this has absolutely nothing in it, and you'll see that we're going to keep it that\n                        way:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace XmlDataBinding\n{\n    /// <summary>\n    /// Interaction logic for MainWindow.xaml\n    /// </summary>\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-099")])]),e._v(" "),a("p",[e._v("\n                        We're just going to load the XML directly into our XAML, which is definitely a point of coupling,\n                        but it's the most expeditious way to work with XML in data binding.\n                    ")]),e._v(" "),a("p",[e._v("\n                        So I'm going to drop into the XAML here and I'm going to declaratively hook up the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" for the window to an object called an "),a("span",{staticClass:"code"},[e._v("XmlDataProvider")]),e._v(":\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.DataContext>\n    <XmlDataProvider Source="Zza.xml"\n                     XPath=""Customers/Customer" />\n</Window.DataContext>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-100")])]),e._v(" "),a("p",[e._v("\n                        This is an object that you can point to an XML file with its source property, so this is really just\n                        a relative path within the project is how it's resolving that.\n                    ")]),e._v(" "),a("p",[e._v("\n                        And then from there you can refine what part of the XML file this provider points to using "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v(" statements. So you do have to be comfortable with "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v("\n                        to be able to use this to any large degree, but here you can see we're pointing to the "),a("span",{staticClass:"code"},[e._v("Customers")]),e._v(" root element and then saying, get me all of the "),a("span",{staticClass:"code"},[e._v("Customer")]),e._v(" elements that sit within that "),a("span",{staticClass:"code"},[e._v("Customers")]),e._v("\n                        root element.\n                    ")]),e._v(" "),a("p",[e._v("\n                        And it's basically going to form a collection of XML elements within this "),a("span",{staticClass:"code"},[e._v("DataProvider")]),e._v("\n                        as a source. Then I'm going to go down here to our "),a("span",{staticClass:"code"},[e._v("ComboBox")]),e._v(" and add some data binding properties to it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ComboBox x:Name="CustomersCombo"\n    ItemsSource="{Binding}"\n    DisplayMemberPath="LastName"\n    SelectedValuePath="Id"\n    Grid.Column="1"\n    Width="250"\n    HorizontalAlignment="Left"\n    IsSynchronizedWithCurrentItem="True" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-101")])]),e._v(" "),a("p",[e._v("\n                        First off is an "),a("span",{staticClass:"code"},[e._v("ItemsSource")]),e._v(" that says I'm going to bind to the entire\n                        "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(". And that "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(", again, was\n                        being set to a collection of "),a("span",{staticClass:"code"},[e._v("Customer")]),e._v(" objects through this "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v(" statement.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then we're able to say, "),a("span",{staticClass:"code"},[e._v("DisplayMemberPath")]),e._v(" and "),a("span",{staticClass:"code"},[e._v("SelectedValuePath")]),e._v("\n                        like we did before, but now as opposed to these representing property names on an entity or column\n                        names within a DataSet, they represent either element names or attribute names on the current\n                        object, so it's going to look for an element or attribute called "),a("span",{staticClass:"code"},[e._v("LastName")]),e._v(" and grab its value, and it's going to look for one called "),a("span",{staticClass:"code"},[e._v("Id")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("\n                        Notice we also use the "),a("span",{staticClass:"code"},[e._v("IsSynchronizedWithCurrentItem")]),e._v(", because just like we\n                        talked about with entities and with DataSets, there's a view that wraps all this that maintains the\n                        concept of a current item within that collection.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Next, we can drop down to the form fields of our little data form and add bindings to those, and\n                        here you can see we have a Text Binding, but the way we specify the path in this case is we specify\n                        it as "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v(".\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid Grid.Row="1">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="*" />\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="*" />\n        <ColumnDefinition Width="Auto" />\n        <ColumnDefinition Width="2*" />\n    </Grid.ColumnDefinitions>\n    <Label Content="First Name:" />\n    <TextBox Grid.Column="1"\n             Text="{Binding XPath=LastName}" />\n    <Label Content="Last Name:"\n           Grid.Column="2" />\n    <TextBox Grid.Column="3"\n             Text="{Binding XPath=FirstName}" />\n    <Label Content="Email:"\n           Grid.Column="4" />\n    <TextBox Grid.Column="5"\n             Text="{Binding XPath=Email}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-102")])]),e._v(" "),a("p",[e._v("\n                        So in this case, because they are child elements with values in them, we can just say "),a("span",{staticClass:"code"},[e._v("XPath")]),e._v(" "),a("span",{staticClass:"code"},[e._v("FirstName")]),e._v(", "),a("span",{staticClass:"code"},[e._v("LastName")]),e._v(", and "),a("span",{staticClass:"code"},[e._v("Email")]),e._v(", and it's able to locate those\n                        and grab the value of those.\n                    ")]),e._v(" "),a("p",[e._v("\n                        With that in place, we can go ahead and run:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(269)}}),e._v(" "),a("figcaption",[e._v("Fig 02-103")])]),e._v(" "),a("p",[e._v("\n                        And you can see our form already works just like it did before, even though we have no code-behind\n                        driving anything, it's just sucking XML into the root, setting that as the "),a("span",{staticClass:"code"},[e._v("DataContext")]),e._v(" through this Provider:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.DataContext>\n    <XmlDataProvider Source="Zza.xml"\n        XPath="Customers/Customer" />\n</Window.DataContext>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-104")])]),e._v(" "),a("p",[e._v("\n                        To the collection of the "),a("span",{staticClass:"code"},[e._v("Customer")]),e._v(" elements within that XML binding to that\n                        as a collection:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="Customers" />\n<ComboBox x:Name="CustomersCombo"\n    ItemsSource="{Binding}"\n    DisplayMemberPath="LastName"\n    SelectedValuePath="Id"\n    Grid.Column="1"\n    Width="250"\n    HorizontalAlignment="Left"\n    IsSynchronizedWithCurrentItem="True" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-105")])]),e._v(" "),a("p",[e._v("\n                        and also binding to the current item, Fields through the concurrency of the underlying view.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox Grid.Column="1"\n    Text="{Binding XPath=LastName}" />\n<Label Content="Last Name:"\n    Grid.Column="2" />\n<TextBox Grid.Column="3"\n    Text="{Binding XPath=FirstName}" />\n<Label Content="Email:"\n    Grid.Column="4" />\n<TextBox Grid.Column="5"\n    Text="{Binding XPath=Email}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-106")])]),e._v(" "),a("p",[e._v("\n                        So this might work great if you have a flat data file that's provided to you in XML that you just\n                        want to data bind to, and it is even possible to do two-way data binding and push the values back in\n                        and then go and save that document off, but if you're really doing all that, you should consider\n                        putting some layers of abstraction there and not doing it directly against an XML file.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("\n                        Okay, so to wrap up this module on data sources, we saw a lot of different ways of providing data to\n                        your bindings. We started with entities and collections and you saw that it's a simple matter to use\n                        Plain Old CLR Objects or any type of "),a("span",{staticClass:"code"},[e._v("IEnumerable")]),e._v(" in .NET, and you can data\n                        bind to that and show its data on the screen.\n                    ")]),e._v(" "),a("p",[e._v("\n                        But if that data is going to be changing behind the scenes, then you saw the Change Notifications\n                        both in an object and collection level become vital to keeping the screen in sync with the true\n                        state of the data in memory.\n                    ")]),e._v(" "),a("p",[e._v("\n                        You saw a few additional things that you can do on your entities such as implementing "),a("span",{staticClass:"code"},[e._v("IEditableObject")]),e._v(" for transactional changes and backing out those changes or\n                        working with "),a("span",{staticClass:"code"},[e._v("CollectionViews")]),e._v(" that automatically wrap your collections when\n                        you're bound to them to manage the current object, and how that current object is displayed on the\n                        screen for things like paging.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Finally, we talked about DataSets and XML and you saw that you can easily bind to those as well,\n                        even though I generally recommend if you are writing a new application from scratch you would stay\n                        away from binding directly to those kinds of sources and stick to entities.\n                    ")])])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Webstorm Notes")])},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Visual Studio")]),e._v(" "),n("router-link",{attrs:{to:"/editors/visual-studio","active-class":"active"}},[n("a",[e._v("Visual Studio")])]),e._v(" "),n("h3",[e._v("Visual Studio Code")]),e._v(" "),n("router-link",{attrs:{to:"/editors/visual-studio-code","active-class":"active"}},[n("a",[e._v("Visual Studio Code")])]),e._v(" "),n("h3",[e._v("Webstorm")]),e._v(" "),n("router-link",{attrs:{to:"/editors/webstorm","active-class":"active"}},[n("a",[e._v("Webstorm")])])],1)])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Editors")])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("XAML Essentials")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("XAML is an XML based language that we use to define the appearance of our applications. In this\n                        section we will cover XAML in more detail.")]),e._v(" "),a("h3",[e._v("XAML vs Code")]),e._v(" "),a("p",[e._v("You can create UI elements in XAML or in code-behind. For example to create a Label in XAML we\n                        would enter something like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label HorizontalOptions="Center" VerticalOptions="Center" Text="Hello World" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-001")])]),e._v(" "),a("p",[e._v("The same label in code-behind would be created in the constructor like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Content = new Label\n{\n    HorizonalOptions = LayoutOptions.Center,\n    VerticalOptions = LayoutOptions.Cener,\n    Text = "Hello World"\n};')])]),e._v(" "),a("figcaption",[e._v("Fig 02-002")])]),e._v(" "),a("p",[e._v("The Content property shown above is derived from ContentPage which is the base class for our GreetPage")]),e._v(" "),a("p",[e._v("The majority of the time we would create UI elements using XAML. Generally we would only use\n                        code-behind in specific scenarios, for example when generating UI elements dynamically.")]),e._v(" "),a("p",[e._v("Even when we use XAML at runtime we have a XAML Parser that reads the XAML files in a project and\n                        instantiates objects just like the code we wrote in the code-behind file above.")]),e._v(" "),a("p",[e._v("To see how this works, click on the project in Solution Explorer and click on the Show All Files\n                        button. Expand the obj>Debug folder and you should see a file with a xaml.g.cs suffix. The g stands for\n                        generated which indicates this file has been automatically generated.")]),e._v(" "),a("p",[e._v("This generated class is a partial class (the other part of it is the code-behind). In the constructor\n                        in the code-behind file you will see a call to:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("InitializeComponent();")])]),e._v(" "),a("figcaption",[e._v("Fig 02-003")])]),e._v(" "),a("p",[e._v("You may think this method is inherited from ContentPage but it is actually defined in the generated\n                        code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void InitializeComponent() {\n    this.LoadFromXaml(typeof(PageName));")])]),e._v(" "),a("figcaption",[e._v("Fig 02-004")])]),e._v(" "),a("p",[e._v("Inside this method we have a call to LoadFromXaml. When we compile our application file our XAML\n                        files are embedded in our assembly. At runtime, when InitializeComponent is called this XAML file\n                        is extracted from the assembly and passed to the XAML parser which takes the XAML and generates a\n                        user interface like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Content = new Label\n{\n    HorizonalOptions = LayoutOptions.Center,\n    VerticalOptions = LayoutOptions.Cener,\n    Text = "Hello World"\n};')])]),e._v(" "),a("figcaption",[e._v("Fig 02-003")])]),e._v(" "),a("h3",[e._v("Content Property")]),e._v(" "),a("p",[e._v("Ponder the following XAML:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="XamarinFormExample1.ContactMethodsPage">\n    <Label HorizontalOptions="Center" VerticalOptions="Center" Text="Hello World" />\n    <Slider />\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-004")])]),e._v(" "),a("p",[e._v("If you were to run this application the page would only display a label:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(632)}}),e._v(" "),a("figcaption",[e._v("Fig 02-004")])]),e._v(" "),a("p",[e._v("and not the slider. To find out why let's search the Xamarin Documentation for the ContentPage class.\n                        This ContentPage class is decorated with an attribute called ContentProperty:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[Xamarin.Forms.ContentProperty("Content")]\npublic class ContentPage : TemplatedPage')])]),e._v(" "),a("figcaption",[e._v("Fig 02-005")])]),e._v(" "),a("p",[e._v("In this attribute we have a string which specifies one of the properties of ContentPage. In this case\n                        the name of that property is Content. We used that in a previous lecture when we set the Content property\n                        to Label.")]),e._v(" "),a("p",[e._v("If we look at the declaration of the Content property we will see it's type is View:")]),e._v(" "),a("pre",[a("code",[e._v("Content         View. Gets or set the view that contains the content of the page")])]),e._v(" "),a("p",[e._v("View is the base class for all our visual elements like Button, Label, Slider and so on. So because\n                        the type of Content is View we can set it to an instance of a single view - not multiple views. That is\n                        why we cannot have multiple elements in a ContentPage directly which is why only the Label was displayed\n                        in our earier example. So what's the solution.")]),e._v(" "),a("h4",[e._v("StackLayout")]),e._v(" "),a("p",[e._v("The StackLayout allows you to stack multiple UI elements horizontally or vertically like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout HorizontalOptions="Center" VerticalOptions="Center">\n    <Label Text="Hello World" />\n    <Slider />\n</StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-006")])]),e._v(" "),a("p",[e._v("Now if you run the application again both the Label and Slider will be displayed:")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(633)}}),e._v(" "),a("figcaption",[e._v("Fig 02-007")])]),e._v(" "),a("p",[e._v("Now let's examine the StackLayout class by search for Xamarin StackLayout Class. This class derives\n                        from Layout of View:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class StackLayout : Layout<View>")])]),e._v(" "),a("figcaption",[e._v("Fig 02-007")])]),e._v(" "),a("p",[e._v("If you look at the declaration of Layout class you can see the ContentProperty attribute again:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[Xamarin.Forms.ContentProperty("Children")]\npublic abstract class Layout<T> : Layout, IViewContainer<T>\nwhere T : View')])]),e._v(" "),a("figcaption",[e._v("Fig 02-008")])]),e._v(" "),a("p",[e._v("In this case the name of the Content Property for the Layout is Children. We can view the Children\n                        Property by navigating up the Hierarchy. This can be achieved by clicking at the Layout Class. The Layout\n                        Class implements ILayoutController and this interface defines a Children Property - it's of type\n                        IReadOnlyList. So because the Children property is a kind of List it can contain multiple UI elements\n                        and that's the reason we can use a StackLayout to stack multiple widgets on the screen.")]),e._v(" "),a("h3",[e._v("Accessing Elements in Code-behind")]),e._v(" "),a("p",[e._v("We will improve on the app from the previous lecture to update the Label control with the current\n                        value of the Slider when the Slider is moved.")]),e._v(" "),a("p",[e._v("To implement this we need to handle the ValueChanged event of the Slider and then in our event\n                        handler we can get the current value and set the Label.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Slider ValueChanged="" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-009")])]),e._v(" "),a("p",[e._v("Inside the event handler in the code-behind we can use the e argument that gets passed to get the new\n                        value of the slider:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("void Handle_ValueChanged(object sender, Xamarin.Forms.ValueChangedEventArgs e)\n{\n    e.NewValue;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-010")])]),e._v(" "),a("p",[e._v("In order to update the Label from code-behind we need to assign it a name:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Text="Hello World" x:Name="label" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-011")])]),e._v(" "),a("p",[e._v("You can see from the x: prefix that the Name attribute belongs the standard XAML that Microsoft\n                        introduced in 2009 which is defined in the Microsoft namespace we discussed earlier.")]),e._v(" "),a("p",[e._v("Now if we go back to the code-behind we can reference the Label in the following manner:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('label.Text = String.Format("Value is {0}", e.NewValue);')])]),e._v(" "),a("figcaption",[e._v("Fig 02-012")])]),e._v(" "),a("p",[e._v("The NewValue property returns a floating point number between 0 and 1. So we can add an additional\n                        argument to the Format property to constrain the result to 2 decimal places:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('label.Text = String.Format("Value is {0:F2}", e.NewValue);')])]),e._v(" "),a("figcaption",[e._v("Fig 02-012")])]),e._v(" "),a("p",[e._v("Now if we run the application and move the slider the value is updated:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(634)}}),e._v(" "),a("figcaption",[e._v("Fig 02-013")])]),e._v(" "),a("p",[e._v("At the moment when you first run the app the value of the label is set to HelloWorld. In order to\n                        show the value of the slider instead we need to get a reference to the Slider in code-behind. We do this\n                        by adding a Name attribute (like we did before with the label):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Slider ValueChanged="Handle_ValueChanged" x:Name="slider" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-014")])]),e._v(" "),a("p",[e._v("Back in the code-behind in the constructor we can set an initial value for the Slider:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public GreetPage()\n{\n    InitializeComponent();\n\n    slider.Value = 0.5;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-015")])]),e._v(" "),a("p",[e._v("If you were to move the code that sets the slider value above the call to InitializeComponent() you\n                        would get a null reference exception. We can see the reason for this if we take another look at the .g.cs auto\n                        generated file located in the obj>Debug folder. There are two private fields defined - one for the\n                        label and one for the slider.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "0.0.0.0")]\nprivate global::Xamarin.Forms.Label label;\n\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "0.0.0.0")]\nprivate global::Xamarin.Forms.Slider slider;')])]),e._v(" "),a("figcaption",[e._v("Fig 02-016")])]),e._v(" "),a("p",[e._v("Without adding the x:Name attribute these fields wouldn't be generated.")]),e._v(" "),a("p",[e._v("In the InitializeComponent method after the call to LoadFromXaml the two fields are initialized:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "0.0.0.0")]\nprivate void InitializeComponent() {\n    global::Xamarin.Forms.Xaml.Extensions.LoadFromXaml(this, typeof(ContactMethodsPage));\n    label = global::Xamarin.Forms.NameScopeExtensions.FindByName<global::Xamarin.Forms.Label>(this, "label");\n    slider = global::Xamarin.Forms.NameScopeExtensions.FindByName<global::Xamarin.Forms.Slider>(this, "slider");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 02-017")])]),e._v(" "),a("p",[e._v("The FindByName method is inherited from the base class ContentPage. We give the FindByName method an\n                        argument which specifies the name or identifier for our UI element. Now back in the code-behind page\n                        we can access the fields from our autogenerated class (but only after the call to InitializeComponent()")]),e._v(" "),a("h3",[e._v("Data Binding")]),e._v(" "),a("p",[e._v("Alright now let's see how we can use data binding to achieve the same behaviour. Data binding is\n                        concept you see in a lot of UI frameworks like:")]),e._v(" "),a("ul",[a("li",[e._v("Windows Presentation Foundation (WPF)")]),e._v(" "),a("li",[e._v("Silverlight")]),e._v(" "),a("li",[e._v("Angular")]),e._v(" "),a("li",[e._v("Knockout")])]),e._v(" "),a("p",[e._v("Data binding basically means we bind a property of a UI Element to the property of another object. In\n                        this case we want to bind the Text property of the Label to the Value property of the Slider:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(635)}}),e._v(" "),a("figcaption",[e._v("Fig 02-018")])]),e._v(" "),a("p",[e._v("When the Value of the Slider changes the Text Property of the Label is automatically updated. With\n                        data binding we don't have to manually handle the ValueChanged event of the slider. The framework will\n                        create an event handler internally based on our expression.")]),e._v(" "),a("p",[e._v("So to implement data binding, firstly remove the event handler method from code-behind, then remove\n                        the Value attribute from the Slider in XAML. So we want to bind the Text property of the Label to the\n                        Value property of the Slider. We need to use a special syntax for this. So far all the attribute\n                        values you have seen have been strings. At runtime these strings are converted to a primitive type or\n                        an object using a type converter. ")]),e._v(" "),a("p",[e._v("In the case of data binding we cannot convert a string value to a binding expression. That is why\n                        we need a special syntax. In the case of XAML this is called XAML Markup Extensions. We use curly braces\n                        to instruct the XAML parser that this is not a string literal but is instead a markup extension.")]),e._v(" "),a("p",[e._v("There are many different markup extensions in XAML and in this lecture you will learn two of them.")]),e._v(" "),a("p",[e._v("The first one is Binding:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Text="{Binding Source={x:Reference slider}, Path=value}" x:Name="label"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-019")])]),e._v(" "),a("p",[e._v("To setup Binding we need to specify what object we want to set the Text\n                        property to. So we set Source to a reference of the Slider object. For this we need another markup\n                        extension - x:Reference - which is used to access another object in this XAML file. Note that it is\n                        prefixed by x: which means that it belongs to the standard Microsoft XAML.")]),e._v(" "),a("p",[e._v("Next we need to specify the name of the target element (in this case slider). This is based on the\n                        value of the x:Name attribute. The property of the Source object which we are interested in is the Value\n                        property which represents the current value. So after Source we add Path=Value. We call this Path instead\n                        of Property because that Property itself may be an object and we may want to use the dot notation to\n                        access another Property like a.b.c - that's why it's called Path.")]),e._v(" "),a("p",[e._v("Now if we go ahead and run the app you can see that we are back to the previous scenario where there\n                        are a number of digits after the decimal point:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(636)}}),e._v(" "),a("figcaption",[e._v("Fig 02-020")])]),e._v(" "),a("p",[e._v("Previously we formatted this number with two digits after the decimal point. Let's go ahead and do\n                        this. In the Binding expression along with the Source and Path add a third property - StringFormat and\n                        set it using a standard C# format:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Text="{Binding\n    Source={x:Reference slider},\n    Path=value,\n    StringFormat=\'Value is {0:F2}\'}" x:Name="label"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-021")])]),e._v(" "),a("p",[e._v("Now if we run the application again we will see the Label only shows two decimal places as desired:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(637)}}),e._v(" "),a("figcaption",[e._v("Fig 02-022")])]),e._v(" "),a("h3",[e._v("Binding Context")]),e._v(" "),a("p",[e._v("Now, what if we also want to bind the opacity value of the Label to the value of the slider. To do\n                        this we add another Binding Expression to the Label")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"csharp"},[e._v('Opacity="{Binding Source={x:Reference slider}, Path=Value}"')])]),e._v(" "),a("figcaption",[e._v("Fig 02-023")])]),e._v(" "),a("p",[e._v("Now if we run the application we will see that moving the slider to the left makes the Label more\n                        transparent whilst moving it to the right makes it more opaque:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(638)}}),e._v(" "),a("figcaption",[e._v("Fig 02-024")])]),e._v(" "),a("p",[e._v("Our Binding Expressions are a little bit noisy at the moment. In both cases we are using the slider\n                        as the source object. So let's try and make the code a little bit cleaner.")]),e._v(" "),a("p",[e._v("First let's set the BindingContext of our Label to the slider:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('BindingContext="{x: Reference slider}"')])]),e._v(" "),a("figcaption",[e._v("Fig 02-025")])]),e._v(" "),a("p",[e._v("Now slider will be the source object for any properties of the Label. Which means in our Binding\n                        Expressions for the Text and Opacity Properties we can remove the Source attribute:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label BindingContext="{x:Reference slider}"\n    Text="{Binding\n        Path=Value,\n        StringFormat=\'Value is {0:F2}\' }"\n    Opacity="{Binding\n        Path=Value }"\n    x:Name="label"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-026")])]),e._v(" "),a("p",[e._v("In addition we can now remove the Path attribute and just keep Value:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label BindingContext="{x:Reference slider}"\n    Text="{Binding Value, StringFormat=\'Value is {0:F2}\' }"\n    Opacity="{Binding Value}"\n    x:Name="label"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-027")])]),e._v(" "),a("p",[e._v("Now let's add a BoxView above the label. A BoxView is just a box filled with a colour.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<BoxView Color="Green" Opacity="{Binding Source={x:Reference, slider}, Path=Value" />')])]),e._v(" "),a("figcaption",[e._v("Fig 02-028")])]),e._v(" "),a("p",[e._v("If we run the application - here is the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(639)}}),e._v(" "),a("figcaption",[e._v("Fig 02-029")])]),e._v(" "),a("p",[e._v("Again, there is a little bit of duplication in this Xaml. Both the BoxView and the Label are referencing\n                        the Slider as their Binding context. So we can basically move the BindingContext setup from the Label to\n                        our StackLayout which is the container for both the BoxView and the Label:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout BindingContext="{x:Reference slider}" HorizontalOptions="Center"\n                                                        VerticalOptions="Center">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-030")])]),e._v(" "),a("p",[e._v("And this will be inherited by all the elements inside StackLayout which means we simplify the Binding\n                        expression for the Opacity of the BoxView, remove the Source and the Path:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<BoxView Color="Green" Opacity="{Binding Value}"/>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-031")])]),e._v(" "),a("p",[e._v("So this is how we setup DataBinding. Finally we can remove the Label's x:Name as it is no longer being\n                        referenced anywhere.")]),e._v(" "),a("h3",[e._v("Dealing with Device Differences")]),e._v(" "),a("p",[e._v("To illustrate the differences you can encounter between various devices use the code from the previous\n                        lecture:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n                    <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n                                 xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n                                 x:Class="UdemyXamarinForms.DeviceDifferences">\n    <StackLayout\n            BindingContext="{x:Reference slider}"\n            HorizontalOptions="Center"\n            VerticalOptions="Center">\n        <BoxView Color="Green" Opacity="{Binding Value}"/>\n        <Label\n                Text="{Binding Value,\n            StringFormat=\'Value is {0:F2}\' }"\n                Opacity="{Binding Value}"/>\n        <Slider x:Name="slider"/>\n    </StackLayout>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-032")])]),e._v(" "),a("p",[e._v("remove the VerticalOptions attribute from the StackLayout and run the application in Android:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(640)}}),e._v(" "),a("figcaption",[e._v("Fig 02-033")])]),e._v(" "),a("p",[e._v("Note that the BoxView is on top of the page just below the blue bar. Now if we run the same app in\n                        iOS:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(641)}}),e._v(" "),a("figcaption",[e._v("Fig 02-034")])]),e._v(" "),a("p",[e._v("Note that in iOS the BoxView is positioned at the very top of the screen - underneath the time\n                        display. This is one of the key differences between Android and iOS.")]),e._v(" "),a("p",[e._v("We will add some padding to the top of the page that will only take effect in iOS. In the\n                        code-behind add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if (Device.OS == TargetPlatform.iOS)\n    Padding = new Thickness(0, 20, 0, 0);")])]),e._v(" "),a("figcaption",[e._v("Fig 02-035")])]),e._v(" "),a("p",[e._v("The Device class has a static property called OS which is an enumeration of type TargetPlatform. So\n                        we can check if TargetPlatform is iOS. If this is the case then we can set the Padding of the Page (\n                        which we inherit from ContentPage class) to a new Thickness object. Thickness has several different\n                        constructors. The one we use here takes four arguments - left, top, right and bottom.")]),e._v(" "),a("p",[e._v("So with iOS we always want to add 20 pixels padding to the top of our page to stop our page content clashing\n                        with the standard bar at the top of the screen.")]),e._v(" "),a("p",[e._v("Now let's assume that we want to have different Padding settings for Android and Windows. You could\n                        use the technique above adding elseif statements for each OS but we can achieve the same result with\n                        cleaner code.")]),e._v(" "),a("p",[e._v("The Device class has a method called OnPlatform. This method has two overloads, one that is generic and\n                        another that takes Actions. Starting with the generic overload:\n                        ")]),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Device.OnPlatform<Thickness>(\n    iOS: new Thickness(0, 20, 0, 0),\n    Android: new Thickness(10, 20, 0, 0),\n    WinPhone: new Thickness(30, 20, 0, 0)\n);")])]),e._v(" "),a("figcaption",[e._v("Fig 02-036")])]),e._v(" "),a("p",[e._v("The generic parameter in this instance is Thickness because we want different thicknesses\n                        depending on the OS. Next we supply different Thickness objects for different platforms - using C#\n                        named parameters. As you can see this is a cleaner approach than using multiple else if statements.")]),e._v(" "),a("p",[e._v("We can assign the result we get from this method to Padding:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Device.OnPlatform(\n    iOS: new Thickness(0, 20, 0, 0),\n    Android: new Thickness(10, 20, 0, 0),\n    WinPhone: new Thickness(30, 20, 0, 0)\n);")])]),e._v(" "),a("figcaption",[e._v("Fig 02-037")])]),e._v(" "),a("p",[e._v("Obviously the OnPlatform method is not limited to Thickness objects. We can use OnPlatform with\n                        pretty much any objects - e.g. in your app you might be interested in an integer being different\n                        depending on the Platform. In this case you would supply integers to the OnPlatform method instead of\n                        Thickness objects.")]),e._v(" "),a("p",[e._v("The OnPlatform method also has a non-generic overload. Let's say we want to execute code only on Android:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Device.OnPlatform(\n    Android: () => {\n        Padding = new Thickness(0, 20, 0, 0);\n});")])]),e._v(" "),a("figcaption",[e._v("Fig 02-038")])]),e._v(" "),a("p",[e._v("Firstly we supply the OnPlatform with the Android named parameter. Next I need to supply an Action.\n                        We use a lambda expression here and then set the desired padding as before.")]),e._v(" "),a("p",[a("strong",[e._v("Please note - ")]),e._v("OnPlatform is now deprecated and has been replaced with\n                        switch(RuntimePlatform):")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("switch (Device.RuntimePlatform)\n{\n    case Device.iOS:\n        Padding = new Thickness(0, 20, 0, 0);\n        break;\n    case Device.Android:\n        Padding = new Thickness(0, 100, 0, 0);\n        break;\n    case Device.WinPhone:\n        Padding = new Thickness(0, 10, 0, 0);\n        break;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 02-039")])]),e._v(" "),a("h3",[e._v("Property Element Syntax")]),e._v(" "),a("p",[e._v("In the last lecture we learned that Padding is a property of the Page and we can set it to a\n                        Thickness object like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Padding = new Thickness(0, 20, 0, 0);")])]),e._v(" "),a("figcaption",[e._v("Fig 02-040")])]),e._v(" "),a("p",[e._v("If you wanted to apply this padding in XAML instead you could add it to the ContentPage element using\n                        a string literal like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.PropertyElementSyntax"\n             Padding="0, 20, 0, 0">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-040")])]),e._v(" "),a("p",[e._v("Now at runtime the XAML parser will get this string and give it to a Type Converter that will parse\n                        it into a Thickness object. This will apply to all platforms. What if you want to apply this only in\n                        iOS. Then we need to use an element called OnPlatform:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<OnPlatform\n    iOS="...">\n</OnPlatform>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-041")])]),e._v(" "),a("p",[e._v("The OnPlatform element has attributes for iOS, Android. The problem is we can't use this element\n                        as the Value of the Padding attribute because these values (as you have seen so far) are either simple\n                        strings or XAML markup extensions - but they cant be an XML element. This is when we use a special\n                        syntax in XAML called Property Element Syntax.")]),e._v(" "),a("p",[e._v("To demonstrate first of all remove the Padding attribute from the ContentPage element. Then inside\n                        the ContentPage element add another element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<ContentPage.Padding>\n</ContentPage.Padding>")])]),e._v(" "),a("figcaption",[e._v("Fig 02-042")])]),e._v(" "),a("p",[e._v("So we are using an XML element instead of an XML attribute to set the Padding property. That's\n                        the reason why this syntax is called Property Element Syntax - because we set C# properties using\n                        XML elements not attributes.")]),e._v(" "),a("p",[e._v("Inside this element we can either add a simple string:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<ContentPage.Padding>\n    0, 20, 0, 0\n</ContentPage.Padding>")])]),e._v(" "),a("figcaption",[e._v("Fig 02-043")])]),e._v(" "),a("p",[e._v("Or I can use another element to represent a complex object. In this case I want to use the OnPlatform\n                        element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage.Padding>\n    <OnPlatform\n        iOS="...">\n\n    </OnPlatform>\n</ContentPage.Padding>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-044")])]),e._v(" "),a("p",[e._v("This OnPlatform element maps to a C# class. To illustrate this go back to the code-behind and\n                        declare a temporary variable:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var x = new OnPlatform<Thickness>\n{\n    Android = new Thickness(0),\n    iOS = new Thickness(0, 20, 0, 0)\n};")])]),e._v(" "),a("figcaption",[e._v("Fig 02-045")])]),e._v(" "),a("p",[e._v("OnPlatform is a generic class so we need to use a generic parameter, in this instance we use\n                        Thickness. The OnPlatform class has properties such as Android, iOS etc. ")]),e._v(" "),a("p",[e._v("Now we can assign this Thickness object to Padding:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Padding = x;")])]),e._v(" "),a("figcaption",[e._v("Fig 02-046")])]),e._v(" "),a("p",[e._v("There will be an implicit conversion between OnPlatform object and Thickness object. Now we want\n                        to achieve the same thing in XAML. When creating this OnPlatform object we need to specify a generic\n                        argument. So we use another attribute here - x:TypeArguments:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage.Padding>\n    <OnPlatform x:TypeArguments="Thickness"\n                iOS="...">\n    </OnPlatform>\n</ContentPage.Padding>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-047")])]),e._v(" "),a("p",[e._v("Again to emphasize here because this attribute is prefixed with x: it belongs to the Microsoft\n                        namespace.")]),e._v(" "),a("p",[e._v("So this line in XAML:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<OnPlatform x:TypeArguments="Thickness">')])]),e._v(" "),a("figcaption",[e._v("Fig 02-048")])]),e._v(" "),a("p",[e._v("is exactly like this line in C#:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("new OnPlatform<Thickness>")])]),e._v(" "),a("figcaption",[e._v("Fig 02-049")])]),e._v(" "),a("p",[e._v("Ok, now we need to set values for our OnPlatform properties:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentPage.Padding>\n    <OnPlatform x:TypeArguments="Thickness"\n                iOS="0, 20, 0, 0"\n                Android="0, 40, 0, 0">\n\n    </OnPlatform>\n</ContentPage.Padding>')])]),e._v(" "),a("figcaption",[e._v("Fig 02-050")])]),e._v(" "),a("p",[e._v("The numbers represent Left, Right, Top and Bottom.  ")]),e._v(" "),a("p",[e._v("So, to recap, we use Property Element Syntax when we want to deal with complex objects that cannot\n                        be represented using simple strings.")]),e._v(" "),a("h3",[e._v("XAML Compilation")]),e._v(" "),a("p",[e._v("In this lecture we will demonstrate how to catch and prevent errors in XAML. So, for example, if we\n                        introduce an error into the XAML by for example removing the s from Arguments in the following line:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<OnPlatform x:Argument="Thickness"')])]),e._v(" "),a("figcaption",[e._v("Fig 02-051")])]),e._v(" "),a("p",[e._v("Now if we run the application, it launces ok but then terminates immediately wihtout any indication\n                        of what the problem was. In these situations the first place we should check is the Output\n                        tab in Visual Studio. ")]),e._v(" "),a("p",[e._v("In the Output window we will see there is a XamlParseException:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(642)}}),e._v(" "),a("figcaption",[e._v("Fig 02-052")])]),e._v(" "),a("p",[e._v("The exception says Type OnPlatform not found. So what is happening here is that we don't have an\n                        OnPlatform type that is not generic. So this is one way to find the exception. Another way is to run\n                        the app in debug mode. In Visual Studio you press F5 to Start in Debugging. If you do this you will see\n                        the exception again:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(643)}}),e._v(" "),a("figcaption",[e._v("Fig 02-053")])]),e._v(" "),a("p",[e._v("The problem is we don't see these errors until runtime. We can include our XAML files in compilation\n                        so they will be compiled into Intermediate Language (IL). This has a number of benefits:")]),e._v(" "),a("ul",[a("li",[e._v("Catch errors at compile-time")]),e._v(" "),a("li",[e._v("Reduced assembly size - the Xaml files are compiled to IL which means the Xaml is not included\n                            in the final assembly")]),e._v(" "),a("li",[e._v("Fast loading of XAML elements")])]),e._v(" "),a("p",[e._v("To enable compilation load the AssemblyInfo.cs file (located under Properties). Here we will find\n                        attributes that apply to the assembly as a whole like the title, version, copyright information etc.")]),e._v(" "),a("p",[e._v("We can include another attribute here: ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("[assembly: XamlCompliation(XamlComplationOptions.Compile)]")])]),e._v(" "),a("figcaption",[e._v("Fig 02-054")])]),e._v(" "),a("p",[e._v("Don't forget to add the XamarinForms.Xaml namespace. The colon indicates this attribute is applied\n                        to the whole assembly. The parameter for this attribute is an enumeration called\n                        XamlCompilationOptions which has a default value of Skip. If we set the value to Compile and build\n                        the solution we will get a compilation error that is exactly the same as the runtime error we received.")]),e._v(" "),a("p",[e._v("The attribute can be applied at class or assembly level. This means that if you want to disable or\n                        enable it on a specific class you can apply the attribute on that class:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("[XamlCompilation(XamlCompilationOptions.Skip)]\npublic partial class PropertyElementSyntax : ContentPage\n{")])]),e._v(" "),a("figcaption",[e._v("Fig 02-055")])]),e._v(" "),a("h3",[e._v("Cheat Sheet")]),e._v(" "),a("h3",[e._v("Exercise")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Binding Core Concepts")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("\n                    Hi, this is Brian Noyes. In this module, we're going to dive a little deeper into bindings and get\n                    into some of the core concepts of how you can have explicit control over exactly what a binding is\n                    doing with respect to its source objects and its paths and the direction of flow of data through\n                    that binding.\n                ")]),e._v(" "),a("p",[e._v("\n                    First we're going to dive into binding sources. We've already seen in previous modules how bindings\n                    use the DataContext as their source by default. In this section we'll talk about the other options\n                    that you have there, including the RelativeSource bindings, ElementName bindings, and Source\n                    bindings where you can point to a explicit Source object through those properties on the binding.\n                ")]),e._v(" "),a("p",[e._v("\n                    Next we're going to get into Property Paths in a little more detail. We've seen simple paths that\n                    are just a property name in previous demos, and we've actually seen a couple of other examples that\n                    dot down. Here we'll just talk a little bit more about exactly what is supported, the fact that you\n                    can walk an entire object graph through the property path and even index into arrays\n                ")]),e._v(" "),a("p",[e._v("\n                    And also we'll talk a little bit about debugging bindings when they're not working and see how you\n                    can spot the errors for your bindings in the output window.\n                ")]),e._v(" "),a("p",[e._v("\n                    Finally, we'll close out this module with the mode and direction of bindings. Bindings flow from\n                    source to target, by default, and we've seen that you can have two-way bindings that flow from\n                    target to source as well. The binding mode property is the thing that lets you control this, and\n                    we'll also look into how the default direction is set for a given target property through its\n                    DependencyProperty metadata.\n                ")])]),e._v(" "),a("div",{
staticClass:"panel-body"},[a("h3",[e._v("Binding Sources")]),e._v(" "),a("p",[e._v("\n                    Let's talk about how the Source object for your binding is provided to that binding. The Source\n                    object that's going to be used is explicitly determined by the way the binding is defined.\n                    Typically, it's going to use the DataContext of the element that the binding is on, and we've seen\n                    that in previous demos, as well as talked about how the DataContext can flow down to that element by\n                    being set on some parent element.")]),e._v(" "),a("p",[e._v("\n                    But there's actually three other ways that you can explicitly point to some Source object. The first\n                    one is a RelativeSource binding. RelativeSource is a property on the binding that you can point to a\n                    RelativeSource markup extension that indicates where the Source object can be found in the element\n                    hierarchy. So it's called RelativeSource because it's kind of like a relative path within the\n                    element hierarchy, and there's a couple of different forms this can take on that we'll look at in a\n                    demo.\n                ")]),e._v(" "),a("p",[e._v("\n                    Another way you can specify the Source object is with an ElementName. If you're going to use some\n                    other element within the current UI as the source object, then you can use ElementName= and the name\n                    of that element, and it will locate that element in the visual tree and treat that as the Source\n                    object.\n                ")]),e._v(" "),a("p",[e._v("\n                    And then the last way is to use the Source property on a binding. Source property has to point to\n                    some object reference that you want to use as the source. Now the only reasonable way to get an\n                    object reference down into the Source property is to use a static resource that points to some\n                    object in a Resource collection. So let's see all of these in some demos.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: RelativeSource Bindings")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\before\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\after\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                    In this series of demos, I want to get you familiar with the other ways you can provide a Source\n                    object to your bindings other than using the DataContext that is the default. The first one we're\n                    going to look at is RelativeSource bindings.\n                ")]),e._v(" "),a("p",[e._v("\n                    So the starting point for these demos is that we have a solution here with a basic data bound form,\n                    it's got a DataGrid in it, I can fire it up here, and you can see that we have customers from the\n                    Zza database that we're using for sample data in this course.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(270)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001")])]),e._v(" "),a("p",[e._v("The data access is being done through a data layer that's part of the solution. It just has plain old\n                    CLR objects for the data entities:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('namespace Zza.Data\n{\n    public class Customer\n    {\n        public Customer()\n        {\n            Orders = new List<Order>();\n        }\n        [Key]\n        public Guid Id { get; set; }\n        public Guid? StoreId { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string FullName { get { return FirstName + " " + LastName; } }\n        public string Phone { get; set; }\n        public string Email { get; set; }\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string State { get; set; }\n        public string Zip { get; set; }\n        public List<Order> Orders { get; set; }\n    }\n}\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 03-002")])]),e._v(" "),a("p",[e._v("And it's got a DBContext and an Entity Framework DBContext that we're doing the data access\n                    through.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class ZzaDbContext : DbContext\n{\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Order> Orders { get; set; }\n    public DbSet<Product> Products { get; set; }\n    public DbSet<OrderItem> OrderItems { get; set; }\n    public DbSet<OrderItemOption> OrderItemOptions { get; set; }\n    public DbSet<ProductOption> ProductOptions { get; set; }\n    public DbSet<ProductSize> ProductSizes { get; set; }\n    public DbSet<OrderStatus> OrderStatuses { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 03-003")])]),e._v(" "),a("p",[e._v("\n                    Again, how you do your data access is up to you, just get it into Entities and you're ready to data\n                    bind.\n                ")]),e._v(" "),a("p",[e._v("\n                    We've got the MainWindow code, which is mostly just the contents contained in the DataGrid here with\n                    the pre-defined columns. The DataGrid is bound to a Customers collection that we're exposing on our\n                    DataContext, and each of the columns is bound to properties on the individual Customer object that's\n                    being rendered out.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customerDataGrid"\n      Grid.Row="1"\n      ItemsSource="{Binding Source={StaticResource customerViewSource}}"\n      AutoGenerateColumns="False"\n      SelectionChanged="customerDataGrid_SelectionChanged"\n      CanUserAddRows="False">\n<DataGrid.Columns>\n    <DataGridTextColumn x:Name="idColumn"\n                        Width="Auto"\n                        Header="Id"\n                        Binding="{Binding Id}" />\n    <DataGridTextColumn x:Name="firstNameColumn"\n                        Width="Auto"\n                        Header="First Name"\n                        Binding="{Binding FirstName}" />\n    <DataGridTextColumn x:Name="lastNameColumn"\n                        Width="Auto"\n                        Header="Last Name"\n                        Binding="{Binding LastName}" />\n    <DataGridTextColumn x:Name="emailColumn"\n                        Width="Auto"\n                        Header="Email"\n                        Binding="{Binding Email}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-004")])]),e._v(" "),a("p",[e._v("\n                    As we talked about before, when a DataGrid renders its rows it sets the DataContext for the current\n                    row to the current object, which will be a customer in this case, so these bindings on the columns\n                    are relative to a single customer. Then we need to set the DataContext to a collection of Customers,\n                    and we do that from the code-behind.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MainWindow()\n{\n    InitializeComponent();\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        Customers = new ObservableCollection<Customer>(context.Customers);\n    }\n    DataContext = this;\n}\n\npublic ObservableCollection<Customer> Customers\n{\n    get { return (ObservableCollection<Customer>)GetValue(CustomersProperty); }\n    set { SetValue(CustomersProperty, value); }\n}\n\npublic static readonly DependencyProperty CustomersProperty =\n    DependencyProperty.Register("Customers",\n    typeof(ObservableCollection<Customer>),\n    typeof(MainWindow),\n    new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 03-005")])]),e._v(" "),a("p",[e._v("\n                    Here you can see we're using our DBContext to execute a query on top of the Customers collection,\n                    push that into an observable collection that we called Customers, and exposed as a\n                    DependencyProperty from our code-behind, similar to previous demos.\n                ")]),e._v(" "),a("p",[e._v("\n                    Then we set the DataContext programmatically here by setting DataContext = the this reference, the\n                    Window itself. So the first way we could use RelativeSource bindings is to get rid of this\n                    DataContext = this here. We can do that declaratively from the XAML.\n                ")]),e._v(" "),a("p",[e._v("\n                    So I'll delete that from the code-behind:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        Customers = new ObservableCollection<Customer>(context.Customers);\n    }\n    DataContext = this;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-006")])]),e._v(" "),a("p",[e._v("\n                    I'll switch over to the XAML and go up to the top to the window element, and I'll add in the\n                    declaration here that sets the DataContext declaratively through a binding, and remember, that\n                    binding would normally use the DataContext as its Source object.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DataContext="{Binding RelativeSource={RelativeSource Self}}"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-007")])]),e._v(" "),a("p",[e._v("\n                    Well, that's going to get you in kind of a recursive thing here, which isn't going to work, so we\n                    need the XAML equivalent here of pointing to the this reference on the Window and we can do that\n                    with a RelativeSource Self binding.\n                ")]),e._v(" "),a("p",[e._v("\n                    So RelativeSource is a property on the binding when set, it's going to obtain an object reference\n                    that will be used as the Source object. And the way it's going to obtain that reference is through\n                    one of several modes that this RelativeSource markup extension supports.\n                ")]),e._v(" "),a("p",[e._v("\n                    This one is the Self mode and it's basically like a this reference on whatever element the binding\n                    is on. So in this case it's going to obtain a reference to the Window and set that as the\n                    DataContext, which is exactly what we're looking for here.\n                ")]),e._v(" "),a("p",[e._v("\n                    Now for another example of using a RelativeSource binding, let's say that in our DataGrid we want to\n                    add a Delete button to each row so that we can click on that and delete the corresponding customer.\n                ")]),e._v(" "),a("p",[e._v("\n                    I'm going to drop into my code-behind here and go down to the bottom here, and the idea is that we\n                    want to have a method that looks like this OnDeleteCustomer that takes in a customer reference and\n                    removes it and possibly deletes it from our database.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnDeleteCustomer(Customer customer)\n{\n    Customers.Remove(customer);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-008")])]),e._v(" "),a("p",[e._v("In this case, I'm just going to remove it from the data bound collection, and we need a way to target\n                    that method in a data bound way.\n                ")]),e._v(" "),a("p",[e._v("\n                    Now a common way to do that would be to use a Command object, so I'm going to add in a new\n                    DependencyProperty here called DeleteCustomerCommand:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public RelayCommand<Customer> DeleteSelectedCommand\n{\n    get { return (RelayCommand<Customer>)GetValue(DeleteSelectedCommandProperty); }\n    set { SetValue(DeleteSelectedCommandProperty, value); }\n}\n\npublic static readonly DependencyProperty DeleteSelectedCommandProperty =\n    DependencyProperty.Register("DeleteSelectedCommand",\n    typeof(RelayCommand<Customer>),\n    typeof(MainWindow),\n    new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 03-009")])]),e._v(" "),a("p",[e._v("\n                    DeleteCustomerCommand is of type RelayCommand<T>, and that's a type that's in my solution\n                    here, it's a common pattern in data bound scenarios where you use the ICommand interface of WPF to\n                    create an object that can target some other object's method and invoke it when this Command object\n                    gets executed.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("    public class RelayCommand : ICommand\n    {\n        Action _TargetExecuteMethod;\n        Func<bool> _TargetCanExecuteMethod;\n\n        public RelayCommand(Action executeMethod)\n        {\n            _TargetExecuteMethod = executeMethod;\n        }\n\n        public RelayCommand(Action executeMethod, Func<bool> canExecuteMethod)\n        {\n            _TargetExecuteMethod = executeMethod;\n            _TargetCanExecuteMethod = canExecuteMethod;\n        }\n\n        public void RaiseCanExecuteChanged()\n        {\n            CanExecuteChanged(this, EventArgs.Empty);\n        }\n        #region ICommand Members\n\n        bool ICommand.CanExecute(object parameter)\n        {\n            if (_TargetCanExecuteMethod != null)\n            {\n                return _TargetCanExecuteMethod();\n            }\n            if (_TargetExecuteMethod != null)\n            {\n                return true;\n            }\n            return false;\n        }\n\n        // Beware - should use weak references if command instance lifetime is longer than lifetime of UI objects that get hooked up to command\n        // Prism commands solve this in their implementation\n        public event EventHandler CanExecuteChanged = delegate { };\n\n        void ICommand.Execute(object parameter)\n        {\n            if (_TargetExecuteMethod != null)\n            {\n                _TargetExecuteMethod();\n            }\n        }\n        #endregion\n    }")])]),e._v(" "),a("figcaption",[e._v("Fig 03-010")])]),e._v(" "),a("p",[e._v("\n                    RelayCommand just uses delegates under the covers to point to that method on some other object. The\n                    method we're going to be targeting is our DeleteCustomer method and some other object will be the\n                    Window itself.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnDeleteCustomer(Customer customer)\n{\n    Customers.Remove(customer);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-011")])]),e._v(" "),a("p",[e._v("\n                    So now we need to initialize this DeleteCustomerCommand to an instance of a RelayCommand that points\n                    to OnDeleteCustomer. So I'll just go up here to the constructor of the Window and add a line of code\n                    that sets that property to an instance of the RelayCommand:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        Customers = new ObservableCollection<Customer>(context.Customers);\n    }\n    DeleteCustomerCommand = new RelayCommand<Customer>(OnDeleteCustomer);\n    DeleteSelectedCommand = new RelayCommand<Customer>(OnDeleteCustomer, CanDeleteCustomer);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-012")])]),e._v(" "),a("p",[e._v("\n                    and the RelayCommand constructor takes a delegate reference to the target method, which is our\n                    OnDeleteCustomer. So we're just using Delegate Inference here in C# to pass the method name\n                    directly, and it turns it into an action delegate reference that gets passed in as the argument to\n                    that RelayCommand. Then basically, if someone executes this command, they'll be executing the target\n                    method of that action, which is our OnDeleteCustomer.\n                ")]),e._v(" "),a("p",[e._v("\n                    So now we just need a way to execute this command, but doing it with data binding from the button\n                    within the view, so let's go add that button. To add the button, I'm going to go into the DataGrid\n                    itself and just drop in here and add a new column at the front here.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customerDataGrid"\n            Grid.Row="1"\n            AutoGenerateColumns="False"\n            ItemsSource="{Binding Customers}"\n            SelectionChanged="customerDataGrid_SelectionChanged"\n            CanUserAddRows="False">\n        <DataGrid.Columns>\n            <DataGridTemplateColumn x:Name="deleteButtonColumn"\n                Width="Auto">\n            <DataGridTemplateColumn.CellTemplate>\n                <DataTemplate>\n                    <Button Content="Delete" />\n                </DataTemplate>\n            </DataGridTemplateColumn.CellTemplate>\n        </DataGridTemplateColumn>\n    </DataGrid.Columns>\n</DataGrid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-013")])]),e._v(" "),a("p",[e._v("\n                    And the kind of column that I added here is a DataGridTemplateColumn. A DataGridTemplateColumn uses\n                    a DataTemplate, which we'll get into a lot more detail on in a later module, to specify the\n                    structure that we want to put into each cell within that column.\n                ")]),e._v(" "),a("p",[e._v("\n                    So you can see we're just putting a Button with its contents set to \"Delete\", so that's what'll show\n                    on the button and that'll show up in each row, basically, right next to the Customer row.\n                ")]),e._v(" "),a("p",[e._v("\n                    Now we need this button to be able to invoke our command or execute that command. So Buttons have a\n                    Command property on them which we can use to set a binding:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Command="{Binding}" Content="Delete" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-014")])]),e._v(" "),a("p",[e._v("\n                    and basically we need to be able to point this binding to that Command object in our code-behind.\n                    The challenge is, this binding is part of the column definition, and as we saw in other column\n                    definitions, the DataContext for those bindings is a single row object.\n                ")]),e._v(" "),a("p",[e._v("\n                    So these bindings are binding against a single customer and, therefore, this binding up here would\n                    be pointing to a single customer if we relied on DataContext, but we don't want to put our Delete\n                    logic for removing a Customer from its parent collection down on the Customer object itself, so we\n                    need a way to point right here to the Window object and to the Command object on that Window, and\n                    one way to do that is with a RelativeSource binding.\n                ")]),e._v(" "),a("p",[e._v("\n                    So what we're going to do is use a RelativeSource to kind of escape from the row and walk our way\n                    back out to the Window using the RelativeSource. So RelativeSource lets you walk up the visual tree\n                    from where you're at to get to some parent element and then look at properties on it.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Command="{Binding\n    RelativeSource={RelativeSource AncestorType=DataGrid},\n    Path=DataContext.DeleteCustomerCommand}"\n    Content="Delete" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015")])]),e._v(" "),a("p",[e._v("\n                    So now I've fleshed out this binding and I'm setting a RelativeSource property on it like I did with\n                    the RelativeSource Self binding, but in this case I'm going to use a different mode of the\n                    RelativeSource object, which is to specify an ancestor. An ancestor would be a parent element within\n                    the visual tree. And what you can specify is what is the type of that parent element that we want to\n                    walk our way up to.\n                ")]),e._v(" "),a("p",[e._v("\n                    So we're down here on a Button inside of cell, inside of a row, and that eventually walks its way up\n                    to the DataGrid itself and says, yes, that is a type match with the kind of Ancestor that we're\n                    trying to look for, so that is my Source object.\n                ")]),e._v(" "),a("p",[e._v("\n                    Once I get to that source object, I can use any of the exposed properties on that Source object to\n                    get the data I'm trying to get to with this binding. In this case, we're trying to get to the\n                    DeleteCustomerCommand that's part of the window.\n                ")]),e._v(" "),a("p",[e._v("\n                    Well, one way I could've done it is I could have walked all the way up to Window and pointed to\n                    DeleteCustomerCommand on that, but just to show another variation, I can just walk my way out to the\n                    DataGrid, then I know that the DataGrid's DataContext is the window itself, because that was set\n                    earlier on as the overall DataContext for the view. So then I can dot my way down using Property\n                    Paths to the DeleteCustomerCommand that is on that DataContext object, which is the window. Now my\n                    command is targeting what I want and I can invoke it.\n                ")]),e._v(" "),a("p",[e._v("\n                    Now the other thing is, remember, we wanted to pass a customer. Well, objects that support commands\n                    also support CommandParameters, so I can set the CommandParameter to a binding and that binding can\n                    just use the current DataContext of the Button, which as I talked about a moment ago, is going to be\n                    a Customer object, the one we want to delete.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Command="{Binding\n    RelativeSource={RelativeSource AncestorType=DataGrid},\n    Path=DataContext.DeleteCustomerCommand}"\n    CommandParameter="{Binding}"\n    Content="Delete" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-016")])]),e._v(" "),a("p",[e._v("\n                    So I can just use binding with nothing else on it here, and it's going to grab the whole DataContext\n                    object and pass it as the CommandParameter. With that code in place, I can start and run.\n                ")]),e._v(" "),a("p",[e._v("\n                    You can see the Delete button there, and I can start deleting, and we can see the rows are, in fact,\n                    deleting.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(271)}}),e._v(" "),a("figcaption",[e._v("Fig 03-017")])]),e._v(" "),a("p",[e._v("\n                    So those are the primary forms of RelativeSource bindings you'll use. An AncestorType one to walk up\n                    the element tree to find some parent element that's a given type, and then use a path off of that\n                    current object to get to where you want to go for a value.\n                ")]),e._v(" "),a("p",[e._v("\n                    The other is a RelativeSource Self to effectively get a this reference back to the element that the\n                    binding is on, to access some other property on that object. In this case, we don't have a Path\n                    statement, so we're getting a reference to the whole object, the Window itself, and setting it as\n                    the DataContext.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: ElementName Bindings")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\before\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\after\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to show you how to use the ElementName to specify a Source object for a\n                    binding. Our scenario for this one is we still want to delete customers like in the last demo, but\n                    instead we decide we want to put the Delete button outside the DataGrid and not have it repeated in\n                    every row.\n                ")]),e._v(" "),a("p",[e._v("We're also going to use commands here again as the way we're going to invoke our functionality. So\n                    the first thing we're going to want to do is define a new DependencyProperty that's a Command we can\n                    target from the separate button we're going to add.\n                ")]),e._v(" "),a("p",[e._v("So I'm going to add a DeleteSelectedCommand that's also a RelayCommand<Customer>:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public RelayCommand<Customer> DeleteSelectedCommand\n{\n    get { return (RelayCommand<Customer>)GetValue(DeleteSelectedCommandProperty); }\n    set { SetValue(DeleteSelectedCommandProperty, value); }\n}\n\npublic static readonly DependencyProperty DeleteSelectedCommandProperty =\n    DependencyProperty.Register("DeleteSelectedCommand",\n    typeof(RelayCommand<Customer>),\n    typeof(MainWindow),\n    new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 03-018")])]),e._v(" "),a("p",[e._v("And we're going to end up targeting that same OnDeleteCustomer as the Execute method for that\n                    command. We're going to need to initialize that, so we'll add an initializer up here in the\n                    constructor to set that property to an instance of a RelayCommand:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("DeleteSelectedCommand = new RelayCommand<Customer>(OnDeleteCustomer, CanDeleteCustomer);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-019")])]),e._v(" "),a("p",[e._v("But this one's going to pass an extra method here to the constructor of the RelayCommand.")]),e._v(" "),a("p",[e._v("RelayCommand supports the concept of executing a target method. It also supports having a CanExecute\n                    handler as a target method. And the CanExecute will be called first to determine whether the command\n                    should actually execute the target method, so we need to add that method to our class as well.\n                ")]),e._v(" "),a("p",[e._v("That method takes this kind of signature:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private bool CanDeleteCustomer(Customer customer)\n{\n    return customerDataGrid.SelectedItem != null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-020")])]),e._v(" "),a("p",[e._v("It takes in the same parameter as the Execute method does, a Customer, and it returns a Boolean. The\n                    Boolean, if it's true, says that the command is enabled, you can go ahead and invoke the Execute\n                    method. If it returns false, then it should not only, not invoke the Execute method, if it's hooked\n                    up to something like a Button, that Button will be disabled.\n                ")]),e._v(" "),a("p",[e._v("And you can see the logic here is we're just going to check our DataGrid and see if there's actually\n                    a SelectedItem and return true or false based on that.\n                ")]),e._v(" "),a("p",[e._v("Now the other thing we need to do is make sure we signal the Button to re-query this CanExecute\n                    method whenever the state that drives it changes, so whenever the SelectedItem changes, we want it\n                    to re-query this. The way you do that with the RelayCommand is you call RaiseCanExecuteChanged on it\n                    whenever the affected state is modified.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void customerDataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n    DeleteSelectedCommand.RaiseCanExecuteChanged();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-021")])]),e._v(" "),a("p",[e._v("So we have our SelectionChanged handler for DataGrid, we can just call that anytime Selection\n                    changes, and that's going to cause the CanDeleteCustomer method to be called by the Button to\n                    re-query the state and get a new true or false value.\n                ")]),e._v(" "),a("p",[e._v("Now with all that Command nonsense out of the way, what does the binding look like? Let's jump over\n                    to our MainWindow, and we've got a StackPanel sitting here atop our DataGrid.\n                ")]),e._v(" "),a("p",[e._v("I'm going to go ahead and add a Button that simply says, Content=\"Delete\" on it, so it's just going\n                    to sit right on top of our DataGrid and be a Delete button:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"
},[a("code",[e._v('<StackPanel Grid.Row="0"\n            Orientation="Horizontal">\n    <Button Content="Delete" />\n</StackPanel>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-022")])]),e._v(" "),a("p",[e._v("Now we need to hook this up to our command. Well hooking it up to the Command is actually easier here\n                    than it was down inside the DataGrid because the overall DataContext is flowing down to this from up\n                    above and that DataContext is the Window itself.\n                ")]),e._v(" "),a("p",[e._v("So we just need to get to the exposed property on the Window that is the Command, so we can use a\n                    straightforward binding that goes to the DeleteSelectedCommand:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackPanel Grid.Row="0"\n            Orientation="Horizontal">\n    <Button Content="Delete" Command="{Binding DeleteSelectedCommand}" />\n</StackPanel>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-023")])]),e._v(" "),a("p",[e._v("Now we also need to pass a CommandParameter, so I'm also going to use the CommandParameter property\n                    and set that equal to a binding. But this binding needs to point to the Customer that needs to be\n                    deleted, and how do we know where that is? Well, it happens to be the SelectedItem on the DataGrid.\n                    So we basically need to turn the DataGrid into our Source object and you can do that through an\n                    ElementName binding. So I'm just going to say ElementName=customerDataGrid, which you can see down\n                    below is the x:Name of the DataGrid:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackPanel Grid.Row="0"\n            Orientation="Horizontal">\n    <Button Content="Delete"\n            Command="{Binding DeleteSelectedCommand}"\n            CommandParameter="{Binding ElementName=customerDataGrid, Path=SelectedItem}" />\n</StackPanel>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-024")])]),e._v(" "),a("p",[e._v("That makes that the Source object for this binding and then I just need the Path to point to the\n                    SelectedItem property of that Source object.\n                ")]),e._v(" "),a("p",[e._v("With that in place, we're ready to go. I can go ahead and run. We can see our button up at the top is\n                    disabled because of the CanExecute checks, and there is no SelectedItem currently:\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(272)}}),e._v(" "),a("figcaption",[e._v("Fig 03-025")])]),e._v(" "),a("p",[e._v("As soon as I select an item, the event handler fires, it raises CanExecuteChanged, and the Command\n                    calls that CanExecute handler again and sees that it can enable.\n                ")]),e._v(" "),a("p",[e._v("Now that the button is enabled, I click it, and that first row goes away. Select another one, click\n                    it, and the row goes away. So our functionality is all hooked up through an ElementName binding,\n                    which points to some element by name that is in the overall XAML you're working with, and then uses\n                    the Path to refine what properties on that object you want to grab values from.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Source Bindings")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\before\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\after\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("The last binding source we're going to look at here is the Source property on a binding. If I wanted\n                    to get customers down into my DataGrid here:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customerDataGrid"\n    Grid.Row="1"\n    ItemsSource="{Binding Source={StaticResource customerViewSource}}"\n    AutoGenerateColumns="False"\n    SelectionChanged="customerDataGrid_SelectionChanged"\n    CanUserAddRows="False">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-026")])]),e._v(" "),a("p",[e._v("And I didn't want to rely on the DataContext being set to something that exposed that Customers\n                    collection, I would point explicitly to some Source object that contained the Customer collection.\n                ")]),e._v(" "),a("p",[e._v("Now the way you're typically going to do this when working with the Source property on a binding, is\n                    to define a resource on the current view that you're working with.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                          Source="{Binding Customers}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-027")])]),e._v(" "),a("p",[e._v("It could be an application-scoped resource in the window itself down in some user control that you're\n                    working with, but a resource that's in-scope for the element that's going to have the binding. And\n                    what I'm using here is a class called the CollectionViewSource.\n                ")]),e._v(" "),a("p",[e._v("We covered the ICollectionView interface in a previous module. This is an object that implements\n                    that, and you point to some Source collection and it's going to wrap it in an ICollectionView. We\n                    define this as a Resource with a key so that we can refer to it somewhere else in the XAML and the\n                    Source can be set through a binding based on the DataContext.\n                ")]),e._v(" "),a("p",[e._v("Once we've done that, we can drop down here to our DataGrid and change the ItemsSource here to say,\n                    Source=, and basically we have to point to some object here. Now really the only way to point to\n                    another object from within a binding is to use the StaticResource or DynamicResource markup\n                    extensions, and the StaticResource markup extension takes a key name of the object in a Resource\n                    dictionary that you want to point to.\n                ")]),e._v(" "),a("p",[e._v("So we just need to go up and grab our Resource name that we just created, which is\n                    CustomerViewSource, and put that in the StaticResource markup extension:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customerDataGrid"\n    Grid.Row="1"\n    ItemsSource="{Binding Source={StaticResource customerViewSource}}"\n    AutoGenerateColumns="False"\n    SelectionChanged="customerDataGrid_SelectionChanged"\n    CanUserAddRows="False">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-028")])]),e._v(" "),a("p",[e._v("And you can see the squigglies go away, it's now pointing to that CustomerViewSource object, that's\n                    coming in as the Source object, and will provide the collection to the ItemsSource.\n                ")]),e._v(" "),a("p",[e._v("So with that in place and one minor change to the code-behind, I had to move my Commands up to before\n                    I set the Customers context:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' public MainWindow()\n{\n    InitializeComponent();\n    DeleteCustomerCommand = new RelayCommand<Customer>(OnDeleteCustomer);\n    DeleteSelectedCommand = new RelayCommand<Customer>(OnDeleteCustomer, CanDeleteCustomer);\n    using (ZzaDbContext context = new ZzaDbContext())\n    {\n        Customers = new ObservableCollection<Customer>(context.Customers.Include("Orders").Include("Orders.OrderItems").Include("Orders.OrderItems.Product"));\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 03-029")])]),e._v(" "),a("p",[e._v("Because as the Customers bind, it actually changes the selection, tries to use this command object,\n                    and if it wasn't initialized yet, it's null, that's going to throw a null reference exception. So we\n                    generally want to set up our commands earlier, I meant to put those before the loading of the data,\n                    so I've corrected that now.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(273)}}),e._v(" "),a("figcaption",[e._v("Fig 03-030")])]),e._v(" "),a("p",[e._v("So with that in place I go ahead and run, and we can see we have our Customers collection bound\n                    again:")]),e._v(" "),a("p",[e._v("But now we're doing it through an explicit Source reference on our binding that points to an object\n                    that provides a collection, which in this case happens to be a CollectionViewSource object that has\n                    bound itself through a DataContext binding to the Customers collection on the Window. So this one\n                    demo shows you RelativeSource Self, it shows you RelativeSource with an AncestorType, it shows you\n                    an ElementName binding, and it shows you a Source binding, as well as a number of DataContext-based\n                    bindings.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Binding Property Paths")]),e._v(" "),a("p",[e._v("Once the binding has figured out what the Source object is, the next thing it needs to know is where\n                    to go on that Source object to obtain the value it's going to use to set the target property and\n                    that's where Property Paths come in. The Path property on a binding is what determines the property\n                    path. Typically it's going to be a simple value, but it could be a complex path.\n                ")]),e._v(" "),a("p",[e._v("Basically, the path to the binding can be passed one of two ways:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(274)}}),e._v(" "),a("figcaption",[e._v("Fig 03-031")])]),e._v(" "),a("p",[e._v("If you use the syntax on the left, which we've seen a number of times, where we just say Binding and\n                    Name, you're actually calling a parameterized constructor on the binding markup extension object and\n                    that name gets passed into the parameterized constructor and is used under the covers to set a Path\n                    property.\n                ")]),e._v(" "),a("p",[e._v("The alternate way is to use the Path=Name syntax, in which case you're actually calling the default\n                    constructor of the binding and then setting the Path property explicitly after construction. Either\n                    way, the net result is exactly the same. The binding object is created and the Path property is set\n                    to Name.\n                ")]),e._v(" "),a("p",[e._v("Now bindings are typically set to just a simple path, a property name on the Source object itself. So\n                    if your Source object is a customer and you want to grab the name value off that customer, you just\n                    say Path=Name. They can also be complex paths and walk an entire object graph from the Source\n                    object.\n                ")]),e._v(" "),a("p",[e._v("So if your Source object is, say, the Window, and the Window exposes a customer, then your path may\n                    be Customer and then dot down into the Orders collection of that customer, index into that array,\n                    and get a single object out of the orders, in this case the second element in the array, then the\n                    Order object that you obtained can have a collection of OrderDetails, so we can dot down to\n                    that.")]),e._v(" "),a("p",[e._v("We could reach into that collection and grab out the third object from the OrderDetails collection.\n                    On that OrderDetail object it may have a Product-related object, we can dot down to that, and then\n                    finally dot down to the name once we get down to a discrete value that we're trying to set through\n                    our binding, we're ready to go.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(275)}}),e._v(" "),a("figcaption",[e._v("Fig 03-032")])]),e._v(" "),a("p",[e._v("You can also add no path at all. So you can basically let the bindings say, give me the whole Source\n                    object, and we've seen a couple of these in previous demos as well. You can express this with just\n                    Binding and no arguments whatsoever, and you're basically saying Path=. is the equivalent syntax,\n                    dot meaning the current object, similar to a file system path.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(276)}}),e._v(" "),a("figcaption",[e._v("Fig 03-033")])]),e._v(" "),a("p",[e._v("Now an important concept related to binding paths is how you go about debugging bindings that are not\n                    working for you. Basically, you want to always be paying attention to the output window when you're\n                    hooking up data binding and trying to get it working. If you have an error in one of your bindings,\n                    particularly the path is incorrect, what you're going to get is some information dumped to the\n                    Output window and it looks kind of like this.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(277)}}),e._v(" "),a("figcaption",[e._v("Fig 03-034")])]),e._v(" "),a("p",[e._v("You can either have data warnings or data errors and it's going to tell you detailed information\n                    including what property was not found on what Source object, in this case, 'Idx' and 'Customer', and\n                    then it's also going to tell you what the target element property and type is as well. So this is\n                    something you can stare at and then go inspect those objects and figure out whether you've actually\n                    got something that should be working.\n                ")]),e._v(" "),a("p",[e._v("By default, Visual Studio is going to show both warnings and errors. If you want to only show errors,\n                    which are the more severe form, you can go through Tools Options and there's a place under the\n                    debugging section where you can change the data binding WPF Trace Settings.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(278)}}),e._v(" "),a("figcaption",[e._v("Fig 03-035")])]),e._v(" "),a("p",[e._v("So let's take a look at Property Paths and debugging in a demo.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Binding Property Paths")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\before\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\after\\BindingSources\\BindingSources.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I just want to quickly revisit Property Paths on bindings to make sure it is clear the\n                    power you have to locate the particular value you want once you have some Source object. I'm going\n                    to drop into the XAML of our last demo and just point out a couple of these paths that we've been\n                    using here.\n                ")]),e._v(" "),a("p",[e._v("Most of the bindings we've looked at take on a form like this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                          Source="{Binding Customers}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-036")])]),e._v(" "),a("p",[e._v("which is really saying the Binding Path property is equal to Customers:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <CollectionViewSource x:Key="customerViewSource"\n    Source="{Binding Path=Customers}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-037")])]),e._v(" "),a("p",[e._v("The way it works out without the Path property is that the Binding markup extension itself has a\n                    parameterized constructor that takes one argument and it'll use that argument to set the Path\n                    property.\n                ")]),e._v(" "),a("p",[e._v("So whether you say Binding Customers here or Binding Path=Customers, they mean exactly the same\n                    thing, just a different way of initializing the Binding object.\n                ")]),e._v(" "),a("p",[e._v("Now another path we saw in one of the last demos was this Path=DataContext.DeleteCustomerCommand.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Command="{Binding\n    RelativeSource={RelativeSource AncestorType=DataGrid},\n    Path=DataContext.DeleteCustomerCommand}"\n        CommandParameter="{Binding}"\n        Content="Delete" />\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 03-038")])]),e._v(" "),a("p",[e._v("Remember this was with the RelativeSource binding where we were walking up the visual tree to get to\n                    the DataGrid and then basically saying, go to its DataContext property, which happened to be the\n                    Window in that demo, and then dot your way down into that object to get to the\n                    DeleteCustomerCommand.\n                ")]),e._v(" "),a("p",[e._v("Well you can take this to the nth degree if you need to, so I'm going to go up here to our StackPanel\n                    and I'm going to add in a label:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Content="{Binding Path=Customers[0].Orders[1].OrderItems[0].Product.Name}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-039")])]),e._v(" "),a("p",[e._v("and set the content of that label using a binding. That binding is going to be pointing to the\n                    DataContext, which is our Window, which exposes a Customers collection.\n                ")]),e._v(" "),a("p",[e._v("I can then index into that Customers collection and grab the first item, that's going to be a single\n                    Customer object. I can then dot into that Customer object, which has an Orders collection, and index\n                    into that to get the second order. That order has an OrderItems collection, I can dot down to that,\n                    I can index into that to get the first OrderItem.\n                ")]),e._v(" "),a("p",[e._v("That OrderItem has a Product property which is a complex object. I can dot down to that and dot down\n                    to the Name of that product and display the resulting value in my content.\n                ")]),e._v(" "),a("p",[e._v("Now I just need to make sure that my query loads up all those related objects, so I'll go into the\n                    code-behind and replace my line of code that's loading up Customers so that .Includes all the\n                    related collections and objects there.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' using (ZzaDbContext context = new ZzaDbContext())\n{\n    Customers = new ObservableCollection<Customer>(context.Customers\n                    .Include("Orders")\n                    .Include("Orders.OrderItems")\n                    .Include("Orders.OrderItems.Product"));\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 03-040")])]),e._v(" "),a("p",[e._v("With that in place, I can go ahead and run, and notice up here next to the Delete button we have Taj\n                    Mahal is the name of the product that is on the related objects there.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(279)}}),e._v(" "),a("figcaption",[e._v("Fig 03-041")])]),e._v(" "),a("p",[e._v("Now one other thing that's related to property paths that's important is debugging when binding goes\n                    wrong. If I have a typo in my path here, say I put an inadvertent x on the end of my\n                    DeleteSelectedCommand:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Delete"\n    Command="{Binding DeleteSelectedCommandx}"\n    CommandParameter="{Binding ElementName=customerDataGrid, Path=SelectedItem}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-042")])]),e._v(" "),a("p",[e._v("I go ahead and run, the app is not going to blow up, it's just going to start up and run, and then\n                    you'll wonder why, in this case, the Delete button is enabled and I'm clicking away on it and\n                    nothing's happening, and you'll kind of wonder what's going on there and wonder how to debug it.\n                ")]),e._v(" "),a("p",[e._v("The important thing is when you have that kind of thing going on you always want to look at your\n                    output window. If we go back up in our output window here, we'll see this entry that says,\n                    System.Windows.Data Error: BindingExpression path error:\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(280)}}),e._v(" "),a("img",{staticClass:"image",attrs:{src:n(281)}}),e._v(" "),a("figcaption",[e._v("Fig 03-043")])]),e._v(" "),a("p",[e._v("and it basically breaks it down for you and it says, this property was not found on this object,\n                    which is the DataContext object.")]),e._v(" "),a("p",[e._v("And if you scroll over some more it tells you the BindingExpression path equals this, the DataItem is\n                    that DataContext object, and then it even tells you the target element, the thing you were trying to\n                    set was the 'Button' 'Command' property.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(282)}}),e._v(" "),a("img",{staticClass:"image",attrs:{src:n(283)}}),e._v(" "),a("figcaption",[e._v("Fig 03-045")])]),e._v(" "),a("p",[e._v("So when you screw up a binding path, you always want to be looking for these System.Windows.Data\n                    Errors in your output window for debugging your bindings.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Binding Mode and Directionality")]),e._v(" "),a("p",[e._v("Now let's talk about directionality and the Mode property on bindings. Bindings can flow data in two\n                    directions. From the source to the target is the standard direction to populate data on the screen,\n                    but also from the target back down to the source if you're doing two-way data binding.\n                ")]),e._v(" "),a("p",[e._v("The default mode for a binding is really determined by the DependencyProperty that's the target of\n                    that binding. So when that DependencyProperty is declared, if it doesn't say anything, the default\n                    is going to be one-way. But through its PropertyMetadata it can indicate that it wants to be a\n                    two-way binding by default, such that the text property on a TextBox or any primary property that's\n                    an edit input on editable controls.\n                ")]),e._v(" "),a("p",[e._v("So in WPF, the primary properties of editable controls are set to two-way by default, but other\n                    read-only controls such as a label and other properties will be one-way be default. Just be aware if\n                    you're using other XAML technologies, the other XAML technologies don't do this, all properties are\n                    one-way be default, and you always have to set the Mode property to two-way if you mean it to be,\n                    but in WPF they make it a little easier.\n                ")]),e._v(" "),a("p",[e._v("The way you can influence this in your bindings is simply by setting a Mode property on the binding.\n                    It's got a number of values. One-way is the default. Two-way might be the default if it's an\n                    editable control. There's OneWayToSource, which is basically from the target to the source, but it\n                    never reads from the source to the target. And there's OneTime, which means it reads from the source\n                    to the target once, and then it forgets the binding exists, so any changes to the source won't be\n                    reflected, even if there's property Change Notifications and then the editing in the UI will not\n                    push any values down to the Source object.\n                ")]),e._v(" "),a("p",[e._v("There's also a value on the enumeration called Default, and that's basically saying, do whatever the\n                    target property wanted to do by default, which again, is going to be OneWay, in general, by default,\n                    but most editable properties on editable controls in WPF are set to TwoWay by default. So let's take\n                    a look at Binding Mode in a demo.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Binding Mode")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo we're going to cover the Binding Mode property and how it influences the direction of\n                    flow of data through a binding. The starting point for this demo is a simple little data app that\n                    has a data entry form for a Customer object here and it has this button to trigger a customer\n                    change.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(284)}}),e._v(" "),a("figcaption",[e._v("Fig 03-047")])]),e._v(" "),a("p",[e._v("If you watch the Name field when I click on that, it's going to go programmatically set the name of\n                    the Customer. Now the current structure of the code is we're setting the DataContext to the Window\n                    itself through a RelativeSource binding like we saw earlier in this module:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DataContext="{Binding RelativeSource={RelativeSource Self}}">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-048")])]),e._v(" "),a("p",[e._v("We've got the grid as a whole, bound to a Customer property exposed from the Windows code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid x:Name="grid1"\n    DataContext="{Binding Customer}"\n    VerticalAlignment="Top"\n    Margin="10,10,0,0"\n    HorizontalAlignment="Left">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-049")])]),e._v(" "),a("p",[e._v("and then the individual fields are just using DataContext bindings to point to the properties of that\n                    Customer object.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <TextBox x:Name="idTextBox"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Id}"\n    Grid.Row="0"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\n    Grid.Column="1" />\n<Label VerticalAlignment="Center"\n    Grid.Row="1"\n    Margin="3"\n    HorizontalAlignment="Left"\n    Grid.Column="0"\n    Content="Name:" />\n<TextBox x:Name="nameTextBox"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Path=Name}"\n    Grid.Row="1"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\n    Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-050")])]),e._v(" "),a("p",[e._v("Now by default, a binding has a Mode, and the Default Mode depends on the property that you're\n                    binding on the control itself. Data entry controls, such as TextBoxes, ComboBoxes, DatePickers, and\n                    so on, set the Default Mode for their primary Edit properties to be a TwoWay binding. That means\n                    that if I run here and we edit the field and tab out of it, we can see from this breakpoint that the\n                    set block on our Name property on the Customer object is being called.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string Name\n{\n    get\n    {\n        return _Name;\n    }\n    set\n    {\n        if (value != _Name)\n        {\n            _Name = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Name"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 03-051")])]),e._v(" "),a("p",[e._v("So the normal flow is from the Source object to the element with the binding, but if we edit it in\n                    the bound element, then that property is going to change and push the value down into the Source\n                    object in a TwoWay data binding fashion. And as long as that object supports Property Change\n                    Notifications, if it gets changed programmatically like with our button, it will update on the\n                    screen. That's your typical TwoWay data binding scenario.\n                ")]),e._v(" "),a("p",[e._v("Now we could modify the behavior here by going into our binding and setting the Mode property equal\n                    to one of the other values.")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="nameTextBox"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Path=Name}"\n    Grid.Row="1"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\n    Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-052")])]),e._v(" "),a("p",[e._v("I'll start with OneWay. If we explicitly set it to be a OneWay binding and we have that same\n                    breakpoint on our Customer object behind the scenes, I can modify that Name property and tab out of\n                    the field, but we never hit our breakpoint because it never pushed that value down into the Source\n                    object, because it's set to be a OneWay binding.\n                ")]),e._v(" "),a("p",[e._v("OneWay means from source to target, not the other way around. Now if we did want it to be the other\n                    way around for some reason, we can set the Mode to OneWayToSource. If we do OneWayToSource and start\n                    up, we can see that our form starts up in the field as blank, even though there is a value in the\n                    underlying Customer object for Name:\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(285)}}),e._v(" "),a("figcaption",[e._v("Fig 03-053")])]),e._v(" "),a("p",[e._v("it didn't read it because it's only got the one direction in the opposite direction that a binding\n                    normally works.")]),e._v(" "),a("p",[e._v("But if we change the value and tab out of the field, you can see that we called a set block on our\n                    bound object.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string Name\n{\n    get\n    {\n        return _Name;\n    }\n    set\n    {\n        if (value != _Name)\n        {\n            _Name = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Name"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 03-054")])]),e._v(" "),a("p",[e._v("Now that's a pretty rarely used value, generally you want OneWay or TwoWay, but that's an option if\n                    you have a specialized scenario.")]),e._v(" "),a("p",[e._v("Another option you have there is OneTime.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="nameTextBox"\n    Width="120"\n    VerticalAlignment="Center"\n    Text="{Binding Path=Name, Mode=OneTime}"\n    Grid.Row="1"\n    Margin="3"\n    Height="23"\n    HorizontalAlignment="Left"\n    Grid.Column="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-055")])]),e._v(" "),a("p",[e._v("OneTime means that it will do normal data binding from source to target one time, but if it changes\n                    behind the scenes, even if it's raising Change Notifications, notice if I click on the Trigger\n                    Customer Change here, under the covers we can see the property is being set, but the UI does not\n                    update because the mode of OneTime basically says, do data binding one time and then pretend that\n                    this binding is not even there, and changes to the field itself will not trigger any change to the\n                    underlying Source object. It's as if the binding evaporates after it does the initial read of the\n                    value from the Source object.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Defining Default Binding Mode")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\before\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex04-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 4\\after\\BindingProperties\\BindingProperties.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now, in this demo, I want to show you how the Default mode really works based on the property that\n                    you're binding. When controls are created and their properties are defined as DependencyProperties\n                    that can be bound to:\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(286)}}),e._v(" "),a("figcaption",[e._v("Fig 03-056")])]),e._v(" "),a("p",[e._v("By default, binding will only be supported one way, but there's a property you can set on the\n                    DependencyProperty itself to make it so it will be a TwoWay binding by default.\n                ")]),e._v(" "),a("p",[e._v("To show this, I'm going to create a custom control, just a simple User Control, and we'll call it\n                    MyCustomControl. For the content of that CustomControl, I'm just going to put a rectangle with a\n                    fill of gray by default and give it a name of \"TheContent\":\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl x:Class="BindingProperties.MyCustomControl"\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             mc:Ignorable="d"\n             d:DesignHeight="300" d:DesignWidth="300">\n    <Rectangle x:Name="TheContent" Fill="Gray"></Rectangle>\n</UserControl>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-057")])]),e._v(" "),a("p",[e._v("Then I'm going to drop into the code-behind of that control and define a DependencyProperty:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public MyCustomControl()\n{\n    InitializeComponent();\n    TheContent.MouseDown += ChangeIt;\n}\n\npublic Brush MyBackground\n{\n    get { return (Brush)GetValue(MyBackgroundProperty); }\n    set { SetValue(MyBackgroundProperty, value); }\n}\n\npublic static readonly DependencyProperty MyBackgroundProperty =\n    DependencyProperty.Register("MyBackground", typeof(Brush),\n    typeof(MyCustomControl),\n    new FrameworkPropertyMetadata(new SolidColorBrush(Colors.Gray),\n        FrameworkPropertyMetadataOptions.BindsTwoWayByDefault,\n        OnBrushChanged));\n\nprivate static void OnBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n    ((MyCustomControl)d).TheContent.Fill = e.NewValue as Brush;\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 03-058")])]),e._v(" "),a("p",[e._v("So this DependencyProperty is going to be of type Brush called MyBackground, and what's different\n                    about the declaration of this DependencyProperty, is notice this down here.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public static readonly DependencyProperty MyBackgroundProperty =\n    DependencyProperty.Register("MyBackground", typeof(Brush),\n    typeof(MyCustomControl),\n    new FrameworkPropertyMetadata(new SolidColorBrush(Colors.Gray),\n        FrameworkPropertyMetadataOptions.BindsTwoWayByDefault,\n        OnBrushChanged));')])]),e._v(" "),a("figcaption",[e._v("Fig 03-059")])]),e._v(" "),a("p",[e._v("With the default code snippet, it's going to define just a PropertyMetadata object here and allow you\n                    to set the default and possibly hook up a Change handler.\n                ")]),e._v(" "),a("p",[e._v("If you change that to be a FrameworkPropertyMetadata, you can still set a default value, which you\n                    can see I'm setting to gray here, but you have this FrameworkPropertyMetadataOptions, and you see\n                    that there's an option to say BindsTwoWayByDefault. Then I also hook up a Change handler here ("),a("span",{staticClass:"code"},[e._v("OnBrushChanged")]),e._v("):\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private static void OnBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n    ((MyCustomControl)d).TheContent.Fill = e.NewValue as Brush;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-060")])]),e._v(" "),a("p",[e._v("so that whenever my background gets set I'm going to go set the Fill property of the rectangle that's\n                    my content.")]),e._v(" "),a("p",[e._v("Im also going to drop into the contstructor of my Custom Control here and add an EventHandler for the\n                    MouseDown event on my rectangle that's my content.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MyCustomControl()\n{\n    InitializeComponent();\n    TheContent.MouseDown += ChangeIt;\n}\n\nvoid ChangeIt(object sender, MouseButtonEventArgs e)\n{\n    MyBackground = new SolidColorBrush(Colors.Red);\n}\n\npublic Brush MyBackground\n{\n    get { return (Brush)GetValue(MyBackgroundProperty); }\n    set { SetValue(MyBackgroundProperty, value); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-061")])]),e._v(" "),a("p",[e._v("And what I'm going to do when I get that click on is I am going to explicitly set the MyBackground\n                    property to red so that we can see that that change actually occurred.\n                ")]),e._v(" "),a("p",[e._v("So I'm going to go out here to my MainWindow now and drop into the XAML and add an instance of our\n                    CustomControl:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<local:MyCustomControl MyBackground="{Binding TheBrush}"\n    HorizontalAlignment="Left"\n    Height="74"\n    Margin="292,57,0,0"\n    VerticalAlignment="Top"\n    Width="105" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-062")])]),e._v(" "),a("p",[e._v("Notice that I'm setting the MyBackground property to a Brush returned from the current DataContext\n                    called TheBrush. So I need to go declare that in the code-behind in my MainWindow that is my\n                    DataContext.\n                ")]),e._v(" "),a("p",[e._v("So I add this DependencyProperty called TheBrush to my code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' public Brush TheBrush\n{\n    get { return (Brush)GetValue(TheBrushProperty); }\n    set { SetValue(TheBrushProperty, value); }\n}\n\npublic static readonly DependencyProperty TheBrushProperty =\n    DependencyProperty.Register("TheBrush", typeof(Brush), typeof(MainWindow),\n    new PropertyMetadata(null, OnTheBrushChanged));\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 03-063")])]),e._v(" "),a("p",[e._v("And it's just a standard DependencyProperty with a Change handler that's hooked up here so we can set\n                    a breakpoint and tell when the binding has actually set that value for us:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private static void OnTheBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-064")])]),e._v(" "),a("p",[e._v("And then I'm just going to go into my constructor and set an initial value for my Property of\n                    Chartreuse.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public MainWindow()\n{\n    InitializeComponent();\n    TheBrush = new SolidColorBrush(Colors.Chartreuse);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-065")])]),e._v(" "),a("p",[e._v("So with that in place, if I go ahead and run, we can see it starts up with our chartreuse\n                    rectangle:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(287)}}),e._v(" "),a("figcaption",[e._v("Fig 03-066")])]),e._v(" "),a("p",[e._v("Remember that I have a MouseDown handler inside the CustomControl that's going to set the\n                    MyBackgroundProperty. That's equivalent to something like a TextBox setting the Text property when I\n                    do data input on the control here.\n                ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(288)}}),e._v(" "),a("figcaption",[e._v("Fig 03-067")])]),e._v(" "),a("p",[e._v("And we want to see that that value flows to the Source object because the data binding is TwoWay. So\n                    when I click on this, we can see that our breakpoint is being hit in our Change handler for TheBrush\n                    property and our DataContext:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private static void OnTheBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-068")])]),e._v(" "),a("p",[e._v("So the TwoWay data binding has worked out for us and is passing that value in.")]),e._v(" "),a("p",[e._v("So the default mode for a binding is basically going to be OneWay unless the DependencyProperty that\n                    you're binding to has gone and set its default to be TwoWay with this\n                    FrameworkPropertyMetadataOptions.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("Okay, to wrap up this module, we covered a number of things. First off, we reviewed the fact that the\n                    default source for a binding is always the DataContext and for the vast majority of data binding\n                    scenarios, you're going to use the DataContext as your Source object, but there's specialized\n                    scenarios where you need more control and so we looked at the RelativeSource binding as one way to\n                    do that where you can reference other elements in the visual tree through a relative path within the\n                    tree.\n                ")]),e._v(" "),a("p",[e._v("You use the RelativeSource markup extension and the property on the binding, you can use the Self\n                    mode to point to the same element that the binding is on, or you can use the AncestorType to point\n                    to a parent element somewhere up the tree looking for a match based on the type of that element.\n                ")]),e._v(" "),a("p",[e._v("The elementName binding is another way to get an explicit Source object for your binding by pointing\n                    to some other element within the visual tree that has a name on it and that doesn't necessarily have\n                    to be an explicit ancestor of the element that you're on.\n                ")]),e._v(" "),a("p",[e._v("Then we looked at the Source binding and the Source binding allows you to explicitly point to some\n                    object that you have to place within a Resource dictionary and then get to it through a\n                    StaticResource or DynamicResource markup extension that points to that object, then that can become\n                    the Source object for your binding.\n                ")]),e._v(" "),a("p",[e._v("Next we looked at Property Paths in a little more detail and we saw that there's a number of forms it\n                    can take on. You can have a simple property name on the Source object, you can have a dot, which\n                    means the whole Source object, you can exclude the Path, which means the same as the dot, or you can\n                    have a complex path that starts with the property name on the Source object, but then dots down\n                    through an object hierarchy, even indexing into arrays as part of that path syntax.\n                ")]),e._v(" "),a("p",[e._v("We covered the directionality of bindings, the fact that they are one-way by default where the data\n                    flows from the source to the target at initial binding time, and when property Change Notifications\n                    occurs, but you can use two-way bindings either explicitly by setting the Mode property or if you're\n                    on an edit control, with the primary edit property such as Text on a TextBox. Those properties can\n                    be declared to be two-way by default, and the way you do that default declaration is through the\n                    metadata of the DependencyProperty that's going to end up being the target property on the element,\n                    and we saw how you can declare that yourself if you're writing a CustomControl with properties that\n                    you expect people to bind to.\n                ")])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h4",[e._v("MVVM Pattern Fundamentals")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-01-mvvm-pattern-fundamentals","active-class":"active"}},[n("a",[e._v("MVVM Pattern Fundamentals")])]),e._v(" "),n("p",[e._v("\n                    This module starts by explaining seperation of concerns and how MVVM helps you structure your code to achieve this. It then moves on to\n                    briefly discuss other UI Seperation patterns such as MVP and MVC. The next sections cover the responsibilities of the Model, View,\n                    ViewModel and Client Services components.\n                ")]),e._v(" "),n("p",[e._v("\n                    The final part of this model discusses the Equation of MVVM: View.DataContext = ViewModel and the order in which the various\n                    components get constructed.\n                ")]),e._v(" "),n("h4",[e._v("First Taste of MVVM")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-02-first-taste-of-mvvm","active-class":"active"}},[n("a",[e._v("First Taste Of MVVM")])]),e._v(" "),n("p",[e._v("Welcome back to the second module of WPF MVVM in Depth. In this module I want to give you a quick\n                    exposure or taste of how using MVVM changes some coding patterns for a simple input screen in WPF\n                    application that you may already be used to.\n                ")]),e._v(" "),n("p",[e._v("I'll do this by stepping through three variants of the same simple application in demos.")]),e._v(" "),e._m(1),e._v(" "),n("h4",[e._v("Hooking up Views and ViewModels in MVVM")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-03-hooking-up-views-and-viewmodels-in-mvvm","active-class":"active"}},[n("a",[e._v("Hooking up Views and ViewModels in MVVM")])]),e._v(" "),n("p",[e._v("\n                    In this module we will cover different ways that Views can be hooked up to ViewModels. We will also cover how databinding is used to expose\n                    data from your Data Models to your Views. We will start with View-First Construction Patterns where the View is constructed first and then\n                    takes care of constructing and hooking up its own ViewModel.\n                ")]),e._v(" "),n("p",[e._v("Next we will cover Data Binding to make it clear how MVVM relies on data binding and uses it to flow data between the View and the\n                    ViewModel.\n                ")]),e._v(" "),n("p",[e._v("\n                    Finally, we will cover ViewModel-First approach where Data Templates are used to create the View based on an instance of a ViewModel being\n                    placed into a data binding context.\n                ")]),e._v(" "),n("h4",[e._v("View/ViewModel Communication in WPF")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-04-view-viewmodel-communication-in-wpf","active-class":"active"}},[n("a",[e._v("View/ViewModel Communication in WPF")])]),e._v(" "),n("p",[e._v("\n                    In this module, we will cover View/ViewModel communication in WPF. We will look at how to cleanly call logic that is implemented in the\n                    ViewModel when something happens in the View as well as letting the View know when something happens behind the scenes in your ViewModel,\n                    Model Objects or Client Services.\n                ")]),e._v(" "),n("p",[e._v("\n                    In the second module you saw a quick example of using a Command to invoke some logic in the ViewModel. In this module we will look at how\n                    things get hooked up, and what happens under the covers during that hook-up. In addition, we will see how to use Command Enabling and\n                    Keyboard Shortcuts.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we will look at Attached Properties and Behaviors covering what the relationship between them is, what their general capabilities are\n                    and how to use them in the context of MVVM as another means of setting up communication paths between the View elements and View Model logic\n                    or vice a versa.\n                ")]),e._v(" "),n("p",[e._v("\n                    We will finish the module with a review of how Property Change Notifications work with Data Binding in WPF and show how they can be used as\n                    a signalling mechanism from the ViewModel to make things happen in the View at the appropriate time.\n                ")]),e._v(" "),n("h4",[e._v("Applied MVVM Part 1 - Hierarchies and Navigation")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-05-applied-mvvm-part-1-hierarchies-and-navigation","active-class":"active"}},[n("a",[e._v("Applied MVVM Part 1 - Hierarchies and Navigation")])]),e._v(" "),n("p",[e._v("\n                    We will now start building out a few more fully functional use cases from start to finish. In doing so we will hit on a number of other\n                    design considerations and things you will need to know how to tackle when using the MVVM pattern. We will start with a few concepts first\n                    including:\n                ")]),e._v(" "),e._m(2),e._v(" "),n("h4",[e._v("Applied MVVM Part 2 - Validation and Dependency Injection")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-mvvm-in-depth-06-applied-mvvm-part-2-validation-and-dependency-injection","active-class":"active"}},[n("a",[e._v("Applied MVVM Part 2 - Validation and Dependency Injection")])]),e._v(" "),n("p",[e._v("\n                    In this final module we continue to build out use cases surrounding Customers in our Pizza Order Management Application. This will include\n                    fleshing out some data entry for adding and editing Customers by leveraging the Scaffolding of data-centric Views that is available in\n                    Visual Studio. We also look at validation in the context of MVVM.\n                ")]),e._v(" "),n("p",[e._v("\n                    When ViewModels take dependencies on client services you will want to make sure those dependencies are loosely coupled. We will cover\n                    dependency injection.\n                ")]),e._v(" "),n("p",[e._v("Finally, we will cover some of the toolkits and frameworks that can assist when writing applications that adhere to the MVVM pattern.")])],1)])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Course Outline")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("The first will have no MVVM nor data binding in it.")]),e._v(" "),n("li",[e._v("The second will at least leverage data binding but have no MVVM.")]),e._v(" "),n("li",[e._v("The third will evolve into showing the same view with MVVM and a quick look at some of the\n                        communication between View and ViewModel that we'll get into in more detail later in the course.\n                    ")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("Naming and Location of Components")]),e._v(" "),n("li",[e._v("Hierarchical MVVM/Navigation")]),e._v(" "),n("li",[e._v("MVVM App Building")])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("An Introduction to Vue")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("How to Get Help")]),e._v(" "),a("p",[e._v("In this section Stephen Grider discusses the best ways of contacting him if you get stuck during\n                        the course:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("The course discussion "),a("a",{attrs:{href:"https://www.udemy.com/vue-js-course/learn/v4/questions/4408150"}},[e._v(" board")]),e._v(" is\n                            usually checked once a day Monday through Friday.\n                        ")]),e._v(" "),a("li",[e._v("The second, and probably most effective, option is to contact Stephen via a direct "),a("a",{attrs:{href:"https://www.udemy.com/user/sgslo/"}},[e._v(" message")]),e._v(" on Udemy.\n                        ")]),e._v(" "),a("li",[e._v("Lastly Stephen invites you to Tweet him at "),a("a",{attrs:{href:"http://twitter.com/home?status=Message@ste_grider"}},[e._v("@ste_grider")])])]),e._v(" "),a("h3",[e._v("Our First Vue App")]),e._v(" "),a("p",[e._v("In this section Stephen supplies a link to a "),a("a",{attrs:{target:"_blank",href:"http://goo.gl/NrtSgX"}},[e._v("Codepen")]),e._v("\n                        example which demonstrates the power of Vue.\n                    ")]),e._v(" "),a("p",[e._v("Codepen is similar to many of the other (JSFiddle etc.) prototyping tools out there. We add HTML,\n                        CSS and JS code to the relevant windows and the result is shown in the output window.\n                    ")]),e._v(" "),a("p",[e._v("The Codepen example already includes a small amount of JavaScript that Stephen has authored to\n                        save a bit of time.\n                    ")]),e._v(" "),a("p",[e._v("Add the following code to the HTML tab:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div id="root" @mousemove="onMouseMove">\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 01-001")])]),e._v(" "),a("p",[e._v("Note the @ symbol prefixing the mousemove attribute, the fact that the mousemove attribute is not\n                        capitalized and that we are using double quotes around the word onMouseMove.\n                    ")]),e._v(" "),a("p",[e._v("Add two additional child divs. On the first div add a :style option setting the value to\n                        styleOne. Do the same for the second div but specify a style of styleTwo instead:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div id="root" @mousemove="onMouseMove">\n  <div :style="styleOne"></div>\n  <div :style="styleTwo"></div>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 01-002")])]),e._v(" "),a("p",[e._v("That's all the HTML we will need. Open the JS tab and declare a brand new Vue application passing\n                        it an empty object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-003")])]),e._v(" "),a("p",[e._v("Next we will add in some configuration to the object.")]),e._v(" "),a("p",[e._v("First we will add the el property which specifies where the application should attempt to render\n                        itself inside of our HTML structure:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el: '#root',\n\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-004")])]),e._v(" "),a("p",[e._v("Next we will initialize the data property of our application (we will talk a lot about data in\n                        future modules):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el: '#root',\n  data: { styleOne: {}, styleTwo: {} },\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-005")])]),e._v(" "),a("p",[e._v("data is an object that contains two empty objects - styleOne and styleTwo.")]),e._v(" "),a("p",[e._v("Next add the methods option:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el: '#root',\n  data: { styleOne: {}, styleTwo: {} },\n  methods: {\n    onMouseMove(event) {\n\n    }\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-005")])]),e._v(" "),a("p",[e._v("methods is also an empty object that is going to have one function tied to it called onMouseMove\n                        which will be called with some event.\n                    ")]),e._v(" "),a("p",[e._v("Inside the function body add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el: '#root',\n  data: { styleOne: {}, styleTwo: {} },\n  methods: {\n    onMouseMove(event) {\n      this.styleOne = transform(-event.clientX / event.clientY);\n      this.styleTwo = transform(event.clientX / event.clientY);\n    }\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-006")])]),e._v(" "),a("p",[e._v("Make sure you have the X and Y capitalized inside these statements.")]),e._v(" "),a("p",[e._v("In the CSS tab add the following styling:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("#root {\n  height: 100vh;\n  width: 100vw;\n}\n\n#root div {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  box-shadow: 0 0 50px grey;\n}")]),e._v(" "),a("figcaption",[e._v("Fig 01-007")])]),e._v(" "),a("p",[e._v("Finally in Codepen click the Assets button and from the Patterns tab select a the wavy lines\n                        pattern (which will copy it to the clipboard). Back in the CSS tab paste the clipboard in after\n                        the box-shadow declaration:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('#root {\n  height: 100vh;\n  width: 100vw;\n}\n\n#root div {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  box-shadow: 0 0 50px grey;\n  background-image: url(\'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="100" height="18" viewBox="0 0 100 18"%3E%3Cpath fill="%239C92AC" fill-opacity="0.4" d="M61.82 18c3.47-1.45 6.86-3.78 11.3-7.34C78 6.76 80.34 5.1 83.87 3.42 88.56 1.16 93.75 0 100 0v6.16C98.76 6.05 97.43 6 96 6c-9.59 0-14.23 2.23-23.13 9.34-1.28 1.03-2.39 1.9-3.4 2.66h-7.65zm-23.64 0H22.52c-1-.76-2.1-1.63-3.4-2.66C11.57 9.3 7.08 6.78 0 6.16V0c6.25 0 11.44 1.16 16.14 3.42 3.53 1.7 5.87 3.35 10.73 7.24 4.45 3.56 7.84 5.9 11.31 7.34zM61.82 0h7.66a39.57 39.57 0 0 1-7.34 4.58C57.44 6.84 52.25 8 46 8S34.56 6.84 29.86 4.58A39.57 39.57 0 0 1 22.52 0h15.66C41.65 1.44 45.21 2 50 2c4.8 0 8.35-.56 11.82-2z"%3E%3C/path%3E%3C/svg%3E\');\n}')]),e._v(" "),a("figcaption",[e._v("Fig 01-008")])]),e._v(" "),a("p",[e._v("Now run the application and you will see an interesting visualization. This demonstrates the\n                        power of Vue - just a small amount of code can produce impressive results.\n                    ")]),e._v(" "),a("h3",[e._v("App Overview")]),e._v(" "),a("p",[e._v("In the last section we worked on a little Codepen visualization tool. We are not going to go\n                        through the code we wrote for this example. Instead we are going to create another little\n                        Codepen application that will give you a better idea of the structure of a Vue application.\n                    ")]),e._v(" "),a("p",[e._v("The application we are going to build is an Identicon generator:")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(111)}}),e._v(" "),a("figcaption",[e._v("Fig 01-009")])]),e._v(" "),a("p",[e._v("The user will enter a small amount of text into the input box. We are going to take that text and\n                        use it to create what is called an Identicon - which is short for Identifying Icon. An Identicon\n                        is a colourful image often used when a user doesn't supply their own image. The Identicon\n                        graphic is based around the input string. Therefore if you enter the same input string twice the\n                        two images will be identical.\n                    ")]),e._v(" "),a("p",[e._v("We are going to use a library that actually creates the Identicon but we will need to concern\n                        ourselves with - how we take in user input and how we call functions.\n                    ")]),e._v(" "),a("h3",[e._v("A Codepen Starter")]),e._v(" "),a("p",[e._v("We will start working on this application by creating a new Codepen instance. The starter\n                        template can be found at the following address:\n                    ")]),e._v(" "),a("a",{attrs:{target:"_blank",href:"http://goo.gl/4TG4Bq"}},[e._v("Codepen Identicon Example")]),e._v(" "),a("p",[e._v("There is a tiny amount of configuration that has already been performed for us in this template.\n                        You can see this by clicking on the gear in the JS panel which will open the Pen Settings window\n                        with the JavaScript tab pre-selected:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(112)}}),e._v(" "),a("figcaption",[e._v("Fig 01-010")])]),e._v(" "),a("p",[e._v("Towards the bottom of the window you will see a link to the jdenticon.min.js library which we\n                        will use to create the Identicon. There is also a link to the vue.min.js library.\n                    ")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Vue Templates and Instances")]),e._v(" "),a("p",[e._v("In order for our application to work we will need:")]),e._v(" "),a("ul",[a("li",[e._v("Some starting text and form input on the screen.")]),e._v(" "),a("li",[e._v("Something to happen when a user types in the input.")])]),e._v(" "),a("p",[e._v("Any time a user enters text into the Input text field we want to run some JavaScript code that\n                        will create the Identicon image itself and then somehow output that to the screen as well.\n                    ")]),e._v(" "),a("p",[e._v("So we have just described two aspects of our application.")]),e._v(" "),a("p",[e._v("On the one hand we have the aspect of somehow rendering or getting content to appear on the\n                        screen.\n                    ")]),e._v(" "),a("p",[e._v("On the other hand, in the second list item, we are talking about somehow interacting with user\n                        input.\n                    ")]),e._v(" "),a("p",[e._v("In the Vue.js world we map up these two different tasks to two different elements or two\n                        different parts of a Vue application\n                    ")]),e._v(" "),a("p",[e._v("The first part describes the content and structure that appears on the screen. That task is\n                        handled by creating what is called a Vue template. So we create new templates to show\n                        information to users. Vue Templates are created in HTML in our application.\n                    ")]),e._v(" "),a("p",[e._v("The second part - handling user input is going to be covered by creating what is called a Vue\n                        instance. A Vue instance is created by writing out some amount of Javascript code. The Vue\n                        instance is responsible for actually dealing with user input. So, in this example, anytime the\n                        user types some text into the input field the Vue instance will take the entered text and\n                        generate an Identicon out of it, and then pass the identicon back to the template which will\n                        then present it to the user on the screen.\n                    ")]),e._v(" "),a("p",[e._v("This scenario describes just one possible way of many of structuring a Vue application. An\n                        example of a different configuration would consist of the Vue Template being created in the\n                        Javascript instead of the Html.\n                    ")]),e._v(" "),a("h3",[e._v("Creating the Template")]),e._v(" "),a("p",[e._v("In the last section we spoke about the differences between a Vue template and a Vue Instance. We\n                        are now going to get started on creating our Vue Template - the presentation layer for our\n                        application. For the first iteration of our template we are going to write essentially just\n                        plain Html.\n                    ")]),e._v(" "),a("p",[e._v("In Codepen add the following Html:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<div>\n  <h3>My Identicon Generator</h3>\n  <div>\n    Input:\n    <input />\n\n  </div>\n  <div>\n    Output:\n  </div>\n</div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-011")])]),e._v(" "),a("p",[e._v("This is our first Vue template (we will re-visit this Html later and add some more additional\n                        syntax that will make it clear that we are not working with plain Html here - but a Vue\n                        template).\n                    ")]),e._v(" "),a("h3",[e._v("Linking Templates and Instances")]),e._v(" "),a("p",[e._v("In the last section we created our Vue template on the Html side of our application. We are now\n                        going to define our Vue instance in the Javascript part of our application. In the JS Panel in\n                        Codepen add the following code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-012")])]),e._v(" "),a("p",[e._v("Inside of the object defined by the curly braces we are going to add in a bunch of different\n                        properties over time. All these different properties are going to serve to customize how this\n                        Vue instance behaves. The Vue instance and the properties contained within are where a lot of\n                        the complexity of Vue itself comes into play. Understanding these properties and using them\n                        correctly is what will make you a professional Vue engineer.\n                    ")]),e._v(" "),a("p",[e._v("The first property that we are going to make use of is the el property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-013")])]),e._v(" "),a("p",[e._v('el is short for the word element. The el property ties one Vue instance to one Vue template that\n                        has been defined in our application. To achieve this add an id attribute to the root div in your\n                        Vue template with a value of "app":\n                    ')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div id="app">\n  <h3>My Identicon Generator</h3>\n  <div>\n    Input:\n    <input />\n\n  </div>\n  <div>\n    Output:\n  </div>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 01-014")])]),e._v(" "),a("p",[e._v("Now update the Vue instance's el: property to point to this div using the id:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:  '#app'\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-015")])]),e._v(" "),a("p",[e._v("The #app we supplied provides a DOM Query selector to our instance that tell's it exactly where\n                        it's template exists inside the DOM. This is what really links together the Javascript and Html\n                        sides of our application.\n                    ")]),e._v(" "),a("h3",[e._v("Step by Step Implementation")]),e._v(" "),a("p",[e._v("In the last section we defined our Vue instance and then provided an el property that told our\n                        Vue instance what area of the DOM it was responsible for.\n                    ")]),e._v(" "),a("p",[e._v("We will see change inside of our Html template only as we start to add code to our Vue instance.\n                    ")]),e._v(" "),a("p",[e._v("The steps that are going to occur inside of our application are as follows:")]),e._v(" "),a("ul",[a("li",[e._v("Detect that the user has entered some new text.")]),e._v(" "),a("li",[e._v("Get the text the user entered.")]),e._v(" "),a("li",[e._v("Use that text to generate a new identicon.")]),e._v(" "),a("li",[e._v("Show the identicon next to 'output'")])]),e._v(" "),a("p",[e._v("One detail worth highlighting is that we want to update the identicon displayed as the user\n                        enters each character into the text input. We are not going to wait for the user to type the\n                        whole string and then press enter. It is with every single key press that we are going to\n                        generate a new identicon.\n                    ")]),e._v(" "),a("p",[e._v("Once we get the text the user entered we can use it to generate the new Identicon itself (at\n                        which point we will use the Identicon library).\n                    ")]),e._v(" "),a("p",[e._v("Finally we output the Identicon to the screen next to the Output section.")]),e._v(" "),a("p",[e._v("The four steps above may seem very obvious. However the reason we did this is that for everyone\n                        of the above steps Vue has a different feature built-in to help you implement each step (this\n                        will help you learn about different pieces of the Vue api)\n                    ")]),e._v(" "),a("h3",[e._v("Defining Instance Methods")]),e._v(" "),a("p",[e._v("In the last section we spoke about the four different steps we are going to implement to get our\n                        application working. In this section we are going to start off with step number one - detecting\n                        when the user enter some new text and responding by running some custom Javascript code.\n                    ")]),e._v(" "),a("p",[e._v("So we will focus on this first step inside this section. To implement this step we are going to\n                        add a method to the Vue instance. That method will get called anytime the user enters some new\n                        text.\n                    ")]),e._v(" "),a("p",[e._v("What is a method? A method is a function that is going to be tied to our View instance. That\n                        function can then be called at any point in time to somehow implement or update our user\n                        interface.\n                    ")]),e._v(" "),a("p",[e._v("Let's first begin by implementing the method and then we'll figure out how to call it any time a\n                        user enters some text. First the method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:  '#app',\n  methods: {\n\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-016")])]),e._v(" "),a("p",[e._v("Methods is going to have an object tied to it. Right now there's just one method we care about\n                        which is the method that's going to be called anytime a user enters some text into the input\n                        field. But over time if we had a more complicated template with more text inputs or more buttons\n                        of just more ways of interacting with it we might end up having many different methods defined\n                        inside the subject.\n                    ")]),e._v(" "),a("p",[e._v("So let's begin by implementing this method that's going to be called anytime a user enters some\n                        text.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:  '#app',\n  methods: {\n    onInput: function() {\n      console.log('Someone typed something');\n    }\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-017")])]),e._v(" "),a("p",[e._v("It is not mandatory for the function name to be onInput, it just makes it clear that this\n                        function will be called anytime the user enters some text. Inside the function we write a\n                        message to the console. View the console in Chrome. When you type in the input text field you\n                        will note that you don't see anything written to the console.\n                    ")]),e._v(" "),a("p",[e._v("This is because even though we've defined a method called onInput we have not instructed our view\n                        instance or our view template that we want our method to be called when a user enters text into\n                        the input.\n                    ")]),e._v(" "),a("h3",[e._v("Defining Vue Directives")]),e._v(" "),a("p",[e._v("In the last section we defined our first method inside the methods object inside our Vue\n                        instance. We defined a function called onInput that hopefully will be executed anytime a user\n                        enters some text into the input.\n                    ")]),e._v(" "),a("p",[e._v("We will add a vue directive to the input field to hook it up to our onInput method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<input v-on:input="onInput" />')]),e._v(" "),a("figcaption",[e._v("Fig 01-018")])]),e._v(" "),a("p",[e._v("If we now enter some text into the input we see messages in the console.")]),e._v(" "),a("p",[e._v("The above code is an example of a Vue directive. A directive is a piece of template syntax inside\n                        a view that somehow enhances the behavior of otherwise normal HTML code.\n                    ")]),e._v(" "),a("p",[e._v('So behind the scenes when our instance first boots up it looks at the el: property and, as we\n                        said previously, it tries to find some element inside the DOM with an id of app - in this\n                        example it finds the root div with an id of "app" and it scans over all of the Html contained in\n                        the div looking for any directives like the one we just added.\n                    ')]),e._v(" "),a("p",[e._v("When it finds a directive it performs a couple of additional steps to parse the directive and\n                        figure out how to correctly process it. In our case we have to find a directive that sets up an\n                        event handler.\n                    ")]),e._v(" "),a("p",[e._v("The left hand-side of the Vue directive in this statement:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v(' <input v-on:input="onInput" />')]),e._v(" "),a("figcaption",[e._v("Fig 01-019")])]),e._v(" "),a("p",[e._v("v-on means we are trying to define an event handler. We then place a colon and then the name of\n                        the event that we want to watch for - in this case input. So any time a user enters input into\n                        this input tag Vue is going to attempt to do something for us. The thing that it actually does\n                        is defined to the right of the equals sign - in our case we call the onInput method.\n                    ")]),e._v(" "),a("p",[e._v("The event handler directive is one of the more straightforward Vue directives but over time we\n                        will start to see some more complicated directives.\n                    ")]),e._v(" "),a("h3",[e._v("Retrieving Event Information")]),e._v(" "),a("p",[e._v("In the last section we used a Vue directive to tie any event that occurred to our text input to\n                        the onInput method that we defined inside of our Vue instance.\n                    ")]),e._v(" "),a("p",[e._v("Like I said previously Vue directives are one of the more complicated parts of Vue - which is\n                        why, many time throughout this course, we are going to review how they work.\n                    ")]),e._v(" "),a("p",[e._v("Now we have the ability to run a function anytime the user types in this input we need to move to\n                        our next step which is to somehow get the text that the user entered.\n                    ")]),e._v(" "),a("p",[e._v("To do this we are going to use our on input function. The onInput function gets called with a\n                        single argument that we usually refer to as the event object. This is an object that contains a\n                        bunch of different information about the event that just occurred - in our case an input event.\n                        The event object has the actual text that the user entered so we can make use of that argument\n                        to figure out exactly what text the user typed.\n                    ")]),e._v(" "),a("p",[e._v("Inside the methods object in the Vue instance find the onInput function and reference the single\n                        argument that is provided to it - like I just said we usually refer to this as the event object.\n                        The event object has a property called target.value and that will be a reference to the text\n                        that the user entered. For the moment let's just write that value to the console:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:  '#app',\n  methods: {\n    onInput: function() {\n      console.log(event.target.value);\n    }\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-020")])]),e._v(" "),a("p",[e._v("event is a reference to the event that just occurred, target is a reference to the Html element\n                        that just had the event applied to it and then value is a reference to the current value of that\n                        text input.\n                    ")]),e._v(" "),a("p",[e._v("So if you now enter some text into the input field you should see it appearing over in the\n                        console.\n                    ")]),e._v(" "),a("h3",[e._v("Imperative vs Declarative Programming")]),e._v(" "),a("p",[e._v("In the previous section we figured out how to use the event object to get access to the text that\n                        the user entered into our text input. Next, instead of moving onto step 3 - Use that text to\n                        generate a new identicon, we are going to take a slight detour.\n                    ")]),e._v(" "),a("p",[e._v("We are going to get a better idea of how to structure and build Vue applications.")]),e._v(" "),a("p",[e._v("We are going to discuss the difference between declarative and imperative programming styles\n                        especially as applied to Vue applications in the world of web development.\n                    ")]),e._v(" "),a("p",[e._v("In the world of web development from say maybe 2005 all the to 2013 or so we practiced a\n                        programming style referred to as imperative programming. With imperative programming we write\n                        out code that lists exactly what our application should do step by step.\n                    ")]),e._v(" "),a("p",[e._v("So our code follows a pattern very similar to the list we described earlier:")]),e._v(" "),a("ul",[a("li",[e._v("Detect that the user has entered some new text.")]),e._v(" "),a("li",[e._v("Get the text the user entered.")]),e._v(" "),a("li",[e._v("Use that text to generate a new identicon.")]),e._v(" "),a("li",[e._v("Show the identicon next to 'output'")])]),e._v(" "),a("p",[e._v("This is an example of an imperative design flow where we list out exactly what to do step by\n                        step.\n                    ")]),e._v(" "),a("p",[e._v("By contrast in the world of declarative programming we instead list out some rules that our\n                        application should follow. We then provide what we refer to as some initial state to our\n                        application and we let those rules kind of define how our application behaves.\n                    ")]),e._v(" "),a("p",[e._v("Now these very quick descriptions I'm giving you probably don't make a lot of sense so let's walk\n                        through the differences between imperative and declarative programming by walking through a\n                        little analogy.\n                    ")]),e._v(" "),a("p",[e._v("OK so I want you to imagine for just a second that maybe you and I are not building software\n                        anymore. Maybe instead you and I bake cakes for a living. So we go into work every single day\n                        and we have to bake a cake. Now unfortunately you and I maybe very poor cooks and we don't\n                        really know how to bake a cake so our boss sits down and gives us a list of directions -\n                        essentially a recipe.\n                    ")]),e._v(" "),a("p",[e._v("So we have one recipe written in an imperative style:")]),e._v(" "),a("ul",[a("li",[e._v("Mix 1 cup flour and 1 cup sugar in a bowl.")]),e._v(" "),a("li",[e._v("Add 1 egg to the bowl and mix thoroughly.")]),e._v(" "),a("li",[e._v("Pour mixture into a pan.")]),e._v(" "),a("li",[e._v("Put the pan into the oven for 30 minutes at 350F.")])]),e._v(" "),a("p",[e._v("And then we have the same recipe written in a declarative style:")]),e._v(" "),a("ul",[a("li",[e._v("1 egg, 1 cup flour, 1 cup sugar")]),e._v(" "),a("li",[e._v("If ingredients have been mixxed, put them in a pan")]),e._v(" "),a("li",[e._v("If ingredients are unmixed, mix them in a bowl")]),e._v(" "),a("li",[e._v("If ingredients are in a pan, put in oven for 30 mins at 350F")])]),e._v(" "),a("p",[e._v("So let's walk through both these recipes and get a better idea of the differences between\n                        imperative and declarative approaches.\n                    ")]),e._v(" "),a("p",[e._v("Imperative approaches are characterized by step by step directions. They tell you - start with\n                        step 1, then go directly to step 2 and do it, then go to step 3 etc. After you have gone through\n                        this entire list of steps you eventually end up with some end product.\n                    ")]),e._v(" "),a("p",[e._v("So in the context of baking a cake maybe our imperative recipe tells us to take these raw\n                        ingredients, mix them together, pour the ingredients into a pan and then put that pan into an\n                        oven - after you go through these steps you end up with a cake.\n                    ")]),e._v(" "),a("p",[e._v("In a declarative world it's a little bit different as you might imagine.")]),e._v(" "),a("p",[e._v("So with a declarative recipe we would separate out our recipe into maybe two separate parts. We\n                        would start out with one part that lists, what we might refer to, as the initial state of our\n                        recipe. The initial state would be like the variables and in the case of a recipe our variables\n                        would be maybe our ingredient quantities or the ingredient types. We then take this initial\n                        state or this initial listing of ingredients and then we apply a set of rules to them. So you\n                        can kind of imagine that we take these ingredients or this initial recipe, we pass it through\n                        the rules one time.\n                    ")]),e._v(" "),a("p",[e._v("Then maybe after that first time we then stick it into the rules a second time and then maybe\n                        after we go through the second time we go through a third time - repeating the process over and\n                        over until eventually we come out the other side with a baked cake.\n                    ")]),e._v(" "),a("p",[e._v("So it starts to get really important to understand how we might structurally structure these\n                        rules in a declarative approach.\n                    ")]),e._v(" "),a("p",[e._v("So for the rules in a declarative recipe we might say okay let's examine our ingredients or our\n                        state, if our ingredients have been mixed then put them in a pan. Well, clearly with our initial\n                        state that doesn't quite match - we have not yet mixed our ingredients - so let's go down to\n                        rule number 2 which says if the ingredients are unmixed then mix them together in a bowl. Ok,\n                        well that's good, we have unmixed ingredients so we will mix them all together in a bowl.\n                    ")]),e._v(" "),a("p",[e._v("So, maybe now, instead of having one egg, cup flour, and sugar we would instead have one bowl\n                        mixed ingredients. We then take that state and apply it to our rules again.\n                    ")]),e._v(" "),a("p",[e._v("We've now got our mixed ingredients so we're going to look at rule number 1 which says if\n                        ingredients have been mixed put them in a pan.\n                    ")]),e._v(" "),a("p",[e._v("Ok that applies to us so let's do that - so now we have one batch ingredients in a pan we work\n                        through our rules again.\n                    ")]),e._v(" "),a("p",[e._v("Rule number three says if we're in a pan then put in the ovent for 30 minutes at 350F. Well that\n                        definitely applies to us. So we take this and we put it in the oven for 30 minutes at 350F and\n                        then finally we come out with a baked cake.\n                    ")]),e._v(" "),a("p",[e._v("So in the world of declarative programming, or declarative cooking I suppose, we have some state\n                        that we start off with, then we take that state and apply a set of rules to it.\n                    ")]),e._v(" "),a("p",[e._v("Now I know that this might sound like it's a real complicated approach for what we are trying to\n                        build right now so I took the liberty of writing our our applications rules (of sorts) in an\n                        imperative and declarative approach.\n                    ")]),e._v(" "),a("p",[e._v("So let's consider how we might build our Identicon application in an imperative approach and a\n                        declarative approach.\n                    ")]),e._v(" "),a("p",[e._v("So in an imperative approach to our current program, which is kind of what we're following now,\n                        we might say that whenever a user enters some text we want to:\n                    ")]),e._v(" "),a("ol",[a("li",[e._v("Retrieve the new input value")]),e._v(" "),a("li",[e._v("Turn the input value into an identicon")]),e._v(" "),a("li",[e._v("Put the identicon on the screen")])]),e._v(" "),a("p",[e._v("Now this might seem like a very direct and easy to understand flow and you might be thinking -\n                        \"Hey imperative programming - I understand this, it's what I'm used to\"\n                    ")]),e._v(" "),a("p",[e._v("Well maybe for very simple flows like this it makes sense but most web applications, that we\n                        spend any amount of time building, have flows that are much more complicated than this.\n                    ")]),e._v(" "),a("p",[e._v("So even though I'm giving you a very simple example here I hope that you can, kind of,\n                        extrapolate this example and imagine a more complicated flow where going step by step in code\n                        might be a little bit more challenging.\n                    ")]),e._v(" "),a("p",[e._v("Now let's look at a declarative approach:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(113)}}),e._v(" "),a("figcaption",[e._v("Fig 01-021")])]),e._v(" "),a("p",[e._v("So with a declarative approach maybe we would say that we've got some initial state or some\n                        initial ingredients of sorts of a single variable called something like textInput which maybe\n                        starts off as an empty string.\n                    ")]),e._v(" "),a("p",[e._v("We'll then take this initial state, of sorts, and apply it to this set of rules that we defined\n                        inside of our Vue instance. So maybe we'll say \"If a user enters text then update text input\".\n                        Well that doesn't really apply to us so we'll say \"If the template is rendered calculate the\n                        identicon\". Well that doesn't really apply to us either so we'll say \"If text input is updated\n                        re-render the template.\" Well that doesn't apply either so we'll just wait around for something\n                        to happen.\n                    ")]),e._v(" "),a("p",[e._v('So maybe then at some point a user updates our text input and when that happens we might apply\n                        rule number 1 - "If user enters text, update textInput". So we update textInput:\n                    ')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('textInput = "abcd"')]),e._v(" "),a("figcaption",[e._v("Fig 01-022")])]),e._v(" "),a("p",[e._v('And then we look at the other rules that are listed. Rule number 2 - "If template is rendered,\n                        calculate the identicon". This does apply so we\'ll re-render the template and now if we look\n                        back at rule number two - "If template is rendered, calculate the identicon." so let\'s calculate\n                        the identicon and then render it to the screen.\n                    ')]),e._v(" "),a("p",[e._v("So I know that the rules we listed for the identicon application don't quite translate from the\n                        idea of baking to what we're doing but it gives you the idea that inside of our Vue instance\n                        we'll declare some type of data or variable. Then, inside of that instance we'll declare the set\n                        of different rules that tells our Vue instance how it should behave whenever something occurs\n                        inside of our application.\n                    ")]),e._v(" "),a("p",[e._v("So, again, in general you and I, inside a Vue, want to strive for this more declarative\n                        programming style as opposed to a more imperative approach. Again, I know that imperative\n                        programming might seem like a little bit more clear and obvious and it might be more challenging\n                        to understand exactly why we would take the declarative approach but in general a declarative\n                        approach scales very nicely for larger applications.\n                    ")]),e._v(" "),a("p",[e._v("Ok, now we've got this idea of declarative programming in mind, in the next section we'll talk a\n                        little bit more about how we can implement these declarative rules into our Vue instance and get\n                        our application working.\n                    ")]),e._v(" "),a("h3",[e._v("Declarative Apps with the Vue API")]),e._v(" "),a("p",[e._v("In the last section we talked about some of the differences between imperative and declarative\n                        programming. We're now going to take this idea of declarative programming and apply it to our\n                        actual application with some real terminology that is used in Vue instances.\n                    ")]),e._v(" "),a("p",[e._v("So the first thing we're going to do is take a look at each of these steps/rules here:")]),e._v(" "),a("ul",[a("li",[e._v('textInput = "abcd1234"')]),e._v(" "),a("li",[e._v("If user enters text, update 'textInput'")]),e._v(" "),a("li",[e._v("If template is rendered calculate the identicon")]),e._v(" "),a("li",[e._v("If 'textInput' is updated re-render the template")])]),e._v(" "),a("p",[e._v("I want you to consider the purpose of each of these rules and to imagine when each of these rules\n                        would be applied.\n                    ")]),e._v(" "),a("p",[e._v("So at the very top we start out with that initial state of sorts (or initial list of ingredients)\n                        which we might also refer to as our data inside our application. If we had to characterize the\n                        purpose of the the first rule: \"If user enters text, update 'textInput'\" we would say it updates\n                        our data or state. So this is really an update action of an action that changes things inside of\n                        our application.\n                    ")]),e._v(" "),a("p",[e._v('The second step: "If template is rendered, calculate the identicon" is a step that uses our\n                        data/state to show stuff on the screen. Another way to put it would be to say that this step\n                        consumes data to present it to users inside of our application.\n                    ')]),e._v(" "),a("p",[e._v("The last step: \"If 'textInput' is updated re-render the template\" just kind of happens\n                        automatically with the view behind the scenes. So anytime you or I change our state or change\n                        our data inside of our application our Vue instance is going to automatically update everything\n                        on the screen.\n                    ")]),e._v(" "),a("p",[e._v("Let's now apply some more precise terminology to each of these steps.")]),e._v(" "),a("p",[e._v("In the following figure the terms on the right hand side are the different properties that you\n                        and I are going to eventually define on our Vue instances to implement each of the different\n                        steps:\n                    ")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(114)}}),e._v(" "),a("figcaption",[e._v("Fig 01-023")])]),e._v(" "),a("p",[e._v("So first off, at the very top, we've been referring to this kind of initial list of ingredients\n                        or our initial state of sorts. In a Vue instance we refer to this as a property defined as\n                        'data'. So you and I are going to define a data property inside of our Vue instance and that's\n                        going to tell our instance what the starting ingredients, of sorts, are inside our application.\n                    ")]),e._v(" "),a("p",[e._v("Next, you and I are going to define a couple of different methods eventually. So far we only\n                        defined one method - the onInput method - but the purpose of the method's property is to define\n                        a bunch of functions that are supposed to somehow update our data. So all the functions you're\n                        going to see on methods are going to describe how we might update the data inside of our\n                        application. Looking at our current application that definitely matches up.\n                    ")]),e._v(" "),a("p",[e._v("The computed property is a little bit more complicated. Anytime you and I want to kind of consume\n                        data and get it into our actual template, or show it on the screen in some fashion, we're going\n                        to use a computed property.\n                    ")]),e._v(" "),a("p",[e._v("So, one more time, these are three pieces of terminology or properties that you and I are doing\n                        to define inside our Vue instance eventually:\n                    ")]),e._v(" "),a("p",[a("strong",[e._v("data")]),e._v(" initializes the data inside of our application")]),e._v(" "),a("p",[a("strong",[e._v("methods")]),e._v(" changes/updates the data inside of our application")]),e._v(" "),a("p",[a("strong",[e._v("computed")]),e._v(" consumes the data and formats/transforms it for display on the screen\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(3)}}),e._v(" "),a("figcaption",[e._v("Fig 01-024")])]),e._v(" "),a("p",[e._v("Now obviously the text that a user enters into our application is in itself like a viewable value\n                        but, in this example, we are trying to display an identicon so a viewable value would be like\n                        taking that text and turning it into an identicon.\n                    ")]),e._v(" "),a("p",[e._v("In the following figure you can see a simplified version of the previous figure:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(3)}}),e._v(" "),a("figcaption",[e._v("Fig 01-025")])]),e._v(" "),a("p",[e._v("So we've now got a good idea of some of these different parts of the Vue API. In the next section\n                        we'll start to use the data, methods and computed properties.\n                    ")]),e._v(" "),a("h3",[e._v("Data, Computed, and Methods")]),e._v(" "),a("p",[e._v("In the last section we took the idea of declarative programming and applied it to our application\n                        and then more specifically took a look at the Vue API and some of the different properties that\n                        we're going to define on our Vue instance.\n                    ")]),e._v(" "),a("p",[e._v("So let's now go back over to Codepen and start defining these different properties inside of the\n                        JavaScript side of our application.\n                    ")]),e._v(" "),a("p",[e._v("Now, you will recall that we already defined that methods property. I'm going to add a comment\n                        inside methods object to remind me of it's purpose:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:  '#app',\n  methods: { // Use these function to change data\n    onInput: function() {\n      console.log(event.target.value);\n    }\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-026")])]),e._v(" "),a("p",[e._v("Next I will define the data and computed properties with comments to describe their purpose:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n  el:  '#app',\n  data: { // Initialize our list of 'ingredients'\n\n  },\n  computed: { // Turn data into viewable values\n\n  },\n  methods: { // Use these function to change data\n    onInput: function() {\n      console.log(event.target.value);\n    }\n  }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 01-027")])]),e._v(" "),a("p",[e._v("Now one thing that might be a little bit misleading here is that with the methods property we\n                        have clearly defined a function. However, inside of this computed object we are also going to\n                        define functions - functions that are going to be executed to turn our data into viewable\n                        values. But with the data property we are not defining functions, instead we are defining simple\n                        properties and private property names and property values. As an example we could initialize a\n                        textInput property like so:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("  data: { // Initialize our list of 'ingredients'\n    textInput: ''\n  },")]),e._v(" "),a("figcaption",[e._v("Fig 01-028")])]),e._v(" "),a("p",[e._v("So, again, with data we define simple key value pairs that have say strings or numbers or arrays\n                        or objects. But with the computed and methods properties we define functions on both and those\n                        functions are executed to either update our data (methods property) or turn our data into\n                        viewable values (computed property)\n                    ")]),e._v(" "),a("p",[e._v("Now that we've added in some comments to further guide us we will continue in the next section to\n                        start adding code to the data and computed properties.\n                    ")]),e._v(" "),a("h3",[e._v("Updated Data Values")]),e._v(" "),a("p",[e._v("In the last section we added in our data property and our computed property. We also added in\n                        some comments to describe their purpose inside of this Vue instance. In this section we're going\n                        to go back to our onInput function inside of the methods object.\n                    ")]),e._v(" "),a("p",[e._v("Remember all of the functions inside of methods are intended to somehow update our data and\n                        anytime we updated our data it's going to cause our Vue instance to update the HTML that is\n                        displayed inside the browser.\n                    ")]),e._v(" "),a("p",[e._v("At present we're just taking the value that the user types in - which is event.target.value and\n                        logging it to the console. That's not incredibly useful. I think we should probably remove that\n                        console log and replace it with something that's going to update the textInput property in our\n                        data object. Remember text input is supposed to reflect the current value of the text input form\n                        field defined here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<div>\n    Input:\n    <input />\n\n  </div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-029")])]),e._v(" "),a("p",[e._v("We can kind of imagine this data property of textInput as being like our list of ingredients and\n                        based on what the value of textInput is inside of the data object we will do different things to\n                        render different stuff out onto the page.\n                    ")]),e._v(" "),a("p",[e._v("So let's remove the consolelog statement and then to update the value of this textInput value\n                        data property we will add the following code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: { // Use these function to change data\n    onInput: function() {\n      this.textInput = event.target.value;\n    }\n  }")]),e._v(" "),a("figcaption",[e._v("Fig 01-030")])]),e._v(" "),a("p",[e._v("Now one thing that's very important here that I want to point out is that we said simply "),a("code",{staticClass:"prettyprint"},[e._v("this.texInput")]),e._v(" we did not say anything like "),a("code",{staticClass:"prettyprint"},[e._v("this.data.textInput")]),e._v(". We only used the word "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" when we first initialized the data property. After that to\n                        refer to any of the properties that are initialized inside of here we simply write "),a("code",{staticClass:"prettyprint"},[e._v("this.")]),e._v(" and then the property name.\n                    ")]),e._v(" "),a("p",[e._v("Now, what I want to be really crystal clear about because I mentioned this in passing one or two\n                        videos ago is that anytime we update the value of one of our data properties it causes our Vue\n                        instance to automatically re-render inside of the browser window. At present our template is not\n                        making use of the "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(" property at all so you won't\n                        currently see any changes in the browser. However, as soon as we start updating or making use of\n                        "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(" inside of our actual template you're going to see\n                        that anytime we run this "),a("code",{staticClass:"prettyprint"},[e._v("onInput")]),e._v(' function everything inside the\n                        browser window is going to automatically update as well which is a very nice feature. We don\'t\n                        have to forcibly say "Please re-render my application" or anything like that.\n                    ')]),e._v(" "),a("p",[e._v("So just to bring everything full circle now I want to go back to one of the diagrams we were just\n                        looking at and walk through the process of what we've done now with the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property and the "),a("code",{staticClass:"prettyprint"},[e._v("onInput")]),e._v(" function:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(115)}}),e._v(" "),a("figcaption",[e._v("Fig 01-031")])]),e._v(" "),a("p",[e._v("We said that we have some initial starting data of "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v("\n                        equal to empty string. So that's how our application first starts off. We then sit around and\n                        wait and then at some point in time the "),a("code",{staticClass:"prettyprint"},[e._v("onInput")]),e._v(" method is\n                        executed. So the user enters some text and inside the method we update the value of "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(". So let's imagine that maybe the user enters in\n                        text of \"abcd\". So after they enter that text we're going to update the "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(" value. So now the "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v("\n                        property in "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(' has a value of "abcd". Now because '),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(" has been updated the template is re-rendered\n                        automatically by Vue. Next, as a result of the template being re-rendered we calculate the\n                        identicon by using one of our computed functions. We have not yet defined this function but we\n                        will in just a second.\n                    ")]),e._v(" "),a("p",[e._v("We are going to talk about the data, methods and computed properties non-stop throughout this\n                        course so if it seems confusing right now don't sweat it because we're definitely going to get a\n                        lot of practice with it.\n                    ")]),e._v(" "),a("p",[e._v("Let's continue in the next section where we're going to start working on our computed properties\n                        and hopefully start to bring everything full circle.\n                    ")]),e._v(" "),a("h3",[e._v("Computed Properties")]),e._v(" "),a("p",[e._v("We've now got our data property being initialized here and we've got some way for our data to be\n                        initialized over time whenever our user does something inside of our application. It's now time\n                        to turn to the last step here which is to take our data and turn it into an actual viewable\n                        value. To be entirely clear our data is already in kind of like a viewable value - it's a plain\n                        text string. Obviously we can show it inside of our template and have our users kind of view the\n                        output.\n                    ")]),e._v(" "),a("p",[e._v("However that's not actually what we want our users to view. We don't care about showing them the\n                        text that they just entered. Instead, we want to show them an identicon - so we need to do some\n                        processing of oiur data before it actually gets displayed on the screen. Anytime we want to do\n                        som calculation on a value before it gets displayed on the screen that's where we make use of a\n                        computed function.\n                    ")]),e._v(" "),a("p",[e._v("So inside of the computed object is where we're going to define a new function which I'm going to\n                        call identicon like so:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: { // Turn data into viewable values\n    identicon: function() {\n\n    }\n  },")]),e._v(" "),a("figcaption",[e._v("Fig 01-032")])]),e._v(" "),a("p",[e._v("So any time the identicon function gets called you and I are going to return something that's\n                        going to get the identicon displayed on the screen.\n                    ")]),e._v(" "),a("p",[e._v("Now as a quick reminder when we first made use of this CodePen then we already got you access to\n                        this library call jdenticon (you can verify this by clicking the settings button, selecting the\n                        JavaScript tab and viewing the external scripts section. So we're going to write some code\n                        that's going to make use of this library right here to produce the actual identicon based on the\n                        text input that the user has provided to us.\n                    ")]),e._v(" "),a("p",[e._v("So inside the identicon function we're going to make use of that jdenticon library:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: { // Turn data into viewable values\nidenticon: function() {\n  jdenticon.toSvg();\n}")]),e._v(" "),a("figcaption",[e._v("Fig 01-033")])]),e._v(" "),a("p",[e._v("First we'll pass in the value of "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(" because that's kind\n                        of like the seed of sorts from which our identicon gets calculated. Remember that we can\n                        reference any of the properties in the data object by simply writing "),a("code",{staticClass:"prettyprint"},[e._v("this.")]),e._v("\n                        and then the property name.\n                    ")]),e._v(" "),a("p",[e._v("The second argument is going to be the height or pixel width of the identicon that gets generated\n                        - 200 pixels should be fine for application.\n                    ")]),e._v(" "),a("p",[e._v("Now the very last thing we need to do is return this calculated or computed value from the\n                        identicon function so I'm going to make sure I get the return keyword inside there as well:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: { // Turn data into viewable values\nidenticon: function() {\n  return jdenticon.toSvg(this.textInput, 200);\n}")]),e._v(" "),a("figcaption",[e._v("Fig 01-034")])]),e._v(" "),a("p",[e._v("Ok so I know that at this point we still don't really see any change in the output rendered to\n                        the browser window. So to actually get this identicon function running and displayed on the\n                        screen we have to actually reference the identicon function from within our template which is\n                        defined in the Html panel in the CodePen.\n                    ")]),e._v(" "),a("p",[e._v("To call a computed function from within our template or to somehow get that information to appear\n                        on the screen we can use a little bit of advanced Vue syntax. So in the Html where we have\n                        written Output: I am going to reference this computed identicon function by writing the\n                        following:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<div>\n    Output:\n    {{ identicon }}\n</div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-035")])]),e._v(" "),a("p",[e._v("So now in the browser output you'll see a bunch of crazy strange text. This might not look like\n                        what we want but it is actually pretty close to what we need. You should see an svg tag which is\n                        a type of image. So, in this case, whenever we make use of the jidenticon toSvg function it\n                        returns an SVG element. But when we try to show that inside of our template we just see the\n                        actual raw Html that represents our Svg.\n                    ")]),e._v(" "),a("p",[e._v("To actually get this to show up as a real piece of rendered Svg we're going to use another Vue\n                        directive:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: { // Turn data into viewable values\nidenticon: function() {\n  return jdenticon.toSvg(this.textInput, 200);\n}")]),e._v(" "),a("figcaption",[e._v("Fig 01-036")])]),e._v(" "),a("p",[e._v("Now you should see the identicon appear on the screen. Now I know that the last step there, where\n                        I said \"Ok we don't really want the SVG raw text to appear here - we want to instead show the\n                        Html\" might seem a little bit confusing. We'll come back to this in a second but before we do\n                        let's try entering in some text in the input field. As you start to type stuff in you'll notice\n                        that the identicon is changing every single time and we get some new identicon appearing on the\n                        screen.\n                    ")]),e._v(" "),a("p",[e._v("So in the next section we're going to do a very big review to describe exactly how this\n                        application is working right now.\n                    ")]),e._v(" "),a("h3",[e._v("Review from Start to Finish")]),e._v(" "),a("p",[e._v("In the last section we got our application working but I think you'll agree with me that there's\n                        still some confusion over how everything works at the moment. So in this section we are going to\n                        work through a big timeline diagram that's going to give you a better idea of exactly what is\n                        occurring inside or our application and it's going to really tie everything together.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(116)}}),e._v(" "),a("figcaption",[e._v("Fig 01-037")])]),e._v(" "),a("p",[e._v("At the very top we first start off by creating our Vue instance. When that instance is created\n                        the data property is evaluated:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data: { // Initialize our list of 'ingredients'\n textInput: ''\n},")]),e._v(" "),a("figcaption",[e._v("Fig 01-038")])]),e._v(" "),a("p",[e._v("Vue sees that we are providing an object that has a property named "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v("\n                        with a value of empty string. Because we are initializing this data property right here Vue is\n                        going to take that and it's going to assign it to the value of "),a("code",{staticClass:"prettyprint"},[e._v("this")]),e._v(" which is accessible inside of our computed functions and\n                        our methods functions. After that value is initialized our template inside the Dom is then\n                        evaluated by Vue and eventually rendered onto the screen. So that's when we actually see some\n                        starting content appear\n                    ")]),e._v(" "),a("p",[e._v("We then wait for some user to type into our text input. The instant they do our own input method\n                        is executed. Inside of that "),a("code",{staticClass:"prettyprint"},[e._v("onInput")]),e._v(" method which is right here\n                        we update the value of "),a("code",{staticClass:"prettyprint"},[e._v("textInput")]),e._v(". That's when some interesting\n                        stuff starts to happen. So it's when you start to update these data properties that have been\n                        assigned to "),a("code",{staticClass:"prettyprint"},[e._v("this")]),e._v(' that you start to see some interesting\n                        behaviour in your application. So when that value gets updated our template gets automatically\n                        re-rendered to the screen. So Vue says - "Hey!, someone just updated that value. I need\n                        automatically re-render the template and update content that is visible on the screen.\n                    ')]),e._v(" "),a("p",[e._v("\n                        During that process, Vue looks at our template and it sees that our template references a\n                        computed property when we put together the directive right underneath Output:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div>\n    Output:\n    <div v-html="identicon" />\n  </div>')]),e._v(" "),a("figcaption",[e._v("Fig 01-039")])]),e._v(" "),a("p",[e._v("So we added in the directive of "),a("code",{staticClass:"prettyprint"},[e._v("v-html")]),e._v(" which we're going to\n                        expand upon in just a moment and inside there we referenced the identicon computed function.\n                    ")]),e._v(" "),a("p",[e._v("So identicon in the directive above is a reference to the computed function identicon.")]),e._v(" "),a("p",[e._v("So Vue locates the identicon function and executes it and then whatever is returned from that\n                        function will be provided to this "),a("code",{staticClass:"prettyprint"},[e._v("v-html")]),e._v(" directive. So in this\n                        case the identicon function returns some raw Html as a string (with an svg tag inside it). But\n                        as you an I very well know we don't want to show raw Html to the user - we want to display an\n                        identicon. So to get Vue to interpret that string as Html and not a plain old string we used the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("v-html")]),e._v(" directive. This directive says - \"We're going to give\n                        you a snippet of Html. It's gonna be a string but it's going to look like Html. You need to\n                        interpret that as Html and render it as Html in the output. Don't try to just print out the\n                        string.\"\n                    ")]),e._v(" "),a("p",[e._v("What we did before where we use the curly braces like so:")]),e._v(" "),a("code",{pre:!0,attrs:{class:"prettyprint"}},[e._v("{{ identicon }}")]),e._v(" "),a("p",[e._v("This is how we just print out a very simple string.")]),e._v(" "),a("p",[e._v("Traditionally we dont use the "),a("code",{staticClass:"prettyprint"},[e._v("v-html")]),e._v(" tag unless you are working\n                        on an application where you actually need to make use of some pre-generated Html. So it's much\n                        more frequently that we'll use other methods for displaying content on the screen.\n                    ")]),e._v(" "),a("p",[e._v("So hopefully that's a little bit more of an explanation and makes what's happening inside of our\n                        application a little bit more clear. There's still some side topics I want to address about this\n                        application which we will address in the next section.\n                    ")]),e._v(" "),a("h3",[e._v("Template Placement")]),e._v(" "),a("p",[e._v("In the last section we reviewed our entire application and got a better idea of how it's working.\n                        In this section I want to start going over a couple of quick odds and ends around the\n                        application we just put together.\n                    ")]),e._v(" "),a("p",[e._v("So the first ordinance I want to tell you about is the placement of our template. Remember, that,\n                        many videos ago when we spoke about the Vue template being created in Html and the Vue instance\n                        being created in JavaScript and we mentioned that was one way of structuring a Vue application.\n                        In particular, I'd said that our Vue template does not have to be created on the Html side of\n                        our application and that we could instead declare that Vue template in the JavaScript side.\n                    ")]),e._v(" "),a("p",[e._v("To demonstrate this alternative configuration go back to our CodePen and take all the Html that\n                        is inside the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with an id of app and cut and paste it into a\n                        new property called "),a("code",{staticClass:"prettyprint"},[e._v("template:")]),e._v(" that we add to the bottom of the\n                        JavaScript panel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('template: `\n<div>\n  <h3>My Identicon Generator</h3>\n      Input:\n    <div>\n      <input v-on:input="onInput" />\n    </div>\n    <div>\n      Output:\n      <div v-html="identicon" ></div>\n</div>`')]),e._v(" "),a("figcaption",[e._v("Fig 01-031")])]),e._v(" "),a("p",[e._v("Note the use of back ticks (the character on the keyboard to the left of 1) and additional\n                        enclosing "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("So when we make use of a template that is attached directly to an instance we provide a string\n                        that contains some amount of Html. Inside that string we have to have exactly one root element\n                        (which is why we added the additional "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(")\n                    ")]),e._v(" "),a("p",[e._v("If I were to remove the root "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" you would see the we only see\n                        the "),a("code",{staticClass:"prettyprint"},[e._v("h3")]),e._v(" element in the browser window (which is now the root\n                        element).\n                    ")]),e._v(" "),a("p",[e._v("That's the reason for the root "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(". We are expected to only\n                        return 1 root element inside the template string.\n                    ")]),e._v(" "),a("p",[e._v("So you'll see very plainly that everything works the exact same way that it did before. This is\n                        just a different way to structure your Vue application. You can either create your template\n                        inside of your Html or you can create the template and attach it directly to your Vue instance.\n                    ")]),e._v(" "),a("p",[e._v("Now, in reality, the vast majority of applications that you will be working on are going to take\n                        the approach where you define the Html as a template property in JavaScript.\n                    ")]),e._v(" "),a("p",[e._v("The reason I demonstrated the approach where the Vue template is created in the Html is because\n                        all the Vue documentation takes that approach.\n                    ")]),e._v(" "),a("p",[e._v("Ok, that was the first ordinance I wanted to show you. Let's now continue in the next section to\n                        discuss one or two other topics.\n                    ")]),e._v(" "),a("h3",[e._v("Referencing Data in the Template")]),e._v(" "),a("p",[e._v("In the last section we spoke about on quick ordinance. In this section we are going to cover\n                        another small topic I just want you to be aware of. I want to focus on the fact that we used a\n                        computed function when putting our application together. Now what I want to be very clear about\n                        is that our template can show data that has been assigned to our data property. We don't have to\n                        always use computed functions.\n                    ")]),e._v(" "),a("p",[e._v("In general we only ever use computed functions anytime we want to somehow mess around with some\n                        piece of data before it gets shown on the screen. Let me show you a good example of this. Back\n                        inside of our application let's say that we want to dramatically change how our app behaves.\n                    ")]),e._v(" "),a("p",[e._v('Let\'s say that maybe instead of entering in some input and then getting back an identicon we want\n                        to just echo back our text directly to the user. So if I enter "my slice of pie" right here the\n                        output should be simply "my slice of pie" - no change whatsoever. If you want to print out some\n                        value that is assigned to data without making any change to it whatsoever you don\'t have to use\n                        a computed function. Instead you can reference your property or your data name directly from\n                        within the template.\n                    ')]),e._v(" "),a("p",[e._v("To do this scroll down to where the template is defined (in the JavaScript panel) and locate the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with a directive of "),a("code",{staticClass:"prettyprint"},[e._v("v-html ")]),e._v(". So, we don't want to show the identicon anymore so I\n                        am going to delete that "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" entirely.\n                    ")]),e._v(" "),a("p",[e._v("Instead I will directly reference the text input property and just try to print it out directly\n                        into the template. To print out a direct property without trying to do any fancy directives or\n                        anything like that we use the double curly braces and then inside there we just write out the\n                        property name that we want to display. The name that we put inside the curly braces can be\n                        either the name of one of our computed functions or the name of one of our data properties:\n                    ")]),e._v(" "),a("figure",[a("pre",{
pre:!0,attrs:{class:"prettyprint"}},[e._v("<div>\n    Output:\n    {{ textInput }}\n</div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-032")])]),e._v(" "),a("p",[e._v("Now if I start to type inside of my textInput again you'll see that the text gets directly\n                        mirrored right underneath. That's because I'm just taking whatever my input value is an printing\n                        out directly inside the template. One thing I want to mention inside of here, very explicitly,\n                        is that when we reference this textInput we did not have to do anything like say "),a("code",{staticClass:"prettyprint"},[e._v("this.textInput")]),e._v(" or "),a("code",{staticClass:"prettyprint"},[e._v("this.data.textInput")]),e._v("\n                        We simply write the name of the property inside the curly braces.\n                    ")]),e._v(" "),a("p",[e._v("One issue that raises is you'll want to make sure when you're defining computed functions right\n                        here is you don't accidentally duplicate the name of one of your data properties. So I would not\n                        want to make a computed function named textInput because then it would be really ambiguous as wo\n                        whether inside my template I'm referring to the data property or the computed function name.\n                    ")]),e._v(" "),a("p",[e._v("So, to recap, we don't have to use a computed property to display data if we don't want to/need\n                        to. We can just reference the data name directly and that will be printed out verbatim inside of\n                        our template.\n                    ")]),e._v(" "),a("p",[e._v("In CodePen revert back to the original "),a("code",{staticClass:"prettyprint"},[e._v("v-html")]),e._v(" directive:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div>\n    Output:\n    <div v-html="identicon"></div>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 01-033")])]),e._v(" "),a("p",[e._v("Let's continue in the next section where there's just one last thing I want to mention about this\n                        application before we move on.\n                    ")]),e._v(" "),a("h3",[e._v("Expressions in Templates")]),e._v(" "),a("p",[e._v("In the last section we spoke about one additional ordinance. In this section we're going to close\n                        off with a topic which is very closely related to the one we just discussed.\n                    ")]),e._v(" "),a("p",[e._v("So when we were talking in the last section about using those curly braces to display some value\n                        inside of a template that made use of a technique called string interpolation. So whenever we\n                        use string interpolation that means that we are kind of injecting a value directly into our\n                        template. Anytime that we use those curly braces we are not limited to referring to a simple\n                        data property or a computed property.\n                    ")]),e._v(" "),a("p",[e._v("If we want to we can put in some tiny amount of JavaScript logic into those curly braces. To be\n                        more precise we can put exactly one Javascript expression inside the curly braces. So we can't\n                        write out a full "),a("code",{staticClass:"prettyprint"},[e._v("if")]),e._v(" statement, we can't write out a "),a("code",{staticClass:"prettyprint"},[e._v("for")]),e._v(" loop or anything like that.\n                    ")]),e._v(" "),a("p",[e._v("Back in CodePen at the very bottom of the template where we've got the identicon content being\n                        printed out inside the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" using the "),a("code",{staticClass:"prettyprint"},[e._v("v-html")]),e._v("\n                        directive.\n                    ")]),e._v(" "),a("p",[e._v("Delete the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" replacing it with another set of curly braces\n                        . Inside the braces reference textInput again:")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<div>\n    Output:\n    {{ textInput }}\n</div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-034")])]),e._v(" "),a("p",[e._v("Now if I type something out inside the input, just as before, I see the same text appear in\n                        the Output. So, right now, we are simply referencing textInput. However, is we want to we\n                        can add a very limited amount of Javascript logic inside of these curly braces.")]),e._v(" "),a("p",[e._v("So, for example, we could do a little bit of string concatenation:")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<div>\n    Output:\n    {{ textInput + 'abcd' }}\n </div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-034")])]),e._v(" "),a("p",[e._v("Or we could reverse the string. In Javascript we reverse the string by splitting it into an\n                        array by every character and then reverse that array and, finally, join the result back\n                        together:")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<div>\n    Output:\n\n</div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-035")])]),e._v(" "),a("p",[e._v("Now what I want to point out here is that while I can add some amount of logic into the\n                        string interpolation it is almost always preferable to use a computed function.")]),e._v(" "),a("p",[e._v("So instead of the string interpolation method shown above we could use a computed function:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("reverse: function() {\n      return this.textInput.split('').reverse().join('');\n    }")]),e._v(" "),a("figcaption",[e._v("Fig 01-036")])]),e._v(" "),a("p",[e._v("So that's doing the same operation as before. Now inside the template we reference our\n                        computed function instead:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<div>\n    Output:\n    {{ reverse }}\n</div>")]),e._v(" "),a("figcaption",[e._v("Fig 01-037")])]),e._v(" "),a("p",[e._v("I highly recommend you use computed functions anytime you need to play around with some data\n                        before it gets printed out because it keeps your templates very clean and easy to read. The\n                        computed functions will also be easier to understand because you can add comments to document\n                        their behaviour.\n                    ")]),e._v(" "),a("p",[e._v("We're going to continue in the next section by discussing the first big application we're\n                        going to create in this course.\n                    ")]),e._v(" "),a("h3",[e._v("Coding Exercise 1 Rendering with String Templates")]),e._v(" "),a("h3",[e._v("Coding Exercise 2 JS Expressions with String Templates")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Visual Studio Code")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h2",[e._v("Useful Links")]),e._v(" "),a("h3",[e._v("Visual Studio Code")]),e._v(" "),a("a",{attrs:{href:"https://code.visualstudio.com/Docs/customization"}},[e._v("https://code.visualstudio.com/Docs/customization")]),a("br"),e._v(" "),a("a",{attrs:{href:"http://www.johnpapa.net/visual-studio-code"}},[e._v("http://www.johnpapa.net/visual-studio-code")]),e._v(" "),a("h3",[e._v("Gulp")]),e._v(" "),a("img",{attrs:{src:n(100)}}),e._v(" "),a("p",[e._v("Gulp is an Automated Task Runner. It can be used for various build time tasks such as:")]),e._v(" "),a("ul",[a("li",[e._v("compressing new or modified images")]),e._v(" "),a("li",[e._v("removing console and debugger statements from scripts")]),e._v(" "),a("li",[e._v("concatenating and minifying CSS and JavaScript files")]),e._v(" "),a("li",[e._v("deploying updates to a production server")])]),e._v(" "),a("p",[e._v("The official gulp site can be accessed from: "),a("a",{attrs:{href:"http://gulpjs.com/"}},[e._v("http://gulpjs.com/")])]),e._v(" "),a("p",[e._v("John Pappa has created a course that covers JavaScript Build Automation With Gulp.js on Pluralsight that\n                    can be found here: "),a("a",{attrs:{href:"http://www.pluralsight.com/courses/javascript-build-automation-gulpjs"}},[e._v("http://www.pluralsight.com/courses/javascript-build-automation-gulpjs")])]),a("p",[e._v("Another guide to gulp can be found here: "),a("a",{attrs:{href:"http://www.sitepoint.com/introduction-gulp-js/"}},[e._v("http://www.sitepoint.com/introduction-gulp-js/")])]),e._v(" "),a("h3",[e._v("Node Package Manager")]),e._v(" "),a("img",{attrs:{src:n(101)}}),e._v(" "),a("p",[e._v("Node Package Manager is a JavaScript package installer that is used to install server side JavaScript\n                    libraries such as:")]),e._v(" "),a("ul",[a("li",[e._v("gulp")]),e._v(" "),a("li",[e._v("bower")]),e._v(" "),a("li",[e._v("typescript")]),e._v(" "),a("li",[e._v("generator-aspnet")])]),e._v(" "),a("p",[e._v("The official npm site can be access from: "),a("a",{attrs:{href:"https://www.npmjs.com/"}},[e._v("https://www.npmjs.com/")])]),e._v(" "),a("h3",[e._v("Bower")]),e._v(" "),a("img",{attrs:{src:n(93)}}),e._v(" "),a("p",[e._v("The official "),a("a",{attrs:{href:"bower.io"}},[e._v("Bower site")]),e._v(" says:")]),e._v(" "),a("i",[a("strong",[e._v('"Web sites are made of lots of things — frameworks, libraries, assets, utilities,\n                    and rainbows. Bower manages all these things for you."')])]),e._v(" "),a("p",[e._v("Bower works by fetching and installing packages from all over, taking care of hunting, finding, downloading,\n                    and saving the stuff you’re looking for. Bower keeps track of these packages in a manifest file,\n                    bower.json. How you use packages is up to you. Bower provides hooks to facilitate using packages\n                    in your tools and workflows.")]),e._v(" "),a("h3",[e._v("Yeoman")]),e._v(" "),a("img",{attrs:{src:n(108)}}),e._v(" "),a("p",[e._v("Yeoman helps you to kickstart new projects, prescribing best practices and tools to help you stay productive.")]),e._v(" "),a("p",[e._v("To do so, Yeoman provides a generator ecosystem. A generator is basically a plugin that can be run with\n                    the `yo` command to scaffold complete projects or useful parts.")]),e._v(" "),a("p",[e._v("The official Yeoman site can be accessed from here: "),a("a",{attrs:{href:"http://yeoman.io/"}},[e._v("http://yeoman.io/")])]),e._v(" "),a("h3",[e._v("TypeScript")]),e._v(" "),a("img",{attrs:{src:n(106)}}),e._v(" "),a("p",[e._v("TypeScript is a free and open source programming language developed and maintained by Microsoft. It is\n                    a strict superset of JavaScript, and adds optional static typing and class-based object-oriented\n                    programming to the language. Anders Hejlsberg, lead architect of C# and creator of Delphi and Turbo\n                    Pascal, has worked on the development of TypeScript. TypeScript may be used to develop JavaScript\n                    applications for client-side or server-side execution.\n                ")]),e._v(" "),a("a",{attrs:{href:"http://www.typescriptlang.org/"}},[e._v("http://www.typescriptlang.org/")]),e._v(" "),a("h3",[e._v("Emmet")]),e._v(" "),a("img",{attrs:{src:n(97)}}),e._v(" "),a("p",[e._v("Emmet is a plugin for many popular text editors which greatly improves HTML & CSS workflow. It provides,\n                    amongst other features, shortcut syntax for creating HTML.")]),e._v(" "),a("a",{attrs:{href:"http://emmet.io/"}},[e._v("http://emmet.io/")]),e._v(" "),a("h3",[e._v("Markdown")]),e._v(" "),a("p",[e._v("Format md files etc.")]),e._v(" "),a("h3",[e._v("Less")]),e._v(" "),a("p",[e._v("CSS variables etc.")]),e._v(" "),a("h2",[e._v("Starting Visual Studio Code")]),e._v(" "),a("h3",[e._v("Windows")]),e._v(" "),a("p",[e._v("You can start a new instance of Code from a Windows Command Line by entering:")]),e._v(" "),a("code",[e._v("code .")]),e._v(" "),a("p",[e._v("Code will start in the directory where you issued the command.")]),e._v(" "),a("p",[e._v("You can specify a directory or file to open by adding a path like so:")]),e._v(" "),a("code",[e._v("code vscode/index.html")]),e._v(" "),a("p",[e._v("You can reuse an existing instance of code by adding the "),a("code",[e._v("-r")]),e._v(" flag as follows:")]),e._v(" "),a("code",[e._v("code vscode/index.html -r")]),e._v(" "),a("h3",[e._v("Mac")]),e._v(" "),a("p",[e._v("To setup Visual Studio Code on a Mac visit the following link for instructions on configuring your bash\n                    profile")]),e._v(" "),a("a",{attrs:{href:"https://code.visualstudio.com/Docs/setup"}},[e._v("https://code.visualstudio.com/Docs/setup")]),e._v(" "),a("h2",[e._v("Basic Editing")]),e._v(" "),a("p",[e._v("The following table describes some of the basic editing commands available in Visual Studio Code.\n                ")]),e._v(" "),a("table",{staticClass:"table"},[a("thead",[a("tr",[a("th",[e._v("Command/Keystroke")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Ctrl+Shift+P")]),e._v(" "),a("td",[e._v("Display the Command Palette")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+P")]),e._v(" "),a("td",[e._v("Display the file navigation palette")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+P then ?")]),e._v(" "),a("td",[e._v("Display all the available commands for running")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+P then @")]),e._v(" "),a("td",[e._v("Goto Symbol (functions, strings etc.)")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+Shift+O")]),e._v(" "),a("td",[e._v("Goto Symbol (functions, strings etc.)")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+P then @:")]),e._v(" "),a("td",[e._v("Goto Symbol by category (arrays, booleans, properties strings functions etc.)")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+Shift+M")]),e._v(" "),a("td",[e._v("Display errors and warnings")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+\\")]),e._v(" "),a("td",[e._v("Display the Split Editor. Opens up another editor window within Code.")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+1 through 3")]),e._v(" "),a("td",[e._v("Moves focus between the windows in the editor (max 3)")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+0")]),e._v(" "),a("td",[e._v("Moves focus to the Sidebar")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+W")]),e._v(" "),a("td",[e._v("Close the active window")])]),e._v(" "),a("tr",[a("td",[e._v("F11")]),e._v(" "),a("td",[e._v("Toggle fullscreen")])]),e._v(" "),a("tr",[a("td",[e._v("\n                            Ctrl+B\n                        ")]),e._v(" "),a("td",[e._v("\n                            Toggle the sidebar\n                        ")])]),e._v(" "),a("tr",[a("td",[e._v("Alt+Left Arrow")]),e._v(" "),a("td",[e._v("Navigate backwards through working files")])]),e._v(" "),a("tr",[a("td",[e._v("Alt+Right Arrow")]),e._v(" "),a("td",[e._v("Navigate forwards through working files")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl+Tab")]),e._v(" "),a("td",[e._v("Navigate History")])])])]),e._v(" "),a("h2",[e._v("The Viewbar")]),e._v(" "),a("p",[e._v("By default the Viewbar is located on the left hand side of the Visual Studio Code Window:\n                ")]),e._v(" "),a("img",{attrs:{src:n(107)}}),e._v(" "),a("table",{staticClass:"table"},[a("thead",[a("tr",[a("th",[e._v("Icon")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("img",{attrs:{src:n(98)}})]),e._v(" "),a("td",[e._v("Displays the file explorer sidebar.")])]),e._v(" "),a("tr",[a("td",[a("img",{attrs:{src:n(103)}})]),e._v(" "),a("td",[e._v("Displays the search sidebar")])]),e._v(" "),a("tr",[a("td",[a("img",{attrs:{src:n(99)}})]),e._v(" "),a("td",[e._v("Displays the Git integration sidebar")])]),e._v(" "),a("tr",[a("td",[a("img",{attrs:{src:n(96)}})]),e._v(" "),a("td",[e._v("Displays the Debugger sidebar")])])])]),e._v(" "),a("h2",[e._v("Status Bar")]),e._v(" "),a("p",[e._v("The blue bar at the bottom of the VS Code window is the Status Bar.")]),e._v(" "),a("img",{attrs:{src:n(105)}}),e._v(" "),a("p",[e._v("The Status Bar displays information such as:")]),e._v(" "),a("ul",[a("li",[e._v("The git branch you are currently viewing.")]),e._v(" "),a("li",[e._v("The number of errors and warnings in the current project.")]),e._v(" "),a("li",[e._v("The line and column number position of the cursor in the current file.")]),e._v(" "),a("li",[e._v("The file encoding format")]),e._v(" "),a("li",[e._v("The language that the current file is written in (if recognised).")]),e._v(" "),a("li",[e._v("A feedback icon")])]),e._v(" "),a("h2",[e._v("The Command Palette")]),e._v(" "),a("p",[e._v("The command palette allows you to perform commands including opening up files, running tasks, executing\n                    git commands, navigating code etc. ")]),e._v(" "),a("h2",[e._v("The Search Sidebar")]),e._v(" "),a("p",[e._v("The search icon allows you to type in a search term. The results will show any file where the search\n                    term is present. There are a number of advanced options such as regular expressions and matching\n                    case.")]),e._v(" "),a("h2",[e._v("Previewing Files")]),e._v(" "),a("p",[e._v("Some file types (e.g. markdown) will give you an option to preview within Code. When this option is available\n                    you will see the preview icon in the top right hand corner of the window:")]),e._v(" "),a("img",{attrs:{src:n(102)}}),e._v(" "),a("p",[e._v("Clicking this icon will change the view to preview mode. At this point the View Source icon will become\n                    visible:")]),e._v(" "),a("img",{attrs:{src:n(104)}}),e._v(" "),a("p",[e._v("Clicking this icon will take you back to the source code.")]),e._v(" "),a("h2",[e._v("Navigating and editing files")]),e._v(" "),a("p",[e._v("Press Ctrl+P twice to take you back to the previous file.")]),e._v(" "),a("p",[e._v("Within a file if you see a link to another file you can often hover over the file and then hold down\n                    Ctrl + click to open that file in another editor window.")]),e._v(" "),a("h2",[e._v("Supported Languages")]),e._v(" "),a("p",[e._v("Code supports a number of languages and provides features such as Syntax coloring, bracket matching,\n                    intellisense, linting and outline. In addition Code provides Refactoring features for C# and TypeScript.")]),e._v(" "),a("p",[e._v("Visit "),a("a",{attrs:{href:"https://code.visualstudio.com/Docs/languages"}},[e._v("https://code.visualstudio.com/Docs/languages")]),e._v("                        for a full list of the languages that Code supports.")]),e._v(" "),a("h2",[e._v("Refactoring")]),e._v(" "),a("p",[e._v("Visual Studio Code really shines when it comes to refactoring code. It provides functionality to perform\n                    the following:")]),e._v(" "),a("ul",[a("li",[e._v("Code Refactorings")]),e._v(" "),a("li",[e._v("Bracket Matching")]),e._v(" "),a("li",[e._v("HTML editing with Emmet")]),e._v(" "),a("li",[e._v("Selecting and Cursors")]),e._v(" "),a("li",[e._v("Powerfull Multi Cursors")]),e._v(" "),a("li",[e._v("JSON and CSS Intellisense")]),e._v(" "),a("li",[e._v("JavaScript Intellisense")]),e._v(" "),a("li",[e._v("JavaScript Intellisense with Typings")]),e._v(" "),a("li",[e._v("User Snippets")]),e._v(" "),a("li",[e._v("Sharing Snippets")]),e._v(" "),a("li",[e._v("Go to Definition, Find References, and Peek")]),e._v(" "),a("li",[e._v("References in TypeScript")]),e._v(" "),a("li",[e._v("Finding and Renaming Symbols")]),e._v(" "),a("li",[e._v("Errors and Formattin")]),e._v(" "),a("li",[e._v("Quick Line Movement and Editing")]),e._v(" "),a("li",[e._v("Refactoring Recap")])]),e._v(" "),a("p",[e._v("There is a detailed explanation of all these features in the John Pappa Pluralsight course: "),a("a",{attrs:{href:"www.pluralsight.com/courses/visual-studio-code"}},[e._v("Visual Studio Code")]),e._v("                        under section 4 - Refactoring")]),e._v(" "),a("p",[e._v("I will document these features at some point but in the meantime refer to the Pluralsight Course for\n                    further information")]),e._v(" "),a("h3",[e._v("Selecting Code")]),e._v(" "),a("p",[e._v("The following table describes some basic selection commands and keystrokes:")]),e._v(" "),a("table",{staticClass:"table"},[a("thead",[a("tr",[a("th",[e._v("Command")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tr",[a("td",[e._v("Select some text then Ctrl + F2")]),e._v(" "),a("td",[e._v("Highlights and places a multicursor at the end of every instance of the selected text in the\n                            current file.")])]),e._v(" "),a("tr",[a("td",[e._v("Alt + Click")]),e._v(" "),a("td",[e._v("Drops multicursors at the point where you click")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl + Alt + Down Arrow or Up Arrow")]),e._v(" "),a("td",[e._v("Draw cursors from the current position downward")])]),e._v(" "),a("tr",[a("td",[e._v("Select some text then Ctrl + D")]),e._v(" "),a("td",[e._v("Progressive multicursor selection. Ctrl + D will select subsequent instances of the selected\n                            text. Whilst Ctrl is still held press K to skip or jump over an instance.")])]),e._v(" "),a("tr",[a("td",[e._v("Move a line or block of code up or down")]),e._v(" "),a("td",[e._v("Select some text then Alt + Down Arrow or Up Arrow")])]),e._v(" "),a("tr",[a("td",[e._v("Duplicate a line or block of code up or down")]),e._v(" "),a("td",[e._v("Select some text then Shift + Alt + Down Arrow or Up Arrow")])]),e._v(" "),a("tr",[a("td",[e._v("Format Code")]),e._v(" "),a("td",[e._v("Shit + Alt + F")])])]),e._v(" "),a("h2",[e._v("Adding Typing files")]),e._v(" "),a("p",[e._v("Visual Studio Code allows you to add typing files so that it can offer Intellisense on third party librares\n                    (e.g. angular, jquery) You can add these files by issuing the following command in a powershell window\n                    (make sure you are in the desired directory):")]),e._v(" "),a("code",[e._v("tsd query -r -o -a install angular -s")]),e._v(" "),a("p",[e._v("Because angular is reliant on jquery the jquery.d.ts file will also be installed. The parameters have\n                    the following meanings:")]),e._v(" "),a("ul",[a("li",[e._v("-a denotes this is an action")]),e._v(" "),a("li",[e._v("-s saves to a file so that code remembers these commands")]),e._v(" "),a("li",[e._v("-o overwrites the file if it already exists")]),e._v(" "),a("li",[e._v("-r specifies a recursive search to pull back any references that the file might rely on (e.g. angular\n                        relies on jquery)")])]),e._v(" "),a("p",[e._v("The command will create a tsd.json file to track what has been added. As well as a tsd.d.ts file that\n                    lists the references in the project. It will also have added angular and jquery reference files.")]),e._v(" "),a("h2",[e._v("Built in and User Snippets")]),e._v(" "),a("p",[e._v("In addition to the built-in snippets that you can generate by starting to type some code then hitting\n                    tab (e.g. typing fun then using down arrow to select function Statement then pressing Tab will create\n                    a JavaScript function with placeholders for you to add the function name, the parameters and the\n                    body of the function) you can add User Snippets. All the User Snippets are stored on the local machine\n                    under a filename that corresponds to the Language they written in (e.g. javascript.json).")]),e._v(" "),a("p",[e._v("John Pappa has written some angular specific snippets for JavaScript and TypeScript that are located\n                    here:\n                    "),a("a",{attrs:{href:"http://jpapa.me/ngstyles"}},[e._v("http://jpapa.me/ngstyles")])]),e._v(" "),a("p",[e._v("In order to create a User snippet you have to provide:")]),e._v(" "),a("ul",[a("li",[e._v("Description - a description of the snippet")]),e._v(" "),a("li",[e._v("Prefix - the text that the user must type to trigger the snippet")]),e._v(" "),a("li",[e._v("Body - an array representing each line of the Snippet.")])]),e._v(" "),a("p",[a("strong",[e._v("Tip")]),e._v(" You may need to issue the Reload Window command from the Command Palette if you\n                    can't access the Snippet you have just created.")]),e._v(" "),a("p",[e._v("The various .json files that store this data are located in a location similar to:\n                    "),a("strong",[e._v("C:\\Users\\Max\\Appdata\\Roaming\\Code\\User\\Snippets")])]),e._v(" "),a("h2",[e._v("Go to Definition, Find References, and Peek")]),e._v(" "),a("p",[e._v("With a symbol highlighted press F12 to go to definition or Alt + F12 to peek at the definition.\n                ")]),e._v(" "),a("p",[e._v("To find all references in the file press Shift + F12. This will display a peek window with all the occurrences\n                    of the symbol listed. Clicking on an occurrence will move the peek to that position in the code.\n                    The peek window is interactive so you can type code into it that will persist in the file.")]),e._v(" "),a("h3",[e._v("References in TypeScript")]),e._v(" "),a("p",[e._v("The functionality in TypeScript is more comprehensive than the functionality in other languages.\n                ")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("Finding and Renaming Symbols")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("Errors and Formatting")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("Quick Line Movement and Editing")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h1",[e._v("Themes, Preferences and Keyboard Shortcuts")]),e._v(" "),a("h2",[e._v("Themes")]),e._v(" "),a("p",[e._v("Currently there is light, dark and high contrast themes.")]),e._v(" "),a("h2",[e._v("Default, User and Workspace Preferences")]),e._v(" "),a("p",[e._v("There are three types of preference settings:")]),e._v(" "),a("ul",[a("li",[e._v("Default - these are readonly and cannot be changed.")]),e._v(" "),a("li",[e._v("User - these relate to all instances of Code on the machine.")]),e._v(" "),a("li",[e._v("Workspace - these relate to the current project only and are stored in a settings.json file in the\n                        project.")])]),e._v(" "),a("p",[e._v('You can access User Preferences from the Command Palette by entering "Open User Settings". The Default\n                    Settings are read only but the User Settings in the settings.json file are editable. As an example\n                    the code below shows a settings.json file where two lines that specify how the editor deals with\n                    whitespace have been added.')]),e._v(" "),a("pre",[e._v("                    "),a("code",[e._v("\n    // Place your settings in this file to overwrite default and user settings."),a("br"),e._v("\n    {"),a("br"),e._v('\n        "editor.renderWhitespace": true,'),a("br"),e._v('\n        "files.trimTrailingWhitespace": true'),a("br"),e._v("\n    }")]),e._v("\n                ")]),e._v(" "),a("p",[e._v("Another useful example is the option to hide JavaScript files when a related TypeScript file exists:")]),e._v(" "),a("pre",[e._v("                    "),a("code",[e._v('\n        "files.exclude": {\n            "**/*.js": { "when": "$(basename).ts"} // hides js files when ts exists\n        }\n    ')]),e._v("\n                ")]),e._v(" "),a("p",[e._v("I couldn't however get this option to work when I tried it.")]),e._v(" "),a("h3",[e._v("Navigating the Default and User Settings Files")]),e._v(" "),a("p",[e._v("The easiest way to do this is to bring up the command palette with an @ sign to search for symbols then\n                    start typing the setting that you are interested in (e.g. css, javascript, typescript etc). Because\n                    the options are ordered by the type of preference they are you can then use the arrow keys to scroll\n                    through the relevant preferences.\n                ")]),e._v(" "),a("h2",[e._v("Key Bindings")]),e._v(" "),a("p",[e._v("In addition to the default keybindings you can specify your own.")]),e._v(" "),a("p",[e._v("The following table describes some useful default keyboard shortcuts")]),e._v(" "),a("table",{staticClass:"table"},[a("thead",[a("tr",[a("th",[e._v("Command")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Shit + Alt + F")]),e._v(" "),a("td",[e._v("Format Code")])]),e._v(" "),a("tr",[a("td",[e._v("Alt + F12")]),e._v(" "),a("td",[e._v("Peek")])]),e._v(" "),a("tr",[a("td",[e._v("Shift + F12")]),e._v(" "),a("td",[e._v("Show All References")])]),e._v(" "),a("tr",[a("td",[e._v("F12")]),e._v(" "),a("td",[e._v("Go to Definition")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl + P")]),e._v(" "),a("td",[e._v("Go to File")])]),e._v(" "),a("tr",[a("td",[e._v("Ctrl + 1 trhough 3")]),e._v(" "),a("td",[e._v("Focus 1st Panel (or 2nd or 3rd)")])]),e._v(" "),a("tr",[a("td",[e._v("F11")]),e._v(" "),a("td",[e._v("Toggle Full Screen")])])])]),e._v(" "),a("p",[e._v("A comprehensive list of the default key bindings can be found here:\n                    "),a("a",{attrs:{href:"https://code.visualstudio.com/Docs/editor/keybindings"}},[e._v("https://code.visualstudio.com/Docs/editor/keybindings")])]),e._v(" "),a("h2",[e._v("Defining Keybindings")]),e._v(" "),a("p",[e._v("In addition to the default key bindings you can define your own keybindings. These are stored in a file\n                    called keybindings.json located in C:\\Users\\{username}\\AppData\\Roaming\\Code\\User\n                ")]),e._v(" "),a("p",[e._v("You can add entries into the JSon file in the following format:")]),e._v(" "),a("ul",[a("li",[e._v("Key - the pressed key(s)")]),e._v(" "),a("li",[e._v("When - evaluated expresssion describing the context of when to execute the command")]),e._v(" "),a("li",[e._v("Command - the command to execute")])]),e._v(" "),a("p",[e._v("As an example a key binding to change to the Light Theme would be configured as follows:")]),e._v(" "),a("pre",[e._v("                    "),a("code",[e._v('\n    { "key": "ctrl+shift+l",\n        "command": "workbench.action.changeToLightTheme" }\n    ')]),e._v("\n                ")]),e._v(" "),a("h1",[e._v("Language Features")]),e._v(" "),a("p",[e._v("Code supports a plethora of languages to varying extents. It provides Syntax Coloring and Bracket matching\n                    for many languages including:")]),e._v(" "),a("ul",[a("li",[e._v("F#")]),e._v(" "),a("li",[e._v("Go")]),e._v(" "),a("li",[e._v("Java")]),e._v(" "),a("li",[e._v("HandleBars")]),e._v(" "),a("li",[e._v("Markdown")]),e._v(" "),a("li",[e._v("Objective-C")]),e._v(" "),a("li",[e._v("PowerShell")]),e._v(" "),a("li",[e._v("Razor")]),e._v(" "),a("li",[e._v("Ruby")]),e._v(" "),a("li",[e._v("SQL")]),e._v(" "),a("li",[e._v("XML")])]),e._v(" "),a("p",[e._v("It provides Syntax Coloring, Bracket Matching, Intellisense, linting and outlining for some languages\n                    including the following:")]),e._v(" "),a("ul",[a("li",[e._v("CSS")]),e._v(" "),a("li",[e._v("HTML")]),e._v(" "),a("li",[e._v("JavaScript")]),e._v(" "),a("li",[e._v("JSON")]),e._v(" "),a("li",[e._v("Less")]),e._v(" "),a("li",[e._v("Sass")])]),e._v(" "),a("p",[e._v("It provides Syntax Coloring, Bracket Matching, Intellisense, Linting, Outlining, Refactoring and Find\n                    All References for the following languages:")]),e._v(" "),a("ul",[a("li",[e._v("C#")]),e._v(" "),a("li",[e._v("TypeScript")])]),e._v(" "),a("h2",[e._v("HTML")]),e._v(" "),a("p",[e._v("Emmet is built-in to Code so you can enter Emmet HTML shorthand and press Tab to let Code expand your\n                    shorthand into full HTML as follows:")]),e._v(" "),a("code",[e._v("div>ul>li*4")]),e._v(" "),a("p",[e._v("Becomes a list with 4 list items included in a div.")]),e._v(" "),a("h2",[e._v("CSS")]),e._v(" "),a("p",[e._v("When in CSS you can hover over various elements to get information on the elements to which they will\n                    apply (e.g. this style will apply to any element that has a class of navbar that has a child element\n                    (denoted by the *)).")]),e._v(" "),a("p",[e._v("The Goto Symbol command can be useful when navigating a CSS file. For example you can enter "),a("code",[e._v("@navbar .")]),e._v("                        in the Goto Symbol palette to show everything that starts with navbar that has a class after it (denoted\n                    by the .).")]),e._v(" "),a("h3",[e._v("Intellisense and Emmet")]),e._v(" "),a("p",[e._v("It is important to distinguish between the functionality provided by Intellisense and the functionality\n                    provided by Emmet. For example if you type "),a("code",[e._v("ta")]),e._v(" in a CSS file and then hit Tab Intellisense\n                    will add a table-layout entry. You might have been trying to get Emmet to create a text-align entry.\n                    To do so, type ta then hit escape to exit from Intellisense mode then press Tab as follows:")]),e._v(" "),a("pre",[e._v("                    "),a("code",[e._v("\n        .faker {\n            text-align: left;\n        }\n    ")]),e._v("\n                ")]),e._v(" "),a("p",[e._v("Emmet will then enter a text-align entry for you.")]),e._v(" "),a("p",[e._v("You can then cycle through the valid values for text-align by using Ctrl+Shift+, and Ctrl+Shift+.\n                ")]),a("p"),a("p",[e._v("For text-align this will give you center, right, left and justify")]),e._v(" "),a("h3",[e._v("JSON")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("Markdown")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("C# and ASP.NET")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("p",[e._v("You can run asp.net applications from within Visual Studio Code on the PC and on the MAC")]),e._v(" "),a("h3",[e._v("JavaScript")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("JavaScript Intellisense")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h3",[e._v("tsd")]),e._v(" "),a("p",[e._v("TSD can be used to install typings files for TypeScript. You can install TSD using the Node Package\n                    Manager as follows:")]),e._v(" "),a("code",[e._v("npm install tsd -g")]),e._v(" "),a("p",[e._v("You can then use the tsd interface to install typings files for the current project, the following\n                    example install the angular and toastr typings files. jquery will also be installed because\n                    angular and toastr are reliant on jquery:")]),e._v(" "),a("code",[e._v("tsd query -r -o -a install angular toastr --save")]),e._v(" "),a("p",[e._v("The flags have the following meanings:")]),e._v(" "),a("table",{
staticClass:"table"},[a("thead",[a("tr",[a("th",[e._v("Flag")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("-r")]),e._v(" "),a("td",[e._v("Recursive - install any additional typings files that this file relies on.")])]),e._v(" "),a("tr",[a("td",[e._v("-o")]),e._v(" "),a("td",[e._v("Overwrite - overwrite any existing files")])]),e._v(" "),a("tr",[a("td",[e._v("-a")]),e._v(" "),a("td",[e._v("Action - which in this example is install")])]),e._v(" "),a("tr",[a("td",[e._v("--save")]),e._v(" "),a("td",[e._v("Store references to the installed typings files in the tsd.json file in the project")])])])]),e._v(" "),a("p",[e._v("You can also add references to typings files using code hints by highlighting an unrecognized\n                    symbol, clicking on the light bulb icon and selecting the 'Download type definition aaaa.d.ts'\n                    where aaa is the name of the typings file that Code will download.")]),e._v(" "),a("img",{attrs:{src:n(94)}}),e._v(" "),a("p",[e._v("When I do this I get a message as follows:")]),e._v(" "),a("img",{attrs:{src:n(95)}}),e._v(" "),a("p",[e._v("In order to get the intellisense and the typings file to work I had to add an entry in the jsonconfig.json\n                    file as follows:")]),e._v(" "),a("pre",[e._v("                            "),a("code",[e._v('\n    {\n        "compilerOptions": {\n        "target": "ES5"\n        },\n        "files": [\n            "typings/jquery/jquery.d.ts"\n        ]\n    }\n    ')]),e._v("\n                        ")]),e._v(" "),a("h3",[e._v("ES6 Gulp")]),e._v(" "),a("p",[e._v("npm install gulp -g")]),e._v(" "),a("p",[e._v("gulp serve")]),e._v(" "),a("p",[e._v("You can specify the version of EcmaScript in the jsconfig.json file. This is how Code knows what\n                    intellisense to provide.")]),e._v(" "),a("p",[e._v("When you type task in the command palette Code will scan the project directory for task files\n                    such gulpfile.js. These type of files have to adhere to a certain naming convention in order\n                    for Code to find and process them.")]),e._v(" "),a("h3",[e._v("TypeScript")]),e._v(" "),a("p",[e._v("Hover over a property and Code shows what it is.")]),e._v(" "),a("p",[e._v("Press Ctrl while hovering and Code displays a link")]),e._v(" "),a("p",[e._v("Click on the link to Go to definition.")]),e._v(" "),a("p",[e._v("Files in the same project are automotically scanned for symbols by VS Code. The typings files\n                    are there to provide Intellisense etc. for third party libraries. These are all stored in\n                    a typings folder within the project. The typings references get aggregated into a tsd.d.ts\n                    file to enhance the development time experience.")]),e._v(" "),a("p",[e._v("There is an additional file related specifically to TypeScript call tsconfig.json which is used\n                    to setup TypeScript specific configuration. Wherever this file is located is set to the TypeScript\n                    project's root. You can have several tsconfig.json files within a project.")]),e._v(" "),a("p",[e._v("There is a good article on setting up the TypeScript compiler and configuring the tasks.json\n                    file to run tsc here:\n                    "),a("a",{attrs:{href:"http://blogs.msdn.com/b/typescript/archive/2015/04/30/using-typescript-in-visual-studio-code.aspx"}},[e._v("\n                        http://blogs.msdn.com/b/typescript/archive/2015/04/30/using-typescript-in-visual-studio-code.aspx")])]),e._v(" "),a("h1",[e._v("Version Control and Git")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("h1",[e._v("Debugging")]),e._v(" "),a("strong",[e._v("Document this section from the Pluralsight course")]),e._v(" "),a("p",[e._v("John Pappa uses VS Code to debug server side and Chrome development tools for debugging the client.\n                ")]),e._v(" "),a("h1",[e._v("Integrating Code with External Tools via Tasks")]),e._v(" "),a("p",[e._v("Use launch.json by clicking on the cog icon in debug viewlet to start a node application")]),e._v(" "),a("p",[e._v("You can use a gulpfile.js or grunt to run things like typescript compile, jshint, serve, browser\n                    sync")]),e._v(" "),a("p",[e._v("Code can connect to tasks through the tasks.json file")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Hooking up Views and ViewModels in MVVM")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h2",[e._v("Overview")]),e._v(" "),a("p",[e._v("\n                        In this module we will cover different ways that Views can be hooked up to their ViewModels. We will\n                        also cover how databinding is used to expose data from your Data Models to your Views.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We will start with View-First Construction Patterns where the View is constructed first and then\n                        takes care of constructing and hooking up its own ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("Next we will cover Data Binding to make it clear how MVVM relies on data binding and uses it to flow\n                        data between the View and the ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Finally, we will cover ViewModel-First approach where Data Templates are used to create the View\n                        based on an instance of a ViewModel being placed into a data binding context.\n                    ")]),e._v(" "),a("h2",[e._v("View-First Construction")]),e._v(" "),a("p",[e._v("\n                        View-First Construction can be performed declaratively in the XAML. XAML parsing kicks in just as\n                        your View is being constructed initiated by the call to InitializeComponent() that is in your Views\n                        Constructor:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl x:Class="ZzaDashboard.Customers.CustomerEditView"\n         Width="400"\n         Loaded="OnLoaded"\n         ...>\n    <UserControl.DataContext>\n        <local:CustomerEditViewModel />\n    </UserControl.DataContext>\n</UserControl>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-001A")])]),e._v(" "),a("p",[e._v("\n                        whether the View is a Window, User Control or a Page. The parser generally works top to bottom and\n                        left to right as it works its way through your XAML. It calls the default constructor for each\n                        element as it encounters it and then sets any properties for the constructed object based on the\n                        attributes of that element.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(558)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001AB")])]),e._v(" "),a("p",[e._v("\n                        It also wires up event handlers based on the attributes as well.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Properties can also be set using nested elements for when the value of the property is an object\n                        that needs to be constructed as well:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(559)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001AC")])]),e._v(" "),a("p",[e._v("\n                        As a result of this process, simply adding your ViewModel as a nested element in the setter for the\n                        DataContext property allows you to satisfy the basic equation of MVVM.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Another way you can do View-First construction is by simply constructing the ViewModel yourself in\n                        the code behind of your View and setting the DataContext there with the instance:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public partial class CustomerListView : UserControl\n{\n    public CustomerListView()\n    {\n        this.DataContext = new CustomerListViewModel();\n        InitializeComponent();\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001B")])]),e._v(" "),a("p",[e._v("Typically, this is performed in the constructor method for your View but you could also defer the\n                        construction until the Loaded event of the View fires.\n                    ")]),e._v(" "),a("p",[e._v("\n                        One reason for constructing the ViewModel in the code-behind instead of the XAML is that the\n                        ViewModel constructor takes parameters. XAML parsing can only construct elements if they have a\n                        default constructor so if the ViewModel needs to have something passed into it that is accessible\n                        from the code behind of the View that might be another reason for doing the construction in the code\n                        behind.\n                    ")]),e._v(" "),a("p",[e._v("Another reason would be if you were using something like a dependency injection container to do the\n                        construction of the ViewModel. So that it can inject any dependencies the ViewModel has.\n                    ")]),e._v(" "),a("p",[e._v("Let's start putting together a sample that demonstrates View-First construction and that we can build\n                        on for the rest of the demos for this module and the next.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: View-First MVVM Hook-up")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-XAMLHookup-Start\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-XAMLHookup-End\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo we will create a View and a ViewModel and hook them up statically through the XAML.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The starting point for this demo is that we have a data layer (Zza.Data) covered previously. It's a\n                        separate class library project with a Entity Framework DbContext and some Model objects associated\n                        with that for a Pizza ordering domain:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(560)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001BA")])]),e._v(" "),a("p",[e._v("\n                        We've also got the repository layer that I also covered previously and we'll be consuming our data\n                        through that.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(561)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001BB")])]),e._v(" "),a("p",[e._v("\n                        We will put the View and the ViewModel in a Customers feature folder:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(562)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001BC")])]),e._v(" "),a("p",[e._v("\n                        The View is just a UserControl called CustomerListView (most of your Views will be UserControls) and\n                        the ViewModel is just a class called CustomerListViewModel:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(563)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001BD")])]),e._v(" "),a("p",[e._v("\n                        And it follows the naming conventions that the View has View at the end of it's type name and the\n                        ViewModel has ViewModel at the end of it's typename so there easy to correlate.\n                    ")]),e._v(" "),a("p",[e._v("Now before we dig into the MVVM let's go ahead and build this and I'll place an instance of my View\n                        in the MainWindow so we'll go to the designer, toolbox drag and drop CustomerListView:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(564)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001BE")])]),e._v(" "),a("p",[e._v("\n                        then right-click and select reset all from the Layout menu to remove the padding and margins etc:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(565)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001BF")])]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:Customers="clr-namespace:MVVMHookupDemo.Customers"\n        x:Class="MVVMHookupDemo.MainWindow"\n        Title="MainWindow"\n        Height="350"\n        Width="525">\n    <Grid>\n        <Customers:CustomerListView/>\n    </Grid>\n</Window>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-001BG")])]),e._v(" "),a("p",[e._v("\n                        And it takes a way all the margin, sizing and so on so it fills the Grid cell. That's just a fancy\n                        way through drag and drop of creating an instance of the UserControl in the View and adding the\n                        appropriate namespace.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now let's focus on the ViewModel since that's the heart of MVVM. First, make the ViewModel class\n                        public and add a property (using the prop Visual Studio code snippet). Make the type of the property\n                        an ObservableCollection of type Customer (don’t forget to add the relevant using statements). Name\n                        the property Customers:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ObservableCollection<Customer> Customers { get; set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001")])]),e._v(" "),a("p",[e._v("\n                        Next we will populate the Collection. Add an instance of our repository to the ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private ICustomersRepository _repo = new CustomersRepository();")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001C")])]),e._v(" "),a("p",[e._v("and a constructor to populate our Customers collection.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public CustomerListViewModel()\n{\n    Customers = _repo.GetCustomersAsync()\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001D")])]),e._v(" "),a("p",[e._v("So first we might try setting the Customers collection through the repo:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Customers = _repo.GetCustomersAsync()")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001E")])]),e._v(" "),a("p",[e._v("But the challenge here is that this is an async method that produces a Task and not the Result and we\n                        can't use async and await keywords in a constructor in .Net so we will have to force the method to\n                        execute synchronously which you can do with the .Result property on a Task:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Customers = _repo.GetCustomersAsync().Result;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001E")])]),e._v(" "),a("p",[e._v("Now that still doesn't produce what we need cause the repository produces a List and we need an\n                        ObservableCollection so we'll have to wrap the result:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Customers = new ObservableCollection<Customer>(_repo.GetCustomersAsync().Result);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-002")])]),e._v(" "),a("p",[e._v("Now we would generally be good to go with this but something you generally want to do if you have\n                        lines of code like this in the construction process that are going to do complicated things like try\n                        and go to a database or call a service is to add a guard condition to make sure they don't execute\n                        in the designer or they can break the design surface so you can't use it anymore. To do that we'll\n                        add a simple line of code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("if(DesignerProperties.GetIsInDesignMode(\nnew System.Windows.DependencyObject())) return;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-002A")])]),e._v(" "),a("p",[e._v("\n                        to the ViewModel to prevent the execution of the above code when in the designer using the\n                        GetIsInDesignMode() method.\n                    ")]),e._v(" "),a("p",[e._v("In the CustomerListView.xaml View add a namespace to bring in the Customers subfolder and the types\n                        within it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:Class="MVVMHookupDemo.Customers.CustomerListView"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-002B")])]),e._v(" "),a("p",[e._v("\n                        Now we can finally hookup MVVM. To do that statically with XAML it's simply a matter of setting the\n                        DataContext in XAML to an instance of the ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<UserControl.DataContext>\n    <cust:CustomerListViewModel />\n</UserControl.DataContext>")])]),e._v(" "),a("figcaption",[e._v("Fig 03-003")])]),e._v(" "),a("p",[e._v("And with that we have MVVM hooked up. Now let's prove it by adding something in that actually shows\n                        the data being produced by the ViewModel. Add a DataGrid to display the data:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <DataGrid ItemsSource="{Binding Customers}" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-004")])]),e._v(" "),a("p",[e._v("Notice the binding for the DataGrid simply presumes that the DataContext is set in the standard MVVM\n                        way and it can point to the properties exposed by that ViewModel specifically our Customers\n                        collection.\n                    ")]),e._v(" "),a("p",[e._v("Now if you run the application the DataGrid should be populated with data:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(566)}}),e._v(" "),a("figcaption",[e._v("Fig 03-005")])]),e._v(" "),a("p",[e._v("We can also hook-up the View and ViewModel from the code behind with code like this (comment out the\n                        lines in the XAML first):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("public CustomerListView()\n{\n    this.DataContext = new CustomerListViewModel();\n    IntializeComponent();\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-006")])]),e._v(" "),a("p",[e._v("Now we have the equation of MVVM satisfied through imperative code. We can run the application again\n                        and we'll see the same result. You can do that construction of the ViewModel before or after the\n                        call to InitializeComponent() it generally doesn’t matter.\n                    ")]),e._v(" "),a("p",[e._v("So those are the basics of statically hooking up your ViewModel from the View either in XAML or in\n                        code-behind.\n                    ")]),e._v(" "),a("h2",[e._v("View-First with ViewModelLocators")]),e._v(" "),a("p",[e._v("\n                        The next form of View-First construction is a meta-pattern called ViewModelLocator. This is sort of\n                        a pseudo pattern or common approach that is layered on top of the MVVM pattern.\n                    ")]),e._v(" "),a("p",[e._v("\n                        When doing MVVM every View has to be hooked up to its ViewModel. The ViewModelLocator is a way of\n                        centralising the code that takes care of that - decoupling the View more so it does not have to\n                        explicitly know about its ViewModel type and how to construct it.\n                    ")]),e._v(" "),a("p",[e._v("\n                        There are a number of different approaches to using ViewModelLocators. The one covered here is most\n                        similar to the one that is part of the Prism framework.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The ViewModelLocator provides a standard, consistent, declarative and more loosely coupled way of\n                        doing View-First construction in that it automates the process of getting our ViewModel hooked up to\n                        our View.\n                    ")]),e._v(" "),a("p",[e._v("The ViewModelLocator follows the high level process below:")]),e._v(" "),a("ul",[a("li",[e._v("The ViewModelLocator has to figure out what type is being constructed")]),e._v(" "),a("li",[e._v("As long as you have a convention for naming Views and ViewModels the ViewModelLocator can infer\n                            what the ViewModel Type is associated with that View\n                        ")]),e._v(" "),a("li",[e._v("Once it knows the ViewModel Type needed it can construct that ViewModel – possibly using a\n                            dependency injection container\n                        ")]),e._v(" "),a("li",[e._v("Finally, it sets the Views DataContext property to the ViewModel")])]),e._v(" "),a("h2",[e._v("Demo: MVVM Hook-up with ViewModelLocator")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-ViewModelLocator-Start\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-ViewModelLocator-End\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo we will look at using a ViewModelLocator to wire up our View and ViewModel in a\n                        View-First way.\n                    ")]),e._v(" "),a("p",[e._v("We start this demo from the end of the previous demo. Firstly, make sure you remove the DataContext\n                        hook-up in XAML and code in the code behind.\n                    ")]),e._v(" "),a("p",[e._v("Define a ViewModelLocator class called ViewModelLocator. Make it public and static.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace MVVMHookupDemo\n{\n    public static class ViewModelLocator\n    {\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-007A")])]),e._v(" "),a("p",[e._v("\n                        Use the propa code snippet to stub out a new Attached Property called AutoWireViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public static bool GetAutoWireViewModel(DependencyObject obj)")])]),e._v(" "),a("figcaption",[e._v("Fig 03-007AB")])]),e._v(" "),a("p",[e._v("\n                        make its type Boolean:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public static bool GetMyProperty(DependencyObject obj)\n{\n    return (bool)obj.GetValue(MyPropertyProperty);\n}\n\npublic static void SetMyProperty(DependencyObject obj, bool value)\n{\n    obj.SetValue(MyPropertyProperty, value);\n}\n\n// Using a DependencyProperty as the backing store for MyProperty. This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty MyPropertyProperty =\n    DependencyProperty.RegisterAttached("MyProperty",\n    typeof(bool), typeof(ViewModelLocator),\n    new PropertyMetadata(false, MyPropertyChanged));')])]),e._v(" "),a("figcaption",[e._v("Fig 03-007B")])]),e._v(" "),a("p",[e._v("\n                        and make it contained within the ViewModelLocator class with a default of false.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("// Using a DependencyProperty as the backing store for MyProperty. This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty MyPropertyProperty =\n    DependencyProperty.RegisterAttached(&quot;MyProperty&quot;,\n    typeof(bool), typeof(ViewModelLocator),\n    new PropertyMetadata(false, MyPropertyChanged));")])]),e._v(" "),a("figcaption",[e._v("Fig 03-007C")])]),e._v(" "),a("p",[e._v("Don't forget to resolve dependency object by adding the System.Windows namespace.")]),e._v(" "),a("p",[e._v("\n                        You now have a basic Attached Property definition. Next we will turn this into a simple Behaviour by\n                        wiring up a change event handler for the property. Add a handler in the PropertyMetadata called\n                        AutoWireViewModelChanged\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public static readonly DependencyProperty AutoWireViewModelProperty =\nDependencyProperty.RegisterAttached("AutoWireViewModel",\ntypeof(bool), typeof(ViewModelLocator),\nnew PropertyMetadata(false, AutoWireViewModelChanged));')])]),e._v(" "),a("figcaption",[e._v("Fig 03-008")])]),e._v(" "),a("p",[e._v("Stub this method out:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private static void AutoWireViewModelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n    if (DesignerProperties.GetIsInDesignMode(d)) return;\n    var viewType = d.GetType();\n    var viewTypeName = viewType.FullName;\n    var viewModelTypeName = viewType + "Model";\n    var viewModelType = Type.GetType(viewModelTypeName);\n    var viewModel = Activator.CreateInstance(viewModelType);\n    ((FrameworkElement)d).DataContext = viewModel;\n\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 03-009")])]),e._v(" "),a("p",[e._v("\n                        In the new method we want to automate the process of figuring what ViewModel to create and wiring it\n                        up to the View. Firstly, add a guard condition that does nothing if we are in DesignMode:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("if (DesignerProperties.GetIsInDesignMode(d)) return;")]),e._v(" "),a("figcaption",[e._v("Fig 03-009A")])]),e._v(" "),a("p",[e._v("Next we need to get the ViewType name which we can do with a couple of lines of code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var viewType = d.GetType();\nvar viewTypeName = viewType.FullName;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-010")])]),e._v(" "),a("p",[e._v("\n                        The first one takes the d argument that's coming into the change handler which will be the element\n                        on which this Attached Property is being set. We are expecting that this Attached Property will only\n                        be used on the root element of a View. So by getting the type of that element we know what the View\n                        type is.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then we can get the type name from the FullName property of the Type object. Next from the viewType\n                        we can infer a ViewModel type (as long as we are following a standard convention). And, as you've\n                        seen so far, the ViewModels for me are always side by side with the Views and they're inside of a\n                        feature folder or in some common folder together. So all we need to do is append model onto the\n                        ViewType name and we have type name of the ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('var viewModelTypeName = viewType + "Model";\nvar viewModelType = Type.GetType(viewModelTypeName);')])]),e._v(" "),a("figcaption",[e._v("Fig 03-011")])]),e._v(" "),a("p",[e._v('So with the above code we can take the viewTypeName append "Model" to it (that gives us our\n                        viewModelTypeName) and then we do a GetType on that to get the actual type object for our ViewModel.\n                    ')]),e._v(" "),a("p",[e._v("We use the Activator.CreateInstance method to create an instance of the ViewModel type.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var viewModel = Activator.CreateInstance(viewModelType);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-012")])]),e._v(" "),a("p",[e._v("And now we have our ViewModel instance.")]),e._v(" "),a("p",[e._v("\n                        Finally, we set the DataContext of the View to the newly created ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("((FrameworkElement)d).DataContext = viewModel;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-013")])]),e._v(" "),a("p",[e._v("Now that our simple ViewModelLocator is complete we can use it to wire up our View and ViewModel.")]),e._v(" "),a("p",[e._v("In the View add a namespace so that we can get to the ViewModelLocator type in the root of our\n                        project:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:local="clr-namespace:MVVMHookupDemo"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-013A")])]),e._v(" "),a("p",[e._v("Next on our root element which is the ViewType I add the AutoWireViewModel property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('local:ViewModelLocator.AutoWireViewModel="True"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-014")])]),e._v(" "),a("p",[e._v("By doing that our ViewModelLocator will kick in as that property is being set and will take care of\n                        the wiring for us. A key thing to notice about this is the View is no longer coupled in anyway to\n                        what the type of it's ViewModel is or how it get's constructed. That's all been moved out to that\n                        central location inside the ViewModelLocator. So now not only does the ViewModel not know exactly\n                        what type it's married up to. The View doesn't know what it's married to in terms of a ViewModel\n                        which gives you even better decoupling.\n                    ")]),e._v(" "),a("p",[e._v("\n                        You do the exact same thing in any View that you want to hook up to a ViewModel. You just used the\n                        Attached Property and by convention it finds the right ViewModel for you. To emphasize this let’s\n                        add another View (CustomerDetailView) and associated ViewModel (CustomerDetailViewModel) in the\n                        Customers folder.\n                    ")]),e._v(" "),a("p",[e._v("Add a constructor to the ViewModel so we can set a breakpoint and see that it is being called:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("public CustomerDetailViewModel()\n{\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig03-014A")])]),e._v(" "),a("p",[e._v("And again add the local namespace:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('xmlns:local="clr-namespace:MVVMHookupDemo"')]),e._v(" "),a("figcaption",[e._v("Fig03-014B")])]),e._v(" "),a("p",[e._v("\n                        And add the AutoWireViewModel property (set to true) in the new Views XAML as we did before:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('local:ViewModelLocator.AutoWireViewModel="True"')]),e._v(" "),a("figcaption",[e._v("Fig03-014C")])]),e._v(" "),a("p",[e._v("In the MainWindow drag the CustomerDetailView from the toolbox to the design surface (make some room\n                        for it first).\n                    ")]),e._v(" "),a("p",[e._v("Run the application.")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(567)}}),e._v(" "),a("figcaption",[e._v("Fig03-014D")])]),e._v(" "),a("p",[e._v("You can see that we are hitting the breakpoint in our ViewModel's constructor because it was auto\n                        wired up and our previous view is getting it's ViewModel data so that's all wired up as well:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(568)}}),e._v(" "),a("figcaption",[e._v("Fig03-014DA")])]),e._v(" "),a("p",[e._v("The advantages of using a ViewModelLocator are:")]),e._v(" "),a("ul",[a("li",[e._v("A standard declaration in every View")]),e._v(" "),a("li",[e._v("The View is not coupled to its particular ViewModel Type other than through the conventions of\n                            the ViewModelLocator\n                        ")]),e._v(" "),a("li",[e._v("If that ViewModelLocator is written in a flexible way to be able to override those conventions\n                            and also possibly do something like use a container internally to construct the ViewModel it can\n                            do dependency injection in that process (we will see a demo of this later when we get to the\n                            Prism framework that has a ViewModelLocator in it)\n                        ")])]),e._v(" "),a("h2",[e._v("Data Binding Support for MVVM")]),e._v(" "),a("p",[e._v("\n                        Data binding is the key feature that differentiates MVVM from other UI separation patterns like MVC\n                        and MVP. For data binding to work you need to have a View or set of UI elements constructed:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl x:Class="..." ...>\n    <Grid>\n        ...\n        <Label Content="First Name:" ... />\n        <TextBox ... Text="{Binding Customer.FirstName" />\n        <Label Content="Last Name:" ... />\n        <TextBox ... Text="{Binding Customer.LastName" />\n        <Button ... Command="{Binding SaveCommand}" />\n    </Grid>\n</UserControl>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-014DB")])]),e._v(" "),a("p",[e._v("\n                        You also need another object that the bindings will point to:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class CustomerEditViewModel\n    : INotifyPropertyChanged\n{\n    public Customer Customer\n    {\n        ...\n    }\n\n    public ICommand SaveCommand { get; set; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 033-014DC")])]),e._v(" "),a("p",[e._v("\n                        In MVVM the main thing the elements in your View bind to are properties exposed by the ViewModel.\n                        The order that the View and ViewModel are constructed depend on the situation in the application.\n                        We've already looked at several ways to do View first and later in this module we'll look at how to\n                        do ViewModel first.\n                    ")]),e._v(" "),a("p",[e._v("Whichever order that happens in and wherever the code resides ultimately a View and ViewModel get\n                        constructed and the DataContext of the View gets set to the ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Because of the way a DataContext works in XAML the DataContext set at the root element also becomes\n                        the DataContext for every child element (unless it explicitly sets the DataContext property to\n                        something else or it is being rendered out as part of an Items control which sets the DataContext to\n                        the item).\n                    ")]),e._v(" "),a("p",[e._v("\n                        Then child elements in the View have the opportunity to bind to properties exposed by the ViewModel\n                        whether those properties expose model objects, discrete values or commands.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Depending on the element property and what it's bound to in the ViewModel those bindings can form a\n                        one way or bi-directional communication path to flow data back and forth between the View and\n                        ViewModel as well as setting up Command or Behaviour based communication paths:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(569)}}),e._v(" "),a("figcaption",[e._v("Fig03-014E")])]),e._v(" "),a("p",[e._v("Let's look at data binding in action supporting MVVM in a demo.")]),e._v(" "),a("h2",[e._v("Demo: Data Binding for MVVM Data Flows")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-DataBinding-Start\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-DataBinding-End\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo we will review how data binding works and show how it supports the ViewModel and Model\n                        Types. The starting point for this one is the end of the XAML wire up demo at the beginning of the\n                        module.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Open the CustomerListView. Replace the previous DataGrid (which by default has AutoGenerateColumns\n                        set to true) with one that specifies more explicit column definitions:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <DataGrid x:Name="customerDataGrid"\n              AutoGenerateColumns="False"\n              EnableRowVirtualization="True"\n              ItemsSource="{Binding Customers}"\n              RowDetailsVisibilityMode="VisibleWhenSelected">\n        <DataGrid.Columns>\n            <DataGridTextColumn x:Name="firstNameColumn"\n                                Binding="{Binding FirstName}"\n                                Header="First Name"\n                                Width="SizeToHeader" />\n            <DataGridTextColumn x:Name="lastNameColumn"\n                                Binding="{Binding LastName}"\n                                Header="Last Name"\n                                Width="SizeToHeader" />\n            <DataGridTextColumn x:Name="phoneColumn"\n                                Binding="{Binding Phone}"\n                                Header="Phone"\n                                Width="SizeToHeader" />\n        </DataGrid.Columns>\n    </DataGrid>\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015")])]),e._v(" "),a("p",[e._v("\n                        The DataGrid is still bound to the Customers collection exposed by our ViewModel but we have\n                        individual column definitions which have their own Bindings. As discussed before this ItemSource is\n                        able to bind to the Customers property because the overall DataContext for the View was set to the\n                        ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("These bindings down here are also DataContext bindings:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGridTextColumn x:Name="firstNameColumn"\n                        Binding="{Binding FirstName}"\n                        Header="First Name"\n                        Width="SizeToHeader" />\n    <DataGridTextColumn x:Name="lastNameColumn"\n                        Binding="{Binding LastName}"\n                        Header="Last Name"\n                        Width="SizeToHeader" />\n    <DataGridTextColumn x:Name="phoneColumn"\n                        Binding="{Binding Phone}"\n                        Header="Phone"\n                        Width="SizeToHeader" /')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015A")])]),e._v(" "),a("p",[e._v("\n                        but they are not binding against the ViewModel itself because of the way an ItemSource works. When\n                        an ItemSource binds to it's collection it renders out a container for each item it's rendering and\n                        it sets the DataContext for that container to the item. So the overall DataContext for each cell\n                        within a row here is going to be and individual Customer in that collection. So these bindings can\n                        just use the simple path syntax here to point to properties on the individual customer that the row\n                        is being rendered out for.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now to see things in action here we're going to go expand some of our properties. So let me go to my\n                        CustomerListViewModel and drop down to my Customer property and expand it to have a backing member\n                        variable.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ObservableCollection<Customer> Customers\n{\n    get\n    {\n        return customers;\n    }\n    set\n    {\n        customers = value;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig03-015B")])]),e._v(" "),a("p",[e._v("Likewise, I'm going to drop into the Customer Model object type and find the FirstName property and\n                        expand it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private string firstName;\npublic string FirstName\n{\n    get\n    {\n        return _firstName;\n    }\n    set\n    {\n        _firstName = value;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig03-015C")])]),e._v(" "),a("p",[e._v("Now we can go back to our ViewModel and I'm going to set a break point on the setter of the Customers\n                        property and on the line of code in our constructor that's actually going to try and set that by\n                        going out to the repository and getting Customers:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public CustomerListViewModel()\n{\n    if (DesignerProperties.GetIsInDesignMode(\n        new System.Windows.DependencyObject())) return;\n\n    Customers = new ObservableCollection<Customer>( _repository.GetCustomersAsync().Result);\n}\n\npublic ObservableCollection<Customer> Customers\n{\n    get\n    {\n        return _customers;\n    }\n    set\n    {\n        _customers = value;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-015D")])]),e._v(" "),a("p",[e._v("And then I'll drill down into that Customers repository to the GetCustomers method and set a\n                        breakpoint here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public Task<List<Customer>> GetCustomersAsync()\n{\n    return _context.Customers.ToListAsync();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-015E")])]),e._v(" "),a("p",[e._v("So if I start up now basically XAML parsing is happening, starting at the top and it's trying to\n                        construct our ViewModel. So it comes into our ViewModel constructor now and it's trying to execute\n                        this line of code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Customer = new ObservableCollection<Customer>(\n    _repository.GetCustomersAsync().Result);\n                ")])]),e._v(" "),a("figcaption",[e._v("Fig03-015F")])]),e._v(" "),a("p",[e._v("Which means it first has to go execute GetCustomersAsync. If I hit F5 to continue we'll hit the line\n                        of code inside the repository that is doing an async call to the database to get the Customers back:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("return context.Customers.ToListAsync();")])]),e._v(" "),a("figcaption",[e._v("Fig03-015G")])]),e._v(" "),a("p",[e._v("And then when that call completes, if I hit F5 again, now we see we're in the set block for our\n                        Customers property cause this property setter up here is being called.\n                    ")]),e._v(" "),a("p",[e._v("Now if I go ahead and put a break point on the get block for the Customer:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("get\n{\n    return _customers; // breakpoint on this line\n}\n")])]),e._v(" "),a("figcaption",[e._v("Fig03-015H")])]),e._v(" "),a("p",[e._v("and the get block for the Customer FirstName property in the Customer model object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("get\n{\n    return _firstName; // breakpoint on this line\n}\n")])]),e._v(" "),a("figcaption",[e._v("Fig03-015I")])]),e._v(" "),a("p",[e._v("and go ahead an run again. Now we see the get block of the Customers property is being called:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ObservableCollection<Customer> Customers\n{\n    get\n    {\n        return _customers;\n    }\n    set\n    {\n        _customers = value;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-015J")])]),e._v(" "),a("p",[e._v("And this is the data binding that's in the View right here:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataGrid x:Name="customerDataGrid"\n      AutoGenerateColumns="False"\n      EnableRowVirtualization="True"\n      ItemsSource="{Binding Customers}"\n      RowDetailsVisibilityMode="VisibleWhenSelected">\n<DataGrid.Columns>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015K")])]),e._v(" "),a("p",[e._v("on the ItemsSource that now needs to be resolved and is going to pull those Customers into the\n                        DataGrid. If we execute further now we can see the getter of each Customer object, first Derek:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(570)}}),e._v(" "),a("figcaption",[e._v("Fig03-015L")])]),e._v(" "),a("p",[e._v("Then Bernard, then Jordan:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(571)}}),e._v(" "),a("figcaption",[e._v("Fig03-015M")])]),e._v(" "),a("p",[e._v("as it's rendering out the individual rows of the DataGrid.")]),e._v(" "),a("p",[e._v("Now if we go ahead and run past all of that:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(572)}}),e._v(" "),a("figcaption",[e._v("Fig03-015N")])]),e._v(" "),a("p",[e._v("because this DataGrid is editable by default we can see the bi-directional nature of the bindings\n                        which allows us to communicate back down into those ViewModel Properties or Model Properties.\n                    ")]),e._v(" "),a("p",[e._v("In this case I'm going to set a break point on the set block of the Customer and we'll go ahead and\n                        edit Derek's first name here in the UI:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(573)}}),e._v(" "),a("figcaption",[e._v("Fig03-015O")])]),e._v(" "),a("p",[e._v("Now the way the DataGrid works by default is that I can tab off that field and it's going to buffer\n                        those changes in memory until I actually change focus off of the row and then it actually goes and\n                        sets all of those properties that were modified as part of that editing process.\n                    ")]),e._v(" "),a("p",[e._v("So now we can see the setter being called for this FirstName property because we edited it:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(574)}}),e._v(" "),a("figcaption",[e._v("Fig03-015P")])]),e._v(" "),a("p",[e._v("So you can see that the data bindings to ViewModel Properties and to Model Properties form a\n                        bidirectional communication path - first to pull data into the View from the ViewModel or Model\n                        properties and then to push data back down when things change in the View.\n                    ")]),e._v(" "),a("h2",[e._v("ViewModel-First Construction with DataTemplates")]),e._v(" "),a("p",[e._v("\n                        ViewModel-First leverages the capabilities of implicit Data Templates in WPF. Implicit data\n                        templates can automatically select an appropriate template from the current Resource Dictionary for\n                        an element that is using data binding. They do this based on the type of the data object that is\n                        being rendered by the data binding.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The way this works is that you first have some element that is binding to a Data Object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ContentControl Content="{Binding CurrentViewModel}" />')])]),e._v(" "),a("figcaption",[e._v("Fig03-015Q")])]),e._v(" "),a("p",[e._v("When the property that is being bound on the control drives the rendered content on that control\n                        (such as ContentControl Content property or an ItemsControl ItemSource property) the control will\n                        look at the object produced by the binding. If it’s a UI element the control will just render the\n                        element as content based on its layout scheme for children but if the object produced by the binding\n                        is not a UI element such as a ViewModel instance\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(575)}}),e._v(" "),a("figcaption",[e._v("Fig03-015R")])]),e._v(" "),a("p",[e._v("the Control will go and look at the current Resource Dictionary that is in scope for the element and\n                        see if it can locate a Data Template that is mapped to the type of the object that is being produced\n                        by the binding:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(576)}}),e._v(" "),a("figcaption",[e._v("Fig03-015S")])]),e._v(" "),a("p",[e._v("If it finds a match it creates an instance of the root element found in that data template:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(577)}}),e._v(" "),a("figcaption",[e._v("Fig03-015T")])]),e._v(" "),a("p",[e._v("which implicitly causes the construction of any Child elements. Then it renders that element as the\n                        Child content after having set the DataContext property of the root element to the Data Object\n                        instance that kicked of the whole process:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(578)}}),e._v(" "),a("figcaption",[e._v("Fig03-015U")])]),e._v(" "),a("p",[e._v("Which in this example means the DataContext of the Child View is set to its ViewModel marrying them\n                        up properly for MVVM.\n                    ")]),e._v(" "),a("h2",[e._v("Demo: Explicit and Implicit DataTemplates")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-DataTemplates-Start\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-DataTemplates-End\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now let’s look at how you do ViewModel-First leveraging data templates (specifically implicit data\n                        templates).\n                    ")]),e._v(" "),a("p",[e._v("\n                        Starting point for this demo is the beginning of the module where we had our CustomersListView all\n                        hooked up through XAML and in the case of our ViewModel it's pretty much unchanged it just exposes\n                        that Customers property and populates it on construction:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class CustomerListViewModel\n{\n    private ObservableCollection<Customer> _customers;\n    private ICustomersRepository _repository = new CustomersRepository();\n\n    public CustomerListViewModel()\n    {\n        if (DesignerProperties.GetIsInDesignMode(\n            new System.Windows.DependencyObject())) return;\n\n        Customers = new ObservableCollection<Customer>( _repository.GetCustomersAsync().Result);\n    }\n\n    public ObservableCollection<Customer> Customers\n    {\n        get\n        {\n            return _customers;\n        }\n        set\n        {\n            _customers = value;\n        }\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-015UA")])]),e._v(" "),a("p",[e._v("\n                        The first step is to use Data Templates in a basic Data Binding scenario. Split the DataGrid into\n                        two rows of equal height:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid.RowDefinitions>\n    <RowDefinition Height="*" />\n    <RowDefinition Height="*" />\n</Grid.RowDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015V")])]),e._v(" "),a("p",[e._v("The DataGrid will fall into the first row and we're going to add a ListBox into the second row with a\n                        Binding to the Customers property (the same one the DataGrid is bound to):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox Grid.Row="1"\n     ItemsSource="{Binding Customers}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015VA")])]),e._v(" "),a("p",[e._v("\n                        If you run now what we're seeing is Zza.Data.Customer for each Customer:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(579)}}),e._v(" "),a("figcaption",[e._v("Fig03-015W")])]),e._v(" "),a("p",[e._v("What's actually happening there is that when the binding gets the object it looks and sees if it's a\n                        UI element and if so if can just render it out. If not it just ToString()'s the object if it's not\n                        told about a data template or can't locate one through implicit templates. So to fix this with\n                        implicit templates let's go and define a data template.\n                    ")]),e._v(" "),a("p",[e._v("For that I'm going to go up to the root here and add a Resources section to the root containing a\n                        DataTemplate called CustomerTemplate:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.Resources>\n    <DataTemplate x:Key="CustomerTemplate">\n        <Border BorderThickness="3"\n                BorderBrush="Blue">\n            <StackPanel>\n                <TextBlock Text="{Binding FirstName}" />\n                <TextBlock Text="{Binding LastName}" />\n                <TextBlock Text="{Binding Phone}" />\n            </StackPanel>\n        </Border>\n    </DataTemplate>\n</UserControl.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-016")])]),e._v(" "),a("p",[e._v("So we can see here this is just a DataTemplate containing a StackPanel. It's got a key of\n                        CustomerTemplate. And then to actually use the template, we would go back to the ListBox and use the\n                        ItemTemplate property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ListBox ItemsSource="{Binding Customers}"\n    ItemTemplate="{StaticResource CustomerTemplate}"\n    Grid.Row="1" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-017")])]),e._v(" "),a("p",[e._v("So now you can see we instruct the ListBox to go use that specific template for rendering out those\n                        customers and now when we run we will get that presentation of firstname, lastname, and phone for\n                        each Customer:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(580)}}),e._v(" "),a("figcaption",[e._v("Fig03-018")])]),e._v(" "),a("p",[e._v("\n                        To make this an implicit template we remove the ItemTemplate from the ListBox, go back to the\n                        Template definition and instead of a key we would give it a DataType:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate DataType="{x:Type data:Customer}">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-019")])]),e._v(" "),a("p",[e._v("Using the x:Type markup extension here is very important. If you've been exposed to Silverlight or\n                        other XAML languages that don't have a x:Type markup extension you might be tempted to just put\n                        data:Customer there for the DataType but it wouldn't work in WPF. You have to use the x:Type markup\n                        extension which is like a type of operator in XAML. So we basically point to the Customer data type\n                        which is out in our Zza.Data namespace which I already have an XML namespace defined for at the top.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:data="clr-namespace:Zza.Data;assembly=Zza.Data"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-020")])]),e._v(" "),a("p",[e._v("And now when we run we still get the rendering of the Customers as we did before with their\n                        DataTemplate because it's automatically mapping the type of the object being rendered, locating the\n                        appropriate DataTemplate out of the Resources and applying that as the way it visually renders that\n                        Customer.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(581)}}),e._v(" "),a("figcaption",[e._v("Fig03-020A")])]),e._v(" "),a("p",[e._v("Next let's take a look at how this can be leveraged for wiring up Views and ViewModels.")]),e._v(" "),a("h2",[e._v("Demo: Implicit DataTemplates for ViewModel-First MVVM Hook-up")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-DataTemplates-Start\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex03-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 3\\MVVMHookupDemo-DataTemplates-End\\MVVMHookupDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex03-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now we want to use DataTemplates to wire up our View and ViewModel. To do this you generally want to\n                        have a hierarchical scheme which we'll get into later but first off we're going to add a ViewModel\n                        to our MainWindow\n                    ")]),e._v(" "),a("p",[e._v("\n                        Add a CurrentViewModel property to this class. For demo purposes statically wire this up to an\n                        instance of the CustomerListViewModel. So we are exposing that child ViewModel now as something that\n                        can be data bound to from elements within the MainWindow.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace MVVMHookupDemo\n{\n    public class MainWindowViewModel\n    {\n        public MainWindowViewModel()\n        {\n            CurrentViewModel = new CustomerListViewModel();\n        }\n        public object CurrentViewModel { get; set; }\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 03-020B")])]),e._v(" "),a("p",[e._v("\n                        The next step is to wire this up as the ViewModel for the MainWindow. We could use a\n                        ViewModelLocator for this step but for this demo we will wire it statically in the XAML:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n    xmlns:Customers="clr-namespace:MVVMHookupDemo.Customers"\n    xmlns:local="clr-namespace:MVVMHookupDemo"\n    x:Class="MVVMHookupDemo.MainWindow"\n    Title="MainWindow"\n    Height="350"\n    Width="525">\n<Window.DataContext>\n    <local:MainWindowViewModel />\n</Window.DataContext>\n<Grid>\n    <ContentControl Content="{Binding CurrentViewModel}" />\n<Grid/>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-021")])]),e._v(" "),a("p",[e._v("First step is to add a namespace for the root folder and then add our standard static XAML wire up of\n                        a ViewModel setting the DataContext to instance of the ViewModel. Then finally to do this ViewModel\n                        first wire up we're going to replace the static instance of the View here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Grid>\n    <Customers:CustomerListView />\n</Grid>")])]),e._v(" "),a("figcaption",[e._v("Fig 03-021A")])]),e._v(" "),a("p",[e._v("with a ContentControl:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <ContentControl Content="{Binding CurrentViewModel}" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-021B")])]),e._v(" "),a("p",[e._v("and that ContentControl's Content property is going to be bound to that CurrentViewModel property on\n                        the MainWindowViewModel which we know contains a CustomerListViewModel:\n                    ")]),e._v(" "),a("p",[e._v("Now, again, if we were to run at this point:")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(582)}}),e._v(" "),a("figcaption",[e._v("Fig03-021C")])]),e._v(" "),a("p",[e._v("We would just get a ToString of that type as it tries to render out that object. But if we go into\n                        MainWindow and add into it's resources a DataTemplate that is mapped by type to the\n                        CustomerListViewModel that's being rendered out then we can render the appropriate visual structure\n                        for that which in our case is already defined as it's View\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<DataTemplate DataType="{x:Type Customers:CustomerListViewModel}">\n    <Customers:CustomerListView />\n</DataTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-021D")])]),e._v(" "),a("p",[e._v("So if we just make the Content of the DataTemplate be a ViewType and map the DataType to it's\n                        corresponding ViewModel Type and that ViewModel type is rendered out through a Binding into a\n                        Container control like a ContentControl or an items Control:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <Grid>\n    <ContentControl Content="{Binding CurrentViewModel}" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-021E")])]),e._v(" "),a("p",[e._v("Then the magic of implicit DataTemplates kicks in and as part of trying to render out this content it\n                        will go out to the Resources, it will locate a DataTemplate that's mapped to the appropriate type\n                        and then it will render it's Contents setting the DataContext of that root element to that Data\n                        object which is our ViewModel thereby satisfying the equation of MVVM.\n                    ")]),e._v(" "),a("p",[e._v("To see that in action let's go ahead and run and you can see we're back in business with our View:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(583)}}),e._v(" "),a("figcaption",[e._v("Fig03-021F")])]),e._v(" "),a("p",[e._v("Just one final reminder because I screw it up all the time myself. Make sure you use that x:Type\n                        mark-up extension to specify the type that you are mapping to. Don't just put the typename or you'll\n                        silently get nothing.\n                    ")]),e._v(" "),a("h2",[e._v("No One’s on First")]),e._v(" "),a("p",[e._v("The last scenario to consider is a case where the View doesn’t construct the ViewModel or vice a\n                        versa.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Sometimes a separate chunk of code that simply constructs an instance of each and then sets the\n                        DataContext of the View to the ViewModel:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(584)}}),e._v(" "),a("figcaption",[e._v("Fig03-021G")])]),e._v(" "),a("p",[e._v("An example of this would be a Client Service that manages pop up dialogs to be presented to the user.\n                        When a given popup is requested by a Command (say a tools/options dialog) the code in the client\n                        service could do the construction of each, wire them together and place them into a popup window and\n                        show it.\n                    ")]),e._v(" "),a("p",[e._v("Most of the time you will be doing ViewModel-First or View-First depending on whether there's a\n                        static relationship between the View and The ViewModel or if it's a more dynamic scenario but don't\n                        feel like you always have to take that approach. As long as you meet the goals that neither the View\n                        or ViewModel is tightly coupled and they get constructed properly and married together through the\n                        DataContext your doing MVVM just fine.\n                    ")]),e._v(" "),a("h2",[e._v("Summary")]),e._v(" "),a("p",[e._v("In this module I showed you a number of ways you can get your Views and ViewModels hooked up or\n                        married as many people call it. You saw how to do:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("View-First Construction through declarative XAML wiring")]),e._v(" "),a("li",[e._v("View-First Construction via code behind")]),e._v(" "),a("li",[e._v("Using a simple ViewModelLocator")])]),e._v(" "),a("p",[e._v("You saw how data binding forms the basic glue of MVVM including the DataContext being the ring that\n                        binds the View and the ViewModel as well as the data bindings being the communication channels\n                        through which data flows in both directions.\n                    ")]),e._v(" "),a("p",[e._v("You also saw that through the mechanisms of DataTemplates which themselves rely on data binding you\n                        can dynamically create an appropriate View for a ViewModel by placing an instance of a ViewModel\n                        into a databound Container control.\n                    ")]),e._v(" "),a("p",[e._v("In the next module we'll take a look at how Views and ViewModels communicate with each other as\n                        things happen in the application including Commands, Behaviours and Property Change Notifications.\n                        At which point you'll have all the basics of MVVM nailed.\n                    ")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Getting Started")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("The getting started section gives a brief overview of the Xamarin forms architecture and then jumps\n                    straight into building an app.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("What is Xamarin Forms?")]),e._v(" "),a("p",[e._v("Xamarin forms is a library that enables you to build native apps for iOS, Android and Windows using\n                    a single C# codebase.\n                    If you have an experience with Windows Presentation Foundation or Silverlight then Xamarin will be\n                    very\n                    familiar to you.")]),e._v(" "),a("p",[e._v("Xamarin uses XAML to define the user interface of applications. For example we can define what\n                    elements we have on a page, where they are located and what they look like.")]),e._v(" "),a("p",[e._v("Behind every XAML file we have a code-behind which is a class which implements the behaviour for that\n                    page. For example what should happen when we click a button or select an item from a list.")]),e._v(" "),a("p",[e._v("In terms of architecture Xamarin forms is built on to of two existing libraries:")]),e._v(" "),a("ul",[a("li",[e._v("Xamarin.Android")]),e._v(" "),a("li",[e._v("Xamarin.iOS")])]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(612)}}),e._v(" "),a("figcaption",[e._v("Fig01-001")])]),e._v(" "),a("p",[e._v("When using Xamarin forms you work with a single unified API for creating user interfaces and\n                    Xamarin Forms will internally map these user interface elements to their corresponding native\n                    equivalent\n                    making our apps completely native. This results in apps that look different across different\n                    platforms.\n                    If you use a button that button will look different depending on where you run your\n                    application. ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(613)}}),e._v(" "),a("figcaption",[e._v("Fig01-002")])]),e._v(" "),a("p",[e._v("Also because Xamarin forms is built on top of Xamarin.Android and Xamarin.iOS you can write platform\n                    specific code that uses the API exposed by any of these libraries. That means you are\n                    "),a("strong",[e._v("not")]),e._v("\n                    limited to a common set of features that are available across all these platforms. ")]),e._v(" "),a("p",[e._v('One of the first questions a lot of beginners ask is "Do I need to know about Xamarin.Android or\n                    Xamarin.iOS in order to learn Xamarin Forms?". Not at all. The only exception is if you need to\n                    write something specific for Android or for iOS. Otherwise for the most part you can learn Xamarin\n                    forms on it\'s own.')]),e._v(" "),a("p",[e._v('The second most common question is "How do I know which Xamarin product to use. Should I use Xamarin\n                    forms or one of the more specific libraries?". The answer is it depends. What makes Xamarin forms\n                    powerful is it\'s ability to share most if not all your code across multiple platforms. However, if\n                    you have a lot of use cases for working with platform specific api then it is better to use\n                    Xamarin.Android or Xamarin.iOS')]),e._v(" "),a("h4",[e._v("Tooling")]),e._v(" "),a("p",[e._v("In terms of tooling you have a number of options here. If you have a Windows machine you can build\n                    and deploy apps to Android and Windows but not iOS - for that you need a Mac/ On the other side, if\n                    you are a Mac user you can build apps for Android or iOS but not Windows. So if you want to target\n                    all platforms you need both a Windows and a Mac machine.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Setting Up the Development Environment")]),e._v(" "),a("h4",[e._v("Windows Setup")]),e._v(" "),a("p",[e._v("If your a Windows user you probably have Visual Studio. When you install Xamarin it will install all\n                    the required SDK's as well as project templates in Visual Studio. To do this go to\n                    "),a("a",{attrs:{href:"xamarin.com/download"}},[e._v("xamarin.com/download")]),e._v(" fill out the form and make sure you set the\n                    following question to yes:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(614)}}),e._v(" "),a("figcaption",[e._v("Fig 01-003")])]),e._v(" "),a("p",[e._v("This will mean you just get the Xamarin installer and not the Visual Studio installer. When you run\n                    the Xamarin installer you will get a dialogue box that let's you select the features you want. Make\n                    sure you select the following features under Cross Platform Mobile Development:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(615)}}),e._v(" "),a("figcaption",[e._v("Fig 01-004")])]),e._v(" "),a("p",[e._v("Then under Common Tools and Software Development Kits select Android Native Development Kit:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(616)}}),e._v(" "),a("figcaption",[e._v("Fig 01-005")])]),e._v(" "),a("p",[e._v("You also need to install the Android SDK and at least one of the Android SDK Setups:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(617)}}),e._v(" "),a("figcaption",[e._v("Fig 01-006")])]),e._v(" "),a("p",[e._v("Finally you need to select Java SE Development Kit:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(618)}}),e._v(" "),a("figcaption",[e._v("Fig 01-007")])]),e._v(" "),a("h4",[e._v("Mac Setup")]),e._v(" "),a("p",[e._v("If you are a Mac user you have two options:")]),e._v(" "),a("ul",[a("li",[e._v("Use Xamarin Studio")]),e._v(" "),a("li",[e._v("Use Visual Studio")])])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Creating a Xamarin Forms App Using Visual Studio")]),e._v(" "),a("p",[e._v("We will now use Visual Studio to create a Xamarin Forms app. First let's create a new project and\n                    select the Cross-Platform template:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(619)}}),e._v(" "),a("figcaption",[e._v("Fig 01-008")])]),e._v(" "),a("p",[e._v("For Xamarin Apps we have two options here:")]),e._v(" "),a("ul",[a("li",[e._v("Portable Class Library")]),e._v(" "),a("li",[e._v("Shared Assets")])]),e._v(" "),a("p",[e._v("The preferred way and the best practice recommended by Xamarin is a Portable Class Library.")]),e._v(" "),a("p",[e._v("Specify a name for the application (e.g. HelloWorld) and click Ok. Next you will see a dialogue which\n                    will let you specify the Target and Minimum Version for Windows Universal Apps. A Windows Universal\n                    App\n                    can run under Windows 10 or Windows 10 Mobile without the need to be rewritten for each. I will\n                    accept the defaults here:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(620)}}),e._v(" "),a("figcaption",[e._v("Fig 01-009")])]),e._v(" "),a("p",[e._v("Our solution should now be ready. As a best practice whenever you create a new Xamarin Forms App you\n                    should right click the solution and select Manage NuGet Packages for Solution... Then goto the\n                    updates\n                    tab, select all packages and update them. We do this because Xamarin frequently releases new\n                    libraries")]),e._v(" "),a("p",[e._v("In the resulting solution we should have 6 projects, the first one is our Portable Class Library:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(621)}}),e._v(" "),a("figcaption",[e._v("Fig 01-010")])]),e._v(" "),a("p",[e._v("And this is where we are going to do most of the work. All the code that should be shared between\n                    different platforms should be written here. If you look inside this project you will see one class\n                    called App.cs which is the starting point of our application. Next we have five platform specific\n                    projects.")]),e._v(" "),a("ul",[a("li",[e._v("HelloWorld.Droid for Android")]),e._v(" "),a("li",[e._v("HelloWorld.iOs for iOS")]),e._v(" "),a("li",[e._v("HelloWorld.UWP for Universal Windows which can run on Windows 10 or Windows 10 Mobile")]),e._v(" "),a("li",[e._v("HelloWorld.Windows for Windows 8.1")]),e._v(" "),a("li",[e._v("HelloWorld.WinPhone for Windows Phone 8.1")])]),e._v(" "),a("p",[e._v("Any time we want to write platform specific code we will write it in these projects. If you don't\n                    want to develop for a certain platform you can simply delete the project from your solution.")]),e._v(" "),a("p",[e._v("Now let's run the app by pressing Ctrl+F5. Now the first time you launch Android emulator you are\n                    going to wait quite a few minutes for it to start.")]),e._v(" "),a("p",[e._v("After the emulator loads and starts your application will be launched:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(622)}}),e._v(" "),a("figcaption",[e._v("Fig 01-011")])]),e._v(" "),a("p",[e._v("If you want to run the application in an iOS Simulator you need to right-click the project and select\n                    "),a("strong",[e._v("Set as StartUp Project")]),e._v(". Then on the toolbar and get select the Device I want to\n                    deploy to. Either a physical device or one of the iPhone or iPad Simulators.")]),e._v(" "),a("p",[e._v("The Simulator will run on the Mac not on the PC. This is managed with the Xamarin Mac Agent which\n                    should be visible on the toolbar:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(623)}}),e._v(" "),a("figcaption",[e._v("Fig 01-012")])]),e._v(" "),a("p",[e._v("If you don't see this icon on the toolbar then go to the View Menu and under Toolbars select iOS.")]),e._v(" "),a("p",[e._v("The Xamarin Mac Agent let's you select the Mac on your network that is responsible for launching the\n                    simulator. Please remember that Xamarin needs to be installed on both your Mac and Windows\n                    Machine.")]),e._v(" "),a("p",[e._v("Now when you press Ctrl+F5 you will see the application running on an iPhone Simulator on your\n                    Mac.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Creating a Xamarin Forms App Using Xamarin Studio")]),e._v(" "),a("p",[e._v("I wont document the process described in the video for Creating a Xamarin Forms App Using Xamarin\n                    Studio because I think Xamarin Studio on the Mac has been deprecated in favour of Visual Studio for\n                    Mac.\n                ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Your First Xamarin Forms App")]),e._v(" "),a("p",[e._v("We are going to add a new page to our app with a button in the middle of the screen. In iOS buttons\n                    don't have a border (they look like labels) so when you click the button you get an alert. Let's go\n                    ahead an implement this.")]),e._v(" "),a("p",[e._v("As we discussed earlier, in Xamarin forms we use XAML (which is an XML based language) to define the\n                    visual appearance of our app. We use code behind to implement how the user interface behaves:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(624)}}),e._v(" "),a("figcaption",[e._v("Fig 01-013")])]),e._v(" "),a("p",[e._v("So, to start, right-click the Portable Class Library and select Add>New Item. On the left side select\n                    Cross-Platform and on the right side select Forms Xaml Page. Call the page GreetPage.")]),e._v(" "),a("p",[e._v("This will add two new files to our project. One is GreetPage.xaml and if you expand it you will see\n                    the GreetPage.xaml.cs code behind file which is just a simple C# class.")]),e._v(" "),a("p",[e._v("The root element here:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(625)}}),e._v(" "),a("figcaption",[e._v("Fig 01-014")])]),e._v(" "),a("p",[e._v("ContentPage represents the type of our page. In Xamarin forms we have a few page types:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(626)}}),e._v(" "),a("figcaption",[e._v("Fig 01-015")])]),e._v(" "),a("p",[e._v("We use content page to present some content to the user. Whether that be Text, Images or the\n                    combination of the two.")]),e._v(" "),a("p",[e._v("The ContentPage element contains a couple of xml namespace declarations:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns="http://xamarin.com/schemas/2014/forms"\n            xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"')])]),e._v(" "),a("figcaption",[e._v("Fig 01-016")])]),e._v(" "),a("p",[e._v("The first one is owned by Xamarin and this namespace is for elements that have no prefix. For\n                    example,\n                    the ContentPage element belongs to XamarinForms.")]),e._v(" "),a("p",[e._v("The other xml namespace identifies a prefix with the :x syntax. If you look at the Uri used to define\n                    namespace you can see the namespace is owned by Microsoft which represents the standard XAML which\n                    Microsoft defined in 2009. The :x means that any elements or attributes prefixed with an belong to\n                    this namespace.")]),e._v(" "),a("p",[e._v("Look at the Class attribute:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("x:Class=")])]),e._v(" "),a("figcaption",[e._v("Fig 01-017")])]),e._v(" "),a("p",[e._v("it is prefixed with an x and we call it x:Class and this attribute belongs to the Microsoft\n                    namespace.\n                ")]),e._v(" "),a("p",[e._v("Look at the value assigned to this attribute:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('x:Class="HelloWorld.GreetPage"')])]),e._v(" "),a("figcaption",[e._v("Fig 01-018")])]),e._v(" "),a("p",[e._v("It is HelloWorld.GreetPage which is the fully qualified name of our code-behind class. This\n                    establishes\n                    the link between the XAML file and the code-behind file.")]),e._v(" "),a("p",[e._v("Remove the Content element in the XAML and add a Button:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button HorizontalOptions="Center" VerticalOptions="Center"\n                    Text="Click Me" Clicked="Handle_Clicked"></Button>')])]),e._v(" "),a("figcaption",[e._v("Fig 01-019")])]),e._v(" "),a("p",[e._v("The autogenerated event handler for the Click event will look similar to this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("void Handle_Clicked(object sender, System.EventArgs e)")])]),e._v(" "),a("figcaption",[e._v("Fig 01-020")])]),e._v(" "),a("p",[e._v("As you can see the event handler is a private method which has two arguments. One is an object which\n                    is the sender or source of the event. The other is EventArgs which brings in additional details\n                    about\n                    an event.")]),e._v(" "),a("p",[e._v("To display an alert we call the DisplayAlert() method. We inherit this method from the ContentPage\n                    class which is the base class for our GreetPage(). The arguments we supply here are the Title of the\n                    MessageBox, the message we want to display and the string to use for the cancel button:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('DisplayAlert("Title", "Hello World", "OK");')])]),e._v(" "),a("figcaption",[e._v("Fig 01-021")])]),e._v(" "),a("p",[e._v("Now we want to make sure this page is displayed when our app is started. In the Portable Class\n                    Library project we have a file named App.xaml. If you look at the code-behind for this file you\n                    can see MainPage is currently set to a new instance of the the HelloWorldPage. MainPage is a\n                    property that is defined in the base "),a("strong",[e._v("Application")]),e._v(" class and we use that to set the\n                    starting page of our application. ")]),e._v(" "),a("p",[e._v("Modify the App constructor to set the MainPage to GreetPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new GreetPage();")])]),e._v(" "),a("figcaption",[e._v("Fig 01-021")])]),e._v(" "),a("p",[e._v("Run the application and click the button:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(627)}}),e._v(" "),a("figcaption",[e._v("Fig 01-022")])]),e._v(" "),a("p",[e._v("This should give you an idea of what it is like to build cross platform apps using Xamarin Forms.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("How Xamarin Works")]),e._v(" "),a("p",[e._v("So you have seen Xamarin forms in action and you know that with Xamarin forms you can build native\n                    apps for different platforms. You might be curious how Xamarin actually achieves this. So let me\n                    give you a bit of background.")]),e._v(" "),a("p",[e._v("All Xamarin products such as Xamarin.Android, Xamarin.iOS, Xamarin Forms are built on top of Mono:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(628)}}),e._v(" "),a("figcaption",[e._v("Fig 01-023")])]),e._v(" "),a("p",[e._v("Mono is an open-source version of .Net which runs on various non Windows platforms like Linux, Unix\n                    and OSX. Mono is a project that has been around for pretty much the same amount of time as .Net itself\n                    but it wasn't very popular until recent years.")]),e._v(" "),a("p",[e._v("In the Mono world we had two releases:")]),e._v(" "),a("ul",[a("li",[e._v("Mono for Android")]),e._v(" "),a("li",[e._v("MonoTouch")])]),e._v(" "),a("p",[e._v("Later these release were renamed to:")]),e._v(" "),a("ul",[a("li",[e._v("Xamarin.Android")]),e._v(" "),a("li",[e._v("Xamarin.iOS")])]),e._v(" "),a("p",[e._v("Both these libraries give you access to the .NET Base Class Library so you have the same namespaces\n                    that you are familiar with, you got the same classes with the same interfaces. They also give you access\n                    to the Native API on their platform:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(629)}}),e._v(" "),a("figcaption",[e._v("Fig 01-024")])]),e._v(" "),a("p",[e._v("So you have access to additional assemblies and namespaces that mimic the ones that come natively with\n                    Android and iOS. These are the classes that Objective C or Java developers work with when they build\n                    native apps for Android and iOS.")]),e._v(" "),a("p",[e._v("When working with Xamarin.Android or Xamarin.iOS we work with these classes just like standard\n                    classes in .Net and these libraries will then internally call the corresponding API on the target\n                    platform. ")]),e._v(" "),a("h4",[e._v("Xamarin.Android")]),e._v(" "),a("p",[e._v("When you build an application with Xamarin.Android the Xamarin C# compiler compiles down your C# code\n                    to Intermediate Language or IL. It also emits the Mono Runtime with your application. This Mono runtime\n                    is similar to the CLR (Common Language Runtime) which you should probably be familiar with. When you\n                    launch an Android app this runtime is loaded into the memory and then it gets your IL code and compiles\n                    it to the Native code for Android.")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(630)}}),e._v(" "),a("figcaption",[e._v("Fig 01-025")])]),e._v(" "),a("p",[e._v("This process is what we call Just In Time compilation or JIT. This is the same mechanism that is in\n                    place when you build a regular .Net application in C#.")]),e._v(" "),a("h4",[e._v("Xamarin.iOS")]),e._v(" "),a("p",[e._v("Apple does not allow Jitting so when you build your iOS application the Xamarin C# compiler first\n                    compiles your C# code down to IL then it uses the Apple compiler to compile it down to Native code:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(631)}}),e._v(" "),a("figcaption",[e._v("Fig 01-026")])]),e._v(" "),a("p",[e._v("This is why you need an Apple Machine. So the output is native code that iOS can understand and there\n                    is no Jitting involved here. In other words when you ship your application there is no Mono runtime\n                    embedded in your application.")]),e._v(" "),a("h4",[e._v("Xamarin Forms")]),e._v(" "),a("p",[e._v("Xamarin Forms is built on top of Xamarin.Android and Xamarin.iOS so we have an assembly called\n                    Xamarin.Forms.Core which contains classes that define a common unified API to work with different\n                    platforms. For example we have a class called Button and this is the Button that we reference in\n                    XAML or in code-behind. Now, we have another bunch of platform specific assemblies that map these common\n                    objects in Xamarin Forms to their corresponding Native equivalent.")]),e._v(" "),a("p",[e._v("The assembly that defines the common API that we work with is called Xamarin.Forms.Core. This assembly\n                    contains classes like Button, Label, ListView, Page and so on. ")]),e._v(" "),a("p",[e._v("Now if you look at the References node in one of the platform specific projects like the Android one\n                    you will see an assembly called Xamarin.Forms.Platform.Android. This is the assembly that is\n                    responsible for mapping those common controls that we have in Xamarin.Forms.Core into the corresponding\n                    Android equivalent.")]),e._v(" "),a("p",[e._v("In this assembly we have a bunch of what we call renderers. These are the classes that know how to\n                    render, for example, a Label or a Button. We have the same architecture in other projects. In the iOS\n                    project there is a Xamarin.Forms.Platform.iOS assembly that performs the same task as it's Android\n                    equivalent.")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Writing Effective Apps")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Starting from Scratch")]),e._v(" "),a("p",[e._v("At this point we've spoken a lot about all the code that's placed inside the src directory and\n                        it's now time to actually start working on our video-browser application.\n                    ")]),e._v(" "),a("p",[e._v("But I don't really want to use any of the code that is already placed inside of here. Personally,\n                        I like to try to start from scratch where possible. I don't really like having to go through the\n                        Babel setup or the webpack setup which is why we're Vue CLI in the first place but I don't think\n                        a lot of the code inside the src directory that we were given is super helpful for us.\n                    ")]),e._v(" "),a("p",[e._v("So the first thing we're going to do in working on our video-browser application is to delete\n                        everything inside the src directory and we're going to start over from scratch. This will give\n                        you a really good idea of exactly how we build out a Vue application. So to get started I'm\n                        going to highlight the src directory and delete the entire thing and then I'm going to\n                        immediately recreate that directory by making a new folder called src:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(132)}}),e._v(" "),a("figcaption",[e._v("Fig 03-001")])]),e._v(" "),a("p",[e._v("Inside of the src folder create a new file called main.js. It is important to name the file\n                        main.js with a lowercase m. This is because whenever our application first boots up Vue CLI and\n                        webpack and all the tooling that exists inside this project is going to look inside the src\n                        directory for a file called main.js. So main.js is a special file because it is the entry point\n                        of our application.\n                    ")]),e._v(" "),a("p",[e._v("Now inside this file we are going to perform the same steps that were already inside the main .js\n                        file but this time around we'll talk about what every line of code is doing so you'll get a\n                        better idea of how all that stuff was structured.\n                    ")]),e._v(" "),a("p",[e._v("So, inside the main.js file we're going to first start off by importing the Vue JS library. To do\n                        so - at the top we'll write out:\n                    ")]),e._v(" "),a("code",{staticClass:"prettyprint"},[e._v("import Vue from 'vue';")]),e._v(" "),a("p",[e._v("As a quick reminder of how import statements work webpack is going to interpret this line of code\n                        when it processes all of our code. It's going to see that we're trying to import something\n                        called Vue. Now we don't currently have any files inside of our src directory called Vue so\n                        instead webpack is going to automatically look into the node-modules directory. You'll recall\n                        that that is where all of our different dependencies for our project are stored.\n                    ")]),e._v(" "),a("p",[e._v("If you scroll down to the bottom of this list you'll find a folder named simply vue which\n                        contains the actual Vue JS library:\n                    ")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(133)}}),e._v(" "),a("figcaption",[e._v("Fig 03-002")])]),e._v(" "),a("p",[e._v("So when we write out "),a("code",{staticClass:"prettyprint"},[e._v("import Vue from 'vue';")]),e._v(" webpack is going to\n                        look into that folder and pull in some amount of Javascript code to support our project.\n                    ")]),e._v(" "),a("p",[e._v("Now the next thing we're going to do is to create a new file called App.vue. This is going to\n                        function very similarly to the App.vue file that we just deleted. Inside that file you and I are\n                        going to make a single Vue component which is going to serve as, kind of, the brains of our\n                        application.\n                    ")]),e._v(" "),a("p",[e._v("It's going to be responsible for coordinating all the other components and making sure that the\n                        correct content is visible on the screen at any given time. Once we create this App.vue file and\n                        create a component inside of it we'll then import it into the main.js file and make sure that we\n                        show that on the screen.\n                    ")]),e._v(" "),a("p",[e._v("So inside the src directory I will now create the App.vue file. As a quick reminder, it's very\n                        common inside of any Vue application to always have a root component called App.vue. So I would\n                        expect you to see App.vue and main.js in the vast majority of projects that you're going to work\n                        on.\n                    ")]),e._v(" "),a("p",[e._v("So inside of our new App.vue file we're going to put together our first Vue component. Every Vue\n                        file that we put together is going to look very similar.\n                    ")]),e._v(" "),a("p",[e._v("At the very top we're going to place that "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag which\n                        will contain all the Html or the template for the component that we are creating:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-003")])]),e._v(" "),a("p",[e._v("Inside the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag itself we are only allowed to have one\n                        root Html element. So, in other words, the following would be invalid:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n    </div>\n    <div>\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-004")])]),e._v(" "),a("p",[e._v("So these are two sibling divs. So in this case we would have two root elements which is not\n                        allowed. So make sure you only have one root element.\n                    ")]),e._v(" "),a("p",[e._v("Let's add some content to the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        Hi there!\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-005")])]),e._v(" "),a("p",[e._v("Underneath the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag we will add a "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-006")])]),e._v(" "),a("p",[e._v("So this is going to contain all the Javascript that defines this component and tells Vue how it\n                        should behave anytime the user interacts with it in some fashion.\n                    ")]),e._v(" "),a("p",[e._v("Inside of the "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n    }\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-007")])]),e._v(" "),a("p",[e._v("Now we haven't really spoken a lot about this "),a("code",{staticClass:"prettyprint"},[e._v("export default")]),e._v("\n                        syntax so far even though we saw it in the previous implementation of the App.vue file.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we'll talk about what the purpose of this "),a("code",{staticClass:"prettyprint"},[e._v("export\n                        default")]),e._v(" syntax is.\n                    ")]),e._v(" "),a("h3",[e._v("The App Component")]),e._v(" "),a("p",[e._v("In the last section we started working on our main App.vue component. Remember this is going to\n                        serve as the sort of brains of our application and it's going to coordinate all the other\n                        components that we create inside of our app.\n                    ")]),e._v(" "),a("p",[e._v("We finished off the last section working on the "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag right\n                        here where we wrote "),a("code",{staticClass:"prettyprint"},[e._v("export default")]),e._v(" then placed a set of curly\n                        braces:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n    }\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-008")])]),e._v(" "),a("p",[e._v("First I want to give you a quick reminder back to some of the CodePen code that we were working\n                        on earlier:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(134)}}),e._v(" "),a("figcaption",[e._v("Fig 03-009.png")])]),e._v(" "),a("p",[e._v("So I've still got the identicon application here from CodePen up on my screen. You'll recall that\n                        inside of the Javascript that we added for this project we had a couple of different properties\n                        that we provided to the Vue instance. Things like:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("data")]),e._v(" "),a("li",[e._v("computed properties")]),e._v(" "),a("li",[e._v("methods")]),e._v(" "),a("li",[e._v("template")])]),e._v(" "),a("p",[e._v("Recall we also added the template directly into the Javascript as well. So the object that we\n                        passed to new Vue had some number of properties that customized the instance. The same exact\n                        thing is true of this object that you pass into "),a("code",{staticClass:"prettyprint"},[e._v("export default")]),e._v(".\n                        So this object is going to contain a couple of different properties that customize this Vue\n                        component and how it behaves.\n                    ")]),e._v(" "),a("p",[e._v("So, for example, we might eventually have a data property on here, some computed functions and\n                        eventually have some different methods tied to it as well:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n        data: {},\n        computed: {},\n        methods: {}\n")]),e._v(" "),a("figcaption",[e._v("Fig 03-010")])]),e._v(" "),a("p",[e._v("Right now, there is only one property that we are going to assign inside of this object - a\n                        property we did not discuss previously when we were working back inside of CodePen - name:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n        name: 'App'\n    }\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-011")])]),e._v(" "),a("p",[e._v("The name property is not strictly required for Vue to work properly. We put in the name property\n                        just to make our lives, as developers, a little bit easier.\n                    ")]),e._v(" "),a("p",[e._v("You see, there's a couple of debugging tools out there that you can download, free of charge,\n                        that help you debug Vue applications inside the browser. Many of these debug tools that we use\n                        with Vue look for different components that have specific names tied to them. So simply\n                        providing the name property is going to make those debugging tools work a little bit better by\n                        allowing you the developer to more easily identify different components that are in use in your\n                        application.\n                    ")]),e._v(" "),a("p",[e._v("So that's really all we need for right now to get this component started. We don't have to\n                        provide anything like the data, methods or computed properties in order to get some content on\n                        the screen.\n                    ")]),e._v(" "),a("p",[e._v("We're only going to start to add those extra properties once our component actually needs their\n                        behaviour.\n                    ")]),e._v(" "),a("p",[e._v("One other thing I'll mention here is you'll recall that back in our Vue instance, that we created\n                        over in CodePen, we provided the "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v(" argument:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n    el: '#app',\n    data: { // Initialize our list of 'ingredients'\n        textInput: ''\n    },\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-012")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v(" argument is short for element and it specifies to Vue\n                        where our Vue template is located in the DOM.\n                    ")]),e._v(" "),a("p",[e._v("So in the case of the Vue component that we're putting together right now Vue is going to\n                        automatically understand that our template is created in the same file. So we don't need to\n                        specify any "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v(" property to tell this component where it's\n                        template is or where it should render itself.\n                    ")]),e._v(" "),a("p",[e._v("Ok, so that's pretty much it for the app component right now. We're going to come back to the app\n                        component again very shortly and add a bunch more code to further develop our application.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will re-visit the main.js file and try and get that app component to show\n                        up on the screen.\n                    ")]),e._v(" "),a("h3",[e._v("Another Way of Specifying Content")]),e._v(" "),a("p",[e._v("In the last section we worked on our App.vue file. We're going to go back over to our main.js\n                        file and we're going to use that app component to get it to display on the screen when we load\n                        up the app inside our browser.\n                    ")]),e._v(" "),a("p",[e._v("So back inside of main.js we're going to do a couple of different steps very quickly here. The\n                        first thing we're going to do is to import that app component into the main.js file:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import App from './App';")]),e._v(" "),a("figcaption",[e._v("Fig 03-013")])]),e._v(" "),a("p",[e._v("Just a quick reminder on import statements - if we are importing a file that we have created then\n                        we have to provide the relative path to that file. So "),a("code",{staticClass:"prettyprint"},[e._v("./ ")]),e._v(" in\n                        the import statement above means in the same folder look for a file called App.\n                    ")]),e._v(" "),a("p",[e._v("Underneath that we are going to create a new Vue instance and we are going to attempt to show\n                        this app component. So we already know how to create a new Vue instance:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n\n});")]),e._v(" "),a("figcaption",[e._v("Fig 03-014")])]),e._v(" "),a("p",[e._v("We write out "),a("code",{staticClass:"prettyprint"},[e._v("new Vue();")]),e._v(" and then pass in an object with some\n                        number of configuration options. Now the first option that we're going to put in here is going\n                        to look a bit strange:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n   render: function(createElement) {\n       return createElement(App);\n   }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 03-015")])]),e._v(" "),a("p",[e._v("So, at this point, we have seen more than one way to specify the template for a give Vue\n                        instance. We've seen how we can put our template in the Html. We've also seen how we can attach\n                        the template directly to our Vue instance. So what you're seeing in Fig 03-015 is another way,\n                        yes another way, to tell a Vue instance how to show some content on the screen.\n                    ")]),e._v(" "),a("p",[e._v("So we define a "),a("code",{staticClass:"prettyprint"},[e._v("render")]),e._v(" function that gets called with another\n                        function called createElement. So we call the createElement function and we pass in the\n                        component that we just created and then we return the result of that function call.\n                    ")]),e._v(" "),a("p",[e._v("So you can kind of imagine that this takes the app component and turns it into a Vue instance\n                        which can then be turned into Html. We then take that Html and put it on the screen of our\n                        application. So that's what's going on here with this function.\n                    ")]),e._v(" "),a("p",[e._v("Now, one quick refactor, that we're going to do here to make this look much more similar to how\n                        you'll see this in real applications. Usually we do not write out the entire function name of\n                        createElement here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("function(createElement) {\n    return createElement(App);\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-016")])]),e._v(" "),a("p",[e._v("Instead we usually abbreviate the "),a("code",{staticClass:"prettyprint"},[e._v("createElement")]),e._v(" function name as\n                        simply h:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n   render: function(h) {\n       return h(App);\n   }\n});")]),e._v(" "),a("figcaption",[e._v("Fig 03-017")])]),e._v(" "),a("p",[e._v("Don't ask me why we use h. I honestly don't know why we came up with that convention.")]),e._v(" "),a("p",[e._v("Then the other key factor that you'll see very commonly around this "),a("code",{staticClass:"prettyprint"},[e._v("render")]),e._v("\n                        function is not to use the entire function keyword but instead use an ES 2015 arrow function:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n   render: h => h(App)\n});\n")]),e._v(" "),a("figcaption",[e._v("Fig 03-018")])]),e._v(" "),a("p",[e._v("So this shorthand version is functionally 100 percent equivalent to what we had just a moment\n                        ago.\n                    ")]),e._v(" "),a("p",[e._v("So now, anytime this file is executed, we will try to create a new Vue instance. When that Vue\n                        instance is created the "),a("code",{staticClass:"prettyprint"},[e._v("render")]),e._v(" function will be called with the\n                        createElement function. We then pass in our App component to createElement and the entire result\n                        is return from the "),a("code",{staticClass:"prettyprint"},[e._v("render")]),e._v(" function.\n                    ")]),e._v(" "),a("p",[e._v("So our App component is created and then the result of that is stuck into the DOM.")]),e._v(" "),a("p",[e._v("We're going to come back in the next section and make sure that this entire file actually gets\n                        some content on the screen of our browser.\n                    ")]),e._v(" "),a("h3",[e._v("Multiple Ways of DOM Attachment")]),e._v(" "),a("p",[e._v("In the last section we started working on our main.js file. So we've now created a new Vue\n                        instance and we've told this instance that we wanted to do to get some content on the screen. So\n                        when we eventually render this thing to our actual DOM or try to get it to show up inside the\n                        browser - this render function will be called and we are telling that render function that we\n                        want to display an instance of our App component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n   render: h => h(App)\n});\n")]),e._v(" "),a("figcaption",[e._v("Fig 03-019")])]),e._v(" "),a("p",[e._v("Now the very last thing we need to do inside of here is to make sure that we actually try to take\n                        this instance of App that is created and stick it into the DOM somewhere. You'll recall that\n                        back inside of the CodePen identicon project we used the "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v("\n                        property. The "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v(" property not only tells Vue where it can find\n                        it's template but it also tells Vue where it should stick the rendered Html into inside of our\n                        Html structure:\n                    ")]),e._v(" "),a("figure",[a("code",{staticClass:"prettyprint"},[e._v("el: '#app',")]),e._v(" "),a("figcaption",[e._v("Fig 03-020")])]),e._v(" "),a("p",[e._v("And so the "),a("code",{staticClass:"prettyprint"},[e._v("#app")]),e._v(" above means go and find some element inside of\n                        our DOM with an "),a("code",{staticClass:"prettyprint"},[e._v("id")]),e._v(" of app. The same thing has to be provided to\n                        our Vue instance in our main.js file as well. So if we ran this code right now we would create\n                        our application but it would not show up on the screen because we have not yet told Vue where to\n                        put this Html.\n                    ")]),e._v(" "),a("p",[e._v("You'll recall that inside the public directory we've got that index.html file and inside there is\n                        a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with an "),a("code",{staticClass:"prettyprint"},[e._v("id")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("app")]),e._v(". So when we generated Vue CLI we already got a place\n                        created right out of the box for us to render our application to:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div id="app"></div>')]),e._v(" "),a("figcaption",[e._v("Fig 03-021")])]),e._v(" "),a("p",[e._v("So to get our main.js file's Vue instance to actually show up inside the browser we need to\n                        provide an "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v(" property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n    el: '#app',\n    render: h => h(App)\n});")]),e._v(" "),a("figcaption",[e._v("Fig 03-022")])]),e._v(" "),a("p",[e._v("One thing I want to quickly mention here is back when we first generated our Vue CLI project,\n                        like just a moment ago, you might recall that when we looked at the main.js file we did not have\n                        an object or a property in here called "),a("code",{staticClass:"prettyprint"},[e._v("el")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("So when we first generate this project main.js looked a little bit different and previously, out\n                        of the box, it actually had a different way of specifying the element that we wanted to render\n                        our application to.\n                    ")]),e._v(" "),a("p",[e._v("In particular it created the new Vue instance and then it called a function on that instance that\n                        was created:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("new Vue({\n    render: h => h(App)\n}).mount('#app');")]),e._v(" "),a("figcaption",[e._v("Fig 03-023")])]),e._v(" "),a("p",[e._v("So this line of code, containing a chained function, tells Vue where it should render itself to.\n                    ")]),e._v(" "),a("p",[e._v("Now let me be clear. In the Vue JS world there's like two or three or four or five ways of doing\n                        any given operation. We have already seen many different ways in which we can define templates\n                        that are tied to our application. This entire idea, described above, of mounting or somehow\n                        rendering our components in Vue instances to the DOM is no different. So "),a("code",{staticClass:"prettyprint"},[e._v("#mount")]),e._v(" and then passing in "),a("code",{staticClass:"prettyprint"},[e._v("'#app'")]),e._v(" is identical to writing out "),a("code",{staticClass:"prettyprint"},[e._v("el:\n                            '#app',")]),e._v(" It's just two different ways of doing the exact same operation. Like I said,\n                        this is a pattern that you are going to notic in the Vue world over and over again - there's\n                        more than one way to do just about everything.\n                    ")]),e._v(" "),a("p",[e._v("So how do you decide which approach to use? It's pretty much down to personal preference but just\n                        for the sake of convention, and sticking with what Vue CLI does by default, we'll stay with the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("#mount")]),e._v(" option rather than using "),a("code",{staticClass:"prettyprint"},[e._v("el")])]),e._v(" "),a("p",[e._v("So that's pretty much it to get some content on the screen. Now last thing we have to do is go\n                        back over to the browser to just test our application and make sure that we can see the text we\n                        specified appear on the screen.\n                    ")]),e._v(" "),a("p",[e._v('So I can go back over to my browser to localhost:8080 and do a forceable refresh of the\n                        application and you should see the text "Hi there!"\n                    ')]),e._v(" "),a("p",[e._v("So in the next section we're going to start really diving into our application and building out\n                        some more of the guts and different components that we had spoken about earlier like the search\n                        bar and the video list and so on.\n                    ")]),e._v(" "),a("h3",[e._v("Making the SearchBar")]),e._v(" "),a("p",[e._v("In the last section we put together our app component. We're now going to move forward to the\n                        second big component that we're going to work on inside the application which is the search bar.\n                    ")]),e._v(" "),a("p",[e._v("Remember the idea here is that this SearchBar component is going to show an input filed and any\n                        time a user types in there we will trigger a search on the YouTub API to attempt to go and find\n                        some list of videos related to that search term.\n                    ")]),e._v(" "),a("p",[e._v("So let's flip back over to our code editor where we're going to create a new Vue file to contain\n                        the SearchBar component. So back inside my code editor I'll find the src directory. We create a\n                        components directory inside of the src directory and inside of that directory we will locate all\n                        the different components we have. So inside the components folder we create a new file called\n                        SearchBar.vue. Inside the SearchBar.vue file we're going to pu down some different boilerplate\n                        tags inside here that are going to become very familiar over time. So we'll first begin by\n                        placing a "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag and then underneath that we'll add a\n                        "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag. Finally we'll add a "),a("code",{staticClass:"prettyprint"},[e._v("style")]),e._v(" tag which will eventually contain some CSS that is\n                        solely related to this one component and no other component inside of our application.\n                        ")]),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n</template>\n\n<script>\n</script>\n\n<style>\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 03-024")])]),e._v(" "),a("p"),e._v(" "),a("p",[e._v("Back up inside the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag we'll immediately create an\n                        "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" element and we'll wrap it with a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" tag.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        <input />\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-025")])]),e._v(" "),a("p",[e._v("Now you might be a bit curious why we were wrapping this with a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" tag.\n                    ")]),e._v(" "),a("p",[e._v("Honestly that's really just for styling. By default a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" has a\n                        CSS display property ot block which will make sure that this input element appears in the\n                        browser on it's own individual line.\n                    ")]),e._v(" "),a("p",[e._v("So the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" here is really just kind of for layout purposes not\n                        necessarily because this component actually requires it from any technical standpoint or\n                        functionality standpoint.\n                    ")]),e._v(" "),a("p",[e._v("Next we're going to start working inside the "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag. We'll\n                        add the following code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\nexport default {\n\n};\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-026")])]),e._v(" "),a("p",[e._v("The object that we provide is going to specify a couple of different options which we'll look at\n                        in the next section.\n                    ")]),e._v(" "),a("h3",[e._v("Nesting Components")]),e._v(" "),a("p",[e._v("We just put together our SearchBar file and now we're ready to start adding a couple of options.\n                    ")]),e._v(" "),a("p",[e._v("Let's get started by adding the name parameter which we spoke about a couple of sections back .\n                        So I'm going to provide a name of simply SearchBar like so:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\nexport default {\n    name: 'SearchBar'\n};\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-027")])]),e._v(" "),a("p",[e._v("Now before we go any further I think that we should try to get the SearchBar component to be\n                        displayed inside of our application.\n                    ")]),e._v(" "),a("p",[e._v("So if you go back over to the browser and refresh the page you'll notice that the search bar\n                        doesn't appear at all - which kind of makes sense.\n                    ")]),e._v(" "),a("p",[e._v("If you actually want to get any component to show up inside of a Vue application your have to\n                        manually wire it up to another component. So to get that search bar to appear we have to wire it\n                        up to the App component. To do so, go back to the code editor and add the following code to the\n                        App.vue file inside the "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import SearchBar from './components/SearchBar.vue';")]),e._v(" "),a("figcaption",[e._v("Fig 03-028")])]),e._v(" "),a("p",[e._v("To get the SearchBar component to actually render inside the App component we add a "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(' tag inside our template - replacing the "Hi there!"\n                        placeholder text we had there previously:\n                    ')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        <SearchBar />\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-029")])]),e._v(" "),a("p",[e._v("By convention we can do a self-closing tag here if we don't expect this component to contain any\n                        elements of it's own. However, in this case, we definitely do so I'm going to use a full tag\n                        like so:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        <SearchBar></SearchBar>\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-030")])]),e._v(" "),a("p",[e._v("Ok so let's save this file and go back to the browser to see what happens. In the Console log you\n                        might notice an error message similar to:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('vue.runtime.esm.js?2b0e:587 [Vue warn]: Unknown custom element: <SearchBar> - did you register the component correctly? For recursive components, make sure to provide the "name" option.\n\n                    found in\n                    \n                    ---> <App> at src\\App.vue\n                           <Root>')]),e._v(" "),a("figcaption",[e._v("Fig 03-031")])]),e._v(" "),a("p",[e._v("You see whenever you want to nest a component like this or show one component inside of another\n                        it's not quite enough just to import that component and then place it into the template. There's\n                        actually one other step that we have to go through. I illustrated this error because the last\n                        step is very easy to forget.\n                    ")]),e._v(" "),a("p",[e._v("Ok so back over inside of our code editor, still inside the App.vue file, we imported the\n                        SearchBar (step 1) and we used it inside the template (step 2). Step number 3 involves adding a\n                        components property. This is going to be an object that lists all the different components that\n                        are going to be used inside of the app's template:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'App',\n    components: {\n\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-032")])]),e._v(" "),a("p",[e._v("We need to declare the SearchBar inside of the object we supply to the components property:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[e._v("export default {\n    name: 'App',\n    components: {\n        SearchBar: SearchBar\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-033")])]),e._v(" "),a("p",[e._v("This let's Our app component know that it might see a "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v("\n                        tag inside of it's template.\n                    ")]),e._v(" "),a("p",[e._v("We can use a little bit of ES 2015 syntax to shorten this up because the key and the value are\n                        identical:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'App',\n    components: {\n        SearchBar\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-034")])]),e._v(" "),a("p",[e._v("Save the App.vue file and flip back over to the browser and you should notice that we our input\n                        field displayed on screen.\n                    ")]),e._v(" "),a("p",[e._v("So, to recap, to show one component inside of another we add the "),a("code",{staticClass:"prettyprint"},[e._v("import")]),e._v(" statement, we use a "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(" tag inside of the template and we declare a "),a("code",{staticClass:"prettyprint"},[e._v("components")]),e._v(" property that specifies a component called "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("In the next we'll start thinking about how we're going to get our SearchBar file to recognize the\n                        user typing some text in the input text field and as a result performing a search on YouTube\n                        using the YouTube API.\n                    ")]),e._v(" "),a("h3",[e._v("Event Directives")]),e._v(" "),a("p",[e._v("I'm inside of our SearchBar.vue file which is now visible inside of our application. So our goal\n                        now is to make sure that anytime the user types inside the input text we trigger some type of\n                        search in the YouTube API. Let's first get started by just making sure that we can get some\n                        event or some notification anytime the user types in the input text field. We already did this\n                        previously in one of our CodePen exercises. You'll recall that we added a directive to the "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" tag in the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v("\n                        and then we'll also add a "),a("code",{staticClass:"prettyprint"},[e._v("method")]),e._v(" object to our component\n                        definition.\n                    ")]),e._v(" "),a("p",[e._v("Let's begin by adding in the "),a("code",{staticClass:"prettyprint"},[e._v("methods")]),e._v(" object to our component\n                        definition:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\nexport default {\n    name: 'SearchBar',\n    methods: {\n\n    }\n};\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-035")])]),e._v(" "),a("p",[e._v("Remember methods give us the ability to change data inside of our application.")]),e._v(" "),a("p",[e._v("So I'm going to make a method called onInput. The onInput function will be called with an event\n                        which will contain the text that the user just entered into the input. For the moment we will\n                        just write this out to the console:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\nexport default {\n    name: 'SearchBar',\n    methods: {\n        onInput: function(event) {\n            console.log(event.target.value);\n        }\n    }\n};\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-036")])]),e._v(" "),a("p",[e._v("We will also wire that method up to our "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" element in the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(":\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div>\n        <input v-on:input="onInput" />\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-037")])]),e._v(" "),a("p",[e._v("So let's save this and back in the browser refresh the page and enter some text into the text\n                        input field and you'll see the console logs start to appear.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(135)}}),e._v(" "),a("figcaption",[e._v("Fig 03-038")])]),e._v(" "),a("p",[e._v("In the next we'll start thinking about how we can use the text entered as a search term in the\n                        YouTube API.\n                    ")]),e._v(" "),a("h3",[e._v("Shorthand Event Syntax")]),e._v(" "),a("p",[e._v("In the last section we wired up the "),a("code",{staticClass:"prettyprint"},[e._v("onInput")]),e._v(" directive to our\n                        "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" tag. Before we move on to talking about how we're going\n                        to use this information to actually do a search on the YouTube API there is one little refactor\n                        I want to do to the "),a("code",{staticClass:"prettyprint"},[e._v("v-on")]),e._v(" directive we used on the "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" tag.\n                    ")]),e._v(" "),a("p",[e._v("The refactor we are going to perform is purely syntactic - it does not affect the functionality\n                        of the directive in any way:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<input @input="onInput" />')]),e._v(" "),a("figcaption",[e._v("Fig 03-039")])]),e._v(" "),a("p",[e._v("So we have replaced the "),a("code",{staticClass:"prettyprint"},[e._v("v-on:input")]),e._v(" directive with a more concise\n                        syntax "),a("code",{staticClass:"prettyprint"},[e._v("@input")]),e._v(". So this can be read as anytime someone triggers\n                        an input event on this element run the "),a("code",{staticClass:"prettyprint"},[e._v("onInput")]),e._v(" function.\n                    ")]),e._v(" "),a("h3",[e._v("Data Sharing Between Components")]),e._v(" "),a("p",[e._v("The SearchBar component is now aware of what a user is typing into your application thanks to the\n                        onInput method. So now we can get a search term to use with the YouTube API. But where inside of\n                        our application should locate the code to actually execute that search?\n                    ")]),e._v(" "),a("p",[e._v("So going back to our component heirarchy diagram:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(136)}}),e._v(" "),a("figcaption",[e._v("Fig 03-039")])]),e._v(" "),a("p",[e._v("In our application we are trying to display a list of videos to our user and we're also trying to\n                        allow them to select one individual video as well. So, it seems to me, there are two areas in\n                        our application where we definitely need to know about the current list of videos that the user\n                        has searched for - the VideoDetail and VideoList components.\n                    ")]),e._v(" "),a("p",[e._v("On the other hand the SearchBar component does'nt really care about the list of videos that are\n                        being fetched from YouTube.\n                    ")]),e._v(" "),a("p",[e._v("For this reason it would be most appropriate to put the YouTube search code in the App component.\n                    ")]),e._v(" "),a("p",[e._v("You might be thinking, wait a minute, if the VideoDetail and VideoList are the components that\n                        actually need access to the list of videos why don't we put the code for doing the search in one\n                        of those. Here is a simplified diagram to demonstrate why we are not going to do that:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(137)}}),e._v(" "),a("figcaption",[e._v("Fig 03-040")])]),e._v(" "),a("p",[e._v("So anytime that we want to communicate information (data or arbitrary information) throughout our\n                        app it is very easy for us to do so using components that are parent and children to each other.\n                        So in other words the VideDetail component can easily communicate data with the App component\n                        and likewise the App component can easily communicate with the VideoDetail.\n                    ")]),e._v(" "),a("p",[e._v("However, it is not as easy to communicate across sibling components. So VideoDetail, SearchBar\n                        and VideoList are all being displayed by the App component which makes them sibling components.\n                    ")]),e._v(" "),a("p",[e._v("This means that if there is some common data that needs to be used between both VideoDetail and\n                        VideoList the best place to locate all that data would be inside the App component. From there\n                        it can be easily shared with both VideoDetail and VideoList.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we'll figure out how we're going to make sure that the SearchBar can somehow\n                        tell the App component that it needs to execute a search of the YouTube API.\n                    ")]),e._v(" "),a("h3",[e._v("Communication with Props and Events")]),e._v(" "),a("p",[e._v("In the last section we talked about how the App component is the best location to put some logic\n                        to search the YouTube API. The next thing we have to do is to figure out how to get the\n                        SearchBar to somehow tell the App component that it needs to execute a search in the first\n                        place. At present the SearchBar component is just reading in input that is provided by the user.\n                        So the SearchBar has to somehow say to the App - \"Hey we've got some new input it's time for you\n                        to execute a search.\"\n                    ")]),e._v(" "),a("p",[e._v("So let's now talk about how we can communicate from a child component up to a parent one. To\n                        communicate between parent and child components varies on the direction we are trying to\n                        communicate.\n                    ")]),e._v(" "),a("p",[e._v("So if we want the App component to provide some information or data or just communicate something\n                        down to the SearchBar component we do so using a process called passing props - which is short\n                        for properties. So anytime we want to communicate from the App down to the SearchBar we will\n                        pass a prop.\n                    ")]),e._v(" "),a("p",[e._v("A prop can be anything from an array to an object, string or function - all types of values. We\n                        will see many examples of this over time.\n                    ")]),e._v(" "),a("p",[e._v("On the other hand, communicating from the SearchBar up to the App component (e.g. the SearchBar\n                        notifying the App component that it has some new input and needs the App component to do a new\n                        search) uses a slightly different system. To communicate upwards we make use of the event system\n                        that is included in Vue. So if the SearchBar wants to say something to the App then the\n                        SearchBar needs to emit an event. The App component will then listen for that event and whenever\n                        that event is triggered the App has the ability to run some custom code - in our case it would\n                        perform a search on the YouTube API.\n                    ")]),e._v(" "),a("p",[e._v(" In the next section we will wire up some events between the SearchBar component and the App\n                        component.\n                    ")]),e._v(" "),a("h3",[e._v("Emitting Events")]),e._v(" "),a("p",[e._v("In the last section we spoke about how a parent component can communicate to the child by passing\n                        props and how the child can communicate with the parent by emitting events.\n                    ")]),e._v(" "),a("p",[e._v("So let's now go back over to our code editor and add some code to the SearchBar component to make\n                        sure that it emits an event anytime someone change that "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v("\n                        element.\n                    ")]),e._v(" "),a("p",[e._v("So in SearchBar.vue every single time that the onInput function is called we are going to want to\n                        emit an event to the inform that App component that there is a new term to search the YouTube\n                        API with.\n                    ")]),e._v(" "),a("p",[e._v("First, replace the "),a("code",{staticClass:"prettyprint"},[e._v("console.log")]),e._v(" statement with a call the "),a("code",{staticClass:"prettyprint"},[e._v("$emit")]),e._v(" function:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    onInput: function(event) {\n        this.$emit();\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-041")])]),e._v(" "),a("p",[e._v("The first argument to this function is the name of the event we want to emit. In this case I'll\n                        use a name of termChange to indicate that our search term just changed:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    onInput: function(event) {\n        this.$emit('termChange');\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-042")])]),e._v(" "),a("p",[e._v("As an aside I want to mention that when we were listening for an "),a("code",{staticClass:"prettyprint"},[e._v("\n                        input")]),e._v(" event on the "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" text field in the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" input is a special event name. In other words input\n                        elements emit events called input anytime someone inputs something into them. However when you\n                        and I are emitting events we have complete control over the name that we choose.\n                    ")]),e._v(" "),a("p",[e._v("I used termChange because one convention is to use the name of what is about to occur and then a\n                        verb that indicates what just changed.\n                    ")]),e._v(" "),a("p",[e._v("The second argument can be used to provide some additional information about the event that just\n                        occurred. So in this case we're probably going to want to inform the App component about the new\n                        search term which is available on "),a("code",{staticClass:"prettyprint"},[e._v("event.target .value")]),e._v(". So let's\n                        add that as the second argument:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    onInput: function(event) {\n        this.$emit('termChange', event.target.value);\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-043")])]),e._v(" "),a("p",[e._v("The last thing I want to mention here is the dollar sign in the emit function. There's nothing\n                        special about using the dollar sign with a function name - it is valid Javascript. So the\n                        creators of the Vue library could just have easily have called this emit and left out the dollar\n                        sign. The reason they added the dollar sign in there is just in case you ever decided to add in\n                        some additional property to your component called emit as well.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will work on our App component and make sure it listens for the SearchBar\n                        to emit an event. Anytime that occurs we'll then trigger a search on the YouTube API.\n                    ")]),e._v(" "),a("h3",[e._v("Listening for Custom Events")]),e._v(" "),a("p",[e._v("Our SearchBar component is now emitting an event anytime someone enters some new text. We're now\n                        going to open our App component and make sure that anytime the SearchBar emits the termChange\n                        event the App has the ability to run some code that will do a search on the YouTube API.\n                    ")]),e._v(" "),a("p",[e._v("Add the following code to the "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(" tag:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<SearchBar v-on:termChange="onTermChange"></SearchBar>')]),e._v(" "),a("figcaption",[e._v("Fig 03-044")])]),e._v(" "),a("p",[e._v("We specify a method name of "),a("code",{staticClass:"prettyprint"},[e._v("onTermChanged")]),e._v(" to run anytime the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("termChange")]),e._v(" event is triggered.\n                    ")]),e._v(" "),a("p",[e._v("Inside the component definition we'll add another key value pair of "),a("code",{staticClass:"prettyprint"},[e._v("\n                        methods")]),e._v(" and define a function of onTermChange\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'App',\n    components: {\n        SearchBar\n    },\n    methods: {\n        onTermChange: function() {\n\n        }\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-045")])]),e._v(" "),a("p",[e._v("One quick thing I want to mention about these function declarations that we've been writing is\n                        that we've been using the function keyword (see Fig 03-045 above). If we wanted to we could use\n                        a little bit of ES2015 syntax to shorten this to:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n        name: 'App',\n        components: {\n            SearchBar\n        },\n        methods: {\n            onTermChange() {\n\n            }\n        }\n    };")]),e._v(" "),a("figcaption",[e._v("Fig 03-046")])]),e._v(" "),a("p",[e._v("The longer form makes it clear that we are calling a function. However, moving forward we're\n                        going to use this slightly shortened syntax because you'll see this form in use in many of the\n                        more modern application that make use of Vue.\n                    ")]),e._v(" "),a("p",[e._v("Ok so, once again, anytime the "),a("code",{staticClass:"prettyprint"},[e._v("v-on:termChange")]),e._v(" event is\n                        triggered we will run the "),a("code",{staticClass:"prettyprint"},[e._v("onTermChange")]),e._v(" function.\n                    ")]),e._v(" "),a("p",[e._v("You'll remember that back inside of SearchBar whenever we emit "),a("code",{staticClass:"prettyprint"},[e._v("\n                        termChange")]),e._v(" we also pass along the new search term that the user just entered by passing\n                        "),a("code",{staticClass:"prettyprint"},[e._v("event.target.value")]),e._v(" as the second argument.\n                    ")]),e._v(" "),a("p",[e._v("Because we add "),a("code",{staticClass:"prettyprint"},[e._v("event.target.value")]),e._v(" as the second argument it will\n                        show up as the first argument to our callback function or event handler:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    onTermChange(searchTerm) {\n\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-047")])]),e._v(" "),a("p",[e._v("So searchTerm is going to be the same string that the user just entered into SearchBar.\n                        Temporarily let's again just log this to the console:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    onTermChange(searchTerm) {\n        console.log(searchTerm);\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-048")])]),e._v(" "),a("p",[e._v("Now before we go test this out I want to draw your attention to the listener we added to the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(" tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<SearchBar v-on:termChange="onTermChange"></SearchBar>')]),e._v(" "),a("figcaption",[e._v("Fig 03-049")])]),e._v(" "),a("p",[e._v("The syntax is almost identical to the syntax we used to listen to an "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v("\n                        event on an "),a("code",{staticClass:"prettyprint"},[e._v("input")]),e._v(" element earlier. So, as before, we can\n                        shorten the syntax:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<SearchBar @termChange="onTermChange"></SearchBar>')]),e._v(" "),a("figcaption",[e._v("Fig 03-041")])]),e._v(" "),a("p",[e._v("Ok, let's save and then go back to the browser to test our code. Refresh the page and if you type\n                        some text you should see it logged in the console as before. The difference this time round is\n                        the console log is being called in the App.vue onTermChange method.\n                    ")]),e._v(" "),a("p",[e._v("This confirms that the SearchBar component is communicating up to the App component successfully.\n                    ")]),e._v(" "),a("p",[e._v("In the next section will start to look at the YouTube API.")]),e._v(" "),a("h3",[e._v("Youtube API Signup")]),e._v(" "),a("p",[e._v("Our App component is now aware of anytime the user enters in a new search term. So inside the\n                        App.vue file's onTermChange function is where we'll probably want to locate a little bit of code\n                        to somehow initiate a search for some videos.\n                    ")]),e._v(" "),a("p",[e._v("Let's take a look at a diagram that will give us a better idea how we will use the YouTube API:\n                    ")]),e._v(" "),a("p",[e._v("So every single time the user types into the input text field we are going to use a library\n                        called axios to make a Ajax request over to the YouTube API. In the Ajax request we will provide\n                        the search term we are looking for. The YouTube API will then execute a search on it's own\n                        server and then respond to us with a list of videos that match that search term. In order to\n                        make use of the YouTube API we first have to sign up to it and get an API key.\n                    ")]),e._v(" "),a("p",[e._v("Browse to "),a("a",{attrs:{href:"console.developers.google.com"}},[e._v("console.developers.google.com")]),e._v(", sign in if\n                        required, and create a new project (I did this by clicking the drop down next to the Google APIs\n                        logo and clicking the new project button).\n                    ")]),e._v(" "),a("p",[e._v("Take the default random name (My Project 32866 in my case) and click Create. Next click the\n                        Enable APIS and Services button. Search for the YouTube Data API v3 and open it up. Click the\n                        enable button.\n                    ")]),e._v(" "),a("p",[e._v("After the API is enabled we need to get an API key to allow us to access the API itself. Click on\n                        the Create Credentials button. This prompts us for some information about the API that we want\n                        to create. Make sure that you have the YouTube Data API v3 selected, specify that you will be\n                        calling the API from a web browser, and that we only want to see public data.\n                    ")]),e._v(" "),a("p",[e._v('After you have entered all the relevant information click the "What credentials do I need?"\n                        button. At this point you should see the API key. Copy the key and return to your editor.\n                    ')]),e._v(" "),a("p",[e._v("Inside the App.vue file directly underneath our import statement add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("const API_KEY = 'your key here';")]),e._v(" "),a("figcaption",[e._v("Fig 03-042")])]),e._v(" "),a("p",[e._v("You'll notice that I use capital letters with the underscore right here to declare the variable\n                        name. That's because this is constant variable and I never expect this to be changed.\n                    ")]),e._v(" "),a("p",[e._v("Next we will install the Axios library which is what we are going to use to make an Ajax request\n                        to the YouTube API. From a terminal in the video-browser directory issue the following command:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("npm install --save axios")]),e._v(" "),a("figcaption",[e._v("Fig 03-043")])]),e._v(" "),a("h3",[e._v("Searching Youtube")]),e._v(" "),a("p",[e._v("In the last section we signed up for YouTube API key and installed axios into our project. In the\n                        terminal start the web application up again:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("npm run serve")]),e._v(" "),a("figcaption",[e._v("Fig 03-044")])]),e._v(" "),a("p",[e._v("In the App.vue file import the axios library:")]),e._v(" "),a("p",[e._v("We will add the following code to the onTermChange function to perform the YouTube search (You\n                        can find the YouTube API documentation by googling YouTube API):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import axios from 'axios';")]),e._v(" "),a("figcaption",[e._v("Fig 03-045")])]),e._v(" "),a("p",[e._v("Next add the following code to the onTermChange function:")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("methods: {\n    onTermChange(searchTerm) {\n        axios.get('https://googleapis.com/youtube/v3/search', {\n            params: {\n                key: API_KEY,\n                type: 'video',\n                part: 'snippet',\n                q: searchTerm\n        }\n    }).then(response => console.log(response));\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-046")])]),e._v(" "),a("p",[e._v("We use the "),a("code",{staticClass:"prettyprint"},[e._v("axios.get")]),e._v(" method to call the YouTube API passing the\n                        Url as the first argument. A params object is passed as the the second object which specifies\n                        the following settings:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("key - The API_KEY const we just defined.")]),e._v(" "),a("li",[e._v("type - The type of resource on YouTube we are looking for.")]),e._v(" "),a("li",[e._v("part - Tells the YouTube API what type of information we want back")]),e._v(" "),a("li",[e._v("q - The search term to pass to the YouTube API")])]),e._v(" "),a("p",[e._v("We then chain a "),a("code",{staticClass:"prettyprint"},[e._v(".then")]),e._v(" to the axios request. This statement\n                        accepts a function that gets called with the response that we get back from YouTube. So we can\n                        accept that as an argument and then for now just write the response to the console.\n                    ")]),e._v(" "),a("p",[e._v("Save the file and return to the browser. Refresh the page and perform a search.")]),e._v(" "),a("p",[e._v("You'll notice we get a nasty error message in our console.")]),e._v(" "),a("p",[e._v("In the next section we'll investigate why we are seeing this error.")]),e._v(" "),a("h3",[e._v("Investigating Video Responses")]),e._v(" "),a("p",[e._v("In the last section we got a nasty error message that complained with a status of 404 for this.\n                        This is because of a typo in the Url that we specified to the "),a("code",{staticClass:"prettyprint"},[e._v("axios.get")]),e._v("\n                        method. It should have been "),a("a",{attrs:{href:"https://www.googleapis.com/youtube/v3/search"}},[e._v("https\n                            ://www.googleapis.com/youtube/v3/search")]),e._v(". If we now save the file, refresh the browser\n                        and search again you should see a collection of console logs. This is because everytime the user\n                        enters some text an event is triggered. That event instantly triggers an Ajax request over to\n                        the YouTube API.\n                    ")]),e._v(" "),a("p",[e._v("If you investigate one of the responses you will see several different properties:")]),e._v(" "),a("ul",[a("li",[e._v("A status request of 200 - means that the Ajax call was successful.")]),e._v(" "),a("li",[e._v("A data property - contains the data returned from the request")]),e._v(" "),a("ul",[a("li",[e._v("items - found inside the data property this array contains details on the different\n                                YouTube videos that were found from our search request.\n                            ")])])]),e._v(" "),a("p",[e._v("Inside on of the items you will find properties like id and snippet. Snippet contains:")]),e._v(" "),a("ul",[a("li",[e._v("The channel the video was posted to")]),e._v(" "),a("li",[e._v("A description")]),e._v(" "),a("li",[e._v("When it was published")]),e._v(" "),a("li",[e._v("Some thumbnails for the video")]),e._v(" "),a("li",[e._v("The title")])]),e._v(" "),a("p",[e._v("Ok so this looks like we have some information about a list of videos coming back from the\n                        YouTube API.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we'll talk about how we can use this list of videos to show the videos inside\n                        of our application.\n                    ")]),e._v(" "),a("h3",[e._v("Rendering a List of Videos")]),e._v(" "),a("p",[e._v("In the last section we were able to execute a search on the YouTube API for some given search\n                        term. We got a response that contained a list of videos that were found during that search.\n                    ")]),e._v(" "),a("p",[e._v("So we now need to take this list of videos and somehow display them on the screen.")]),e._v(" "),a("p",[e._v("Create a new file in the components directory called VideoList.vue - remember we always make one\n                        separate Vue file for every component that we create. Add the following code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n  <ul>\n      VideoList\n  </ul>\n</template>\n\n<script>\n  export default {\n      name: 'VideoList'\n  };\n</script>\n\n<style>\n\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 03-047")])]),e._v(" "),a("p",[e._v("The unordered list will be used to render the list of videos - for the moment we have just added\n                        some placecholder text.\n                    ")]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag contains "),a("code",{staticClass:"prettyprint"},[e._v("export\n                        default")]),e._v(" which contains a name property of VideoList.\n                    ")]),e._v(" "),a("p",[e._v("Before we go any further let's wire up the VideoList component to our App component to get it\n                        visible on the screen.\n                    ")]),e._v(" "),a("p",[e._v("In App.vue we will go through the three step process that we follow to show one component inside\n                        of another.\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Add the import statment - import VideoList from './components/VideoList.vue';")]),e._v(" "),a("li",[e._v("Add a tag for VideoList in the template - "),a("code",{
staticClass:"prettyprint"},[e._v("<VideoList></VideoList>")])]),e._v(" "),a("li",[e._v("Add it to the "),a("code",{staticClass:"prettyprint"},[e._v("components")]),e._v(" property on the component\n                            configuration - "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")])])]),e._v(" "),a("p",[e._v("Now if you save the file and go to the browser you should see the text VideoList in the browser\n                        window.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will look at how we can communicate our list of videos that was just\n                        retrieved from the YouTube API down to the VideoList component and render them.\n                    ")]),e._v(" "),a("h3",[e._v("Updating Data Causes Rerenders")]),e._v(" "),a("p",[e._v("Our "),a("code",{staticClass:"prettyprint"},[e._v("onTermChange")]),e._v(" method is now making a request to the YouTube\n                        API to fetch a list of videos. We have also setup a VideoList component to actually display the\n                        list of videos.\n                    ")]),e._v(" "),a("p",[e._v("The next thing we need to do is communicate the list of videos that we fetch down from the parent\n                        App.vue to the child VideoList.vue component. VideoList.vue is the child because it is being\n                        display from within App.vue.\n                    ")]),e._v(" "),a("p",[e._v("The following diagram illustrates this process:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(138)}}),e._v(" "),a("figcaption",[e._v("Fig 03-048")])]),e._v(" "),a("p",[e._v("This is a timeline - starting from the top and ending up at the bottom. So with our workflow for\n                        getting a list of videos everything start with that OnTermChange method being called.\n                    ")]),e._v(" "),a("p",[e._v("When that method is called we make a request to the YouTube API. The YouTube API will then\n                        respond with a list of objects that represents a list of videos.\n                    ")]),e._v(" "),a("p",[e._v("The next step is where things get interesting.")]),e._v(" "),a("p",[e._v("Remember that any time that we have some type of variable or information tied to a Vue instance\n                        or a component we store that information on the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property.\n                        So we use "),a("code",{staticClass:"prettyprint"},[e._v(" methods")]),e._v(" to update our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(". Whenever we update our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" the component is automatically re-rendered. We can then\n                        optionally make use of that "),a("code",{staticClass:"prettyprint"},[e._v("computed")]),e._v(" property to somehow twist\n                        those values into something that can be displayed on the screen.\n                    ")]),e._v(" "),a("p",[e._v("So we're going to take that list of videos that are returned and we're going to assign it to a\n                        property on our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" object inside of the App component.\n                        Because we are updating the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property we are going to cause\n                        the App component to automatically re-render it's template\n                    ")]),e._v(" "),a("p",[e._v("Now the important thing to realize here is that when we show one component inside of another, as\n                        we are doing here with the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" inside the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component, whenever the parent component re-renders it's\n                        template with some new data that causes all of the child components to be re-rendered as well.\n                        So whenever we update "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" in the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" will\n                        be updated at the same time - all of which happens automatically.\n                    ")]),e._v(" "),a("p",[e._v("So the plan is to take the list of videos and store it on data. When we do that causes everything\n                        to re-render. Then we can get our list of videos inside of VideoList and render them out in the\n                        template.\n                    ")]),e._v(" "),a("p",[e._v("So, in the next section, we will take our list of videos that are being retrieved when the "),a("code",{staticClass:"prettyprint"},[e._v("onTermChange")]),e._v(" function is executed and store them on the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property.\n                    ")]),e._v(" "),a("h3",[e._v("Data in Components vs Instances")]),e._v(" "),a("p",[e._v("In the last section we spoke about how we're going to take a our list of videos and store them on\n                        the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property of our "),a("code",{staticClass:"prettyprint"},[e._v("app")]),e._v("\n                        component. When we store the list of videos on the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v("\n                        property it will cause the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component to render and\n                        automatically render the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" at the same time.\n                    ")]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property is defined in slightly different way depending\n                        on whether we are working with a Vue instance or a Vue component. The following diagram\n                        describes this scenario:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(139)}}),e._v(" "),a("figcaption",[e._v("Fig 03-049")])]),e._v(" "),a("p",[e._v("So if we are working with a Vue instance then we can define the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property as an object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data: {\n    textInput: ''\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-050")])]),e._v(" "),a("p",[e._v("or a function that returns an object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data: function() {\n    return {\n        textInput: ''\n    }\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-051")])]),e._v(" "),a("p",[e._v("Once we start working with Vue components the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property\n                        "),a("span",{staticStyle:{"text-decoration":"underline"}},[e._v("must")]),e._v(" be a function that returns an object.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data: function() {\n    return {\n        textInput: ''\n    }\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-052")])]),e._v(" "),a("p",[e._v("Now, I'm sure, at this point you are curios about why there is a distinction. The following\n                        diagram illustrates why this requirement is in place:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(140)}}),e._v(" "),a("figcaption",[e._v("Fig 03-053")])]),e._v(" "),a("p",[e._v("Now, just for a moment, I want you to imagine that we break the rules and make an App component\n                        within which we define our data property as an object rather than as a function. When we define\n                        the data property as an object you can imagine that it essentially gets created inside our\n                        Computer's Memory:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(141)}}),e._v(" "),a("figcaption",[e._v("Fig 03-054.png-")])]),e._v(" "),a("p",[e._v("So inside of the our computers memory we've got that object just sitting around. When we then\n                        make an instance out of this App component - let's say we make three instances:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(142)}}),e._v(" "),a("figcaption",[e._v("Fig 03-055.png-")])]),e._v(" "),a("p",[e._v("Every instance will be referring to the exact same object inside of memory. So if any of these\n                        instances start to modify the object all the other instances will change as well because they're\n                        all sharing the exact same object.\n                    ")]),e._v(" "),a("p",[e._v("The easiest workaround for this is to make a function that returns an object. When we do that\n                        every single time we create a component instance they will each have their own separate copy of\n                        that data object:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(143)}}),e._v(" "),a("figcaption",[e._v("Fig 03-056")])]),e._v(" "),a("p",[e._v("So, essentially, because of this data sharing issue we have to create functions that create\n                        objects when we're working with "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" inside of a component.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will update our App component so that it has a data property that returns\n                        an object.\n                    ")]),e._v(" "),a("h3",[e._v("Updating Data")]),e._v(" "),a("p",[e._v("In the last section we spoke about how data inside of a component has to be defined as a function\n                        that returns an object. So inside of my App component between our list of "),a("code",{staticClass:"prettyprint"},[e._v("components")]),e._v(" and our "),a("code",{staticClass:"prettyprint"},[e._v("methods")]),e._v("\n                        we'll add a new property that will return an object that represents our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(":\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data() {\n            return {};\n        },")]),e._v(" "),a("figcaption",[e._v("Fig 03-056")])]),e._v(" "),a("p",[e._v("So we define the data property and use the shorter ES2015 syntax. Inside the data function we\n                        return an object which will initialize our data. This is going to be like the starting state or\n                        the initial ingredients for our component. So we have to start thinking about what different\n                        properties our data is going to contain.\n                    ")]),e._v(" "),a("p",[e._v("Well we definitely know that we need to have a list of videos because that's what we are\n                        retrieving from our onTermChange function - so let's add a videos property which should be an\n                        array of objects where every object represents one video:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data() {\n    return { videos: [] };\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-057")])]),e._v(" "),a("p",[e._v("Now inside the "),a("code",{staticClass:"prettyprint"},[e._v("onTermChange")]),e._v(" function where we have the "),a("code",{staticClass:"prettyprint"},[e._v(".then")]),e._v(" chained function to wait for a response from the YouTube\n                        API we can replace the console log with some logic that will take the list of videos that are\n                        contained inside of the response and update our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property -\n                        specifically the videos property:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("methods: {\n    onTermChange(searchTerm) {\n        axios.get('https://www.googleapis.com/youtube/v3/search', {\n            params: {\n                key: API_KEY,\n                type: 'video',\n                part: 'snippet',\n                q: searchTerm\n            }\n        }).then(response => {\n            this.videos = response.data.items;\n        });\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-058")])]),e._v(" "),a("p",[e._v("Remember the data property that is returned in the response is not at all related to the\n                        component instance - this is the data property that is tied to our response object that comes\n                        back from YouTube.\n                    ")]),e._v(" "),a("p",[e._v("Because videos is a data property when the above line is executed this will cause the entire\n                        template inside the App component to automatically re-render.\n                    ")]),e._v(" "),a("p",[e._v("So, as a quick test, let's add in a counter inside of our template that counts the number of\n                        videos that have been found on the YouTube API:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<div>\n    <SearchBar @termChange="onTermChange"></SearchBar>\n    <VideoList></VideoList>\n    {{ videos.length }}\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 03-059")])]),e._v(" "),a("p",[e._v("Usually we would use a computed function here but because this is just a temporary thing we won't\n                        bother a computed function. So we reference the videos data property and retrieve it's length.\n                    ")]),e._v(" "),a("p",[e._v("Remember that when we are referencing a data property or function that is tied to our component\n                        from within our template we do not have to prefix it with "),a("code",{staticClass:"prettyprint"},[e._v("this")]),e._v("\n                        we can just write out the name of the property that we are trying to reference.\n                    ")]),e._v(" "),a("p",[e._v("So let's save this and we'll go back over to our browser and you'll notice that now we've got the\n                        counter appearing on the screen. Type a search term in to see how many videos are returned.\n                    ")]),e._v(" "),a("p",[e._v("The next step is to take the list of videos stored on the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v("\n                        property and pass it down to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" component.\n                    ")]),e._v(" "),a("h3",[e._v("Communicating from Parent to Child")]),e._v(" "),a("p",[e._v("In the last section we updated our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property of "),a("code",{staticClass:"prettyprint"},[e._v("videos")]),e._v(" whenever we got a reesponse back from the YouTube API.\n                        Because we updated a property that was defined on our "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v("\n                        object that cause our App component to automatically re-render.\n                    ")]),e._v(" "),a("p",[e._v("Now that we have that in place we want to communicate down the list of videos down to the\n                        VideoList component because the VideoList is responsible for rendering out information about\n                        each particular video on the screen.\n                    ")]),e._v(" "),a("p",[e._v("We've spoken a little bit about communicating from a parent to a child component previously - so\n                        instead of emitting events (that happens in the other direction) we pass props.\n                    ")]),e._v(" "),a("p",[e._v("This is a two step process. The first thing we're going to do is add a little bit of code to the\n                        parent component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<VideoList v-bind:videos="videos"></VideoList>')]),e._v(" "),a("figcaption",[e._v("Fig 03-060")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("videos")]),e._v(" property we specify above (to the left of the =\n                        operator) will be available in the child component - there is no restriction on what you call\n                        this property (e.g. myVideoArray). The value to the right specifies the name of the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" property (so here the name is important) that we want to\n                        share from the App component - the parent. In this case that's the "),a("code",{staticClass:"prettyprint"},[e._v("videos")]),e._v("\n                        property.\n                    ")]),e._v(" "),a("p",[e._v("The purpose of "),a("code",{staticClass:"prettyprint"},[e._v("v-bind")]),e._v(" directive is to specify that anytime the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("videos")]),e._v(" property is updated inside of the parent it should\n                        automatically try to re-render the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" and provide that\n                        new list of videos to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" component.\n                    ")]),e._v(" "),a("p",[e._v("We can also use a shorthand form for the v-bind directive as well:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<VideoList :videos="videos"></VideoList>')]),e._v(" "),a("figcaption",[e._v("Fig 03-061")])]),e._v(" "),a("p",[e._v("Throughout the rest of the course we will use this shorthand syntax.")]),e._v(" "),a("p",[e._v("In the next section we will add some configuration to our child component to tell it about the\n                        props that it should expect to receive from it's parent.\n                    ")]),e._v(" "),a("h3",[e._v("Prop Validation")]),e._v(" "),a("p",[e._v("In the last section we added some configuration to our App component to take our list of videos\n                        and pass it down to the VideoList.\n                    ")]),e._v(" "),a("p",[e._v("Step two of passing props involves adding some configuration to our child component to tell it\n                        about what data it should expect to receive from it's parent.\n                    ")]),e._v(" "),a("p",[e._v("Open the VideoList.vue file and add the following code to the "),a("code",{staticClass:"prettyprint"},[e._v("script ")]),e._v(" section:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n  name: 'VideoList',\n  props: ['videos']\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-062")])]),e._v(" "),a("p",[e._v("We assign an array to the "),a("code",{staticClass:"prettyprint"},[e._v("props")]),e._v(" property that contains a number\n                        of strings which match the exact property names that the component should expect to receive from\n                        the parent - videos in our case.\n                    ")]),e._v(" "),a("p",[e._v("So defining our "),a("code",{staticClass:"prettyprint"},[e._v("props")]),e._v(" list can be as simple as listing out the\n                        names of all the different properties that we expect to receive. We can also add in some amount\n                        of configuration or validation to make sure that the child component is receiving the correct\n                        typeo of property as well.\n                    ")]),e._v(" "),a("p",[e._v("So we might want to validate to make sure that the parent is passing down an array, or a string,\n                        or an object. This is optional, but recommended. So instead of an array of strings we can pass\n                        in an object where the keys are the name of the properties we expect to receive and the values\n                        are the type of the property that we expect.\n                    ")]),e._v(" "),a("p",[e._v("In the case of the videos object we expect it to be an array of objects so we can write the\n                        following:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n  name: 'VideoList',\n  props: {\n      videos: Array\n  }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-063")])]),e._v(" "),a("p",[e._v("This component will then expect to receive a property called videos that should be an array. If\n                        an array is not passed then the component will throw an error\n                    ")]),e._v(" "),a("p",[e._v("So, now that we completed step number 2, we can make use of the prop that has been provided\n                        anywhere inside of our component. So we could use it in a computed function, or methods, or we\n                        could access it directly inside our template. We'll do the last one now.\n                    ")]),e._v(" "),a("p",[e._v("So, inside the template, I'm going to try to print out the number of videos that we have been\n                        passed again:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<template>\n  <ul>\n      VideoList\n      {{ videos.length }}\n  </ul>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-064")])]),e._v(" "),a("p",[e._v("This syntax is identical to the earlier example when we accessed the "),a("code",{staticClass:"prettyprint"},[e._v("videos")]),e._v("\n                        data property in the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component.\n                    ")]),e._v(" "),a("p",[e._v("We do the exact same thing when we are accessing a prop as well - the common theme being we just\n                        use the name.\n                    ")]),e._v(" "),a("p",[e._v("Let's go back to the browser, refresh and test by entering a search at which point you should see\n                        the counter display the number of results returned.\n                    ")]),e._v(" "),a("p",[e._v("Now that we have got some props we can start to add some logic to the VideoList component to\n                        render those out as a list.\n                    ")]),e._v(" "),a("h3",[e._v("Separate List Components")]),e._v(" "),a("p",[e._v("Our VideoList component now knows about the list of videos that it needs to render to the screen.\n                        As a quick reminder remember that the entire list itself is going to be comprised of two\n                        separate components.\n                    ")]),e._v(" "),a("p",[e._v("The first is the VideoList - which is what we are working on now. The purpose of VideoList is to\n                        take the list of videos that we pass down to it and then render one VideoListItem component for\n                        each video that it receives.\n                    ")]),e._v(" "),a("p",[e._v("Create a new file called VideoListItem.vue inside the components directory. Add the following\n                        boilerplate code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n\n</template>\n\n<script>\nexport default {\n    name: 'VideoListItem'\n};\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-065")])]),e._v(" "),a("p",[e._v("Now, since we are using a "),a("code",{staticClass:"prettyprint"},[e._v("ul")]),e._v(" element inside of VideoList we will\n                        make each individual list item an "),a("code",{staticClass:"prettyprint"},[e._v("li")]),e._v(".\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n    <li>\n        VideoListItem\n    </li>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-066")])]),e._v(" "),a("p",[e._v("We have now created the VideoListItem component. Let's now import it into the VideoList and wire\n                        it up as a component that the VideoList can display.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n      import VideoListItem from './VideoListItem';")]),e._v(" "),a("figcaption",[e._v("Fig 03-067")])]),e._v(" "),a("p",[e._v("Remember that anytime we want to the parent component that it has access to the child we have to\n                        add the components property to that parent component itself. To do this add the following code\n                        inside of the VideoList configuration object:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n  name: 'VideoList',\n  components: {\n      VideoListItem\n  },\n  props: {\n      videos: Array\n  }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-068")])]),e._v(" "),a("p",[e._v("So now inside of our VideoList component we access to the VideoListItem component. Now we need to\n                        figure out how to create one VideoListItem component for every video that is contained within\n                        our videos property.\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("{{ videos.length }}")]),e._v(" "),a("figcaption",[e._v("Fig 03-068")])]),e._v(" "),a("h3",[e._v("Lists with V-For")]),e._v(" "),a("p",[e._v("In the last section we created a VideoListItem component and we wired it up to it's parent -\n                        VideoList.\n                    ")]),e._v(" "),a("p",[e._v("We now need to add some code to the VideoList to make sure it shows exactly one instance of the\n                        VideoListItem for every video that we have fetched. So far it looks like every single time we\n                        get a response back from the YouTube API we are always getting a list of five videos . So this\n                        is the number of VideoListItem components I would expect to see rendered in the list.\n                    ")]),e._v(" "),a("p",[e._v("To render the list we will use another directive inside the template section of our VideoList\n                        component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n      <ul>\n          <VideoListItem v-for="video in videos">\n          </VideoListItem>\n      </ul>\n  </template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-069")])]),e._v(" "),a("p",[e._v("The v-for directive is the directive you will use every time that you want to build a list of\n                        components out. We can interpret this directive as - for every single object or every single\n                        video inside of the list of videos that was provided as a prop to our VideoListComponent make\n                        exactly one VideoListItem component.\n                    ")]),e._v(" "),a("p",[e._v("Notice also how we declared "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" in the statement "),a("code",{staticClass:"prettyprint"},[e._v("video in videos")]),e._v(". This allows use to access an individual "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" from within the "),a("code",{staticClass:"prettyprint"},[e._v("VideoListItem")]),e._v(" component tag.\n                    ")]),e._v(" "),a("p",[e._v("Save the file, go back to the browser, refresh the page, enter a search term and you should see\n                        the following output:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(144)}}),e._v(" "),a("figcaption",[e._v("Fig 03-070")])]),e._v(" "),a("p",[e._v("You are seeing this output because, at present, the VideoListItem component is simply outputting\n                        an "),a("code",{staticClass:"prettyprint"},[e._v("li")]),e._v(" element containing the text VideoListItem for each "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" in the "),a("code",{staticClass:"prettyprint"},[e._v("videos")]),e._v(" prop.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will customize the VideoListItem component to show some information about\n                        the video that it represents.\n                    ")]),e._v(" "),a("h3",[e._v("Handling Props with V-For")]),e._v(" "),a("p",[e._v("In the last section we were able to get a collection of VideoListItem components to print out on\n                        the screen by using the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive.\n                    ")]),e._v(" "),a("p",[e._v("We now need figure out some way to say that for every video in this list of videos we want to\n                        communicate this video in the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive down to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoListItem")]),e._v(" component so the component instance knows what\n                        video it is supposed to be displaying information about on the screen.\n                    ")]),e._v(" "),a("p",[e._v("So this is another scenario where we want to communicate some data from the parent component of\n                        VideoList down to the child component of VideoListItem which will achieve by, again, making use\n                        of the Vue props system.\n                    ")]),e._v(" "),a("p",[e._v("We just went through this process but as a reminder we first have to add a "),a("code",{staticClass:"prettyprint"},[e._v(" v-bind")]),e._v(" expression to the parent components template.\n                    ")]),e._v(" "),a("p",[e._v("Now, this time around, that might seem like it's a bit more challenging here. It's definitely not\n                        the same type of setup that we had back inside of our App component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div>\n    <SearchBar @termChange="onTermChange"></SearchBar>\n    <VideoList :videos="videos"></VideoList>\n</div>\n')]),e._v(" "),a("figcaption",[e._v("Fig 03-070")])]),e._v(" "),a("p",[e._v("In particular, how do we get access to one individual video to pass down to the VideoListItem?\n                        Well, when we write out "),a("code",{staticClass:"prettyprint"},[e._v('v-for="video in videos"')]),e._v(" a\n                        temporary variable of "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" is declared that we can use inside\n                        of our template. "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" represents one video or one object in\n                        our array.\n                    ")]),e._v(" "),a("p",[e._v("Let's add some configuration to the VideoListItem tag underneath the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v("\n                        directive:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n      <ul>\n          <VideoListItem\n            v-for="video in videos"\n            :video="video"\n          >\n          </VideoListItem>\n      </ul>\n  </template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-071")])]),e._v(" "),a("p",[e._v("So we write "),a("code",{staticClass:"prettyprint"},[e._v("v-bind:")]),e._v(" and then the name of the prop: "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" as we want it to show up inside of the child component. So\n                        now VideoListItem is going to have access to a variable called video. After that we write "),a("code",{staticClass:"prettyprint"},[e._v('="video"')]),e._v(" which specifies the piece of data or the variable\n                        from the VideoListComponent that needs to be passed down to the child. "),a("code",{
staticClass:"prettyprint"},[e._v("video")]),e._v(" is referencing the current video that we are iterating\n                        over inside of our list of videos.\n                    ")]),e._v(" "),a("p",[e._v("If we had specified a different name in the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive we\n                        would need to use that in our "),a("code",{staticClass:"prettyprint"},[e._v("v-bind")]),e._v(" directive also:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<VideoListItem\n    v-for="mySingleVideo in videos"\n    :video="mySingleVideo"\n  >\n  </VideoListItem>')]),e._v(" "),a("figcaption",[e._v("Fig 03-072")])]),e._v(" "),a("p",[e._v("We will stick with video to keep the naming terminology consistent.")]),e._v(" "),a("p",[e._v("So now that we are passing some information, as a prop, from the parent to the child we need to\n                        tell the child component to expect to receive the prop.\n                    ")]),e._v(" "),a("p",[e._v("In the VideoListItem component add a "),a("code",{staticClass:"prettyprint"},[e._v("props")]),e._v(" property and, in this\n                        case, we will supply the "),a("code",{staticClass:"prettyprint"},[e._v("prop")]),e._v(" names as an array of strings\n                        instead of an object, although either way is valid.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("export default {\n    name: 'VideoListItem',\n    props: ['video']\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-073")])]),e._v(" "),a("p",[e._v("Now, in the template section of the VideoListItem component, replace the existing code with a\n                        reference to the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" prop:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<template>\n    <li>\n        {{ video.snippet.title }}\n    </li>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-074")])]),e._v(" "),a("p",[e._v("We get the name of the video from the "),a("code",{pre:!0,attrs:{class:"prettyprint"}},[e._v("{{ video.snippet.title\n                        }} ")]),e._v(". The video object has a "),a("code",{staticClass:"prettyprint"},[e._v("snippet")]),e._v(" property which, in\n                        turn, contains "),a("code",{staticClass:"prettyprint"},[e._v("title, description")]),e._v(" and "),a("code",{staticClass:"prettyprint"},[e._v("id ")]),e._v(" properties.\n                    ")]),e._v(" "),a("p",[e._v("Rerun the app inside of the browser and you should see a list of video titles appearing in our\n                        list.\n                    ")]),e._v(" "),a("p",[e._v("Let's continue in the next section where we will talk about one more feature of the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive.\n                    ")]),e._v(" "),a("h3",[e._v("Keys with V-For")]),e._v(" "),a("p",[e._v("In the last section we made use of the "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive to render\n                        out a list of VideoListItems\n                    ")]),e._v(" "),a("p",[e._v("Anytime we use this "),a("code",{staticClass:"prettyprint"},[e._v("v-for")]),e._v(" directive to build out a list of items\n                        there is one other property that we should (although it is optional) provide to the element or\n                        the component that we are making a list out of - the "),a("code",{staticClass:"prettyprint"},[e._v("key ")]),e._v("\n                        property.\n                    ")]),e._v(" "),a("p",[e._v("We define the "),a("code",{staticClass:"prettyprint"},[e._v("key")]),e._v(" property on the component that we are making\n                        the list out of by writing:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<VideoListItem\n    v-for="video in videos"\n    :video="video"\n    :key="video.etag"\n  >\n  </VideoListItem>')]),e._v(" "),a("figcaption",[e._v("Fig 03-074-")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("key")]),e._v(" property is used whenever our list is updated. In\n                        particular it's used to update our list in a performant fashion. If you look at the console in\n                        the browser for our application you wont see any warnings about a key not being present. This is\n                        because you don't strictly have to provide a key but in general we should do if possible because\n                        it enhances the performance of re-rendering our list of items.\n                    ")]),e._v(" "),a("p",[e._v("Inside the double quotes we provide a value that is unique and consistent to the individual\n                        record that we are rendering. In our case this is "),a("code",{staticClass:"prettyprint"},[e._v("video .etag")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("In the next section we'll move on to our VideoListItem component where we're going to work on\n                        some of the styling and rendering out an image in addition to the title.\n                    ")]),e._v(" "),a("h3",[e._v("Including Bootstrap Styling")]),e._v(" "),a("p",[e._v("Currently we are just outputting the title of the video in our list. We are going to add styling\n                        (using Bootstrap CSS) to display a thumbnail image with the video title to the right .\n                    ")]),e._v(" "),a("p",[e._v("From the Boostrap website browse to the "),a("a",{attrs:{href:"https://getbootstrap.com/docs/4.1/getting-started/introduction/",target:"_blank"}},[e._v("\n                        getting started")]),e._v(" page and copy the link in the CSS section.\n                    ")]),e._v(" "),a("p",[e._v("Paste the link into the index.html tag under the "),a("code",{staticClass:"prettyprint"},[e._v("title")]),e._v(" element.\n                    ")]),e._v(" "),a("p",[e._v("Back in the browser if you refresh the page and perform a search you should notice that some\n                        styling has already been applied.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will take advantage of Bootstrap to style some different elements of our\n                        application.\n                    ")]),e._v(" "),a("h3",[e._v("Styling the Search Bar")]),e._v(" "),a("p",[e._v("In the last section we installed the Bootstrap CSS library into our project. We're now going to\n                        use some the CSS that is included in Bootstrap to style our project starting with the search bar\n                        at the top of the page. .\n                    ")]),e._v(" "),a("p",[e._v("Anytime we make use of the Bootstrap library Bootstrap always assumes that our root element will\n                        have a class of "),a("code",{staticClass:"prettyprint"},[e._v("container")]),e._v(" - which is used throughout Bootstrap\n                        to better style and align different items inside of our project.\n                    ")]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" element in the template of the App component is one of\n                        the absolute root elements inside of our application so we'll add a "),a("code",{staticClass:"prettyprint"},[e._v("class")]),e._v("\n                        of "),a("code",{staticClass:"prettyprint"},[e._v("container")]),e._v(" to this element.\n                    ")]),e._v(" "),a("p",[e._v("Refresh the application and you'll immediately see that all the content on our page is more\n                        aligned towards the center of the screen.\n                    ")]),e._v(" "),a("p",[e._v("Next add some styling to the SearchBar component in the empty style tag. We use the scoped\n                        attribute to ensure that the CSS we add here only affects this component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style scoped>\n    input {\n        width: 75%;\n    }\n\n    div {\n        text-align: center;\n        margin: 20px;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 03-075")])]),e._v(" "),a("p",[e._v("Refresh the browser and you should see the search bar is more centered on the screen and there is\n                        also a little bit more of a margin between the browser's address bar and the search bar itself.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we'll style the VideoList.")]),e._v(" "),a("h3",[e._v("Styling the Video List")]),e._v(" "),a("p",[e._v("Next we will add some styling to the list of videos that gets rendered by the VideoList and\n                        VideoListItem components.\n                    ")]),e._v(" "),a("p",[e._v("We will apply the "),a("code",{staticClass:"prettyprint"},[e._v("list-group")]),e._v(" bootstrap style to the "),a("code",{staticClass:"prettyprint"},[e._v("ul")]),e._v(" element in the VideoList component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n  <ul class="list-group">\n      <VideoListItem\n        v-for="video in videos"\n        :video="video"\n        :key="video.etag"\n      >\n      </VideoListItem>\n  </ul>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-076")])]),e._v(" "),a("p",[e._v("and the "),a("code",{staticClass:"prettyprint"},[e._v("list-group-item")]),e._v("style to the child "),a("code",{staticClass:"prettyprint"},[e._v("li")]),e._v(" elements in the VideoListItem component:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <li class="list-group-item">\n        {{ video.snippet.title }}\n    </li>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-077")])]),e._v(" "),a("p",[e._v("It's worth pointing out that we don't try and add styles directly to the "),a("code",{staticClass:"prettyprint"},[e._v("<VideoListItem>")]),e._v(" tag in the VideoList component. Instead we\n                        open up the component itself and add the styles to the "),a("code",{staticClass:"prettyprint"},[e._v(" li")]),e._v("\n                        element located within.\n                    ")]),e._v(" "),a("p",[e._v("If you refresh the browser you should see the list of videos rendered using the styling we just\n                        specified.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we add the image thumbnail to appear as well.")]),e._v(" "),a("h3",[e._v("Thumbnail Image Reference")]),e._v(" "),a("p",[e._v("In the last section we added a little bit of styling to the VideoListItem component. Next we'll\n                        display a thumbnail image for each video returned in the list of videos.\n                    ")]),e._v(" "),a("p",[e._v("We'll begin by taking a look at the response object that comes back from the YouTube API. The\n                        snippet property contains a thumbnail property that itself contains three properties:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("default")]),e._v(" "),a("li",[e._v("high")]),e._v(" "),a("li",[e._v("medium")])]),e._v(" "),a("p",[e._v("These properties refer to the size of the image. If you copy the value of the url property in the\n                        default image.\n                    ")]),e._v(" "),a("p",[e._v("In the template for the VideoListItem component add an "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <li class="list-group-item">\n        <img :src="video.snippet.thumbnails.default.url" />\n             {{ video.snippet.title }}\n    </li>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-078")])]),e._v(" "),a("p",[e._v("Here we bind the "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" property to the "),a("code",{staticClass:"prettyprint"},[e._v("url")]),e._v("\n                        property we discussed above.\n                    ")]),e._v(" "),a("p",[e._v("If you refresh the browser you should now see the image thumbnails in the list of videos.")]),e._v(" "),a("p",[e._v("In the next section we will look at using a computed property to cut down the amount of\n                        Javascript code have added to our template.\n                    ")]),e._v(" "),a("h3",[e._v("Thumbnail by Computed Property")]),e._v(" "),a("p",[e._v("In the last section we displayed our thumbnail image on the screen. However, we did add a very\n                        long property reference: "),a("code",{staticClass:"prettyprint"},[e._v("video.snippet.thumbnails.default .url")]),e._v("\n                        directly into our template. This type of practice can make our template look messy and difficult\n                        to read. In this section, as an alternative, we are going to put this reference into our\n                        component as a computed property.\n                    ")]),e._v(" "),a("p",[e._v("We can use computed property to not only work with component data but also properties that are\n                        coming in through props inside of a component.\n                    ")]),e._v(" "),a("p",[e._v("Underneath "),a("code",{staticClass:"prettyprint"},[e._v("props")]),e._v(" add the "),a("code",{staticClass:"prettyprint"},[e._v("computed ")]),e._v(" object with a thumbnailUrl function:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("export default {\n    name: 'VideoListItem',\n    props: ['video'],\n    computed: {\n        thumbnailUrl() {\n            return this.video.snippet.thumbnails.default.url;\n        }\n    }\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-079")])]),e._v(" "),a("p",[e._v("Back in the "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" tag in the "),a("code",{staticClass:"prettyprint"},[e._v("template ")]),e._v(" we can now use our computed property:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <li class="list-group-item">\n        <img :src="thumbnailUrl" />\n             {{ video.snippet.title }}\n    </li>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-080")])]),e._v(" "),a("p",[e._v("In the browser the application should work as before.")]),e._v(" "),a("p",[e._v("So, as a reminder, we can use computed functions to work with or format data before we reference\n                        it inside our template.\n                    ")]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("this")]),e._v(" keyword in the code above is present because we are\n                        referencing a "),a("code",{staticClass:"prettyprint"},[e._v("prop")]),e._v(" called "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" inside of our component.\n                    ")]),e._v(" "),a("p",[e._v("We then add the properties: "),a("code",{staticClass:"prettyprint"},[e._v("snippet.thumbnails.default.url")]),e._v(" and\n                        make that the return value of our function.\n                    ")]),e._v(" "),a("p",[e._v("We specified a function name of thumbnailUrl inside of the computed object. We can then reference\n                        that function anywhere within our template. Notice that when we referenced the computed function\n                        we do not have to specify any parentheses or prefix the function with "),a("code",{staticClass:"prettyprint"},[e._v("this.")]),e._v("\n                        - we just use the computed function's name and Vue takes over from there.\n                    ")]),e._v(" "),a("p",[e._v("There was no mandatory requirement to refactor the code to use a computed property but anytime we\n                        add a very long property reference or any amount of Javascript logic directly into our template\n                        that's a sign that you might want to look at using a computed function to keep the template as\n                        simple and clean as possible.\n                    ")]),e._v(" "),a("p",[e._v("Ok, that all looks good but we have some text overlap:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(145)}}),e._v(" "),a("figcaption",[e._v("Fig 03-081")])]),e._v(" "),a("p",[e._v("In the next section we will add some styling to get the text to wrap to the right hand side of\n                        the thumbnail.\n                    ")]),e._v(" "),a("h3",[e._v("More List Item Styling")]),e._v(" "),a("p",[e._v("Ok now we've got thumbnails displayed inside of our VideoList item but you'll notice that the\n                        title kind of wraps around underneath the thumbnail image which is not what we want.\n                    ")]),e._v(" "),a("p",[e._v("The bootstrap documentation has a section on "),a("a",{attrs:{href:"https://getbootstrap.com/docs/4.0/layout/media-object/#media-list"}},[e._v("media list")]),e._v("\n                        which adds styling to show an image to the left with a bold title to the right.\n                    ")]),e._v(" "),a("p",[e._v("To achieve this layout we add a class of media to our "),a("code",{staticClass:"prettyprint"},[e._v("li")]),e._v(" element\n                        and a class of mr-3 to our "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" element. We also have to use a\n                        "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" element with a class of media-body which wraps anything\n                        that forms the text to the right hand side of the image:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <li class="list-group-item media">\n        <img class="mr-3" :src="thumbnailUrl" />\n        <div class="media-body">\n             {{ video.snippet.title }}\n        </div>\n\n    </li>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-081")])]),e._v(" "),a("p",[e._v("Ok, so we made a difference but we didn't get our desired result. Now the title just appears\n                        underneath the thumbnail. This is because the "),a("code",{staticClass:"prettyprint"},[e._v("list-group-item")]),e._v("\n                        and the "),a("code",{staticClass:"prettyprint"},[e._v("media ")]),e._v(" class conflict on how the item should be style.\n                        To workaround this we will add some custom CSS.\n                    ")]),e._v(" "),a("p",[e._v("We add the CSS to a "),a("code",{staticClass:"prettyprint"},[e._v("scoped style")]),e._v(" tag in VideoListItem:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style scoped>\n    li {\n        display: flex;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 03-082")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("display: flex;")]),e._v(" styling will cause the "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" and the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" to display on\n                        the same line.\n                    ")]),e._v(" "),a("p",[e._v("If I save the file, flip back over to the browser and refresh the page (which is necessary\n                        because we have just added a new block of CSS) you should see we have now achieved the desired\n                        result:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(146)}}),e._v(" "),a("figcaption",[e._v("Fig 03-083")])]),e._v(" "),a("p",[e._v("Whilst we are adding CSS we can make a couple of additional improvements here. Remember that we\n                        eventually want these list items to be clickable in order for the user to actually select a\n                        particular video. We can add some CSS to change the pointer and also show a little bit of a\n                        background highlight when we hover over an item in the list:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style scoped>\n    li {\n        display: flex;\n        cursor: pointer;\n    }\n\n    li:hover {\n        background-color: #eee;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 03-084")])]),e._v(" "),a("p",[e._v("This should give you the following result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(147)}}),e._v(" "),a("figcaption",[e._v("Fig 03-085")])]),e._v(" "),a("p",[e._v("In the next section we will work on click events that will allow us to select a particular video.\n                    ")]),e._v(" "),a("h3",[e._v("Handling Nested Clicks")]),e._v(" "),a("p",[e._v("We've pretty much wrapped up on the styling side of our VideoListItem component. We now need to\n                        think about what happens anytime a user clicks on one of the VideoListItems. As a quick reminder\n                        let's revisit our layout diagram:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(148)}}),e._v(" "),a("figcaption",[e._v("Fig 03-086")])]),e._v(" "),a("p",[e._v("Anytime someone clicks on a VideoListItem we want to create the VideoDetail component which will\n                        show information such as the video itself and the video title.\n                    ")]),e._v(" "),a("p",[e._v("So this is going to be a very interesting challenge as we try to communicate a click event across\n                        the entirety of our application. To get a better idea of the challenge ahead let's revisit the\n                        application structure diagram:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(4)}}),e._v(" "),a("figcaption",[e._v("Fig 03-087")])]),e._v(" "),a("p",[e._v("At the bottom of the diagram we see our VideoListItem components that are waiting for a user to\n                        click on them at which point we need to communicate the click event over to the VideoDetail\n                        component.\n                    ")]),e._v(" "),a("p",[e._v("Remember that anytime we want to communicate from a child component up to a parent component we\n                        do so by emitting an event.\n                    ")]),e._v(" "),a("p",[e._v("It's worth pointing out that we are talking about two slightly different types of events. We're\n                        talking about a click event - which is a native event that a user triggers by clicking an\n                        element in our browser. We are also talking about a Vue specific event that we are going to\n                        programmatically emit from within our VideoListItem component.\n                    ")]),e._v(" "),a("p",[e._v("So here's the strategy we're going to use to communicate this click over to the app and then down\n                        to the VideoDetail:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(4)}}),e._v(" "),a("figcaption",[e._v("Fig 03-087")])]),e._v(" "),a("p",[e._v("Inside of our VideoListItem we are going to add some code to say that anytime someone clicks on\n                        it we are going to emit a custom event through Vue. We are then going to make sure that our\n                        VideoList component listens to all of it's child VideoListItem components so anytime the\n                        VideoListItem emits an event the VideoList will emit an event as well. This will bubble up to\n                        the App component. The App component will then somehow determine whether or not it needs to\n                        update the VideoDetail.\n                    ")]),e._v(" "),a("p",[e._v("At this point let's focus on how we're going to communicate this click event from the VideoList\n                        item up to the App.\n                    ")]),e._v(" "),a("p",[e._v("In the VideoListItem component let's add some code to watch for a click event on the "),a("code",{staticClass:"prettyprint"},[e._v("li")]),e._v(" element. So anytime someone clicks on the li element we want\n                        to emit a Vue specific event:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <li class="list-group-item media" @click="onVideoSelect">\n        <img class="mr-3" :src="thumbnailUrl" />\n        <div class="media-body">\n             {{ video.snippet.title }}\n        </div>\n\n    </li>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-088")])]),e._v(" "),a("p",[e._v("Now let's create the "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(" method by adding it to a new\n                        "),a("code",{staticClass:"prettyprint"},[e._v("methods")]),e._v(" object in the component definition:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("export default {\n    name: 'VideoListItem',\n    props: ['video'],\n    computed: {\n        thumbnailUrl() {\n            return this.video.snippet.thumbnails.default.url;\n        }\n    },\n    methods: {\n        onVideoSelect() {\n\n        }\n    }\n\n};")]),e._v(" "),a("figcaption",[e._v("Fig 03-089")])]),e._v(" "),a("p",[e._v("In the next section we will write some code to take the native click event and trigger a Vue\n                        specific event.\n                    ")]),e._v(" "),a("h3",[e._v("Event Handling in the VideoList")]),e._v(" "),a("p",[e._v("In the last section we started adding some code to make sure that anytime someone click on a\n                        VideoListItem it would trigger an event. Let's continue to achieve this by adding some code to\n                        our new method in the VideoListItem component.\n                    ")]),e._v(" "),a("p",[e._v("Remember this event is a Vue specific event - it's not the standard click event. We've already\n                        triggered an event like this in our SearchBar component:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("this.$emit('termChange', event.target.value);")]),e._v(" "),a("figcaption",[e._v("Fig 03-090")])]),e._v(" "),a("p",[e._v("The first argument is the event name we want to emit and the second argument is an optional\n                        argument that, in this case, specifies the search term that was typed.\n                    ")]),e._v(" "),a("p",[e._v("Add the following code inside the onVideoSelect method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n    onVideoSelect() {\n        this.$emit('videoSelect', this.video);\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-091")])]),e._v(" "),a("p",[e._v("Remember "),a("code",{staticClass:"prettyprint"},[e._v("this.video")]),e._v(" is the prop that was passed in from the\n                        parent component.\n                    ")]),e._v(" "),a("p",[e._v("Now that we are emitting this event inside the child we can add some code to our VideoList to\n                        listen for that child event. Anytime that child event occurs the VideoList in turn will emit an\n                        event of it's own that the app can then listen to.\n                    ")]),e._v(" "),a("p",[e._v("In the template for the VideoList component add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v(' <template>\n  <ul class="list-group">\n      <VideoListItem\n        v-for="video in videos"\n        :video="video"\n        :key="video.etag"\n        @videoSelect="onVideoSelect"\n      >\n      </VideoListItem>\n  </ul>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-092")])]),e._v(" "),a("p",[e._v("Remember, to add an event handler we write out "),a("code",{staticClass:"prettyprint"},[e._v("@")]),e._v(" and then the\n                        name of the event that we want to listen for - in the case "),a("code",{staticClass:"prettyprint"},[e._v("videoSelect ")]),e._v(" then after the "),a("code",{staticClass:"prettyprint"},[e._v("=")]),e._v(" assignment operator we specify what we want to do when the\n                        event is triggered. We will again create a new method which we will call "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(". We are using the same name for this method\n                        that we used in the "),a("code",{staticClass:"prettyprint"},[e._v("VideoListItem")]),e._v(" component but remember this\n                        is going to be a completely different function in it's own "),a("code",{staticClass:"prettyprint"},[e._v("methods")]),e._v(" object.\n                    ")]),e._v(" "),a("p",[e._v("Add the following code to the VideoList component:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("methods: {\n  onVideoSelect(video) {\n      this.$emit('videoSelect', video);\n  }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-093")])]),e._v(" "),a("p",[e._v("We use the same event name of videoSelect and pass along the video object. Next we need to\n                        perform the last step which is to add our listener to the App component.\n                    ")]),e._v(" "),a("h3",[e._v("Receiving Events in the App")]),e._v(" "),a("p",[e._v("In the last section we got our VideoList component to emit the event that it was passed by\n                        VideoListItem. Now we need to get the App component to listen for the event from VideoList.\n                    ")]),e._v(" "),a("p",[e._v("In the App component let's start by adding an event handler to the VideoList tag:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="container">\n        <SearchBar @termChange="onTermChange"></SearchBar>\n        <VideoList @videoSelect="onVideoSelect" :videos="videos"></VideoList>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-094")])]),e._v(" "),a("p",[e._v("We use the same onVideoSelect method name which means we need to add this method to the methods\n                        object of the App component:\n                    ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("methods: {\n    onVideoSelect(video) {\n        console.log(video);\n    },\n    onTermChange(searchTerm) {\n        axios.get('https://www.googleapis.com/youtube/v3/search', {\n            params: {\n                key: API_KEY,\n                type: 'video',\n                part: 'snippet',\n                q: searchTerm\n            }\n        }).then(response => {\n            this.videos = response.data.items;\n        });\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-095")])]),e._v(" "),a("p",[e._v("So, just for the moment, we are writing the video object to the console. The "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(" method has access to the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v("\n                        object because in the "),a("code",{staticClass:"prettyprint"},[e._v(" VideoList")]),e._v(" component when we emitted our\n                        "),a("code",{staticClass:"prettyprint"},[e._v("videoSelect")]),e._v(" event we passed along the video object.\n                    ")]),e._v(" "),a("p",[e._v("Back in the browser, refresh, select a video and then check the console. As the video object gets\n                        written to the console you should see an observer object being written out that contains "),a("code",{staticClass:"prettyprint"},[e._v("etag, id, kind and snippet")]),e._v(" properties.\n                    ")]),e._v(" "),a("p",[e._v("This means that we are successfully communicating the video that was selected all the way up to\n                        the top of the hierarchy. So now we can look at creating the VideoDetail component and having\n                        the App communicate that selected video down to the component detail.\n                    ")]),e._v(" "),a("h3",[e._v("Passing Props to the Video Detail")]),e._v(" "),a("p",[e._v("In the last section we were able to confirm that anytime the user clicks on a VideoListItem we\n                        eventually notify the App component about that selection.\n                    ")]),e._v(" "),a("p",[e._v("Now we need to start working on our VideoDetail component. Once the VideoDetail is completed we\n                        can have our App component communicate to the VideoDetail anytime a new Video has been selected.\n                    ")]),e._v(" "),a("p",[e._v("So let's first begin by putting together some boilerplate for the VideoDetail component. Add a\n                        new file to the components directory called VideoDetail.vue with the following code:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[e._v("<template>\n    <div>\n        Video Detail!\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'VideoDetail',\n    }\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-096")])]),e._v(" "),a("p",[e._v("So, at this point, the VideoList component has communicated the selected video up to the App\n                        component. Now the App is going to pass that selected video down into the VideoDetail component.\n                    ")]),e._v(" "),a("p",[e._v("Remember, anytime a parent communicates with a child we do that using the props system which\n                        involves two separate steps. First we setup the parent component to make sure that it uses a\n                        "),a("code",{staticClass:"prettyprint"},[e._v("v-bind")]),e._v(" expression inside of it's template.\n                    ")]),e._v(" "),a("p",[e._v("We also need to get our child component to understand what props it should expect to receive - in\n                        this case the selected video.\n                    ")]),e._v(" "),a("p",[e._v("In VideoDetail add a props object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n        name: 'VideoDetail',\n        props: ['video']\n    }\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-097")])]),e._v(" "),a("p",[e._v("So we will use the "),a("code",{staticClass:"prettyprint"},[e._v("video prop")]),e._v(" to store the selected "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" that the user just clicked on.\n                    ")]),e._v(" "),a("p",[e._v("To verify this is working modify the template to display the name of the selected video:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<script>\n    export default {\n        name: 'VideoDetail',\n        props: ['video']\n    }\n</script>")]),e._v(" "),a("figcaption",[e._v("Fig 03-098")])]),e._v(" "),a("p",[e._v("So now in the App component we can import the VideoDetail component and make sure that the app\n                        communicates the selected video down to the VideoDetail:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("import VideoDetail from './components/VideoDetail.vue';")]),e._v(" "),a("figcaption",[e._v("Fig 03-099")])]),e._v(" "),a("p",[e._v("Next add the newly imported VideoDetail to the components object of the App component:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("components: {\n    SearchBar,\n    VideoList,\n    VideoDetail\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-100")])]),e._v(" "),a("p",[e._v("Finally, I'm going to make sure that I add the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v("\n                        component itself to the template of the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<template>\n    <div class="container">\n        <SearchBar @termChange="onTermChange"></SearchBar>\n        <VideoDetail :video="" />\n        <VideoList @videoSelect="onVideoSelect" :videos="videos"></VideoList>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-101")])]),e._v(" "),a("p",[e._v("We add a (shorthand) v-bind expression to pass down the selected video.")]),e._v(" "),a("p",[e._v("In the next section we will make sure that anytime the onVideoSelect function get's clicked we\n                        take it's video and we communicate it over to the video prop.\n                    ")]),e._v(" "),a("h3",[e._v("Updating Data")]),e._v(" "),a("p",[e._v("In the last section we said that the App component needed to somehow communicate the selected\n                        video from the "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(" method to our "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component up inside the template.\n                    ")]),e._v(" "),a("p",[e._v("Let's take a look at a quick diagram that is going to help us understand exactly how that process\n                        is going to work:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(149)}}),e._v(" "),a("figcaption",[e._v("Fig 03-102")])]),e._v(" "),a("p",[e._v("So here we can see the entire video selection process in diagram format. So you can see the chain\n                        of listening for and emitting events all the way up to the App.\n                    ")]),e._v(" "),a("p",[e._v("At present, inside the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component, whenever that event\n                        finally comes up and triggers our "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(" function we are\n                        currently only logging details about the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" object out to\n                        the console.\n                    ")]),e._v(" "),a("p",[e._v("We need to add a new property to the "),a("code",{staticClass:"prettyprint"},[e._v("data")]),e._v(" object in the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component to get the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v("\n                        object communicated over to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" object. We will\n                        call the new property "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v(" and it will reflect the\n                        current video that the user has selected.\n                    ")]),e._v(" "),a("p",[e._v("So inside of the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" components handler for listening for\n                        that click event of "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(" we will place some code to\n                        update the "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v(" prop.\n                    ")]),e._v(" "),a("p",[e._v("Anytime that data property is updated it will cause our component to re-render and we'll use that\n                        re-render as an opportunity to communicate this newly selected video down to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component as a prop.\n                    ")]),e._v(" "),a("p",[e._v("So that's the idea, we're going to make use of the data system of the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component to communicate the newly clicked video over\n                        to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component.\n                    ")]),e._v(" "),a("p",[e._v("Add the "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v(" prop to the "),a("code",{staticClass:"prettyprint"},[e._v("\n                        data")]),e._v(" object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("data() {\n    return { videos: [], selectedVideo: null };\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-103")])]),e._v(" "),a("p",[e._v("The default value of "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v(" is "),a("code",{staticClass:"prettyprint"},[e._v("null")]),e._v(" because when our application first starts there will be\n                        no video selected.\n                    ")]),e._v(" "),a("p",[e._v("Inside of "),a("code",{staticClass:"prettyprint"},[e._v("onVideoSelect")]),e._v(" we will add some code to update this\n                        property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("onVideoSelect(video) {\n    this.selectedVideo = video;\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-104")])]),e._v(" "),a("p",[e._v("Recall, that anytime we update a data property it causes our component to instantly re-render\n                        with that new piece of data.")]),e._v(" "),a("p",[e._v("Now inside the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" of the "),a("code",{staticClass:"prettyprint"},[e._v("App\n                    ")]),e._v(" component we can modify the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" tag:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<VideoDetail :video="selectedVideo" />')]),e._v(" "),a("figcaption",[e._v("Fig 03-105")])]),e._v(" "),a("p",[e._v("This will assign the "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v(" to the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" prop.")]),e._v(" "),a("p",[e._v("Again remember that, inside of a template, to reference a data property we do not have to\n                        append the data property name with "),a("code",{staticClass:"prettyprint"},[e._v("this.")]),e._v(" or anything  of\n                        that nature - we just put the data properties name, in our case "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")])]),e._v(" "),a("p",[e._v("Go to the browser, refresh the application, select a video and you should see it's title\n                        appear above the VideoList component:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(150)}}),e._v(" "),a("figcaption",[e._v("Fig 03-106")])]),e._v(" "),a("p",[e._v("You will notice an error message: "),a("code",{staticClass:"prettyprint"},[e._v("Cannot read property 'snippet' of\n                        null")])]),e._v(" "),a("p",[e._v("being emitted by our "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component.")]),e._v(" "),a("p",[e._v("In the next section we'll figure out why we are seeing this error message and add a fix.")]),e._v(" "),a("h3",[e._v("The v-if Directive")]),e._v(" "),a("p",[e._v("In the last section we added some code to the VideoDetail component to show the title of the\n                        selected video. However we are getting an error message: "),a("code",{staticClass:"prettyprint"},[e._v("Cannot\n                            read property 'snippet' of null")])]),e._v(" "),a("p",[e._v("When our application first renders our "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component has a\n                        data property for "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v("  which is set to null:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("        data() {\n    return { videos: [], selectedVideo: null };\n},")]),e._v(" "),a("figcaption",[e._v("Fig 03-106")])]),e._v(" "),a("p",[e._v("We take the "),a("code",{staticClass:"prettyprint"},[e._v("selectedVideo")]),e._v(" property and we pass it down to the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<VideoDetail :video="selectedVideo" />')]),e._v(" "),a("figcaption",[e._v("Fig 03-107")])]),e._v(" "),a("p",[e._v("Inside "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" our template tries to read the "),a("code",{staticClass:"prettyprint"},[e._v("snippet ")]),e._v("property of the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v("\n                        prop:")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v("<template>\n    <div>\n        {{ video.snippet.title }}\n    </div>\n</template>")]),e._v(" "),a("figcaption",[e._v("Fig 03-108")])]),e._v(" "),a("p",[e._v("At this point it is null which is why we are seeing the error message above.")]),e._v(" "),a("p",[e._v("Add some code to make sure that if the "),a("code",{staticClass:"prettyprint"},[e._v("video")]),e._v(" prop is null we\n                    do not attempt to read the "),a("code",{staticClass:"prettyprint"},[e._v("snippet")]),e._v(" property on it: ")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <div v-if="video">\n        {{ video.snippet.title }}\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-109")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" directive can be thought of as a conditional\n                        rendering statement which will look at the value of the variable or the term we pass in and\n                        evaluate it. If it finds a falsy value, which null is (null is very similar to the false\n                        Boolean value in Javascript) then Vue will not render the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v("\n                        or anything inside it.\n                    ")]),e._v(" "),a("p",[e._v("Because Vue doesn't render the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" it also skips the line of\n                        code contained within - and therefore the error is not thrown.")]),e._v(" "),a("p",[e._v("You'll most frequently see "),a("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" around anytime you're loading\n                        up some data from some remote API because it always takes some amount of time to retrieve\n                        that data. So with "),a("code",{staticClass:"prettyprint"},[e._v("v-if")]),e._v(" we can very easily tell our\n                        application to wait until data is available and only then try and render the relevant content.\n                    ")]),e._v(" "),a("p",[e._v("In the next section we will figure out we are going to get this "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component, that\n                        will eventually show a video player, to display on the screen.")]),e._v(" "),a("h3",[e._v("Referencing Video Title and Description")]),e._v(" "),a("p",[e._v("You've now communicated the selected video to the VideoDetail component. We're now ready to\n                        get the video player to appear on the screen along with a short title and description for \n                        that particular video that the user has clicked on.")]),e._v(" "),a("p",[e._v("We will start with the video title and description. Add the following code to the "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" of the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v("\n                        component.")]),e._v(" "),a("figure",[a("pre",{pre:!0,attrs:{class:"prettyprint"}},[e._v('<template>\n    <div v-if="video">\n        <div class="details">\n            <h4>{{ video.snippet.title }}</h4>\n            <p>{{ video.snippet.description }}</p>\n        </div>\n    </div>\n</template>')]),e._v(" "),a("figcaption",[e._v("Fig 03-110")])]),e._v(" "),a("p",[e._v("The original mock-up shows a box around the title and description. Add the following styling\n                        to achieve this effect:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<style scoped>\n    .details {\n        margin-top: 10px;\n        padding: 10px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n    }\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 03-111")])]),e._v(" "),a("p",[e._v("This should achieve the effect from the mockup:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(151)}}),e._v(" "),a("figcaption",[e._v("Fig 03-112")])]),e._v(" "),a("p",[e._v("In the next section we will look at implementing the actual video player")]),e._v(" "),a("h3",[e._v("Crafting the Embed URL")]),e._v(" "),a("p",[e._v("We've got a lot of information about the video now visible on the screen but we need to make\n                        sure the actual video player displays as well. ")]),e._v(" "),a("p",[e._v("If you visit "),a("a",{attrs:{href:"www.youtube.com"}},[e._v("youtube")]),e._v(" and click on the share button you should\n                        see an embed option:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(152)}}),e._v(" "),a("figcaption",[e._v("Fig 03-113")])]),e._v(" "),a("p",[e._v("YouTube provides some "),a("code",{staticClass:"prettyprint"},[e._v("html")]),e._v(" which includes an "),a("code",{staticClass:"prettyprint"},[e._v("iframe")]),e._v(" with a "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("https://www.youtube.com/embed/")]),e._v(" followed by the unique  video id: \n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(153)}}),e._v(" "),a("figcaption",[e._v("Fig 03-114")])]),e._v(" "),a("p",[e._v("When you embed a YouTube video you can add it directly to another web application. Add the\n                        following code above the "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with a class of "),a("code",{staticClass:"prettyprint"},[e._v("details")]),e._v(":")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div>\n    <iframe :src="videoUrl"/>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 03-115")])]),e._v(" "),a("p",[e._v("The "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" property is a dynamic value provided by the "),a("code",{staticClass:"prettyprint"},[e._v("videoUrl")]),e._v(" \n                        computed function:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("computed: {\n    videoUrl() {\n        const { videoId } = this.video.id;\n        return `https://www.youtube.com/embed/${videoId}`;\n    }\n}")]),e._v(" "),a("figcaption",[e._v("Fig 03-115")])]),e._v(" "),a("p",[e._v("Because the "),a("code",{staticClass:"prettyprint"},[e._v("videoId")]),e._v(" "),a("code",{staticClass:"prettyprint"},[e._v("const")]),e._v("\n                        that we used and the prop name of "),a("code",{staticClass:"prettyprint"},[e._v("this.video.id.videoId")]),e._v(" are\n                        identical we use ES2015 destructuring assignment syntax and surround our "),a("code",{staticClass:"prettyprint"},[e._v("const")]),e._v(" with curly braces.")]),e._v(" "),a("p",[e._v("We also use template string syntax (with a pair of back ticks) over string concatenation in the\n                        return statement.")]),e._v(" "),a("p",[e._v("So save the file, refresh the browser and you will see the following:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(154)}}),e._v(" "),a("figcaption",[e._v("Fig 03-116")])]),e._v(" "),a("p",[e._v("So a box appears but there doesn't look like there is any content inside of it. If I go over\n                        to the console you might notice a couple of warnings and even errors over here such as "),a("code",{staticClass:"prettyprint"},[e._v("Error\n                        parsing header")]),e._v(" or "),a("code",{staticClass:"prettyprint"},[e._v("ERR_BLOCKED_BY_CLIENT")])]),e._v(" "),a("p",[e._v("These errors are thrown by the YouTube "),a("code",{staticClass:"prettyprint"},[e._v("iframe")]),e._v(" - we don't have any control over them.")]),e._v(" "),a("p",[e._v("In the next section we will add some styling to the video player.")]),e._v(" "),a("h3",[e._v("Responsive Embeds")]),e._v(" "),a("p",[e._v("We've now got our YouTube embed visible on the screen but it's a little bit small. We will\n                        use the Bootstrap "),a("a",{attrs:{href:"http://getbootstrap.com/docs/4.0/utilities/embed/"}},[e._v("Embeds")]),e._v("\n                        class which will cause the "),a("code",{staticClass:"prettyprint"},[e._v("iframe")]),e._v(" to expand to more suitably\n                        fit the space available to it. The documentation provides an example:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div class="embed-responsive embed-responsive-16by9">\n  <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/zpOULjyy-n8?rel=0" allowfullscreen></iframe>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 03-117")])]),e._v(" "),a("p",[e._v("We have to place a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" round our "),a("code",{staticClass:"prettyprint"},[e._v("\n                        iframe")]),e._v(" with a couple of different classes applied to it. We also add one class on the\n                    "),a("code",{staticClass:"prettyprint"},[e._v("iframe")]),e._v(" as well.")]),e._v(" "),a("p",[e._v("Let's add this to the VideoDetail component:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div class="embed-responsive embed-responsive-16by9">\n    <iframe class="embed-responsive-item" :src="videoUrl"/>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 03-118")])]),e._v(" "),a("p",[e._v("Back in the browser you should see the VideoDetail now displays a larger video window which\n                        will adjust as we resize the browser window.")]),e._v(" "),a("p",[e._v("In our mockup we showed the VideoDetail next to the VideoList. We will take care of this\n                        detail in the next section.")]),e._v(" "),a("h3",[e._v("Two Column Layout")]),e._v(" "),a("p",[e._v("Our video "),a("code",{staticClass:"prettyprint"},[e._v("iframe")]),e._v(" is now plainly visible on the screen but\n                        it's still stacked on top of our "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(".")]),e._v(" "),a("p",[e._v("So the last thing we have to do is to make sure that the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail\n                    ")]),e._v(" component is displayed to the right of the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("To accomplish this we will apply some layout CSS provided by Bootstrap. In the App.vue file\n                        add a div that wraps both the VideoDetail and VideoList tags:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div class="row">\n    <VideoDetail :video="selectedVideo" />\n    <VideoList @videoSelect="onVideoSelect" :videos="videos"></VideoList>\n</div>')]),e._v(" "),a("figcaption",[e._v("Fig 03-119")])]),e._v(" "),a("p",[e._v("If you viewed this in the browser now you would still see the VideoDetail and the VideoList\n                        being displayed on different lines. That's because currently the VideoDetail is going to try\n                    and take up as much space (width wise) as it possibly can.")]),e._v(" "),a("p",[e._v("We will add a class to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" component to constrain\n                        it's width on the screen:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div v-if="video" class="col-md-8">')]),e._v(" "),a("figcaption",[e._v("Fig 03-120")])]),e._v(" "),a("p",[e._v("This will create a column out of the div element that at most can only occupy eight column\n                        spaces. By default Bootstrap has a 12 column layout - so essentially we have 12 column units\n                        to work with. With 8 allocated to the VideoDetail we now have 4 left to allocate to the\n                        VideoList.\n                    ")]),e._v(" "),a("p",[e._v("In the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v(" component add the following class to the\n                        root "),a("code",{staticClass:"prettyprint"},[e._v("ul")]),e._v(" element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<ul class="list-group col-md-4">')]),e._v(" "),a("figcaption",[e._v("Fig 03-121")])]),e._v(" "),a("p",[e._v("In the browser you should now see the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" appear on\n                        the left-hand side.")]),e._v(" "),a("p",[e._v("In the next section we will discuss some of the highlights of the application we just worked\n                        on.")]),e._v(" "),a("h3",[e._v("App Review")]),e._v(" "),a("p",[e._v("Our application is complete but there are a couple of items we should review that are\n                        important to keep in mind when you work on future Vue applications. ")]),e._v(" "),a("p",[e._v("The first thing is how we communicate information between different components that we create.\n                        Anytime that we want to communicate information between components it's always between parent\n                        and child:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(155)}}),e._v(" "),a("figcaption",[e._v("Fig 03-122")])]),e._v(" "),a("p",[e._v("In our application we had the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(", the "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(" and the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v("\n                        as sibling components - in other words they were all being displayed by the\n                        "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" component.")]),e._v(" "),a("p",[e._v("Communicating information between the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(" and\n                        "),a("code",{staticClass:"prettyprint"},[e._v("SearchBar")]),e._v(" or the "),a("code",{staticClass:"prettyprint"},[e._v("VideoList")]),e._v("\n                        would be communication between siblings. Doing so is not the easiest way to pass around\n                        information inside of a Vue app. ")]),e._v(" "),a("p",[e._v("Instead we choose to communicate directly from, for example, the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v("\n                        up to the parent "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v(" or from the "),a("code",{staticClass:"prettyprint"},[e._v("App")]),e._v("\n                        down to the "),a("code",{staticClass:"prettyprint"},[e._v("VideoDetail")]),e._v(". ")]),e._v(" "),a("p",[e._v("The direction we want to communicate information will dictate the technique used:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(156)}}),e._v(" "),a("figcaption",[e._v("Fig 03-123")])]),e._v(" "),a("p",[e._v("So if you want to go from a parent down to a child we refer to that as passing props (short\n                        for properties). This is a two step process:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(157)}}),e._v(" "),a("figcaption",[e._v("Fig 03-124")])]),e._v(" "),a("p",[e._v("We make sure that the parent components tag  for showing that component has a "),a("code",{staticClass:"prettyprint"},[e._v("v-bind")]),e._v(" directive. This makes sure that the parent component\n                        is going to send some information down to the child. Likewise the child also has to be told\n                        about the props that it should expect to receive from the parent.")]),e._v(" "),a("p",[e._v("On the other hand, communication from a child component up to a parent is done with a\n                        completely different system - events. So a child component like our SearchBar or our\n                        VideoListItem has the ability to emit events and then the parent component can listen for\n                        those events.")]),e._v(" "),a("p",[e._v("We only use events to communicate from a child up to a parent and we do not try to modify any\n                        props passed by the parent component.")]),e._v(" "),a("p",[e._v("So the real theme of this application was figuring out how we communicate between components.\n                    I think we did a reasonable job of getting a better handle on that.")]),e._v(" "),a("h3",[e._v("Coding Exercise 3 Events and Methods")]),e._v(" "),a("h3",[e._v("Coding Exercise 4 Component Data")]),e._v(" "),a("h3",[e._v("Coding Exercise 5 Events, Data, and Directives")])])])])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Data Input Validation")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Hi, this is Brian Noyes. In this last module, we're going to look into the validation mechanisms of\n                        data bindings and how you can use it to provide validation indications to a user when they put in\n                        bad data.\n                    ")]),e._v(" "),a("p",[e._v("First we're going to talk about the simplest mechanism to use, which is to throw an exception when\n                        you get bad data and to turn on a flag on the binding to have it give validation indications based\n                        on that.\n                    ")]),e._v(" "),a("p",[e._v("After that, we'll look at a built-in mechanism in WPF called ValidationRules. ValidationRules are\n                        objects that you implement that encapsulate a rule and get evaluated by a binding when you hook it\n                        up to it.\n                    ")]),e._v(" "),a("p",[e._v("If that rule returns an error, then you'll get an error indication on the screen. Next, we'll look at\n                        an interface that's been around since .NET 1.0 called IDataErrorInfo, which is a standard mechanism\n                        for indicating validation errors in combination with data binding. When you use IDataErrorInfo, the\n                        object that you're binding to implements this interface and it will be queried for errors after the\n                        properties are set.\n                    ")]),e._v(" "),a("p",[e._v("Next, we'll look at INotifyDataErrorInfo, which was added in .NET 4.5 and supports asynchronous\n                        validation. It's very similar to IDataErrorInfo, which is a synchronous API, but it supports the\n                        notion that you may need to make an asynchronous call to something like a service to determine\n                        whether an input value is valid or not, and then once you get the results back, then you want to\n                        provide the invalid indication.\n                    ")]),e._v(" "),a("p",[e._v("Next, we'll talk briefly about some binding events that are available that can be handy in dealing\n                        with validation and other scenarios as well. We'll talk about how you can customize the validation\n                        indications that the built-in controls use for presenting validation errors and how you can provide\n                        things like ToolTips with the error strings in them.\n                    ")]),e._v(" "),a("p",[e._v("And then we'll finish off this module by talking about DataAnnotations, which are a standard\n                        mechanism in .NET for indicating the validation rules associated with the property through\n                        attributes.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Validating on Exceptions")]),e._v(" "),a("p",[e._v("One of the simplest ways to do validation with bindings is to use exceptions. Normally when you hook\n                        up a binding to a property, if that property get or set block throws an exception, the binding is\n                        just going to swallow it.\n                    ")]),e._v(" "),a("p",[e._v("It catches the exception. If you watch your output window, you'll see it as a first chance exception,\n                        meaning it was handled, and it's handled inside of the binding itself. But if you're explicitly\n                        throwing exceptions to indicate that a value that's being set is invalid, you want to use that for\n                        validation purposes.\n                    ")]),e._v(" "),a("p",[e._v("All you do to do this is set a property on the binding that says ValidatesOnExceptions=True. Once you\n                        do that, the binding catch block that catches the exception, will take the error message of the\n                        exception and use that as a validation error.\n                    ")]),e._v(" "),a("p",[e._v("One of the other advantages of this mechanism, besides its simplicity, is that it allows you to\n                        reject invalid values before you ever store them, in the property itself.\n                    ")]),e._v(" "),a("p",[e._v("So you can basically check your logic for what the validation rule is in the set block, throw the\n                        exception, and don't store the value in the member variable if it's an invalid value. So let's take\n                        a look at a demo of how this works in code.\n                    ")])]),e._v(" "),a("div",{
staticClass:"panel-body"},[a("h3",[e._v("Demo: Validating on Exceptions")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, we're going to get started with validation by showing you the easiest form of\n                        validation to use, and that's using exceptions. The starting point for this demo and the rest of the\n                        demos in this module, is a simple WPF project.\n                    ")]),e._v(" "),a("p",[e._v("It's got an empty MainWindow at this point. The only thing in the MainWindow is a\n                        CollectionViewSource:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n<CollectionViewSource x:Key="customerViewSource"\n        d:DesignSource="{d:DesignInstance {x:Type local:Customer}, CreateList=True}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-190")])]),e._v(" "),a("p",[e._v("that's going to be working with a Customer Type. In the code-behind of the MainWindow, we've got the\n                        Window Loaded event hooked up to go ahead and access that customerViewSource and just put an empty\n                        Customer object into that collection.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void Window_Loaded(object sender, RoutedEventArgs e)\n{\n\n    CollectionViewSource customerViewSource = ((CollectionViewSource)(this.FindResource("customerViewSource")));\n    customerViewSource.Source = new Customer[] { new Customer() };\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-191")])]),e._v(" "),a("p",[e._v("And the Customer object we'll be dealing with in this demo is just a simple form of Customer.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class Customer : INotifyPropertyChanged\n{\n    private string _HomePhone;\n    public string HomePhone\n    {\n        get { return _HomePhone; }\n        set\n        {\n            if (_HomePhone != value)\n            {\n                _HomePhone = value;\n                PropertyChanged(this, new PropertyChangedEventArgs("HomePhone"));\n            }\n        }\n    }')])]),e._v(" "),a("figcaption",[e._v("Fig 07-192")])]),e._v(" "),a("p",[e._v("It's got three properties at this point, it's got a HomePhone, a WorkPhone, and a CellPhone, and you\n                        can see it's just implementing the INotifyPropertyChanged on that Entity Type.\n                    ")]),e._v(" "),a("p",[e._v("So that's our starting point. Let's go ahead and add a couple of fields to our MainWindow to start\n                        doing some validation. So I'm going to drag out the Work Phone and Home Phone fields to generate two\n                        input fields, and we won't worry about layout here.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(520)}}),e._v(" "),a("figcaption",[e._v("Fig 07-193")])]),e._v(" "),a("p",[e._v("Now if you remember from the Data Sources Window demos in a previous module, when we do that\n                        drag/drop, because we already have this CollectionViewSource here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                          d:DesignSource="{d:DesignInstance {x:Type local:Customer}, CreateList=True}" />\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-194")])]),e._v(" "),a("p",[e._v("it didn't generate a new one, it just set the DataContext on the two Grids that it generated, you can\n                        see one grid for one field\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid x:Name="grid1"\n        DataContext="{StaticResource customerViewSource}">\n        HorizontalAlignment="Left"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-195")])]),e._v(" "),a("p",[e._v("one grid for the other field.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid x:Name="grid1" ...>\n    <Grid x:Name="grid2"\nDataContext="{StaticResource customerViewSource}"\nHorizontalAlignment="Left"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-196")])]),e._v(" "),a("p",[e._v("It sets the DataContext on the grid to the customerViewSource, and then on the data input field it\n                        added the binding to the appropriate field.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="homePhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding HomePhone, Mode=TwoWay, NotifyOnValidationError=true,  ValidatesOnExceptions=true, UpdateSourceTrigger=PropertyChanged}"\n    VerticalAlignment="Center"\n    Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-197")])]),e._v(" "),a("p",[e._v("Now as we talked about before, when you do these drag-and-drops it adds some of these other\n                        properties relative to validation. You can see, by default, it's going to turn on\n                        ValidatesOnExceptions=true.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Binding HomePhone, Mode=TwoWay, NotifyOnValidationError=true,  ValidatesOnExceptions=true")])]),e._v(" "),a("figcaption",[e._v("Fig 07-198")])]),e._v(" "),a("p",[e._v("The NotifyOnValidationError we'll get to later in the module. I'll take that off for now, as well as\n                        the Mode=TwoWay, which we covered in the previous module, is not needed on input controls in WPF.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="homePhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding HomePhone, ValidatesOnExceptions=true }"\n    VerticalAlignment="Center"\n    Width="120"\n/>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-199")])]),e._v(" "),a("p",[e._v("So we're going to focus on this Home Phone field for now. In fact, I'm going to take the\n                        ValidatesOnExceptions off for now, so I can first show what the default behavior of bindings is when\n                        there are exceptions.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="homePhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding HomePhone }"\n    VerticalAlignment="Center"\n    Width="120"\n/>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-200")])]),e._v(" "),a("p",[e._v("So let's drop back to the customer here and add a little Helper method to validate a phone\n                        number.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void ValidatePhone(string value)\n{\n    if (string.IsNullOrEmpty(value))\n        return;\n    Regex regex = new Regex(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$");\n    if (regex.Match(value) == Match.Empty)\n        throw new ArgumentException("Invalid phone format");\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-201")])]),e._v(" "),a("p",[e._v("This method's going to take in a value and it's going to use a RegularExpression, which you don't\n                        have to read through the RegularExpression, but it's looking for a standard 3 digits, 3 digits, 4\n                        digits kind of format, like a U.S. phone number.\n                    ")]),e._v(" "),a("p",[e._v("And if it doesn't match, it's going to throw an exception, an argument exception in this case, with\n                        an error string of Invalid phone format.\n                    ")]),e._v(" "),a("p",[e._v("So now all we need to do is go to our HomePhone property, and after we see if the value coming in is\n                        different from the one we currently have, we can invoke our ValidatePhone method, passing in the\n                        value.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string _HomePhone;\npublic string HomePhone\n{\n    get { return _HomePhone; }\n    set\n    {\n        if (_HomePhone != value)\n        {\n            ValidatePhone(value);\n            _HomePhone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("HomePhone"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-202")])]),e._v(" "),a("p",[e._v("So one of the advantages of using exceptions for validation is that you can prevent the value from\n                        ever getting stored in your Entity object if it's not a valid value.\n                    ")]),e._v(" "),a("p",[e._v("So if we run this right now, and I've got the output window up at the bottom, note that as I put in\n                        an invalid phone number, something like abc, and tab out of the field, you can see some first chance\n                        exceptions happening at the bottom.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(521)}}),e._v(" "),a("figcaption",[e._v("Fig 07-203")])]),e._v(" "),a("p",[e._v("That's because, by default, a binding will swallow any exceptions raised when it calls the set and\n                        get block, and it prevents your application from blowing up if it can't evaluate the property that\n                        it's pointed to.\n                    ")]),e._v(" "),a("p",[e._v("But in this case, we want that exception to indicate that there's a validation error. So I'm going to\n                        go back to my binding and put back on ValidatesOnExceptions=True:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding HomePhone, ValidatesOnExceptions=True }"\n    VerticalAlignment="Center"\n    Width="120"\n/>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-204")])]),e._v(" "),a("p",[e._v("Now if we run the same scenario, we go ahead and put in an invalid value and tab out of the field,\n                        now we can see there's a red box around the control.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(522)}}),e._v(" "),a("figcaption",[e._v("Fig 07-205")])]),e._v(" "),a("p",[e._v("So WPF controls, by default, have a built-in error template that simply puts a red box around the\n                        control. Now that's generally not enough information for the user, because they don't know exactly\n                        what's wrong with that error and you probably want to tell them what the error message was\n                        associated with the validation error.\n                    ")]),e._v(" "),a("p",[e._v("We'll get to how you can display those things later in this module, but for now you can see that it\n                        has gone into an invalid state and it will remain in that state until we put a valid value in, such\n                        as this number, and tab out of the field, and the red box goes away.\n                    ")]),e._v(" "),a("p",[e._v("So validating based on exceptions requires nothing more than in the set block of the property that's\n                        going to be set, invoke some logic that goes and decides whether the value is valid and throws an\n                        appropriate exception if not.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Validating with WPF ValidationRules")]),e._v(" "),a("p",[e._v("Another option you have in WPF for defining ValidationRules, getting them evaluated and hooked up to\n                        a binding, is to use the built-in WPF concept of a ValidationRule. These ValidationRules are\n                        specific to WPF, they did not get carried over to Silverlight, or Windows Phone or Windows 8 XAML\n                        technologies.\n                    ")]),e._v(" "),a("p",[e._v("What you do is define a class that inherits from a ValidationRule base class, and then you override a\n                        Validate method that's an abstract method in the base class. That Validate method returns a\n                        ValidationResult object, which includes a flag to indicate success or failure, a Boolean, and an\n                        error message that can be associated with it.\n                    ")]),e._v(" "),a("p",[e._v("Once you have the ValidationRule defined, you go and you hook it up to a ValidationRules collection\n                        that's on a binding. To do this, you have to use an expanded syntax that we'll see in the demo for a\n                        binding, instead of using a normal curly brace markup extension.\n                    ")]),e._v(" "),a("p",[e._v("The good thing about ValidationRules is they can be used to encapsulate reusable rules, which you can\n                        then go plug in to different places in your UI fairly easily. But, of course, the downside is the\n                        portability, and you'll see another downside is that they're not very good for context-specific\n                        rules.\n                    ")]),e._v(" "),a("p",[e._v("For general purpose rules they're okay, but the rule doesn't get passed enough context about where\n                        it's hooked up to really be able to modify its logic based on the context of where it's being used.\n                    ")]),e._v(" "),a("p",[e._v("So let's take a look at a demo of how you define ValidationRules and get them hooked up to your\n                        bindings.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Validating with WPF ValidationRules")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to get you familiar with ValidationRules in WPF, which are objects you can\n                        create to encapsulate a rule and attach to a binding as a different way of setting up your\n                        validation.\n                    ")]),e._v(" "),a("p",[e._v("Starting point for this demo is the end of the last one.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(523)}}),e._v(" "),a("figcaption",[e._v("Fig 07-206")])]),e._v(" "),a("p",[e._v("We have our work and home phone inputs. The Home Phone is still hooked up with an exception\n                        ValidationRule. We're going to hook up a WPF ValidationRule to the Work Phone.\n                    ")]),e._v(" "),a("p",[e._v("To do that, we first have to define the rule. So I'm going to add a class and call this\n                        RegexValidationRule:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class RegexValidationRule : ValidationRule\n{\n    public override ValidationResult Validate(object value, CultureInfo cultureInfo)\n    {\n        Regex m_RegEx = new Regex(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$"));\n        Match match = m_RegEx.Match(value.ToString());\n        if (match == null || match == Match.Empty)\n            return new ValidationResult(false, "Invalid input format");\n        else\n            return ValidationResult.ValidResult;\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-207")])]),e._v(" "),a("p",[e._v("And basically what you do here is you derive from the ValidationRule base class of WPF.")]),e._v(" "),a("p",[e._v("That has an abstract method called Validate that you must override, and you're expected to return a\n                        ValidationResult that indicates success or failure, and if it's failure it includes an error string.\n                    ")]),e._v(" "),a("p",[e._v("The Validate method is going to be passed in a value, the value that's being set on some binding that\n                        this ValidationRules is going to get attached to, and basically, inside of your Validate method you\n                        have to come up with an answer of whether the value is valid or not, so there's some implied context\n                        here.\n                    ")]),e._v(" "),a("p",[e._v("In this case, we're writing a reusable ValidationRule based on RegularExpressions. Now as a starting\n                        point here I've got the RegularExpression hard-coded into this rule. So really this should be a\n                        PhoneValidationRule not a RegexValidationRule because we can't easily modify that.We'll fix that in\n                        a bit.\n                    ")]),e._v(" "),a("p",[e._v("But you can see I'm just setting up a Regex, evaluating it with a Match call, and if it doesn't match\n                        that RegularExpression, we return a validationResult with a false indication, so it's not valid, and\n                        an error string associated with that. If it does match, then we just return\n                        ValidationResult.ValidResult.\n                    ")]),e._v(" "),a("p",[e._v("Now let's go back over to our MainWindow to our Work Phone TextBox.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(524)}}),e._v(" "),a("figcaption",[e._v("Fig 07-208")])]),e._v(" "),a("p",[e._v("So here's the WorkPhone Binding that was put in there through drag-and-drop:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="workPhoneTextBox"\n        Grid.Column="1"\n        HorizontalAlignment="Left"\n        Height="23"\n        Margin="3"\n        Grid.Row="0"\n        Text="{Binding WorkPhone}"\n        VerticalAlignment="Center"\n        Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-209")])]),e._v(" "),a("p",[e._v("I'm going to remove the rest of the properties on the binding. Now the first thing to realize is that\n                        there's a different way to set a binding other than the curly brace notation of markup extensions.\n                        Anything that can be set as a markup extension like this, can also be set as a nested element in\n                        XAML.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="workPhoneTextBox"\n        Grid.Column="1"\n        HorizontalAlignment="Left"\n        Height="23"\n        Margin="3"\n        Grid.Row="0"\n        VerticalAlignment="Center"\n        Width="120" />\n    <TextBox.Text>\n        <Binding Path="WorkPhone" />\n    </TextBox.Text>\n')])]),e._v(" "),a("figcaption",[e._v("Fig 07-210")])]),e._v(" "),a("p",[e._v("So I can take out the Text property here and add it in like this, where I'm setting the text property\n                        as a nested element on my TextBox and the value of that property is inside of the angle brackets, in\n                        this case an instance of a binding with its path set to WorkPhone.\n                    ")]),e._v(" "),a("p",[e._v("So that's just the equivalent syntax there for setting up the binding. Now the reason for this is\n                        when you use ValidationRules you have to set a property on the binding that cannot be done inline as\n                        a markup extension.\n                    ")]),e._v(" "),a("p",[e._v("So then we can expand the binding to allow child elements and add in ValidationRules:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox.Text>\n    <Binding Path="WorkPhone">\n        <Binding.ValidationRules>\n            <local:RegexValidationRule  />\n        </Binding.ValidationRules>\n    </Binding>\n</TextBox.Text>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-211")])]),e._v(" "),a("p",[e._v("So there's a ValidationRules collection on a binding. Inside of that you can add instances of\n                        ValidationRules, so we add an instance of our RegexValidationRule inside that collection. And now,\n                        anytime that binding goes to set the WorkPhone path, it's going to evaluate that ValidationRule and\n                        pass in the value that it was going to use.\n                    ")]),e._v(" "),a("p",[e._v("So with that in place, we could go ahead and run, and we can put the WorkPhone into an invalid state,\n                        and tab out of the field, and we can see it goes red:\n                    ")]),e._v("\n                    CFig\n                    "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(525)}}),e._v(" "),a("figcaption",[e._v("Fig 07-212")])]),e._v(" "),a("p",[e._v("Get it back into a valid state, tab out, and the red box goes away.")]),e._v(" "),a("p",[e._v("Now another thing to point out here while I'm at this point is the UpdateSourceTrigger property of a\n                        binding. So this is the same UpdateSourceTrigger that we've seen inside the curly brace notation:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox.Text>\n    <Binding Path="WorkPhone" UpdateSourceTrigger="PropertyChanged">\n        <Binding.ValidationRules>\n            <local:RegexValidationRule  />\n        </Binding.ValidationRules>\n    </Binding>\n</TextBox.Text>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-213")])]),e._v(" "),a("p",[e._v("If we set it to PropertyChanged instead of the default of LostFocus, then we get more immediate\n                        feedback to the user of validation errors. So as soon as I go into an invalid state, the red box\n                        appears, and as soon as I'm back in a valid state the red box goes away. So UpdateSourceTrigger, if\n                        you want immediate feedback to the user as they're typing, of whether their current input is valid\n                        or not, can be a good combination when doing validation.\n                    ")]),e._v(" "),a("p",[e._v("In general, one of the problems with ValidationRules is the fact that there's very little context\n                        available inside of the Rule itself about what you're evaluating and where it's coming from. All you\n                        get is a value here.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public override ValidationResult Validate(object value, CultureInfo cultureInfo)")])]),e._v(" "),a("figcaption",[e._v("Fig 07-214")])]),e._v(" "),a("p",[e._v("You can think of this as, if a stranger walks up to you on the street, says 42, are you okay with\n                        that. You have no context for why they're asking, where the 42 comes from, what it relates to, all\n                        you have is a value and you're supposed to come up with an answer of is that valid or not, and if\n                        not, an error string of why not. So you really need to be able to pass some more context down into\n                        your ValidationRules to make them more meaningful.\n                    ")]),e._v(" "),a("p",[e._v("So one thing you can do is define properties on your ValidationRules.")]),e._v(" "),a("p",[e._v("I'm going to expand my implementation here and add down at the bottom here an Expression\n                        property.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public class RegexValidationRule : ValidationRule\n{\n    public override ValidationResult Validate(object value, CultureInfo cultureInfo)\n    {\n        if (Expression == null)\n            return ValidationResult.ValidResult;\n\n        Regex m_RegEx = new Regex(Expression);\n        Match match = m_RegEx.Match(value.ToString());\n        if (match == null || match == Match.Empty)\n            return new ValidationResult(false, "Invalid input format");\n        else\n            return ValidationResult.ValidResult;\n    }')])]),e._v(" "),a("figcaption",[e._v("Fig 07-215")])]),e._v(" "),a("p",[e._v("Now I can pass in the RegularExpression, making this rule really more reusable.")]),e._v(" "),a("p",[e._v("So we got rid of the hard-coded RegularExpression, and now we use the Expression property to\n                        formulate our Regex and evaluate it. Now we can go back out to our XAML and set it when we go to use\n                        our RegularExpression rule.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox.Text>\n    <Binding Path="WorkPhone" UpdateSourceTrigger="PropertyChanged">\n        <Binding.ValidationRules>\n            <local:RegexValidationRule  />\n        </Binding.ValidationRules>\n    </Binding>\n</TextBox.Text>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-216")])]),e._v(" "),a("p",[e._v("So now we set the Expression based on the fact that here we have some context that we're trying to\n                        evaluate a phone, and so we come up with a RegularExpression that's appropriate for that phone.\n                    ")]),e._v(" "),a("p",[e._v("Obviously, if you're going to put any complex, domain-specific logic into one of these\n                        ValidationRules, you're going to have to give it an appropriate name that indicates the nature of\n                        the rule that's encapsulated in here and what kind of value it's expected to be passed in.\n                    ")]),e._v(" "),a("p",[e._v("Whatever properties you choose to expose on your ValidationRules, they will have to be set with a\n                        value that's static in the XAML.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Binding.ValidationRules>\n    <local:RegexValidationRule Expression="^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$" />\n</Binding.ValidationRules>\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 07-217")])]),e._v(" "),a("p",[e._v("Because the base class of ValidationRules is not a DependencyObject, you can't have\n                        DependencyProperties on it, so you can't dynamically set these properties through a binding because\n                        a binding can only target a DependencyProperty, so whatever properties you expose will only be able\n                        to be passed static values from the XAML.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Validating with IDataErrorInfo")]),e._v(" "),a("p",[e._v("One of the most common ways to implement validation in data binding in WPF and other technologies is\n                        IDataErrorInfo, partly because this has been around for a long time, since .NET 1.0. It was\n                        supported in Windows Forms and WPF and carries forward to other XAML technologies as well.\n                    ")]),e._v(" "),a("p",[e._v("Basically, IDataErrorInfo is an interface that defines an API, so that the binding can query for\n                        errors on the object that it's bound to. It's got two properties on it. First is an Error property,\n                        and that's a string property that's meant to be an error for the object as a whole. That one's not\n                        used a whole lot. It can be used in a DataGrid scenario to provide a row level indication, but when\n                        you have individual input fields, it's not really used at all.\n                    ")]),e._v(" "),a("p",[e._v("The main one that's focused on is the Indexer. So this is a C# Indexer, or an ItemProperty in Visual\n                        Basic, that is passed an argument that is the property name and is then expected to return a string\n                        error if there is a validation error for that property.\n                    ")]),e._v(" "),a("p",[e._v("So, as I said, it's been around for a long time, it was actually implemented in DataSet row objects\n                        in .NET 1.0 and carrying forward, and it's very flexible and easy to use.\n                    ")]),e._v(" "),a("p",[e._v("One potential downside to it, depending on your perspective, is that you do have to allow the\n                        property to first be set.\n                    ")]),e._v(" "),a("p",[e._v("So the order of operations here is that the binding is going to go set a property because some input\n                        has been put into a field in the UI. It has to first set that property and then it will come back\n                        and query the IDataErrorInfo interface to basically say, are you happy with that value.\n                    ")]),e._v(" "),a("p",[e._v("So you have to have stored that value in the member variable, so that that subsequent call through\n                        IDataErrorInfo can look at the value that was set and decide whether it's an appropriate value. Once\n                        you have IDataErrorInfo implemented on your data object that you're going to bind to, you have to\n                        turn it on, on the binding.\n                    ")]),e._v(" "),a("p",[e._v("So there's a property on the binding that ValidatesOnDataErrors that you set to true, and that causes\n                        the binding to go do that process I talked about where it queries the IDataErrorInfo to see if\n                        there's an error associated with the property after it sets it.\n                    ")]),e._v(" "),a("p",[e._v("So let's take a look at a demo of how we implement this on an object and get it hooked up and using\n                        it in a binding.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Validating with IDataErrorInfo")]),e._v(" "),a("div",{
staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to show you how to implement the IDataErrorInfo interface and use that to\n                        derive your validation.\n                    ")]),e._v(" "),a("p",[e._v("Starting point here is the ending point of the last demo.")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(526)}}),e._v(" "),a("figcaption",[e._v("Fig 07-218")])]),e._v(" "),a("p",[e._v("So we're going to first go and drag the CellPhone property out to generate a new field that we can do\n                        data binding with:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(527)}}),e._v(" "),a("figcaption",[e._v("Fig 07-219")])]),e._v(" "),a("p",[e._v("I'm going to drop into the XAML for that and modify the binding that was generated to get rid of\n                        these extra properties, and just put one additional property, which is ValidatesOnDataErrors=true.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="cellPhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding CellPhone, ValidatesOnDataErrors=true}"\n    VerticalAlignment="Center"\n    Width="120" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-220")])]),e._v(" "),a("p",[e._v("We saw ValidatesOnExceptions earlier, this is an alternative to that, using IDataErrorInfo to derive\n                        your validation instead of exceptions. You can certainly do both. In fact, there are times for a\n                        numeric input for example, bound to an integer field, that if you put in something like abc, it\n                        won't be able to convert it to even set the property.\n                    ")]),e._v(" "),a("p",[e._v("So validatesOnDataErrors won't have a chance to take effect, but validatesOnExceptions would show\n                        that there was a format exception thrown trying to set that property. In this case, we're dealing\n                        with a string property, so it's not applicable.\n                    ")]),e._v(" "),a("p",[e._v("Now we need to go implement IDataErrorInfo on our model object that we're binding to.")]),e._v(" "),a("p",[e._v("So I'll drop into my Customer and add the IDataErrorInfo interface and implement it using Visual\n                        Studio.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ValidationDemo\n{\n    public class Customer : INotifyPropertyChanged, IDataErrorInfo")])]),e._v(" "),a("figcaption",[e._v("Fig 07-221")])]),e._v(" "),a("p",[e._v("Down at the bottom of my class it added two members")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public string Error\n{\n    get { throw new NotImplementedException(); }\n}\n\npublic string this[string columnName]\n{\n    get { throw new NotImplementedException(); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-222")])]),e._v(" "),a("p",[e._v("A string called Error, and an Indexer that says columnName here, but you can think of this, really,\n                        as propertyName. The reason it generates it as columnName is this dates back to .NET 1.0 and the\n                        main thing that implemented this interface was DataSets, so columnName was there to represent a\n                        column in a DataTable within a DataSet, but on an Entity it's really the propertyName that's going\n                        to be passed into the Indexer and it returns a string.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public string this[string propertyName]\n{\n    get { throw new NotImplementedException(); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-223")])]),e._v(" "),a("p",[e._v("So the idea here is that the Error property is meant to represent an error for the object as a whole.\n                        For that, I'm just going to return string.Empty.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public string Error\n{\n    get { return string.Empty; }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-224")])]),e._v(" "),a("p",[e._v("The Indexer is what we're going to focus our effort on, and the idea is that this will be invoked by\n                        the binding when you say NofityOnDataErrors=true, the binding will call this Indexer for the\n                        property that its bound to whenever it goes and sets that property. So first it will set the\n                        property, then it will invoke the Indexer, telling you what property has been set. So it's basically\n                        giving you an opportunity here to say, are you happy with the value that was set.\n                    ")]),e._v(" "),a("p",[e._v("You do have to first accept the value into the property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string _CellPhone;\npublic string CellPhone\n{\n    get { return _CellPhone; }\n    set\n    {\n        if (_CellPhone != value)\n        {\n            _CellPhone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("CellPhone"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-225")])]),e._v(" "),a("p",[e._v("so you're going to have to let the set block be called, not throw an exception, write it into your\n                        member variable, so that down here in the Indexer:\n                    ")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"csharp["},[e._v("public string this[string propertyName]\n{\n    get { throw new NotImplementedException(); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-226")])]),e._v(" "),a("p",[e._v("you can then look at that value in the member variable and decide whether you like it or not, and if\n                        not, return an error string.\n                    ")]),e._v(" "),a("p",[e._v("So what I'm going to do here is I'm going to return a method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public string this[string propertyName]\n{\n    get { return GetErrorForProperty(propertyName); }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-227")])]),e._v(" "),a("p",[e._v("because I don't like putting a bunch of logic in a get block of a property. Then I'll go right below\n                        that and implement that method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string GetErrorForProperty(string propertyName)\n{\n    switch (propertyName)\n    {\n        case "CellPhone":\n            Regex regex = new Regex(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$");\n            if (regex.Match(CellPhone) == Match.Empty)\n                return "Invalid phone format";\n            else return string.Empty;\n        default:\n            return string.Empty;\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-228")])]),e._v(" "),a("p",[e._v("And the nature of the method that you're going to have to implement is, unfortunately, generally a\n                        big switch case statement with a case for each property that you have ValidationRules you want to\n                        implement.\n                    ")]),e._v(" "),a("p",[e._v("That's one of the downsides of IDataErrorInfo. But because you're inside of the Entity itself, it\n                        does give you the flexibility to do cross-property validation, for example, if you have some\n                        consistency rule between property A and property B, you can inspect both of those when property A is\n                        set or when property B is set and come up with an error based on that.\n                    ")]),e._v(" "),a("p",[e._v("In our case, we're just going to inspect for the CellPhone property when it's set. We're going to use\n                        that same RegularExpression, see if it's a match, and return invalid phone format as an error string\n                        if it's not a match or just string.Empty if it's good. So basically, if you return null or\n                        string.Empty, it means there's no validation error, but any non-empty string means a validation\n                        error.\n                    ")]),e._v(" "),a("p",[e._v("So by virtue of the fact that our entity that we're binding to now implements this interface:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class Customer : INotifyPropertyChanged, IDataErrorInfo")])]),e._v(" "),a("figcaption",[e._v("Fig 07-229")])]),e._v(" "),a("p",[e._v("and our binding says that we do want to honor that interface, this binding will basically hook up to\n                        that interface and query for errors every time it goes to set the property that it's bound to.\n                    ")]),e._v(" "),a("p",[e._v("So with that, we can go ahead and run, input an invalid value, tab out, and we can see the error\n                        indication there.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(528)}}),e._v(" "),a("figcaption",[e._v("Fig 07-230")])]),e._v(" "),a("p",[e._v("Get it into a valid value, tab out, and the error goes away. And that's really all there is to\n                        IDataErrorInfo.\n                    ")]),e._v(" "),a("p",[e._v("Mostly focused on the Indexer, go decide what property is being set, invoke whatever rules are\n                        appropriate for that property, come up with an error string if there is one, and return it.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Validating with INotifyDataError")]),e._v(" "),a("p",[e._v("Now a new interface that was added in .NET 4.5 that's similar to IDataErrorInfo is\n                        INotifyDataErrorInfo. This was originally defined in Silverlight 4 and was added to .NET 4.5 for\n                        WPF.\n                    ")]),e._v(" "),a("p",[e._v("It's the same basic concept that the binding can go and query for errors after it's gone and set a\n                        property, but it's done with an event-driven interface that allows you to go out asynchronously\n                        after the property has been set, triggers some ValidationRule that may take a long time to execute,\n                        such as calling a service, and whenever the results come back, you can raise an event that will\n                        cause the binding to re-query for errors.\n                    ")]),e._v(" "),a("p",[e._v("So to use this, you set a ValidateOnNotifyDataErrors property on the binding, the binding will call\n                        the GetErrors method of the INotifyDataErrorInfo after it has set a property. It also subscribes to\n                        the ErrorsChanged event on the interface, and so if the ErrorsChanged is fired, it will go and\n                        re-query GetErrors at the point where that event is raised.\n                    ")]),e._v(" "),a("p",[e._v("To implement this, you're going to manage a dictionary of errors under the covers, so you basically\n                        are going to have a set of errors per property that gets returned from the GetErrors method and\n                        GetErrors gets called, passing a property name similar to the Indexer on IDataErrorInfo.\n                    ")]),e._v(" "),a("p",[e._v("So one of the advantages here of INotifyDataErrorInfo over IDataErrorInfo is that you can return\n                        multiple errors per property. The Indexer on IDataErrorInfo only returns a single string, but you\n                        might have multiple rules associated with a single property, each producing its own error, so\n                        INotifyDataErrorInfo is more flexible in that way.\n                    ")]),e._v(" "),a("p",[e._v("So let's dive into a demo that shows an asynchronous evaluation of Rules, which is where using\n                        INotifyDataErrorInfo really shines.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Validating with INotifyDataError")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-007",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-007"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("In this demo, I'm going to get you familiar with INotifyDataErrorInfo, which is an asynchronous\n                        version of IDataErrorInfo. So starting point here is the end of the last demo where we implemented\n                        IDataErrorInfo.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(529)}}),e._v(" "),a("figcaption",[e._v("Fig 07-231")])]),e._v(" "),a("p",[e._v("I'm going to drop into my Customer here and I'm going to implement INotifyDataErrorInfo instead of\n                        IDataErrorInfo:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("namespace ValidationDemo\n{\n    public class Customer : INotifyPropertyChanged, INotifyDataErrorInfo\n    {")])]),e._v(" "),a("figcaption",[e._v("Fig 07-232")])]),e._v(" "),a("p",[e._v("So I changed my interface to INotifyDataErrorInfo, I will use Visual Studio to stub it out, and then\n                        I'll go down to the bottom here and I'm going to comment out the IDataErrorInfo methods since\n                        they're not going to be used anymore, and let's look at the API of INotifyDataErrorInfo.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\npublic System.Collections.IEnumerable GetErrors(string propertyName)\n{\n    throw new NotImplementedException();\n}\n\npublic bool HasErrors\n{\n    throw new NotImplementedException();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-233")])]),e._v(" "),a("p",[e._v("First off, it's got an ErrorsChanged event and I'm going to use the delegate trick here to make it so\n                        I don't have to check for nulls, which was discussed earlier in the course. It's got a GetErrors\n                        method that's going to be queried by the binding when you hook up to it, that's the logical\n                        equivalent of the Indexer on IDataErrorInfo.\n                    ")]),e._v(" "),a("p",[e._v("So it's going to be passed in a property name, but notice this one returns an IEnumerable, so one\n                        difference here is that the Indexer for IDataErrorInfo only allows you to return a single error\n                        string per property. With INotifyDataErrorInfo, they recognize that you could have more than one\n                        rule associated with a given property, so you can return a collection of errors. And then there's a\n                        HasErrors property that's first going to be inspected by the binding before it calls GetErrors.\n                    ")]),e._v(" "),a("p",[e._v("So the basic sequence of events is you have a binding that you indicate that you want to use,\n                        INotifyDataErrorInfo, and you hook it up to an object that implements that, when it goes to set a\n                        property, it's going to check and call the HasErrors property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public bool HasErrors\n{\n    throw new NotImplementedException();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-234")])]),e._v(" "),a("p",[e._v("If that returns true, then it's going to call GetErrors:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public System.Collections.IEnumerable GetErrors(string propertyName)\n{\n    throw new NotImplementedException();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-235")])]),e._v(" "),a("p",[e._v("If at some point after it's called GetErrors, the ErrorsChanged event fires, it will come back in and\n                        call GetErrors again, assuming that there is some asynchronous process that went out and determined\n                        errors, populated the collection of errors behind the scenes that GetErrors is using to return its\n                        values.\n                    ")]),e._v(" "),a("p",[e._v("So, basically, to start fleshing this out, what you need is somewhere to store some errors, and the\n                        shape of that is generally going to be a Dictionary<string, List<string>>:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Dictionary<string, List<string>> _PropertyErrors = new Dictionary<string, List<string>>();")])]),e._v(" "),a("figcaption",[e._v("Fig 07-236")])]),e._v(" "),a("p",[e._v("So you want to have that collection of errors that you return up here for a given property name where\n                        the key is the property name. For the implementation of GetErrors, we can just simply reach into\n                        that PropertyErrors collection:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public System.Collections.IEnumerable GetErrors(string propertyName)\n{\n    lock (_PropertyErrors)\n    {\n        if (_PropertyErrors.ContainsKey(propertyName))\n            return _PropertyErrors[propertyName];\n    }\n    return null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-237")])]),e._v(" "),a("p",[e._v("see if there is a key for the propertyName, and if so, return whatever the value is the list of\n                        strings associated with it.\n                    ")]),e._v(" "),a("p",[e._v("Now I put a lock statement here because we're going to go and do some asynchronous work using a\n                        separate thread, and that separate thread needs to be able to push errors into this PropertyErrors\n                        collection.\n                    ")]),e._v(" "),a("p",[e._v("So if you're going to do that in a multi-threaded way, you want to make sure you protect that\n                        dictionary because it's not thread-safe, or you could use one of the concurrent collections that are\n                        available in the .NET framework. I'm just going to use a basic dictionary here and lock on it.\n                    ")]),e._v(" "),a("p",[e._v("Next, we need to implement this HasErrors method, so I'm going to flesh that out by calling a\n                        method:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public bool HasErrors\n{\n    get { return PropertyErrorsPresent(); }\n}\n\nprivate bool PropertyErrorsPresent()\n{\n    bool errors = false;\n    foreach (var key in _PropertyErrors.Keys)\n    {\n        if (_PropertyErrors[key] != null)\n        {\n            errors = true;\n            break;\n        }\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-238")])]),e._v(" "),a("p",[e._v("again, because I don't like putting complex logic in a get block, personally. And what this method\n                        really does is it just loops through all the keys in the dictionary, checks whether the underlying\n                        value is null, and if there are any non-null entries in the dictionary, then it says that there are\n                        errors present, and It's going to return true to say that there are errors. And then the binding\n                        will come and call GetErrors for the property it's bound to and it will look up the errors and see\n                        if there are any. So that's a simple brute force implementation of INotifyDataErrorInfo, but now we\n                        need to trigger errors to happen somewhere.\n                    ")]),e._v(" "),a("p",[e._v("Now the whole point of this interface is to support asynchronous scenarios, places where you're going\n                        to go and set a property, but you need to go do something like a service call to invoke some logic\n                        on a backend to decide whether the value that was set is valid or not. And something like a service\n                        call takes a long time, and you shouldn't be blocking the UI waiting for it, so you want to go out\n                        and do that asynchronously. Now for demo purposes here, I'm not going to set up a service and call\n                        it, I'm just going to use a task-based method to simulate this.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Task<List<string>> GetErrorsForPhone(string value)\n{\n    // Simulate async call - typically to a web service\n    return Task.Factory.StartNew<List<string>>(() =>\n    {\n        Thread.Sleep(5000);\n        Regex regex = new Regex(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$");\n        if (regex.Match(value) == Match.Empty)\n            return new List<string> { "Invalid phone format" };\n        return null;\n    });\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-239")])]),e._v(" "),a("p",[e._v("So this method is using the Task Parallel Library, it's defining a method called GetErrorsForPhone\n                        where I can pass in a value. And what it's going to return, ultimately, is a list of strings, but it\n                        does it through a task that can be invoked asynchronously.\n                    ")]),e._v(" "),a("p",[e._v("So inside of this method in a real project, would be the point where I would dispatch an asynchronous\n                        service call, but instead what I'm doing for demo purposes is I'm just going to use\n                        Task.Factory.StartNew, which causes it to dispatch whatever's inside of this action delegate\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("return Task.Factory.StartNew<List<string>>(() =>")])]),e._v(" "),a("figcaption",[e._v("Fig 07-240")])]),e._v(" "),a("p",[e._v("on a separate thread.")]),e._v(" "),a("p",[e._v("The first thing I'm going to do is go sleep for 5 seconds, so that you can see when I run this that's\n                        it's truly happening asynchronously. Then I'm going to evaluate the logic that presumably is back\n                        behind the service call or something that's going to take a long time to compute, and ultimately I'm\n                        returning my list of strings, or null if there are no errors.\n                    ")]),e._v(" "),a("p",[e._v("So, basically, I want this:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Task<List<string>> GetErrorsForPhone(string value)\n{\n    // Simulate async call - typically to a web service\n    return Task.Factory.StartNew<List<string>>(() =>\n    {\n        Thread.Sleep(5000);\n        Regex regex = new Regex(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$");\n        if (regex.Match(value) == Match.Empty)\n            return new List<string> { "Invalid phone format" };\n        return null;\n    });\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-241")])]),e._v(" "),a("p",[e._v("to be invoked at a point where I know that a phone value has changed. So, naturally, a good place for\n                    that would be in the set block of our property. So I can go up in here, and after the property has\n                    been set, I can dispatch some asynchronous work.\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string _CellPhone;\npublic string CellPhone\n{\n    get { return _CellPhone; }\n    set\n    {\n        if (_CellPhone != value)\n        {\n            _CellPhone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("CellPhone"));\n            // Trigger async validation check\n            GetErrorsForPhone(CellPhone).ContinueWith((errorsTask) =>\n            {\n                lock (_PropertyErrors)\n                {\n                    _PropertyErrors["CellPhone"] = errorsTask.Result;\n                    ErrorsChanged(this, new DataErrorsChangedEventArgs("CellPhone"));\n                }\n            });\n\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-242")])]),e._v(" "),a("p",[e._v("So I'm going to call that task-based method, which is non-blocking because it's asynchronous, and\n                        when it is complete I use a ContinueWith, this is part of the Task Parallel Library, and say what I\n                        want to do when it's done is basically go push any errors that came back in into that PropertyErrors\n                        collection.\n                    ")]),e._v(" "),a("p",[e._v("But because this is all being done async, this is going to happen on a separate thread, so this is\n                        where I need to also do locking on that dictionary before I try to modify it, so that only one\n                        thread at a time can be messing with it.\n                    ")]),e._v(" "),a("p",[e._v("So I basically just take the result property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('_PropertyErrors["CellPhone"] = errorsTask.Result;')])]),e._v(" "),a("figcaption",[e._v("Fig 07-243")])]),e._v(" "),a("p",[e._v("of the task that come back in from our ContinueWith:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("GetErrorsForPhone(CellPhone).ContinueWith((errorsTask) =>")])]),e._v(" "),a("figcaption",[e._v("Fig 07-244")])]),e._v(" "),a("p",[e._v("that will be the list of strings that came out of my Task, and I can push that into the appropriate\n                        dictionary entry based on the property that I'm setting.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('_PropertyErrors["CellPhone"] = errorsTask.Result;')])]),e._v(" "),a("figcaption",[e._v("Fig 07-245")])]),e._v(" "),a("p",[e._v("Once I know I've modified that collection, I need to raise that ErrorsChanged event:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('ErrorsChanged(this, new DataErrorsChangedEventArgs("CellPhone"));')])]),e._v(" "),a("figcaption",[e._v("Fig 07-246")])]),e._v(" "),a("p",[e._v("associated with the INotifyDataErrorInfo and tell it what property has changed. That's going to\n                        trigger the binding that is tied to that property to go ahead and re-query GetErrors.\n                    ")]),e._v(" "),a("p",[e._v("So with all that in place, I can go ahead and run:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(530)}}),e._v(" "),a("figcaption",[e._v("Fig 07-247")])]),e._v(" "),a("p",[e._v("We can go into the Cell Phone entry here, put in an invalid value, tab out of the field, count to\n                        about 5, and we should see a red box up here.\n                    ")]),e._v(" "),a("p",[e._v("Boom, so that was that 5 second delay with the thread sleep, went out, evaluated the rule, returned\n                        the list of strings, raised the event, and triggered a GetErrors, and the errors have been placed\n                        into the Errors collection in that asynchronous handling.\n                    ")]),e._v(" "),a("p",[e._v("Now you can see if you implement it this way, GetErrors can certainly still execute synchronously.\n                        All it's doing here:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public System.Collections.IEnumerable GetErrors(string propertyName)\n{\n    lock (_PropertyErrors)\n    {\n        if (_PropertyErrors.ContainsKey(propertyName))\n            return _PropertyErrors[propertyName];\n    }\n    return null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-248")])]),e._v(" "),a("p",[e._v("is returning whatever is already in the Errors collection. So if we're able to synchronously invoke a\n                        ValidationRule client-side up here from the set block:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string _CellPhone;\npublic string CellPhone\n{\n    get { return _CellPhone; }\n    set\n    {\n        if (_CellPhone != value)\n        {\n            _CellPhone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("CellPhone"));\n            // Trigger async validation check\n            GetErrorsForPhone(CellPhone).ContinueWith((errorsTask) =>\n            {\n                lock (_PropertyErrors)\n                {\n                    _PropertyErrors["CellPhone"] = errorsTask.Result;\n                    ErrorsChanged(this, new DataErrorsChangedEventArgs("CellPhone"));\n                }\n            });\n\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-249")])]),e._v(" "),a("p",[e._v("of the property and populate the PropertyErrors then, those errors will show up automatically as soon\n                        as GetErrors gets called.\n                    ")]),e._v(" "),a("p",[e._v("Those errors will be returned automatically when this gets called:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" public System.Collections.IEnumerable GetErrors(string propertyName)\n{\n    lock (_PropertyErrors)\n    {\n        if (_PropertyErrors.ContainsKey(propertyName))\n            return _PropertyErrors[propertyName];\n    }\n    return null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-250")])]),e._v(" "),a("p",[e._v("Which happens after the PropertyChanged fires from the set block. Now notice that our demo worked\n                        even though we have ValidatesOnDataErrors=true here.\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="cellPhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding CellPhone, ValidatesOnDataErrors=true, NotifyOnValidationError=True}"\n    VerticalAlignment="Center"\n    Width="120"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-251")])]),e._v(" "),a("p",[e._v("There's a separate property for ValidatesOnNotifyDataErrors if you only want to support\n                        INotifyDataErrorInfo:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="cellPhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding CellPhone, ValidatesOnNotifyDataErrors=true, NotifyOnValidationError=True}"\n    VerticalAlignment="Center"\n    Width="120"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-252")])]),e._v(" "),a("p",[e._v("but ValidateOnDataErrors will also pick up INotifyDataErrorInfo.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Binding Events")]),e._v(" "),a("p",[e._v("Bindings offer a number of events that you can hook into for various scenarios, and one of those is\n                        very specific to validation. Non-specific to validation are two events, there's the\n                        Binding.TargetUpdated, which is an event that will fire when data flows from the source to the\n                        target, and Binding.SourceUpdated, which will fire when data flows in the other direction,\n                        basically, in a two-way data binding scenario when an input value in a field is being pushed down\n                        into the source object.\n                    ")]),e._v(" "),a("p",[e._v("The one that's specific to validation is Validation.ValidationError. This is an attached event that\n                        will fire whenever a validation error is added or removed from a control that has a binding hooked\n                        up.\n                    ")]),e._v(" "),a("p",[e._v("Now none of these events fire by default, you're going to have to enable them on a binding, and you\n                        do that with a series of properties on the Binding that are NotifyOn, and the appropriate event, and\n                        you set that to true.\n                    ")]),e._v(" "),a("p",[e._v("So you first enable it with one of these flags, and then you hook up the events above to an event\n                        handler in the code-behind. So let's take a look at a quick demo of using the ValidationError event,\n                        in particular, to be able to know when validation errors occur.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Validation Events")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Another thing that comes in handy sometimes when working with validation is being able to hook events\n                        that fire when the validation state of a control changes. To do that, all we do is we drop into our\n                        binding and we set another property called NotifyOnValidationError=true.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="cellPhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding CellPhone, ValidatesOnNotifyDataErrors=true, NotifyOnValidationError=True}"\n    VerticalAlignment="Center"\n    Width="120"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-253")])]),e._v(" "),a("p",[e._v("Once that flag is set, anytime the validation state of that control, meaning errors present or not,\n                        changes, it's going to raise a validation event, which we can hook wherever we want in our UI.\n                    ")]),e._v(" "),a("p",[e._v("These ValidationError events are attached events, so you can attach them to any element. So I could\n                        go into my TextBox here and say, ValidationError equals some handler that I'm going to put in my\n                        code-behind.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="cellPhoneTextBox"\n                     Validation.Error="cellPhoneTextBox_Error"\n                    Grid.Column="1"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-254")])]),e._v(" "),a("p",[e._v("Because these are bubbling events, I could also put them further up the chain. So instead of on the\n                        TextBox itself, I could put it all the way up at Grid level here. Now I need to add that error\n                        handler to my code-behind, so I'll drop into the code, add the method:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void cellPhoneTextBox_Error(object sender, ValidationErrorEventArgs e)\n{\n    Debug.WriteLine(e.Error.ErrorContent);\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-255")])]),e._v(" "),a("p",[e._v("and you can see you get passed a ValidationErrorEventArgs.")]),e._v(" "),a("p",[e._v("This thing has several properties on it. It's got a ValidationError is the main thing you're going to\n                        look at and that error has a bunch of context on it.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ValidationRule RuleInError { get; set; }\npublic object ErrorContent { get; set; }\npublic Exception Exception { get; set; }\npublic object BindingInError { get; }")])]),e._v(" "),a("figcaption",[e._v("Fig 07-256")])]),e._v(" "),a("p",[e._v("The ErrorContent property is the main thing you're going to look at, it's generally going to be the\n                        error string that you're dealing with. So I'm just going to Debug.WriteLine out the\n                        (e.Error.ErrorContent).\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(531)}}),e._v(" "),a("figcaption",[e._v("Fig 07-257")])]),e._v(" "),a("p",[e._v("Now if we go ahead and run, watch the output window on the bottom, I'll invoke my asynchronous\n                        validation, we'll wait the 5 seconds, and we can see Invalid phone format showed up in the output\n                        window.\n                    ")]),e._v(" "),a("p",[e._v("So that's all there is to hooking validation errors. Make sure you turn it on, on a binding, put the\n                        attached event hooked up somewhere in the UI on the element itself or some parent element, and then\n                        have the handler deal with the validationErrorEventArgs that flows in.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Validation Error Templates")]),e._v(" "),a("p",[e._v("As you've seen so far, WPF controls have a default error template or rendering that it shows when\n                        there's validation errors, which is a red box around the control but it doesn't display anything\n                        about the error messages themselves, and you might not always want to use a red box.\n                    ")]),e._v(" "),a("p",[e._v("So the Validation Class has a number of attached properties that will allow you to drive the\n                        presentation of errors. First off, there's the validation HasError property. This is a Boolean flag\n                        to indicate whether there are any errors associated with the control. You can use that as a\n                        condition for something like a property trigger to drive changing the style of the control.\n                    ")]),e._v(" "),a("p",[e._v("Then there's the Errors collection, and this will get you all of the errors associated with the\n                        control, generally based on a bound property, and validation errors that flowed through the binding.\n                    ")]),e._v(" "),a("p",[e._v("Finally, there's the ErrorTemplate. The ErrorTemplate is the custom ControlTemplate that is used when\n                        there are validation errors. So the default ErrorTemplate adds the red box around the control, but\n                        you can customize that and do whatever kind of annotation you want to the control with your own\n                        custom rendering.\n                    ")]),e._v(" "),a("p",[e._v("So the basic process is to provide a custom display for the control, you're going to set the\n                        ErrorTemplate to some custom ControlTemplate that includes a placeholder in it for the control\n                        itself. So, generally, you can think of it as you're surrounding the control with some kind of\n                        validation indication, but you could certainly overlay the control with something too.\n                    ")]),e._v(" "),a("p",[e._v("You might also want to do a ToolTip to show the validation errors, and the standard way to do that is\n                        to define a Style with a trigger on that Style that monitors the HasError property.\n                    ")]),e._v(" "),a("p",[e._v("When the HasError goes true, it sets a ToolTip on the control it's associated with and uses the\n                        Errors collection to render out the string errors associated with it. So let's take a look at a demo\n                        of how to do the ToolTips and how to provide a custom ErrorTemplate to modify the way it indicates\n                        errors on the screen.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: Custom Validation Error Display")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-012",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-012"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("So far in our demos, all we've had to go by when we have a validation error is this red box that the\n                        control draws by default:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(532)}}),e._v(" "),a("figcaption",[e._v("Fig 07-258")])]),e._v(" "),a("p",[e._v("It's not really enough information to help out the user.")]),e._v(" "),a("p",[e._v("So let's take a look at how we can provide a custom template to either customize the appearance of\n                        how it highlights the box and also how we can get to the errors for display purposes.\n                    ")]),e._v(" "),a("p",[e._v("The first thing we might want to do is put a ToolTip on controls that have the red box so the user\n                        can hover over them and see what the error is. To do that, I'm going to drop into the XAML, go into\n                        the Resource section here, and define a Style.\n                    ")]),e._v(" "),a("p",[e._v("I'm going to give this Style a name of ErrorStyle and let its TargetType be FrameworkElement")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Window.Resources>\n    <CollectionViewSource x:Key="customerViewSource"\n                          d:DesignSource="{d:DesignInstance {x:Type local:Customer}, CreateList=True}" />\n    <Style x:Key="ErrorStyle"\n           TargetType="FrameworkElement">\n        <Style.Triggers>\n            <Trigger Property="Validation.HasError"\n                     Value="true">\n                <Setter Property="ToolTip"\n                        Value="{Binding RelativeSource={x:Static RelativeSource.Self},\n            Path=(Validation.Errors).CurrentItem.ErrorContent}" />\n            </Trigger>\n        </Style.Triggers>\n    </Style>\n</Window.Resources>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-259")])]),e._v(" "),a("p",[e._v("so any FrameworkElement can have a ToolTip, we don't have to constrain it to a particular type. What\n                        we're going to leverage here is some attached properties that the Validation Class has.\n                    ")]),e._v(" "),a("p",[e._v("So we set up a Trigger section to our Style:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Style.Triggers>")])]),e._v(" "),a("figcaption",[e._v("Fig 07-260")])]),e._v(" "),a("p",[e._v("and we set up a Property Trigger on the attached property, Validation.HasError:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Trigger Property="Validation.HasError"\n                         Value="true">')])]),e._v(" "),a("figcaption",[e._v("Fig 07-261")])]),e._v(" "),a("p",[e._v("So whichever FrameworkElement that we apply this to, basically, this is going to be monitoring the\n                        HasError property and whenever that HasError property goes true, the value that we specify here,\n                        it's going to trigger this Setter.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Setter Property="ToolTip"\n            Value="{Binding RelativeSource={x:Static RelativeSource.Self},\n            Path=(Validation.Errors).CurrentItem.ErrorContent}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-262")])]),e._v(" "),a("p",[e._v("This Setter is going to go set the ToolTip property of that FrameworkElement, and it's going to set\n                        it to a value that it obtains from the Errors collection on the Validation Class.\n                    ")]),e._v(" "),a("p",[e._v("So it's using a RelativeSource Binding here to basically get a reference to the element itself, use\n                        the attached property Validation.Errors to get the Errors collection, use the CurrentItem property,\n                        which will give you basically the first item in the collection in a safe way, so if there are no\n                        errors it doesn't have a problem trying to index in, and then the ErrorContent, which is that same\n                        thing we saw in the Validation events demo, which is typically the error string.\n                    ")]),e._v(" "),a("p",[e._v('So now we just need to tie this ErrorStyle onto our controls, so I\'ll drop down to my TextBox and add\n                        Style="(StaticResource ErrorStyle)":\n                    ')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<TextBox x:Name="cellPhoneTextBox"\n    Grid.Column="1"\n    HorizontalAlignment="Left"\n    Height="23"\n    Margin="3"\n    Grid.Row="0"\n    Text="{Binding CellPhone, ValidatesOnNotifyDataErrors=true, NotifyOnValidationError=True}"\n    VerticalAlignment="Center"\n    Width="120"\n    Validation.Error="cellPhoneTextBox_Error"\nStyle="{StaticResource ErrorStyle}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-263")])]),e._v(" "),a("p",[e._v("Now with that in place, I can put in my abc, tab out, wait for the 5 seconds:")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(533)}}),e._v(" "),a("figcaption",[e._v("Fig 07-264")])]),e._v(" "),a("p",[e._v("and now when I hover over that we can see we get a ToolTip that tells us Invalid phone format is the\n                        problem.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(534)}}),e._v(" "),a("figcaption",[e._v("Fig 07-265")])]),e._v(" "),a("p",[e._v("Now you might also want to customize the way the control displays that error. Instead of a red box,\n                        you might want some kind of icon next to it. To do that, we're going to go back up to the Resource\n                        section and define a couple more resources. Now this does require you to understand ControlTemplates\n                        a little bit:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ControlTemplate x:Key="TextBoxErrorTemplate">\n    <DockPanel>\n        <Ellipse DockPanel.Dock="Right"\n                 Margin="2,0"\n                 ToolTip="Contains invalid data"\n                 Width="10"\n                 Height="10">\n            <Ellipse.Fill>\n                <LinearGradientBrush>\n                    <GradientStop Color="#11FF1111"\n                                  Offset="0" />\n                    <GradientStop Color="#FFFF0000"\n                                  Offset="1" />\n                </LinearGradientBrush>\n            </Ellipse.Fill>\n        </Ellipse>\n        <AdornedElementPlaceholder />\n    </DockPanel>\n</ControlTemplate>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-266")])]),e._v(" "),a("p",[e._v("because what we're doing is we're defining a custom ControlTemplate that we're going to apply to our\n                        input control.\n                    ")]),e._v(" "),a("p",[e._v("The structure of what you put in that ControlTemplate is totally up to you, but there's a magic\n                        element that you need to have in here called AdornedElementPlaceholder, and this is basically going\n                        to be a placeholder where the normal TextBox visual tree is going to be placed within this\n                        ControlTemplate and whatever else you put around it is up to you. So you can think of it as you're\n                        wrapping the normal TextBox with something that you want to show and we're only going to show this\n                        when there's a validation error.\n                    ")]),e._v(" "),a("p",[e._v("So what I've got here is I've got a DockPanel. The last element in a DockPanel will fill the\n                        DockPanel. And then notice, I put an Ellipse, which I Dock to the Right, and just have some\n                        structure to that Ellipse. So this is basically going to give us a little gradient-shaded round\n                        circle. Notice it also has a ToolTip associated with it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('ToolTip="Contains invalid data"')])]),e._v(" "),a("figcaption",[e._v("Fig 07-267")])]),e._v(" "),a("p",[e._v("that we can hover over. So we've defined this ControlTemplate and now we have to associate it with\n                        the controls that are going to use it.\n                    ")]),e._v(" "),a("p",[e._v("So we apply an implicit Style here which is going to apply to all TextBoxes that don't already have a\n                        Style")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Style TargetType="TextBox">\n    <Setter Property="Margin"\n            Value="4,4,15,4" />\n    <Setter Property="Validation.ErrorTemplate"\n            Value="{StaticResource TextBoxErrorTemplate}" />\n    <Style.Triggers>\n        <Trigger Property="Validation.HasError"\n                 Value="True">\n            <Setter Property="ToolTip">\n                <Setter.Value>\n                    <Binding Path="(Validation.Errors).CurrentItem.ErrorContent"\n                             RelativeSource="{x:Static RelativeSource.Self}" />\n                </Setter.Value>\n            </Setter>\n        </Trigger>\n    </Style.Triggers>\n</Style>')])]),e._v(" "),a("figcaption",[e._v("Fig 07-268")])]),e._v(" "),a("p",[e._v("setting some margin, and then the key thing here is we're setting the ErrorTemplate and this\n                        Validation.ErrorTemplate is an attached property that we can set and we're setting it to our\n                        ControlTemplate that we just defined up above.\n                    ")]),e._v(" "),a("p",[e._v("Validation system is smart enough to know, only use this template:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Setter Property="Validation.ErrorTemplate"\n                    Value="{StaticResource TextBoxErrorTemplate}" />')])]),e._v(" "),a("figcaption",[e._v("Fig 07-269")])]),e._v(" "),a("p",[e._v('if there are validation errors. In addition, we want a ToolTip on these controls as well, so similar\n                        to the Style trigger that we put separately, we embed that same ToolTip using the\n                        "(Validation.Errors) CurrentItem.ErrorContent" when there is an error on the control.\n                    ')]),e._v(" "),a("p",[e._v("So with that in place, we can run")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(535)}}),e._v(" "),a("figcaption",[e._v("Fig 07-270")])]),e._v(" "),a("p",[e._v("and remember on the Cell Phone we had applied a Style explicitly for the ToolTip, but the other two\n                        don't have a Style applied, so we can see that now we get that red dot to the right, instead of a\n                        red box around the control. And, if we hover over the red dot, we get the, Contains invalid data\n                        that is part of that ellipse.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(536)}}),e._v(" "),a("figcaption",[e._v("Fig 07-271")])]),e._v(" "),a("p",[e._v("If we hover over the TextBox, we get the Invalid input format that's coming out of the ToolTip. So\n                        that's how you can provide a custom Error indication for a control by providing a ControlTemplate\n                        that contains the AdornedElementPlaceholder for the normal control and whatever you want to surround\n                        it with, and making sure you set that as the ErrorTemplate for the control that you want.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("DataAnnotations")]),e._v(" "),a("p",[e._v("The last thing I want to talk about in this module is using DataAnnotations. DataAnnotations are a\n                        namespace in the .NET framework, specifically System.ComponentModel.DataAnnotations, that have\n                        become very widespread for validation purposes.\n                    ")]),e._v(" "),a("p",[e._v("It's a common mechanism for expressing validation rules on properties, done through attributes.\n                        There's a set of built-in attributes for common scenarios, including Required, RegularExpressions,\n                        StringLength, Range, Phone, Email, Url, CreditCard, and then there's a CustomValidation attribute\n                        that you can use to point to a method where you put your own custom logic.\n                    ")]),e._v(" "),a("p",[e._v("Basically, you put these attributes on a property and they will be evaluated in validation scenarios.\n                        Now they can be automatically evaluated by some parts of .NET, specifically, ASP.NET model binding\n                        will automatically evaluate DataAnnotation attributes. Entity Framework will also automatically\n                        evaluate them. And it's somewhat defunct at this point, but Silverlight RIA Services also had\n                        built-in support for this.\n                    ")]),e._v(" "),a("p",[e._v("Now WPF does not automatically evaluate these, so you have to write a little bit of code using two\n                        classes from the DataAnnotations namespace, ValidationContext and Validator, to get it to,\n                        basically, reflect on the property, find the attributes, evaluate the rule, and return an\n                        appropriate error if validation has failed.\n                    ")]),e._v(" "),a("p",[e._v("So let's take a look at how we can integrate this into our validation scenarios in WPF.")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Demo: DataAnnotations")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-013",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\before\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-013"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{id:"Ex09-014",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF Data Binding in Depth\\Module 9\\after\\ValidationDemo\\ValidationDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex09-014"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("Now another thing you should be familiar with respective to validation that's very common in the .NET\n                        framework and other parts of the framework, are DataAnnotations.\n                    ")]),e._v(" "),a("p",[e._v("DataAnnotations are a capability that comes in from a reference that you'll add to your project\n                        called System.ComponentModel.DataAnnotations:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(537)}}),e._v(" "),a("figcaption",[e._v("Fig 07-272")])]),e._v(" "),a("p",[e._v("DataAnnotations are known by Entity Framework, ASP.NET, Silverlight RIA Services, and you can enable\n                        them in WPF very easily.\n                    ")]),e._v(" "),a("p",[e._v("First what we're going to do is define a base class that we can put on our entities and I'll call\n                        this EntityBase.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class EntityBase\n{\n    protected virtual void ValidateProperty(string propertyName, object value)\n    {\n        ValidationContext context = new ValidationContext(this, null, null);\n        context.MemberName = propertyName;\n        Validator.ValidateProperty(value, context);\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-273")])]),e._v(" "),a("p",[e._v("And we're using this to encapsulate just the few lines of code that we need to evaluate\n                        DataAnnotations.")]),e._v(" "),a("p",[e._v("Specifically, there's a class called the ValidationContext.")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("ValidationContext context = new ValidationContext(this, null, null);")])]),e._v(" "),a("figcaption",[e._v("Fig 07-274")])]),e._v(" "),a("p",[e._v("You pass it a reference to the object that you're trying to validate, you set a property on it called\n                        MemberName to tell it what property is being evaluated:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("context.MemberName = propertyName;")])]),e._v(" "),a("figcaption",[e._v("Fig 07-275")])]),e._v(" "),a("p",[e._v("and then you use the Validator class .ValidateProperty method, passing in the value that's being set\n                        on that property, and the context object that you created up above:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Validator.ValidateProperty(value, context);")])]),e._v(" "),a("figcaption",[e._v("Fig 07-276")])]),e._v(" "),a("p",[e._v("that wraps the object being validated.")]),e._v(" "),a("p",[e._v("ValidateProperty is going to throw an exception if this value is not appropriate based on attributes\n                        that you can put on the properties. So this is basically some infrastructure that you need, to get\n                        DataAnnotation attributes evaluated. So let's go add some attributes.\n                    ")]),e._v(" "),a("p",[e._v("I'm going to comment out the ValidatePhone method call here in the HomePhone property, and I'm going\n                        to add several DataAnnotation attributes.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string _HomePhone;\n[RegularExpression(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$")]\n[Required]\n[StringLength(12)]\npublic string HomePhone\n{\n    get { return _HomePhone; }\n    set\n    {\n        if (_HomePhone != value)\n        {\n            //ValidatePhone(value);\n            _HomePhone = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("HomePhone"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 07-277")])]),e._v(" "),a("p",[e._v("So first off, I'm going to put a RegularExpression:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('[RegularExpression(@"^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$")]')])]),e._v(" "),a("figcaption",[e._v("Fig 07-278")])]),e._v(" "),a("p",[e._v("as one of the built-in attributes, so that we can just declaratively put the RegularExpression that\n                        applies to this property, right there where it's defined, instead of having to call out to some\n                        method and go see what that method does and write the Regex code to evaluate it.\n                    ")]),e._v(" "),a("p",[e._v("Likewise, we could say this is a Required field:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("[Required]")])]),e._v(" "),a("figcaption",[e._v("Fig 07-279")])]),e._v(" "),a("p",[e._v("and it will give a validation error if it's empty or null. We could give it a StringLength:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("[StringLength(12)]")])]),e._v(" "),a("figcaption",[e._v("Fig 07-280")])]),e._v(" "),a("p",[e._v("If it was a numeric value, there is a Range attribute. There's also a CustomValidation attribute that\n                        you can point to a method to encapsulate your own logic. So these are just a nice declarative way to\n                        put attributes on a property to indicate what the ValidationRule associated with that property is.\n                        But attributes don't do anything unless some code goes and evaluates them.\n                    ")]),e._v(" "),a("p",[e._v("So that is why we put that EntityBase class in place, if we add EntityBase:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("public class Customer : EntityBase, INotifyPropertyChanged, INotifyDataErrorInfo")])]),e._v(" "),a("figcaption",[e._v("Fig 07-281")])]),e._v(" "),a("p",[e._v("as a base class for our entity, and then in the property we invoke that validate method. So we call\n                        ValidateProperty on our base class\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('ValidateProperty("HomePhone", value);')])]),e._v(" "),a("figcaption",[e._v("Fig 07-282")])]),e._v(" "),a("p",[e._v("passing in the property name and the value that's being set.")]),e._v(" "),a("p",[e._v("That's going to trigger that code down in EntityBase:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class EntityBase\n{\n    protected virtual void ValidateProperty(string propertyName, object value)\n    {\n        ValidationContext context = new ValidationContext(this, null, null);\n        context.MemberName = propertyName;\n        Validator.ValidateProperty(value, context);\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 07-283")])]),e._v(" "),a("p",[e._v("to use the ValidationContext and Validator to basically reach back up to this property, pull off each\n                        of the DataAnnotation attributes, execute them to find out if there's an error, and if so, throw an\n                        exception with those errors. So with that in place, we can go ahead and run, go to our Home Phone,\n                        see the StringLength, for example, tab out of the field, and we can see we get our field Home Phone\n                        must be a string with a maximum length of 12.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(538)}}),e._v(" "),a("figcaption",[e._v("Fig 07-284")])]),e._v(" "),a("p",[e._v("So it even gives you a nice error string there based off of the attribute, and those are localizable.\n                        If you have some custom error you want, you can see that there are name parameters including\n                        ErrorMessage, ErrorMessageResource string and Type if you're using resources for localization, and a\n                        MinimumLength.\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(539)}}),e._v(" "),a("figcaption",[e._v("Fig 07-285")])]),e._v(" "),a("p",[e._v("Now one other thing to point out is, if you don't want to do it with exceptions, now this is working\n                        because we have ValidateOnExceptions on our binding. If you don't want to do it with exceptions,\n                        there's an alternative way on the Validator class called TryValidateProperty:\n                    ")]),e._v(" "),a("figure",[a("img",{staticClass:"image",attrs:{src:n(540)}}),e._v(" "),a("figcaption",[e._v("Fig 07-286")])]),e._v(" "),a("p",[e._v("This will return a Boolean flag and it will populate a collection of validationResults with any\n                        errors that result. So you can integrate this with the IDataErrorInfo pattern to return the\n                        collection strings that come out of this if there was an error, instead of throwing an exception.\n                    ")]),e._v(" "),a("p",[e._v("I'm just going to leave it with the ValidateProperty here, but generally just throwing the exception\n                        and using ValidatesOnExceptions will work nicely.\n                    ")]),e._v(" "),a("p",[e._v("So that's all there is to using DataAnnotations, put the appropriate attributes on your properties,\n                        have the few lines of code invoked that get those DataAnnotations evaluated.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("In this module, we covered the key capabilities of using validation with data binding. First off, we\n                        started with the easy stuff, which is, if you want to use an exception to indicate that a value\n                        that's being set on a set block is an invalid value, then you simply throw that exception and set\n                        the ValidatesOnExceptions property on your binding. Control will kick in, it'll show whatever\n                        ErrorTemplate it has, and it will indicate that there's a validation error for that input.\n                    ")]),e._v(" "),a("p",[e._v("\n                        You saw another mechanism, that's specific to WPF, is to use ValidationRules. You inherit from the\n                        ValidationRule base class, you override a Validate method, you implement whatever logic is\n                        appropriate for your ValidationRule in that class, and then you attach that ValidationRule to a\n                        binding. You have to use an expanded syntax for the binding, using nested elements instead of curly\n                        braces, and those ValidationRules don't have a lot of context passed in, just simply a value, so you\n                        often need to put additional properties on there and set them from the XAML so that the\n                        ValidationRule can have some decent logic in it. But these are a decent way to define an\n                        encapsulated rule that can be reusable across different scenarios in your applications.\n                    ")]),e._v(" "),a("p",[e._v("Next, we looked at IDataErrorInfo, which is the most common way of doing validation on business\n                        objects and has been around since .NET 1.0. IDataErrorInfo is an interface you implement on your\n                        model objects that will be queried by the binding when you enable it, after it sets the property.\n                        And that querying basically lets the binding ask the object, are you happy with the value I just set\n                        on a given property, and your implementation is expected to return an error string if not. The\n                        control will then kick in and indicate that there's a validation error.\n                    ")]),e._v(" "),a("p",[e._v("Next we covered INotifyDataErrorInfo, which is an asynchronous version of IDataErrorInfo. It came in,\n                        in .NET 4.5 and it supports scenarios where you may need to go make an asynchronous call to\n                        something like a Service to determine whether an input value is valid. You can then raise an event\n                        that will cause the binding to re-query for errors and show the error indications at the point where\n                        the error arrives.\n                    ")]),e._v(" "),a("p",[e._v("Next, we talked about some binding and validation events that are available, and you saw that these\n                        are simple events that you can hook up on your controls, and the validationError event, in\n                        particular, ties in with validation to let you have handling in your code-behind whenever the\n                        validation state of a control changes.\n                    ")]),e._v(" "),a("p",[e._v("Next, we looked at how you can provide custom ControlTemplates to change the way built-in controls\n                        render when there is a validation error. Instead of the default red box around the control, you can\n                        put a red dot to the right, you can put an overlay on it, you could put dancing bears and spinning\n                        stars on the control if you like. We also covered how you can provide a ToolTip to present the error\n                        information.\n                    ")]),e._v(" "),a("p",[e._v("Finally, we finished off with DataAnnotations and explained that they are a standard way in .NET,\n                        using attributes to indicate validation rules associated with the property. There's a set of\n                        built-in DataAnnotation attributes for common scenarios, such as Required, StringLength, and\n                        RegularExpression, and you can write your own custom rules and attach them through DataAnnotations\n                        as well. You saw that in WPF you need a little bit of code to get the DataAnnotations evaluated, but\n                        that's easy to introduce from the set blocks of your properties.\n                    ")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("p",[e._v("So that completes our course on WPF data binding in depth. You got a good end-to-end coverage of all\n                        the capabilities of WPF data binding, starting with the data binding Overview, where we covered the\n                        basics of bindings and DataContext, and so on.\n                    ")]),e._v(" "),a("p",[e._v("We got into Data Sources and what kinds of objects you can work with, what types of interfaces and\n                        support those objects need, as well as what types of collections you want to work with for data\n                        binding. We got into the Binding Core Concepts, talking about things like alternate ways of\n                        expressing what the source object is, what the path on that source object is, and what the direction\n                        of flow of data with the Mode property is.\n                    ")]),e._v(" "),a("p",[e._v("We got into the more advanced properties of data bindings and talked about things like doing Async\n                        bindings and the UpdateSourceTrigger property to trigger when data flows, and using FallbackValues\n                        and StringFormats, and so on.\n                    ")]),e._v(" "),a("p",[e._v("We covered DataTemplates in depth, and you saw that those really start to unleash the power of data\n                        binding to allow you to have custom rendering of your data-bound objects in any kind of container\n                        control that's going to do data binding.\n                    ")]),e._v(" "),a("p",[e._v("We looked at the Design Time features in Visual Studio and a little bit in Blend, that help you get\n                        really productive with data binding, dragging and dropping your way to a data-bound UI and\n                        generating the UI elements and getting them a decent layout to start with.\n                    ")]),e._v(" "),a("p",[e._v("We dove under the covers a little bit and showed you what's really going on when data binding occurs\n                        in building up the visual tree based on the data-bound objects.\n                    ")]),e._v(" "),a("p",[e._v("And we reviewed the common collection controls and made sure you really knew how to use all the\n                        properties associated with data bindings for things like ComboBoxes, ListBoxes, TabControls, and\n                        DataGrids, as well as CollectionViewSources.\n                    ")]),e._v(" "),a("p",[e._v("And finally, we finished off in this module with Validation. So that pretty much wraps it up. Thank\n                        you very much for viewing the course. Please recommend it to your friends. Be sure to come back and\n                        watch parts again if you need to review concepts and review the code, and hopefully at this point\n                        you feel very well-equipped to go start hooking up your complex data-bound UIs for your business\n                        applications.\n                    ")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Model-View-ViewModel Architectural Pattern")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Introduction")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("What is MVVM?")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Code-behind and Testability")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Extracting a View Model")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("BaseViewModel")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Domain vs View Model")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Dealing with Xamarin Dependencies")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("ICommand Interface")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Command with a Parameter")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Clean Coding")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Exercise")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Unit Testing ViewModels")]),e._v(" "),n("p")])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-01-getting-started","active-class":"active"}},[n("a",[e._v("Getting Started")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-02-xaml-essentials","active-class":"active"}},[n("a",[e._v("XAML Essentials")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-03-layouts","active-class":"active"}},[n("a",[e._v("Layouts")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-04-images","active-class":"active"}},[n("a",[e._v("Images")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-05-lists","active-class":"active"}},[n("a",[e._v("Lists")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-06-navigation","active-class":"active"}},[n("a",[e._v("Navigation")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-07-forms-and-settings-pages","active-class":"active"}},[n("a",[e._v("Forms and Settings Pages")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-08-data-access","active-class":"active"}},[n("a",[e._v("Data Access")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-09-model-view-viewmodel-architectural-pattern","active-class":"active"}},[n("a",[e._v("Model-View-ViewModel Architectural Pattern")])]),e._v(" "),n("p",[e._v("This and that")]),e._v(" "),n("router-link",{attrs:{to:"/xamarin-forms-cross-platform-10-beyond-the-basics","active-class":"active"}},[n("a",[e._v("Beyond the Basics")])]),e._v(" "),n("p",[e._v("This and that")])],1)])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Course Contents")])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("View/ViewModel Communication in WPF")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("Hi and welcome back to this fourth module in WPF MVVM in Depth. The focus in this module will be on\n                        how to add interactivity to your MVVM apps, how to cleanly call logic that is implemented in the\n                        ViewModel when something happens in the View as well as letting the View know when something happens\n                        behind the scenes in your ViewModel, Model Objects or Client Services. And you'll see that all of\n                        this is done maintaining that loose coupling and good structuring that's at the heart of the MVVM\n                        pattern.\n                    ")]),e._v(" "),a("p",[e._v("\n                        First up we'll talk about Commands a bit more. You saw a quick example of using a Command to invoke\n                        some logic in the ViewModel object in the demos of the second module. In this module I'll go a bit\n                        deeper looking at how things get hooked up, what happens under the covers during that hook-up, how\n                        to use Command Enabling and Keyboard Shortcuts.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Next we will look at Attached Properties and Behaviors covering what the relationship between them\n                        is, what their general capabilities are and how to use them in the context of MVVM as another means\n                        of setting up communication paths between the View elements and View Model logic or vice a versa.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We will finish the module with a review of how Property Change Notifications work with Data Binding\n                        in WPF and show how they can be used as a signalling mechanism from the ViewModel to make things\n                        happen in the View at the appropriate time.\n                    ")]),e._v(" "),a("h3",[e._v("Commands for View to ViewModel Communication")]),e._v(" "),a("p",[e._v("\n                        The Command pattern has been a well-documented and frequently used design pattern for a couple of\n                        decades’ now and is especially prevalent in UI frameworks. In that pattern there are two main actors\n                        - the invoker and the receiver:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(585)}}),e._v(" "),a("figcaption",[e._v("Fig 04-001")])]),e._v(" "),a("ul",[a("li",[e._v("Invoker – whatever piece of code wants to cause some imperative logic to be executed. Typically,\n                            the Invoker is a UI element that the user interacts with in the context of the UI framework. It\n                            could also just be another chunk of logic code somewhere in the application.\n                        ")]),e._v(" "),a("li",[e._v("Receiver – the logic that is intended for execution when the Invoker fires. In the context of\n                            MVVM the Receiver is typically a method in your ViewModel or in a Client Service that needs to\n                            be called.\n                        ")])]),e._v(" "),a("p",[e._v("\n                        In between the Invoker and Receiver, you have an abstraction layer that makes it so the Invoker and\n                        Receiver do not have to explicitly know about each other. This is typically represented as an\n                        Interface abstraction exposed to the Invoker and a concrete implementation of that interface is\n                        capable of calling the Receiver in the delegating fashion.\n                    ")]),e._v(" "),a("p",[e._v("In XAML frameworks like WPF ICommand is a built-in Interface of the platform and while WPF does have\n                        some built-in implementations of concrete Commands called Routed Commands they are not designed with\n                        the delegating capability needed to be used cleanly with MVVM. What you will typically use in MVVM\n                        is a Command Type that uses .NET delegates to be able to point to the handling method that resides\n                        in your ViewModel. Depending on whether you write your own or use a popular MVVM framework these are\n                        typically named either DelegateCommand or RelayCommand.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The key thing about Commands is that they support a decoupled way of calling from the View to the\n                        ViewModel. As a side benefit the implementation in XAML also supports driving whether the associated\n                        Control is enabled or disabled through the same decoupled interface.\n                    ")]),e._v(" "),a("p",[e._v("Let's take a deeper look at Commands through a demo.")]),e._v(" "),a("h3",[e._v("Demo: Commands for View to ViewModel Communication")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-001",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-Commands-Start\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-001"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-002",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-Commands-End\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-002"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo I'm going to do a deep dive into Commands and demonstrate how to use them to\n                        communicate from the View down to the ViewModel in a loosely coupled way.\n                    ")]),e._v(" "),a("p",[e._v("\n                        The starting point for this demo is the ending point of the demo from the last module where we had\n                        our CustomerListView hooked up with a DataGrid and a ListBox presenting Customer data from a\n                        ViewModel that just exposed that Customer data.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In the CustomerListView add a Button to delete a Customer. Working with Commands on Buttons is very\n                        easy because they have a Command Property to hook-up to an ICommand. This means we can expose a\n                        property on our ViewModel that is an ICommand and bind to it from the Buttons Command Property:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('Command="Binding DeleteCommand"')]),e._v(" "),a("figcaption",[e._v("Fig 04-002")])]),e._v(" "),a("p",[e._v("With this definition we expect to have a DeleteCommand property of type ICommand exposed from our\n                        ViewModel and as the XAML gets parsed here several things are going to happen.\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("First it's going to call the get block on that ICommand Property to get a reference to the\n                            Command object.\n                        ")]),e._v(" "),a("li",[e._v("Then it's going to call CanExecute() on that Command to determine the initial enabled or\n                            disabled state of the Command and it will enable or disable the Button as a result.\n                        ")]),e._v(" "),a("li",[e._v(" Then it will subscribe to CanExecuteChanged on that ICommand. This will allow us to be notified\n                            in the future if the enabled or disabled state of the Command changes.\n                        ")])]),e._v(" "),a("p",[e._v("Next add a Delete Command to the CustomerListViewModel. Add a public property of type ICommand:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public ICommand DeleteCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 04-003")])]),e._v(" "),a("p",[e._v("It has a private setter because the Property should only be set one time inside the ViewModel upon\n                        construction.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We need a concrete type that implements ICommand to put into that property. The one we will use in\n                        the demo is already in the project in the download code and is called RelayCommand:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("public class RelayCommand : ICommand\n{\n    Action _TargetExecuteMethod;\n    Func"),e._v("\n    // ICommand Members\n}\n\npublic class RelayCommand<T> : ICommand\n{")]),e._v(" "),a("figcaption",[e._v("Fig 04-004")])]),e._v(" "),a("p",[e._v("\n                        This is a simple delegating implementation of ICommand where we have two delegates – one for the\n                        Execute method and one for the CanExecute method. Those can be passed through on construction and\n                        you can see there are two overloaded constructors – one for only an Execute method and one for an\n                        Execute method and a CanExecute method.\n                    ")]),e._v(" "),a("p",[e._v("The implementation of ICommand is fairly straightforward:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("bool ICommand.CanExecute(object parameter)\n{\n    if (_TargetCanExecuteMethod != null)\n    {\n        return _TargetCanExecuteMethod();\n    }\n    if (_TargetExecuteMethod != null)\n    {\n        return true;\n    }\n    return false;\n}\n\n// Beware - should use weak references if command instance lifetime is longer than lifetime of UI objects that get hooked up to command\n// Prism commands solve this in their implementation\npublic event EventHandler CanExecuteChanged = delegate { };\n\nvoid ICommand.Execute(object parameter)\n{\n    if (_TargetExecuteMethod != null)\n    {\n        _TargetExecuteMethod();\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-005")])]),e._v(" "),a("p",[e._v("\n                        When either of the methods are invoked it just checks to see if there is a method for that delegate\n                        and invokes it. And in the case of the CanExecute method if there is no delegate for that it will\n                        return true meaning that it’s always enabled.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Back in CustomerListViewModel change the DeleteCommand to be of type RelayCommand instead of just\n                        ICommand:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public RelayCommand DeleteCommand { get; private set; }")])]),e._v(" "),a("figcaption",[e._v("Fig 05-005A")])]),e._v(" "),a("p",[e._v("Now we need to construct an instance and put it into that property; we will do this in the\n                        constructor.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public CustomerListViewModel()\n{\n    if (DesignerProperties.GetIsInDesignMode(\n        new System.Windows.DependencyObject())) return;\n\n    Customers = new ObservableCollection<Customer>( _repository.GetCustomersAsync().Result);\n    DeleteCommand = new RelayCommand(OnDelete,CanDelete);\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-006")])]),e._v(" "),a("p",[e._v("\n                        We could just use the constructor that only takes an Execute method (which we will call OnDelete)\n                        and the Command would then always be enabled. However, because we are going to hook-up\n                        enable/disable logic shortly we will also supply a CanExecute method called CanDelete.\n                    ")]),e._v(" "),a("p",[e._v("Now we can stub the methods out:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private void OnDelete()\n{\n    Customers.Remove(SelectedCustomer);\n}\n\nprivate bool CanDelete()\n{\n    return true;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-007")])]),e._v(" "),a("p",[e._v("For the moment we will just return true from CanDelete.")]),e._v(" "),a("p",[e._v("\n                        The ViewModel will need some context of what Customer is it supposed to be deleting from the\n                        Collection. A Command can take an argument, the signature of the CanExecute and Execute methods on\n                        ICommand have a single argument of type object. We could pass down an argument using the Command\n                        parameter property of the Button. However, we will take a different approach which is more in tune\n                        with the way MVVM works.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We are going to expose another property (called SelectedCustomer) from our ViewModel that our View\n                        can bind to. That way the ViewModel will always know what the current context is in terms of\n                        selection:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private Customer _selectedCustomer;\npublic Customer SelectedCustomer\n{\n    get\n    {\n        return _selectedCustomer;\n    }\n    set\n    {\n        _selectedCustomer = value;\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-008")])]),e._v(" "),a("p",[e._v("So I've added a new SelectedCustomer property and we can go over to the View now and set it up so\n                        it's always being populated when selections are made in the DataGrid. To do that I just drop over to\n                        my View, go to my DataGrid and set the SelectedItem property bound to the SelectedCustomer Property\n                        on my ViewModel.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <DataGrid x:Name="customerDataGrid"\n          AutoGenerateColumns="False"\n          ItemsSource="{Binding Customers}"\n          SelectedItem="{Binding SelectedCustomer}"\n          Grid.Row="1">\n    <DataGrid.Columns>\n        <DataGridTextColumn Binding="{Binding FirstName}"\n                            Header="First Name"\n                            Width="SizeToHeader" />\n        <DataGridTextColumn Binding="{Binding LastName}"\n                            Header="Last Name"\n                            Width="SizeToHeader" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-009")])]),e._v(" "),a("p",[e._v("Now the ViewModel will always be in tune with what the selection is and it can use that as the\n                        context for the Command.\n                    ")]),e._v(" "),a("p",[e._v("So now I can drop back over to the ViewModel to the OnDelete method and simply remove the\n                        SelectedCustomer from the Customer Collection when the Delete button is pressed and the Command\n                        fires.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(" private void OnDelete()\n{\n    Customers.Remove(SelectedCustomer);\n}\n\nprivate bool CanDelete()\n{\n    return SelectedCustomer != null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-010")])]),e._v(" "),a("p",[e._v("\n                        Now if you run the application, select a Customer and click Delete it is removed from both the\n                        DataGrid and ListBox since both controls are both bound to the same collection – which is an\n                        Observable Collection so it will raise collection changed events whenever an item is added or\n                        removed from the Collection. However, one problem with our current implementation is that the Delete\n                        button is always enabled (even if no Customer is selected). We will address that now.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We need to make it so the CanDelete logic is driven by whether a Customer is selected or not. Since\n                        we already have that context through our SelectedCustomer property we should be able to check that\n                        property for null and return true or false accordingly:\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("private bool CanDelete()\n{\n    return SelectedCustomer != null;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-011")])]),e._v(" "),a("p",[e._v("\n                        However, if we run the application now and select a customer the button remains disabled. This is\n                        because CanExecute is called when the binding is first evaluated as the XAML is being parsed and it\n                        subscribes to the CanExecuteChanged event. However, this won’t be checked again unless you call the\n                        CanExecuteChanged event.\n                    ")]),e._v(" "),a("p",[e._v("In the ViewModel we know that the SelectedCustomer is going to be set through our other binding so if\n                        we just drop in here to the set block inside the SelectedCustomer property and call\n                        RaiseCanExecuteChanged on the Command we'll be good to go:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("set\n{\n    _selectedCustomer = value;\n    DeleteCommand.RaiseCanExecuteChanged();\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-012")])]),e._v(" "),a("p",[e._v("\n                        Now if you run the application again the button will be initially disabled, then when a selection is\n                        made the button becomes enabled, if you click delete the button becomes disabled.\n                    ")]),e._v(" "),a("p",[e._v("Lastly we will hook-up input gestures to trigger your bindings such as keyboard shortcuts. In the\n                        View add InputBindings as a collection on the Root element.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<UserControl.InputBindings>\n    <KeyBinding Key="D"\n                Modifiers="Control"\n                Command="{Binding DeleteCommand}" />\n</UserControl.InputBindings>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-013")])]),e._v(" "),a("p",[e._v("\n                        The primary type of InputBinding you will use will probably be a KeyBinding which is a keyboard\n                        shortcut. Those are called key bindings and you can see you can set the Key and Modifiers (in this\n                        case Control D) as the keystroke that's gonna trigger our delete Command and then we just point to\n                        same Command property that we did with the Button making it an alternate invoker of that command.\n                    ")]),e._v(" "),a("p",[e._v("\n                        With that in place, we can run, I can make a selection, hit Ctrl + D and it deletes the same as\n                        clicking the button does. So that's how you use Commands to communicate from your View to your\n                        ViewModel to invoke some logic down in the ViewModel.\n                    ")]),e._v(" "),a("h3",[e._v("Attached Properties and Behaviors")]),e._v(" "),a("p",[e._v("\n                        Now let’s talk about Attached Properties and Behaviors and how they form a communication path\n                        between Views and ViewModels for scenario’s where Commands and Property Change Notifications are not\n                        sufficient. Attached Properties are a special kind of Dependency Property and are a fundamental part\n                        of all XAML platforms. They can be defined in any class and then applied to any object that derives\n                        from Dependency Object (which all UI elements do). Attached Properties are used for a lot of things\n                        in XAML including:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Grid Layout")]),e._v(" "),a("li",[e._v("Tool Tip Behaviors")]),e._v(" "),a("li",[e._v("Text Formatting")])]),e._v(" "),a("p",[e._v("\n                        They also form the basis for Custom Behaviors because when an Attached Property is set on some\n                        element you can wire up a change handler that can make programmatic calls against the exposed API of\n                        the control it’s being attached to doing things like subscribing to events or setting properties on\n                        the control.\n                    ")]),e._v(" "),a("p",[e._v("\n                        As a result, you can create what is called a Behavior with just a custom Attached Property but the\n                        more common way is to leverage the Blend SDK to create them. Even when you use the Blend SDK Blend\n                        Behaviors get attached to UI elements through Attached Properties which are defined in the SDK.\n                        Behaviors can expose their own Dependency Properties and thus form a communication bridge between\n                        Views and ViewModels because the Behavior can subscribe to events on the element it’s attached to or\n                        monitor property changes on it and can despatch calls into the ViewModel as a result either through\n                        Commands by setting a data-bound property on the Behavior that points to the ViewModel or by\n                        directly invoking a method on the ViewModel.\n                    ")]),e._v(" "),a("p",[e._v("\n                        In the other direction the Behavior can be bound to a Property exposed by the ViewModel that is\n                        either an interface with events on it or just a data property that raises property or collection\n                        changed events. Code in the Behavior can use that as a trigger to go do something on the element on\n                        which the Behavior is attached or some other element or elements in the UI that are reachable\n                        through the Visual tree of that Behaviours element.\n                    ")]),e._v(" "),a("p",[e._v("\n                        I'm sure thats all a little abstract if you have never worked with or implemented behaviours before.\n                        So let's take a look at a couple of demos that will make this all a bit more concrete.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Custom Attached Behavior")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-003",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-Behaviors-Start\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-003"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-004",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-Behaviors-End\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-004"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo we will look at the basis of Behaviors with Attached Properties and how they can be\n                        used communicate between View and ViewModel. The thing we are going to try and achieve is to make it\n                        so the ViewModel can handle the Loaded event and defer loading of the data until the loaded event of\n                        the View has fired. To do that we are going to start off by creating an Attached Property in a\n                        separate public static class called MvvmBehaviors.\n                    ")]),e._v(" "),a("p",[e._v("Next use the propa Visual Code snippet that is built into Visual Studio to create an Attached\n                        Property called LoadedMethodName. Make it of type string:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public static class MvvmBehaviors\n{\n    public static string GetLoadedMethodName(DependencyObject obj)\n    {\n        return (string)obj.GetValue(LoadedMethodNameProperty);\n    }\n\n    public static void SetLoadedMethodName(DependencyObject obj, string value)\n    {\n        obj.SetValue(LoadedMethodNameProperty, value);\n    }\n\n    public static readonly DependencyProperty LoadedMethodNameProperty =\n        DependencyProperty.RegisterAttached("LoadedMethodName",\n        typeof(string), typeof(MvvmBehaviors), new PropertyMetadata(null));')])]),e._v(" "),a("figcaption",[e._v("Fig 04-014")])]),e._v(" "),a("p",[e._v("\n                        Now to make this attached property a behaviour we need to wire up a change handler. So we'll go into\n                        the Property meta data and say my change handler is going to be named OnLoadedMethodNameChanged.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' public static readonly DependencyProperty LoadedMethodNameProperty =\n    DependencyProperty.RegisterAttached("LoadedMethodName",\n    typeof(string), typeof(MvvmBehaviors), new PropertyMetadata(null, OnLoadedMethodNameChanged));')])]),e._v(" "),a("figcaption",[e._v("Fig 04-015")])]),e._v(" "),a("p",[e._v("\n                        Stub the method out. Now in the new method we expect this Attached Property to be set on our View so\n                        we want to handle the Views Loaded event inside the change handler. Once we handle the Change event\n                        we want to invoke a method on the ViewModel. We know that the ViewModel should be the DataContext of\n                        that View. So we can get that ViewModel and use reflection to invoke a method with the specified\n                        method name on it:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private static void OnLoadedMethodNameChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n    FrameworkElement element = d as FrameworkElement;\n    if (element != null)\n    {\n\n        element.Loaded += (s, e2) =>\n        {\n            var viewModel = element.DataContext;\n            if (viewModel == null) return;\n            var methodInfo = viewModel.GetType().GetMethod(e.NewValue.ToString());\n            if (methodInfo != null) methodInfo.Invoke(viewModel, null);\n        };\n    }\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-016")])]),e._v(" "),a("p",[e._v("\n                        This code takes the d argument that comes into the change handler which will be the object on which\n                        the Attached Property was set and tries to cast that to Framework Element. As long as that succeeds\n                        we know the Framework Element has a Loaded event and it also has a DataContext. We subscribe to the\n                        Loaded event and when that Loaded event fires we get the DataContext. As long as that isn’t null we\n                        use reflection to get a reference to the Method of the name that is being set for LoadedMethodName.\n                        Once we have that reference we can just invoke it through reflection.\n                    ")]),e._v(" "),a("p",[e._v("To use this we need to go over to the CustomerListView add a namespace for the local namespace\n                        wherever we put the Behavior definition:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('xmlns:local=""clr-namespace:MVVMCommsDemo"quot;')]),e._v(" "),a("figcaption",[e._v("Fig 04-017")])]),e._v(" "),a("p",[e._v("Then in the root element of the View use the Attached Property (LoadedMethodName) and specify the\n                        Method name that you expect to find in your ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('local:MvvmBehaviors.LoadMethodName="LoadCustomers">')])]),e._v(" "),a("figcaption",[e._v("Fig 04-018")])]),e._v(" "),a("p",[e._v("\n                        Now we need to add a LoadCustomers method into our ViewModel. In previous demos we were initializing\n                        the Customers Collection in the constructor of our ViewModel. We had to force that asynchronous\n                        method to execute synchronously because you cannot use async and await in a constructor.\n                    ")]),e._v(" "),a("p",[e._v("Now that we are going to add a method that will fire later after construction when the Loaded event\n                        of the View fires we can move that initialization logic out to that Loaded handler and do it\n                        properly async. So cut the code out of the constructor, add a LoadCustomers method and paste the code\n                        in. Remove the Result property that forced the GetCustomerAsync method to run synchronous, put an\n                        await in front of the GetCustomerAsync method call and make the LoadCustomers method async:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public async void LoadCustomers()\n{\n    if (DesignerProperties.GetIsInDesignMode(\n        new System.Windows.DependencyObject())) return;\n\n    Customers = new ObservableCollection<Customer>(await _repository.GetCustomersAsync());\n\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-019")])]),e._v(" "),a("p",[e._v("\n                        If you set a breakpoint in the method and run the application, you will see the LoadCustomers method\n                        is being called when the Loaded event of the View is firing. However, there is a problem: Customers\n                        aren’t populating:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(586)}}),e._v(" "),a("figcaption",[e._v("Fig 04-020")])]),e._v(" "),a("p",[e._v("This is related to Property Change Events which we will fix in a later module.")]),e._v(" "),a("h3",[e._v("Demo: Using Blend Behaviors")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-005",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-Behaviors-Start\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-005"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-006",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-Behaviors-End\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-006"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In the last demo we created a Behavior through Attached Properties. Now let’s look at how you can\n                        achieve the same thing quickly using the built-in Behaviors of the Blend SDK. To do that we switch\n                        to Blend and open the same solution. Go to the Projects tab, expand Customers, find the\n                        CustomerListView and open it.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now click on the Assets tab, Behaviors, and after selecting the UserControl in the Object and\n                        Timeline double click the CallMethodAction to add it as a child. Several steps are completed\n                        automatically for you at this point – Blend has:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Added references to two libraries that are part of the Blend SDK")]),e._v(" "),a("li",[e._v("Added a XAML XML namespace to facilitate access to those libraries")]),e._v(" "),a("li",[e._v("Added the CallMethodAction with several lines of XAML to my UserControl")])]),e._v(" "),a("p",[e._v("\n                        Now, back in Visual Studio, we will finish filling out the properties of that Behavior. In the\n                        References list in Solution Explorer you will see that it has added the following references:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Microsoft.Expression.Interactions")]),e._v(" "),a("li",[e._v("System.Windows.Interactivity")])]),e._v(" "),a("p",[e._v("\n                        These are from the Blend SDK. In the CustomerListView you can see it added corresponding XML\n                        namespaces so we can access the stuff that is in those libraries from our XAML.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"\nxmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-021")])]),e._v(" "),a("p",[e._v("Scrolling down you see that Blend has added some more XAML:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<i:Interaction.Triggers>\n    <i:EventTrigger EventName="MouseLeftButtonDown">\n        <ei:CallMethodAction />\n    </i:EventTrigger>\n</i:Interaction.Triggers>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-022")])]),e._v(" "),a("p",[e._v("\n                        It added an Attached Property that is a Triggers collection, it added a Trigger with the\n                        MouseLeftButtonDown which we need to change to the Loaded event. It also added a CallMethodAction.\n                        The CallMethodAction needs to know what it is going to call so we need to set the TargetObject\n                        property and MethodName property:\n                    ")]),e._v(" "),a("p",[e._v("\n                        We set the TargetObject to binding (just setting it to Binding in curly braces means the entire\n                        DataContext object – our ViewModel in this example). Then we set the MethodName property which we\n                        set to the LoadCustomers method (achieving the same thing as our Attached Behaviour did):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<ei:CallMethodAction TargetObject="{Binding}" MethodName="LoadCustomers" />')])]),e._v(" "),a("figcaption",[e._v("Fig 04-023")])]),e._v(" "),a("p",[e._v("\n                        Now remove the Attached Behavior from the root and run the application. We still have the bug where\n                        the Customers aren’t showing but we will fix that after we talk about Property Change Events a\n                        little bit.\n                    ")]),e._v(" "),a("h3",[e._v("Property Change Notifications")]),e._v(" "),a("p",[e._v("\n                        Property Change Notifications are essential to data-binding because they notify the binding when the\n                        underlying data has changed so that the binding can refresh and keep the data on screen in sync with\n                        the underlying data model.\n                    ")]),e._v(" "),a("p",[e._v("They can also be used to signal the View or a Behavior in the View to make some change not directly\n                        related to data-binding such as:\n                    ")]),e._v(" "),a("ul",[a("li",[e._v("Changing the visibility of some element")]),e._v(" "),a("li",[e._v("Kicking off an animation")]),e._v(" "),a("li",[e._v("Causing a visual state change")])]),e._v(" "),a("p",[e._v("\n                        There are two options for raising Property Change Notifications that a binding will automatically\n                        monitor. First is to make the Property a Dependency Property which has its own internal change\n                        notification mechanism that bindings are natively aware of. Second is to implement the\n                        INotifyPropertyChanged (INPC) Interface which requires declaration of a Property Changed event and\n                        firing that event in the set block of each Property on the object.\n                    ")]),e._v(" "),a("p",[e._v("\n                        For your ViewModel and Model objects in MVVM INotifyPropertyChanged is more appropriate because\n                        Dependency Property declarations are verbose and require your object to inherit from Dependency\n                        Object both of which make it a heavyweight approach to achieve the goal of change notifications in\n                        Model and ViewModel objects.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Leveraging INotifyPropertyChanged")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-008",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-PropertyChanged-Start\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-008"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-009",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-PropertyChanged-End\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-009"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In the last demo we hooked up some Behaviors to populate our Customers OnLoaded instead of in the\n                        constructor. However, we introduced a bug where the Customers were being retrieved but they are not\n                        showing up on screen. Usually that means that data binding is not being notified when something\n                        happens after the initial XAML parsing is done - such as the Loaded event. To fix this issue all we\n                        need to do is make it so our ViewModel implements INotifyPropertyChanged. So modify\n                        CustomerListViewModel so that it implements INotifyPropertyChanged:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class CustomerListViewModel : INotifyPropertyChanged")])]),e._v(" "),a("figcaption",[e._v("Fig 04-024")])]),e._v(" "),a("p",[e._v("\n                        Stub the method out using the Visual Studio Ctrl +. enter shortcut. This will add the\n                        PropertyChanged event to the bottom of our class. Next we use a delegate trick where we assign an\n                        empty anonymous method in as a subscriber. That means that subscriber is always in the list and you\n                        never have to worry about property change being null:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event PropertyChangedEventHandler PropertyChanged = delegate { };")])]),e._v(" "),a("figcaption",[e._v("Fig 04-025")])]),e._v(" "),a("p",[e._v("\n                        Now we need to go to the properties of our ViewModel and fire that event when they change. Since you\n                        are now going to be raising an event when they change you need to make sure the value actually\n                        changed:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public ObservableCollection<Customer> Customers\n{\n    get\n    {\n        return _customers;\n    }\n    set\n    {\n        if (_customers != value)\n        {\n            _customers = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("Customers"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-026")])]),e._v(" "),a("p",[e._v("\n                        We compare the value being set to the current value of the underlying member variable as long as it\n                        is different than we set our member variable and raise the PropertyChanged event signalling that it\n                        is for this particular property.\n                    ")]),e._v(" "),a("p",[e._v("\n                        For completeness, you can do the same thing for the SelectedCustomer. This isn't really necessary\n                        since the SelectedCustomer is always set by the View but you should really have all the publicly\n                        exposed properties on your INotifyPropertyChanged object follow the pattern.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now that we raise PropertyChanged when Customers are set after the fact in the Loaded event we can\n                        start up and see that our problem is fixed. Now our Customers populate, and they do so\n                        asynchronously in the Loaded event handler showing the data once the Customers property has been set\n                        because the binding was notified about the event.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Another place where you might need to do this is in your Model objects. Let's say we have another\n                        button on our screen that ends up changing a customer object behind the scenes:\n                    ")]),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Button Content="Change Customer"\n    HorizontalAlignment="Left"\n    Margin="80,0,0,0"\n    VerticalAlignment="Top"\n    Width="100"\n    Click="OnChangeCustomer" />\n                ')])]),e._v(" "),a("figcaption",[e._v("Fig 04-027")])]),e._v(" "),a("p",[e._v("For speed (but anti-MVVM) we will hook-up a change event in the code-behind:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private void OnChangeCustomer(object sender, RoutedEventArgs e)\n{\n    var cust = customerDataGrid.SelectedItem as Customer;\n    cust.FirstName = "Changed in background";\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-028")])]),e._v(" "),a("p",[e._v("\n                        We are really just doing this to emphasize how there are potentially different code paths in your\n                        application that end up modifying the objects that you are binding to and when that happens those\n                        objects also need to raise change events or the screen wont update.\n                    ")]),e._v(" "),a("p",[e._v('\n                        In the code above we are taking the selected item in the DataGrid, getting a reference to it and\n                        programmatically setting the FirstName to "Changed in background".\n                    ')]),e._v(" "),a("p",[e._v("\n                        If you now run the application and click the Change Customer button the name doesn't change on\n                        screen even though we know in the background the FirstName property has been changed. We can fix\n                        this by going to our Customer Model object definition and ensure that it also implements\n                        INotifyPropertyChanged, stub the method out, and use the delegate trick again:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public event PropertyChangedEventHandler PropertyChanged = delegate { };")])]),e._v(" "),a("figcaption",[e._v("Fig 04-029")])]),e._v(" "),a("p",[e._v("\n                        Now in the FirstName property modify the set block to add the PropertyChanged event. This pattern\n                        should really be applied to all the properties in the Model but as this is just a demo we will limit\n                        our changes to the FirstName property.\n                    ")]),e._v(" "),a("p",[e._v("Now if you run the application, select a customer, and click the Change Customer button you will see\n                        the screen updates properly.\n                    ")]),e._v(" "),a("h3",[e._v("Demo: Custom Blend Behavior with INotifyPropertyChanged Trigger")]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-010",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-CustomBehavior-Start\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-010"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("div",{staticClass:"example"},[a("div",{staticClass:"input-group"},[a("input",{attrs:{id:"Ex04-011",type:"text",value:"C:\\Development Tutorials\\Pluralsight-Courses\\WPF MVVM In Depth\\Module 4\\MVVMCommsDemo-CustomBehavior-End\\MVVMCommsDemo.sln"}}),e._v(" "),a("span",{staticClass:"input-group-btn"},[a("button",{staticClass:"btn",attrs:{"data-clipboard-target":"#Ex04-011"}},[a("img",{attrs:{src:"/./src/assets/clippy.svg",width:"13",alt:"Copy to clipboard"}})])])])]),e._v(" "),a("p",[e._v("\n                        In this demo we will show the combination of Property Changed Notifications as a communication\n                        method from ViewModel to View and a Custom Behavior using the Blend SDK. The scenario we are going\n                        to address is one where we want to send alerts to the screen when stuff happens in the background.\n                        To do that we are going to need a Custom Behavior that show the alerts as they arrive in a Content\n                        Control. To create a Custom Behavior using the Blend SDK you have to reference the Blend SDK (which\n                        we did in a previous demo).\n                    ")]),e._v(" "),a("p",[e._v("\n                        Add a new class called ShowNotificationMessageBehavior. Make the class public and inherit from\n                        Behavior of T where T is a ContentControl:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class ShowNotificationMessageBehavior : Behavior<ContentControl>")])]),e._v(" "),a("figcaption",[e._v("Fig 04-029A")])]),e._v(" "),a("p",[e._v("Next, using the propp code snippet, expose a property on the Behavior called Message of type string\n                        which can be set on the ViewModel through data binding (which means it will need to be a Dependency\n                        Property):\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('public string Message\n{\n    get { return (string)GetValue(MessageProperty); }\n    set { SetValue(MessageProperty, value); }\n}\n\npublic static readonly DependencyProperty MessageProperty =\n    DependencyProperty.Register("Message", typeof(string),\n    typeof(ShowNotificationMessageBehavior), new PropertyMetadata(null, OnMessageChanged));')])]),e._v(" "),a("figcaption",[e._v("Fig 04-029B")])]),e._v(" "),a("p",[e._v("\n                        Now we want to add a change handler called OnMessageChanged so that we can monitor changes on this\n                        property and make the appropriate changes in the View when it happens.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("private static void OnMessageChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n    var behavior = ((ShowNotificationMessageBehavior)d);")])]),e._v(" "),a("figcaption",[e._v("Fig 04-030")])]),e._v(" "),a("p",[e._v("\n                        We take the incoming d object which will be the class on which this Dependency Property is defined –\n                        which is our Behavior and cast it to that. That lets us get to a property on our base class called\n                        AssociatedObject which will be a strongly typed reference to the ContentControl that you use this\n                        Behavior on.\n                    ")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("var behavior = ((ShowNotificationMessageBehavior)d);\nbehavior.AssociatedObject.Content = e.NewValue;\nbehavior.AssociatedObject.Visibility = Visibility.Visible;")])]),e._v(" "),a("figcaption",[e._v("Fig 04-030A")])]),e._v(" "),a("p",[e._v("\n                        Using that we can set the content to the value of the Message that was set and we can change its\n                        visibility to visible making it pop open in the UI. We also want to make our notification click\n                        dismissible so we are going to add another handler - an override of the base class OnAttached()\n                        method. In the OnAttached method we can subscribe to events on the element to which we attached this\n                        Behavior. In this case MouseLeftButton down as a click dismiss and change the visibility to\n                        collapsed at that point.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("protected override void OnAttached()\n{\n    AssociatedObject.MouseLeftButtonDown += (s, e) =>\n        AssociatedObject.Visibility = Visibility.Collapsed;\n}")])]),e._v(" "),a("figcaption",[e._v("Fig 04-031")])]),e._v(" "),a("p",[e._v("\n                        Now we need a Content Control to put this on. In the MainWindow View replace the current\n                        ContentControl with a two row Grid and a new ContentControl in the top row above our existing\n                        ContentControl in the bottom row:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height="Auto" />\n        <RowDefinition />\n    </Grid.RowDefinitions>\n    <ContentControl>\n        <i:Interaction.Behaviors>\n            <local:ShowNotificationMessageBehavior Message="{Binding NotificationMessage}" />\n        </i:Interaction.Behaviors>\n    </ContentControl>\n    <ContentControl Content="{Binding CurrentViewModel}"\n                    Grid.Row="1" />\n\n    <!--<Customers:CustomerListView />-->\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 04-032")])]),e._v(" "),a("p",[e._v("\n                        On that ContentControl you can see we add the InteractionBehaviors Collection (similar to the\n                        Triggers Attached Property we saw in a previous demo). We put our Behavior inside of that and we\n                        combine the Message property of our Behavior to something we expect our ViewModel to expose. We need\n                        to add some namespaces to the top of the file to bring in the i prefix (we can steal those from the\n                        previous View that already has a Behavior in it). I also need to add in the i prefix pointing to the\n                        Interactivity namespace which the Behaviors Attached Property resides in.\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"')])]),e._v(" "),a("figcaption",[e._v("Fig 04-033")])]),e._v(" "),a("p",[e._v("\n                        Now we need to implement the NotificationMessage in the MainWindowViewModel class. Make the class\n                        inherit from INotifyPropertyChanged and add the NotificationMessage Property to the ViewModel:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("public class MainWindowViewModel : INotifyPropertyChanged\n    {\n        public MainWindowViewModel()\n        {\n            CurrentViewModel = new CustomerListViewModel();\n        }\n        public object CurrentViewModel { get; set; }\n\n        public event PropertyChangedEventHandler PropertyChanged = delegate { };\n    }")])]),e._v(" "),a("figcaption",[e._v("Fig 04-033A")])]),e._v(" "),a("p",[e._v("Because adding properties with the INPC pattern to them is so common I have my own code snippet to do\n                        it which is propc:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('private string _NotificationMessage;\n\npublic string NotificationMessage\n{\n    get { return _NotificationMessage; }\n    set\n    {\n        if (value != _NotificationMessage)\n        {\n            _NotificationMessage = value;\n            PropertyChanged(this, new PropertyChangedEventArgs("NotificationMessage"));\n        }\n    }\n}')])]),e._v(" "),a("figcaption",[e._v("Fig 04-034")])]),e._v(" "),a("p",[e._v("Type is string, the name of the property is NotificationMessage and you can see that my code snippet\n                        stubs out the standard INotifyProperty changed pattern in the set block of that property .\n                    ")]),e._v(" "),a("p",[e._v("\n                        Now we need to add code that will actually push some values into that NotificationMessage Property.\n                        For this we will use a simple Timer. Add a Timer that ticks every 5 seconds to the\n                        MainWindowViewModel’s constructor:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' _timer.Elapsed += (s, e) => NotificationMessage = "At the tone the time will be: " + DateTime.Now.ToLocalTime() + " beep.";\n_timer.Start();')])]),e._v(" "),a("figcaption",[e._v("Fig 04-035")])]),e._v(" "),a("p",[e._v("\n                        Run the application and if you watch the top of the MainWindow you will see the message appear:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(587)}}),e._v(" "),a("figcaption",[e._v("Fig 04-036")])]),e._v(" "),a("p",[e._v("\n                        If you left click on the message text you can dismiss it, and five seconds later another one. So our\n                        Custom Behavior is acting as a nice little bridge between our View and ViewModel for our ViewModel\n                        to be able to push information up to the View and make modifications in the View but notice it\n                        required no code behind to do this just a nice declarative modification to a ContentControl using\n                        our Behavior.\n                    ")]),e._v(" "),a("h3",[e._v("Summary")]),e._v(" "),a("p",[e._v("\n                        As you saw in this module you have a variety of ways in which you can handle communication between\n                        your Views and ViewModels in MVVM that still allow them to remain loosely coupled from one another.\n                        You saw that Commands are a primary form of communication from View to ViewModel and should\n                        typically be used when a user action in the View (such as clicking on something, or some kind of\n                        input gesture) is really an imperative request from the User for the app to do something for them.\n                    ")]),e._v(" "),a("p",[e._v("\n                        Behaviors are another way to setup a communication path. Where the Behavior might fire a Command for\n                        some Control that does not directly support Commands, set a property or call a method on the\n                        ViewModel or possibly provide a path for the ViewModel to trigger a change in the View\n                    ")]),e._v(" "),a("p",[e._v("PropertyChanged notifications through a binding can always be used as a communication path to trigger\n                        behaviour in either direction.\n                    ")]),e._v(" "),a("p",[e._v("In the next module we'll finish out the structural topics you need to understand to apply MVVM\n                        correctly including how you should name and locate your MVVM parts, how to build out heirarchies of\n                        Views and ViewModels and how to work with Dependency Injection in your ViewModels and Services.\n                        We'll also touch on an overview of what MVVM frameworks are available to you. .\n                    ")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h4",[e._v("Course Overview")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-01-course-overview","active-class":"active"}},[n("a",[e._v("Course Overview")])]),e._v(" "),n("p",[e._v("\n                    Data binding is one of the most powerful and important capabilities in WPF applications for building\n                    data-driven, loosely coupled, maintainable applications. In this course you will learn how to use the\n                    end-to-end capabilities of data binding in WPF including both the most common features as well as more\n                    advanced capabilities.\n                ")]),e._v(" "),n("h4",[e._v("Data Binding Overview")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-02-databinding-overview","active-class":"active"}},[n("a",[e._v("Data Binding Overview")])]),e._v(" "),n("p",[e._v("\n                    Hi there. This is Brian Noyes, and in this first module we're going to go through a high-level overview of\n                    what data binding is all about in WPF, why you want to use it, and what some of the fundamental concepts are\n                    that you'll need to master to understand the rest of the course, where we'll dive deep enough to turn you into\n                    a data binding ninja.\n                ")]),e._v(" "),n("p",[e._v("\n                    First I'm going to go through a high-level overview of what data binding is all about and why you want to use\n                    it, what some of the benefits are, and what it does for you. Next I'll talk about some of the key concepts,\n                    things like bindings and DataContext, and Change Notifications, and the role that they play in using data\n                    binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    Then I'll go a little bit deeper on DataContext and talk about the scoping mechanisms of DataContext and how\n                    you can use it to control what data flows to what part of your views.\n                ")]),e._v(" "),n("p",[e._v("\n                    And then we'll finish off the module with a series of demos that starts off with a data-driven form, not using\n                    data binding at all, then transforming that to use data binding to see some of the benefits there, and\n                    finally, cleaning that up a little bit by consolidating your data sources into a single DataContext object.\n                ")]),e._v(" "),n("h4",[e._v("Data Sources")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-03-data-sources","active-class":"active"}},[n("a",[e._v("Data Sources")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes, and in this module we're going to focus on data sources for data binding, where the\n                    data comes from to support your UI. Specifically, we're going to talk about the different kinds of data source\n                    objects that you can data bind to and some of the support those data objects may need to fully participate in\n                    data binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    First we're going to talk about Entity Data Sources, and this includes individual objects that you want to\n                    data bind to and their properties for something like a data entry form, as well as collections of entities for\n                    something like a DataGrid or a ComboBox. Next we're going to talk about Change Notifications. This is support\n                    that these entities will need in order to fully participate in data binding, meaning that if their properties\n                    can change behind the scenes, they've got to raise Change Notifications so that the binding can update the UI\n                    and keep it fresh with the real state of the data behind the scenes.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we're going to talk about some of the other aspects of the support that entities can have for data\n                    binding, inluding the ability to back out changes when multiple properties have been changed. Those are called\n                    EditableObjects, and CollectionViews, which are things that wrap collections when you data bind to them to\n                    maintain the notion of currency or what is the current object within the collection. Towards the end of the\n                    module, we'll start talking about other kinds of things besides entities including DataSets and XML Data\n                    Sources, and how you can go about data binding to those.\n                ")]),e._v(" "),n("h4",[e._v("Binding Core Concepts")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-04-binding-core-concepts","active-class":"active"}},[n("a",[e._v("Binding Concepts")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes. In this module, we're going to dive a little deeper into bindings and get into some\n                    of the core concepts of how you can have explicit control over exactly what a binding is doing with respect to\n                    its source objects and its paths and the direction of flow of data through that binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    First we're going to dive into binding sources. We've already seen in previous modules how bindings use the\n                    DataContext as their source by default. In this section we'll talk about the other options that you have\n                    there, including the RelativeSource bindings, ElementName bindings, and Source bindings where you can point to\n                    a explicit Source object through those properties on the binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we're going to get into Property Paths in a little more detail. We've seen simple paths that are just a\n                    property name in previous demos, and we've actually seen a couple of other examples that dot down. Here we'll\n                    just talk a little bit more about exactly what is supported, the fact that you can walk an entire object graph\n                    through the property path and even index into arrays\n                ")]),e._v(" "),n("p",[e._v("\n                    And also we'll talk a little bit about debugging bindings when they're not working and see how you can spot\n                    the errors for your bindings in the output window.\n                ")]),e._v(" "),n("p",[e._v("\n                    Finally, we'll close out this module with the mode and direction of bindings. Bindings flow from source to\n                    target, by default, and we've seen that you can have two-way bindings that flow from target to source as well.\n                    The binding mode property is the thing that lets you control this, and we'll also look into how the default\n                    direction is set for a given target property through its DependencyProperty metadata.\n                ")]),e._v(" "),n("h4",[e._v("Unleashing the Full Power of Bindings")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-05-unleashing-the-full-power-of-bindings","active-class":"active"}},[n("a",[e._v("Unleashing The Full Power Of Bindings")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes, and in this module we're going to dive deeper into bindings and look at a number of\n                    additional properties that let you unleash the full power of what a binding can do for you for specialized\n                    scenarios.\n                ")]),e._v(" "),n("p",[e._v("\n                    First up, we're going to look at a property called UpdateSourceTrigger, and this is a property on a binding\n                    that controls when data flows from the target to the source into a data binding scenario. The Default mode is\n                    when focus changes, but you'll see there's a number of other options there and I'll explain how that works.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we're going to talk about Converters. Convertors give you a lot of power because it allows you to insert\n                    an object between the source and the target object conceptually, hooked up through the binding, and the data\n                    will flow through that Converter. So as the data flows from the source to the target, you can change the value\n                    or the type of the object that's being used to set the target property. And, likewise, in a two-way data\n                    binding scenario, as data flows from the target to the source, you can do a similar transformation either in\n                    value or in type.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we'll talk about Async Bindings. Normally, bindings all happen on the UI thread, but sometimes you may\n                    need to have the get and set block of your source property called on a background thread, and Async bindings\n                    allow you to do that.\n                ")]),e._v(" "),n("p",[e._v("\n                    Then we'll talk about Fallback values and this is really two separate properties on a binding, one called\n                    FallbackValue and one called TargetNullValue, that allow you to provide alternate values to be used when the\n                    source object can't be resolved properly.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we'll talk about FormatString. This is an automatic convertor of sorts, that lets you convert from the\n                    source property into a formatted string using any standard .NET FormatString to render out the value the way\n                    you want to present it to the user.\n                ")]),e._v(" "),n("p",[e._v("\n                    Finally, we'll finish off with a couple of specialized bindings called a MultiBinding and a PriorityBinding.\n                    These bindings allow you to aggregate multiple bindings into a collection, and in the case of the\n                    MultiBinding, you can come up with a single value based on the individual values of those multiple bindings.\n                    And in the case of the PriorityBinding you can pick from one of the child bindings which one to use based on a\n                    priority scheme. So let's dive right in and see how these modify the behavior of our bindings.\n                ")]),e._v(" "),n("h4",[e._v("Deep Dive into DataTemplates")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-06-deep-dive-into-data-templates","active-class":"active"}},[n("a",[e._v("Deep Dive Into Data Templates")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes, and in this module we're going to dive into Data Templates. Data Templates are a very\n                    powerful mechanism of WPF data binding that allows you to provide the visual structure for some data-bound\n                    object and have that mapped up at runtime as the objects get rendered out. So we'll look at how DataTemplates\n                    work and what the variations on DataTemplates are and how to use them.\n                ")]),e._v(" "),n("p",[e._v("\n                    First we'll talk about the broad concepts of DataTemplates and how they work in general, and how they get\n                    mapped out to the data objects that are being rendered out to provide the visual structure for rendering on\n                    the screen.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we'll talk about ExplicitDataTemplates, which are the most direct and simple way to use DataTemplates. As\n                    the name implies, it involves a direct hookup between the data-bound control and the template that should be\n                    used for a given collection or data object.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next we'll talk about ImplicitDataTemplates, which are a little more magical in the way that they work, but it\n                    involves an automatic selection of the appropriate DataTemplate based on the type of the data object that's\n                    going to be rendered, and this gives us an awful lot of power for handling heterogeneous collections of\n                    derived types of some data object type, and it becomes vitally important in Model-View-ViewModel scenarios,\n                    which we'll use in the demos to render out different Views for different ViewModel types.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll talk about DataTemplateSelectors, which give you a little more explicit control, but still dynamic\n                    control to switch which DataTemplate you use based on whatever logic you need to invoke to make that\n                    selection. And finally, we'll finish off this module with HierarchicalDataTemplates, which are just a\n                    specialized form of DataTemplate that work in hierarchical data model scenarios such as presenting data in\n                    TreeView control.\n                ")]),e._v(" "),n("h4",[e._v("Design Time Data Binding")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-07-design-time-data-binding","active-class":"active"}},[n("a",[e._v("Design Time Data Binding")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes. In this module, we're going to look into some of the Design Time Data features that\n                    Visual Studio has to help you get your UI's hooked up, data-bound, and even generate UI elements based on your\n                    data model.\n                ")]),e._v(" "),n("p",[e._v("\n                    We'll also look at how you can use sample data in the Design-Time environment to help get your UI laid out and\n                    to have that data to visualize what it's going to look like in the UI as you're designing it.\n                ")]),e._v(" "),n("p",[e._v("\n                    First, we're going to look at two windows within the Visual Studio environment, the Data Sources Window and\n                    the Properties Window.\n                ")]),e._v(" "),n("p",[e._v("\n                    Data Sources Window lets you generate data-bound UI elements based on your data model or hook up existing\n                    elements, and the Properties Window lets you hook up bindings to individual properties for the elements you're\n                    working with in the designer.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we're going to look at working with DataTemplates in the designer. Visual Studio carries over some\n                    features from Blend where you can actually design DataTemplates in the designer as a stand-alone resource, and\n                    then switch back into the main design mode of the designer when you're done.\n                ")]),e._v(" "),n("p",[e._v("\n                    Finally, we'll look at how you can use the overall feature that's referred to as Design Time Data, which is\n                    mainly a set of properties and markup extensions that you can use within your XAML that makes certain things\n                    available to the designer, but they go away at runtime. And this includes being able to pull in some sample\n                    data that will populate your UI in the designer, but not be there at runtime.\n                ")]),e._v(" "),n("h4",[e._v("Containers and Collection Controls")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-08-containers-and-collection-controls","active-class":"active"}},[n("a",[e._v("Containers and Collection Controls")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes. In this module, we're going to dive into some of the containment scenarios and the\n                    dynamic generation of contained controls based on data binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    We'll also look in more depth at the common collection controls, including ListBox, ComboBox, TabControl and\n                    DataGrid. And we'll finish off by talking a little bit more about collection views, which can be used to\n                    modify the collections you're data-bound to.\n                ")]),e._v(" "),n("p",[e._v("\n                    So first up, we're going to dive into what's really going on at runtime when you have a data-driven control\n                    and the composition that happens with the UI elements that are generated based on the data. I'll quickly\n                    explain what's going on in concept with bullets, and then we'll dive into a demo that hopefully makes it all\n                    clear, since it is dynamic in nature.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll review ComboBoxes and ListBoxes and the key data binding properties and behaviors there. We've\n                    seen a lot of this in previous demos, but in those previous demos I just kind of glanced over it and didn't\n                    focus one at a time on the properties you'll care about.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll get into TabControls, which TabControls are more of a structural element, but they can be\n                    data-driven themselves. So we'll see a common scenario where you can use TabControls for child view\n                    containment that can be dynamically-driven through data binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll get into the Ubiquitous DataGrid and we'll focus on some of the key properties that you'll need to\n                    know to really drive a DataGrid in normal data binding scenarios. There are, naturally, all kinds of deep,\n                    dark corners in the DataGrid and lots of fancy customizations of appearance and things that are out of scope\n                    for this course. What I'm going to focus on are the things that really drive the behavior of the DataGrid,\n                    based on it being data-bound.\n                ")]),e._v(" "),n("p",[e._v("\n                    Finally, we'll finish out this module by revisiting Collection Views. I talked about the ICollectionView\n                    interface in an earlier module, and we looked at the notion of currency driven by Collection Views. Here we're\n                    going to focus on some other things it can do for you in terms of manipulating the collection that you're\n                    working with to do things like sorting, filtering, grouping, and master-details presentations.\n                ")]),e._v(" "),n("h4",[e._v("Data Input Validation")]),e._v(" "),n("router-link",{attrs:{to:"/wpf-databinding-in-depth-09-data-input-validation","active-class":"active"}},[n("a",[e._v("Data Input Validation")])]),e._v(" "),n("p",[e._v("\n                    Hi, this is Brian Noyes. In this last module, we're going to look into the validation mechanisms of data\n                    bindings and how you can use it to provide validation indications to a user when they put in bad data.\n                ")]),e._v(" "),n("p",[e._v("\n                    First we're going to talk about the simplest mechanism to use, which is to throw an exception when you get bad\n                    data and to turn on a flag on the binding to have it give validation indications based on that.\n                ")]),e._v(" "),n("p",[e._v("\n                    After that, we'll look at a built-in mechanism in WPF called ValidationRules. ValidationRules are objects that\n                    you implement that encapsulate a rule and get evaluated by a binding when you hook it up to it. If that rule\n                    returns an error, then you'll get an error indication on the screen.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll look at an interface that's been around since .NET 1.0 called IDataErrorInfo, which is a standard\n                    mechanism for indicating validation errors in combination with data binding. When you use IDataErrorInfo, the\n                    object that you're binding to implements this interface and it will be queried for errors after the properties\n                    are set.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll look at INotifyDataErrorInfo, which was added in .NET 4.5 and supports asynchronous validation.\n                    It's very similar to IDataErrorInfo, which is a synchronous API, but it supports the notion that you may need\n                    to make an asynchronous call to something like a service to determine whether an input value is valid or not,\n                    and then once you get the results back, then you want to provide the invalid indication.\n                ")]),e._v(" "),n("p",[e._v("\n                    Next, we'll talk briefly about some binding events that are available that can be handy in dealing with\n                    validation and other scenarios as well. We'll talk about how you can customize the validation indications that\n                    the built-in controls use for presenting validation errors and how you can provide things like ToolTips with\n                    the error strings in them.\n                ")]),e._v(" "),n("p",[e._v("\n                    And then we'll finish off this module by talking about DataAnnotations, which are a standard mechanism in .NET\n                    for indicating the validation rules associated with the property through attributes.\n                ")]),e._v(" "),n("h4",[e._v("Course Wrap Up")]),e._v(" "),n("p",[e._v("\n                    So that completes our course on WPF data binding in depth. You got a good end-to-end coverage of all the\n                    capabilities of WPF data binding, starting with the data binding Overview, where we covered the basics of\n                    bindings and DataContext, and so on.\n                ")]),e._v(" "),n("p",[e._v("\n                    We got into Data Sources and what kinds of objects you can work with, what types of interfaces and support\n                    those objects need, as well as what types of collections you want to work with for data binding. We got into\n                    the Binding Core Concepts, talking about things like alternate ways of expressing what the source object is,\n                    what the path on that source object is, and what the direction of flow of data with the Mode property is.\n                ")]),e._v(" "),n("p",[e._v("\n                    We got into the more advanced properties of data bindings and talked about things like doing Async bindings\n                    and the UpdateSourceTrigger property to trigger when data flows, and using FallbackValues and StringFormats,\n                    and so on.\n                ")]),e._v(" "),n("p",[e._v("\n                    We covered DataTemplates in depth, and you saw that those really start to unleash the power of data binding to\n                    allow you to have custom rendering of your data-bound objects in any kind of container control that's going to\n                    do data binding.\n                ")]),e._v(" "),n("p",[e._v("\n                    We looked at the Design Time features in Visual Studio and a little bit in Blend, that help you get really\n                    productive with data binding, dragging and dropping your way to a data-bound UI and generating the UI elements\n                    and getting them a decent layout to start with.\n                ")]),e._v(" "),n("p",[e._v("\n                    We dove under the covers a little bit and showed you what's really going on when data binding occurs in\n                    building up the visual tree based on the data-bound objects.\n                ")]),e._v(" "),n("p",[e._v("\n                    And we reviewed the common collection controls and made sure you really knew how to use all the properties\n                    associated with data bindings for things like ComboBoxes, ListBoxes, TabControls, and DataGrids, as well as\n                    CollectionViewSources.\n                ")]),e._v(" "),n("p",[e._v("\n                    And finally, we finished off in this module with Validation.\n                ")]),e._v(" "),n("p",[e._v("So that pretty much wraps it up. Thank you very much for viewing the course. Please recommend it to your\n                    friends. Be sure to come back and watch parts again if you need to review concepts and review the code, and\n                    hopefully at this point you feel very well-equipped to go start hooking up your complex data-bound UIs for\n                    your business applications.\n                ")])],1)])])]);
},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Course Contents")])])}]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Moving on with Vue CLI")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("App Overview")]),e._v(" "),a("p",[e._v("In the last section we wrapped up our identicon project and in this video we're going to start\n                        talking about the next application which we will be working on in this course. The next\n                        application will be a lot more ambitious with more features and complexity to it.\n                    ")]),e._v(" "),a("p",[e._v("First let's take a look at a mock up of what we're going to build:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(117)}}),e._v(" "),a("figcaption",[e._v("Fig 02-001")])]),e._v(" "),a("p",[e._v('So we\'re going to make a sort of YouTube browsing application. This application is going to allow\n                        users to enter a search term at the top of the page in the text input field. They might search\n                        for a term like say "archery". Once they submit their search criteria we will use the YouTube\n                        API to search for the term they just entered. We will receive a list of videos that match that\n                        search term.\n                    ')]),e._v(" "),a("p",[e._v("We will display the list of videos on the right hand side of the screen. Then any time\n                        a user click on one of these videos we will display a larger detail on the left hand side where\n                        the user can play the video and view a quick description of the video itself.\n                    ")]),e._v(" "),a("p",[e._v("This application will test our knowledge of Vue and ensure that we learn many different aspects\n                        of working with Vue inside an application.\n                    ")]),e._v(" "),a("h3",[e._v("App Challenges")]),e._v(" "),a("p",[e._v("We'll now continue by talking about some of the problems which we're\n                        going to have to address as we start working on this app. And we'll also of course talk about\n                        some possible solutions as well. So I think there are at least four big issues that we are going\n                        to run into over time:\n                    ")]),e._v(" "),a("table",{staticClass:"table table-striped table-bordered"},[a("thead",{staticClass:"thead-dark"},[a("tr",[a("th",[e._v("Problem")]),e._v(" "),a("th",[e._v("Solution")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Need to somehow search for videos on YouTube")]),e._v(" "),a("td",[e._v("Sign up for the YouTube API and use it to search for videos based on the user's entered\n                                search term.\n                            ")])]),e._v(" "),a("tr",[a("td",[e._v("Need to show some different elements on the screen (search bar, video player, video\n                                list)\n                            ")]),e._v(" "),a("td",[e._v("Use Vue to create a couple of components, each of which have a distinct job.")])]),e._v(" "),a("tr",[a("td",[e._v("Need a place to write our code and run it")]),e._v(" "),a("td",[e._v("Use a tool called Vue CLI to generate a new project boilerplate.")])]),e._v(" "),a("tr",[a("td",[e._v("Need to handle user input, like typing in the search term and clicking on videos")]),e._v(" "),a("td",[e._v("Use the same Vue directives, methods, and computed functions that we just learned about\n                            ")])])])]),e._v(" "),a("p",[e._v("So let's continue in the next section where we're going to start by generating a new project -\n                        making use of Vue CLI.\n                    ")]),e._v(" "),a("h3",[e._v("Generating a New Project")]),e._v(" "),a("p",[e._v("In the last section we talked about how we're going to make use of a tool called Vue CLI to\n                        generate a new project boilerplate. We're using this tool because setting up your own Vue\n                        project from scratch takes a little bit of time and it's not the best thing to get started with\n                        when you're first trying to start learning Vue.\n                    ")]),e._v(" "),a("p",[e._v("So we're going to install Vue CLI at our terminal and then we'll use it to generate a new\n                        project. To install Vue CLI enter "),a("span",{staticClass:"terminal"},[e._v("npm install -g @vue/cli")]),e._v(" in\n                        a terminal window.")]),e._v(" "),a("p",[e._v("Now while that's being installed I want to show you the documentation for Vue CLI very quickly.\n                        It can be found on "),a("a",{attrs:{href:"https://github.com/vuejs/vue-cli"}},[e._v("GitHub")]),e._v(". There's not a\n                        tremendous amount of documentation on here because Vue CLI is still in active\n                        development right now. Towards the bottom of the page you will find a link to the full\n                        documentation. Following this link will take you to some information on how to do further\n                        configuration of the project and eventually I would expect to see some deployment directions on\n                        here as well.\n                    ")]),e._v(" "),a("p",[e._v("Back in our terminal we can now use this tool to generate a new project so I'm going to make sure\n                        I am inside of a directory where I want to create a workspace folder of sorts. For this\n                        application I created a directory at "),a("span",{staticClass:"terminal"},[e._v("C:\\DevelopmentTutorials\\video-browser")]),e._v(".\n                        Inside of this directory I'm going to run the following command: "),a("span",{staticClass:"terminal"},[e._v("vue create video-browser")]),e._v(". When you run this command you might\n                        be prompted to answer several questions about the new project you are configuring. If you do\n                        just select any of the default options that are presented.")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Why Use Vue CLI?")]),e._v(" "),a("p",[e._v("In the previous section we made use of Vue CLI to generate a new project. It looks like my\n                        installation is now complete and I'm given the directions to change directories to video-browser\n                        and run the following command "),a("span",{staticClass:"terminal"},[e._v("npm run serve")])]),a("p",[e._v("Let's have a quick discussion about why we are making use of the Vue CLI project generator - why\n                        do we need all this infrastructure and preconfigured stuff anyway?\n                    ")]),e._v(" "),a("p",[e._v("Let's take a look at a diagram to get a better sense of why:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(118)}}),e._v(" "),a("figcaption",[e._v("Fig 02-002")])]),e._v(" "),a("p",[e._v("So above is an illustration of how we were running when we used CodePen in the previous\n                        couple of examples. We automatically loaded up the Vue JS file by adding it as a dependency\n                        to the project. We also then added a little bit of code directly on CodePen. The two together\n                        formed a usable application. The key thing there to keep in mind is that all the code that\n                        you and I wrote - like the Javascript code and the Html markup were all inside of essentially\n                        a single file authored directly on CodePen.\n                    ")]),e._v(" "),a("p",[e._v("When we start working on real projects we don't have the luxury of only having to create one\n                        single file like we did in the previous examples. With real Vue project we much more frequently\n                        make a collection of files - so many different files form one single application. Vue CLI aids\n                        us in this process.\n                    ")]),e._v(" "),a("p",[e._v("So, with Vue CLI, we get the ability to instead make many different files each of which might\n                        have one individual or distinct purpose inside of our application:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(119)}}),e._v(" "),a("figcaption",[e._v("Fig 02-003")])]),e._v(" "),a("p",[e._v("So we might have one file that has some code for fetching videos and then maybe another one\n                        that's in charge of the search bar at the top of our application. Another one for playing a\n                        video and then on more for maybe showing a list of videos to the user.\n                    ")]),e._v(" "),a("p",[e._v("So all these different files are going to come together to form our one usable application.")]),e._v(" "),a("p",[e._v("Here's the thing about JavaScript though - out of the box it doesn't offer a great way to take\n                        all these different files, combine them down to one single file, send that file to the user's\n                        browser and have our application start up and be executed.\n                    ")]),e._v(" "),a("p",[e._v("So to take all these different files and combine them together we make use of a tool called\n                        webpack.")]),e._v(" "),a("figure",[a("a",{attrs:{href:"https://webpack.js.org/"}},[a("img",{attrs:{src:n(120)}})]),e._v(" "),a("figcaption",[e._v("Fig 02-004")])]),e._v(" "),a("p",[e._v("Essentially webpack's purpose is to look at a big collection of files and possibly\n                        dependencies as well (like Vue JS) and combine them all down to one single file which can then\n                        be sent down to your users browser when they try to make use of your application.\n                    ")]),e._v(" "),a("p",[e._v("The webpack tool is one of the big reasons that we're making use of Vue CLI. webpack is somewhat\n                        notorious for being a little difficult to set up out of the box. So by making use of Vue CLI it\n                        automatically sets up webpack for us and chooses a lot of very sensible configuration defaults.\n                    ")]),e._v(" "),a("figure",[a("a",{attrs:{href:"https://babeljs.io/"}},[a("img",{attrs:{src:n(121)}})]),e._v(" "),a("figcaption",[e._v("Fig 02-005")])]),e._v(" "),a("p",[e._v("Along with Vue CLI we also get access to Babel preconfigured for us right of the box. You may\n                        have heard of Babel before as well. Babel allows us to write ES2015, 16, 17 and so on code that\n                        can be safely executed inside of a user's browser even if their browser does not have support\n                        for a particular dialect of Javascript which we might want to use. Just like webpack, Babel is\n                        also included automatically inside of Vue CLI and it has a lot of very sensible configuration\n                        defaults already set up for us.\n                    ")]),e._v(" "),a("p",[e._v("So that's why we are making use of Vue CLI. It does all this setup for us and we don't have to\n                        waste any time labouring over documentation and figuring out how to set that stuff up.\n                    ")]),e._v(" "),a("p",[e._v("Let's continue in the next section where we're going to start up our application and get a better\n                        sense of all the different files and folders that were created for us automatically when we just\n                        generated the project.\n                    ")]),e._v(" "),a("h3",[e._v("Project Walkthrough")]),e._v(" "),a("p",[e._v("In the last section we spoke about how we get webpack and Babel setup for us for free whenever we\n                        make use of Vue CLI.\n                    ")]),e._v(" "),a("p",[e._v("Back in the terminal change directory into the newly created video browser directory and start\n                        the project by running the command:\n                    ")]),e._v(" "),a("pre",{staticClass:"prettyprint"},[e._v("npm run serve")]),e._v(" "),a("p",[e._v("Throughout the rest of this course we're going to be using this command to start our project up.\n                        Now when you run that command you'll see some information about starting up the development\n                        server. The "),a("code",{staticClass:"prettyprint"},[e._v("npm run serve")]),e._v(" command starts up a local server that\n                        starts up Babel and webpack, takes all of our project files and bundles them together into one\n                        single Javascript file where it can then be served up into the browser. The command will also\n                        open a browser window pointing to the following address:\n                    ")]),e._v(" "),a("pre",{staticClass:"prettyprint"},[e._v("localhost:8080")]),e._v(" "),a("p",[e._v("This is where our project is hosted.")]),e._v(" "),a("p",[e._v("You'll also notice that there is a little bit of default content already visible on the screen\n                        here.\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(122)}}),e._v(" "),a("figcaption",[e._v("Fig 02-006")])]),e._v(" "),a("p",[e._v("The code to create this content is generated automatically when we run Vue CLI to setup our new\n                        project.\n                    ")]),e._v(" "),a("p",[e._v("Let's now open up our code editor inside of the project directory and take a look at some of the\n                        different files and folders that were generated for us:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(123)}}),e._v(" "),a("figcaption",[e._v("Fig 02-007")])]),e._v(" "),a("p",[e._v("You'll see some different files and folders that were created for us automatically when we\n                        generated our project.\n                    ")]),a("p",[e._v("Inside the node_modules directory is a list of all the different dependencies that our project\n                        relies or depends on.\n                    ")]),e._v(" "),a("p",[e._v("Underneath that you'll find the public directory inside which is a very important file -\n                        index.html:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <link rel="icon" href="<%= BASE_URL %>favicon.ico">\n    <title>video-browser</title>\n  </head>\n  <body>\n    <noscript>\n      <strong>We\'re sorry but video-browser doesn\'t work properly without JavaScript enabled. Please enable it to continue.</strong>\n    </noscript>\n    <div id="app"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>')]),e._v(" "),a("figcaption",[e._v("Fig 02-008")])]),e._v(" "),a("p",[e._v("Anytime someone tries to visit our application by coming to our server in their web browser the\n                        index.html file is going to be loaded up automatically. In the Html you should see a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with an "),a("code",{staticClass:"prettyprint"},[e._v("id")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("app")]),e._v(" just like the code we wrote back in CodePen.\n                    ")]),e._v(" "),a("p",[e._v("This "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" represents the root location of where our app is going\n                        to be booted up.\n                    ")]),e._v(" "),a("p",[e._v("Then inside the src directory you will find a bunch of different files and folders that are\n                        related to the actual implementation of our Vue app. We're gong to be spending the vast majority\n                        of our time inside this src directory.\n                    ")]),e._v(" "),a("p",[e._v("Let's start off by looking at the "),a("span",{staticClass:"filename"},[e._v("main.js")]),e._v(" file. Inside of this file\n                        you'll find some very plain\n                        Javascript code and towards the bottom you'll find a function call to create a new Vue instance.\n                        You'll notice that there's also this "),a("code",{staticClass:"prettyprint"},[e._v("render")]),e._v(" option in here and\n                        also a "),a("code",{staticClass:"prettyprint"},[e._v("$mount")]),e._v(" function call as well. We'll just ignore those\n                        two little pieces of code for right now but we'll definitely come back to those very shortly and\n                        talk about what their purposes are.\n                    ")]),e._v(" "),a("p",[e._v("You'll notice that, also inside the src directory, is an App.vue file. Notice the extension there\n                        - it's .vue rather than being .js or anything like that. Let's open up the file and have a look:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>")]),e._v(" "),a("figcaption",[e._v("Fig 02-009")])]),e._v(" "),a("p",[e._v("All this Html is nested inside of a template tag and then below all that Html you'll find what\n                        looks like another piece of Html - a script tag inside which there is some Javascript code.\n                    ")]),e._v(" "),a("p",[e._v("So I don't know about you but this definitely looks like one weird little file.")]),e._v(" "),a("p",[e._v("So let's talk about what's going on here in the next section.")]),e._v(" "),a("h3",[e._v("Vue Files")]),e._v(" "),a("p",[e._v("In the last section we started looking at some of the different files and folders that were\n                        generated for us automatically when we made our new project. In particular we opened up the\n                        App.vue file and inside of there we saw some very interesting looking syntax.\n                    ")]),e._v(" "),a("p",[e._v("So at the top we see a "),a("code",{staticClass:"prettyprint"},[e._v("template")]),e._v(" tag and a the bottom we see a\n                        "),a("code",{staticClass:"prettyprint"},[e._v("script")]),e._v(" tag. So let's talk about what's going here.\n                    ")]),e._v(" "),a("p",[e._v("First off, a quick reminder of what we were doing previously over inside of CodePen:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(124)}}),e._v(" "),a("figcaption",[e._v("Fig 02-010")])]),e._v(" "),a("p",[e._v("This figure demonstrates one possible way of structuring a Vue app. We might define our Vue\n                        template inside of some Html like an actual Html document and we might create our Vue instance\n                        over in some Javascript code.\n                    ")]),e._v(" "),a("p",[e._v("We then later on said that alternatively we could also create this Vue template inside of our\n                        Javascript:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(125)}}),e._v(" "),a("figcaption",[e._v("Fig 02-011")])]),e._v(" "),a("p",[e._v("We saw an example of that over in CodePen when we used those back tick characters to insert our\n                        template directly attached to our Vue instance.\n                    ")]),e._v(" "),a("p",[e._v("So that covers two different ways of structuring a Vue application.")]),e._v(" "),a("p",[e._v("However, what you're seeing inside of the App.vue file is yet another way of structuring your Vue\n                        code:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n                    ")]),e._v(" "),a("figcaption",[e._v("Fig 02-012")])]),e._v(" "),a("p",[e._v("So in this scenario we are making use of a paradigm called Vue files. The idea behind a Vue file\n                        is that you'll have exactly one file that is responsible for creating a single component inside\n                        of your application.\n                    ")]),e._v(" "),a("p",[e._v("A single component is created as a reusable piece of code that can be used all over your\n                        application many times. Inside the single Vue file you'll find not only the template that your\n                        Vue file or your Vue component is going to use but you'll also find all the Javascript code\n                        relate to it as well.\n                    ")]),e._v(" "),a("p",[e._v("So in other words, inside of one single file, we get access to all of our Html for this Vue\n                        component, we get all the Javascript for it, and in future demos we will also locate all the CSS\n                        for this component as well:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(126)}}),e._v(" "),a("figcaption",[e._v("Fig 02-013")])]),e._v(" "),a("p",[e._v("So - one file that contains all the code related to one component or one piece of our application\n                        as we start to implement our video browser application you and I are going to end up with a\n                        couple of different Vue files each of which are responsible for implementing one distinct part\n                        of this application.\n                    ")]),e._v(" "),a("p",[e._v("So we might make one Vue file that is responsible for the search bar at the top of the browser,\n                        we might make another single Vue file that is responsible for the search results list over the\n                        right-hand side, and another that is responsible for the big video detail here in the middle\n                        that's going to eventually play a video.\n                    ")]),e._v(" "),a("p",[e._v("So, again, the idea is that we have all the Html, Javascript and CSS directly placed inside the\n                        one Vue file.\n                    ")]),e._v(" "),a("p",[e._v("Now you might think that this violates one of the core principles of creating web applications -\n                        the idea of separate concerns. Separation of concerns means we try not to mix all of our Html,\n                        Javascript and CSS together because that could make our application messy and difficult to\n                        follow.\n                    ")]),e._v(" "),a("p",[e._v("What I want to point out here is that even when we start making use of Vue files. Even though\n                        we've got our template, script and CSS altogether in one file we are still technically adhering\n                        to the principle of separation of concerns because inside the Vue file we have one area that is\n                        responsible for Html, one for our Javascript, and one for our CSS.\n                    ")]),e._v(" "),a("p",[e._v("So, while, yes they are all located inside of a single file they are still at least somewhat\n                        isolated inside this file.\n                    ")]),e._v(" "),a("p",[e._v("One of the big benefits to making use of Vue files is that if you ever need to change your\n                        application in some fashion it'll be a lot easier to find all the related code in one file.\n                    ")]),e._v(" "),a("p",[e._v("\n                        For example, if we wanted to make a change to the way that the search bar behaves we know that\n                        we could always open up the Vue file that contains the search bar implementation and inside\n                        there we'll find the Html, Javascript and CSS. That means that we don't have to go hunting\n                        around different directories inside of our application to find all the different aspects of code\n                        that are related to the search bar.\n                    ")]),e._v(" "),a("p",[e._v("So, it might take a little bit of time to get used to this Vue file syntax but over time I'm very\n                        confident that you'll come to enjoy it.\n                    ")]),e._v(" "),a("p",[e._v("So we've spoken a little bit about the purpose of the Vue file at this point but we have't really\n                        spoken about how this strange syntax is used to build an actual application.\n                    ")]),e._v(" "),a("p",[e._v("So in the next section we're going to examine some of the behind the scenes stuff that occurs to\n                        get the code you create inside your Vue files to run inside of your browser.\n                    ")]),e._v(" "),a("h3",[e._v("Behind the Scenes of Vue Files")]),e._v(" "),a("p",[e._v("In the last section we started talking about Vue files. Inside of a single Vue file we will\n                        locate all the code related to one distinct portion of our application.\n                    ")]),e._v(" "),a("p",[e._v("We're going to use Vue files in place of making separate Vue instances and Vue templates that are\n                        already created in the DOM.\n                    ")]),e._v(" "),a("p",[e._v("In this section I want to answer a question that you might have - which is how does our browser\n                        understand and execute the code that we place inside our Vue files.\n                    ")]),e._v(" "),a("p",[e._v("So, in fact, the code you see in a Vue file is not what actually gets sent down to your user's\n                        browser. Instead Babel and webpack work together to somehow convert all of this content into\n                        some very plain Javascript code that your browser can safely run.\n                    ")]),e._v(" "),a("p",[e._v("So in this section we will run through a quick demonstration of what this file turns into when it\n                        gets sent down to your browser.\n                    ")]),e._v(" "),a("p",[e._v("Now for this demonstration I really recommend that you just watch what I'm doing because I'm\n                        going to click through a couple of steps very quickly so you don't have to watch me laboriously\n                        go through the process in minute detail.\n                    ")]),e._v(" "),a("p",[e._v("First, go back to the browser and open up the request log like so:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(127)}}),e._v(" "),a("figcaption",[e._v("Fig 02-014")])]),e._v(" "),a("p",[e._v("Then I'm going to go over to my code editor and make one very small change to this file and then\n                        save it. Go back over to the request log and you should see a whole bunch of Javascript code\n                        that represents that change that we just made:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(128)}}),e._v(" "),a("figcaption",[e._v("Fig 02-015")])]),e._v(" "),a("p",[e._v("I'm going to copy that code into a blank file in my code editor, I'm going to find and replace\n                        newline characters in here very quickly and then I'm just going to delete a tiny little bit of\n                        code leaving me with:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('var render = function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\n        \\"div\\",\n            { attrs: { id: \\"app\\" } },\n                [\n                      _c(\\"img\\", { attrs: { src: __webpack_require__(/*! ./assets/logo.png */ \\"./src/assets/logo.png\\") } }),\\n\n                      _c(\\"HelloWorld\\", { attrs: { msg: \\"Wel to Your Vue.js App\\" } })\n                ],\n                1\n            )\n        }')]),e._v(" "),a("figcaption",[e._v("Fig 02-016")])]),e._v(" "),a("p",[e._v("So, like I said, I just wanted to very quickly go through that change sw we can see what that\n                        file gets turned into.\n                    ")]),e._v(" "),a("p",[e._v("So the render function is what our App.vue file was converted into before it got sent down to our\n                        browser. Fig 02-016 shows the actual code that is running inside of your browser that represents\n                        that Vue file.\n                    ")]),e._v(" "),a("p",[e._v("Now, before we walk through the code inside of here too deeply let's go back over to the App .vue\n                        file. Inside the template you'll notice that we are creating a "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" with an "),a("code",{staticClass:"prettyprint"},[e._v("id")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("app")]),e._v(" and then inside there we've got an "),a("code",{staticClass:"prettyprint"},[e._v("image")]),e._v(" tag with a "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" of\n                        logo.png. Then we have a "),a("code",{staticClass:"prettyprint"},[e._v(" HelloWorld")]),e._v(' tag that has a message of\n                        "Welcome to your Vue.js App":\n                    ')]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('<div id="app">\n    <img src="./assets/logo.png">\n    <HelloWorld msg="Wel to Your Vue.js App"/>\n  </div>')]),e._v(" "),a("figcaption",[e._v("Fig 02-017")])]),e._v(" "),a("p",[e._v("Now that we have a better understanding of the template let's go back over to the file we just\n                        created. Inside this file you'll notice a couple of strange variable declarations at the top:\n                    ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v("var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h")]),e._v(" "),a("figcaption",[e._v("Fig 02-018")])]),e._v(" "),a("p",[e._v("Ignore those for a second and checkout the function call to _c:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[e._v('return _c(\n        \\"div\\",\n            { attrs: { id: \\"app\\" } },\n                [\n                      _c(\\"img\\", { attrs: { src: __webpack_require__(/*! ./assets/logo.png */ \\"./src/assets/logo.png\\") } }),\\n\n                      _c(\\"HelloWorld\\", { attrs: { msg: \\"Wel to Your Vue.js App\\" } })\n                ],\n                1\n            )\n        }')]),e._v(" "),a("figcaption",[e._v("Fig 02-019")])]),e._v(" "),a("p",[e._v("Inside this we have a first argument of "),a("code",{
staticClass:"prettyprint"},[e._v("div")]),e._v(" which represents our\n                        top level "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" tag inside of our template. Then the second\n                        argument is an object that says that "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" should have an "),a("code",{staticClass:"prettyprint"},[e._v("id")]),e._v(" of "),a("code",{staticClass:"prettyprint"},[e._v("app")]),e._v(". The third\n                        argument is a list of other elements that are contained within that "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(".\n                    ")]),e._v(" "),a("p",[e._v("So the first element that exists inside that "),a("code",{staticClass:"prettyprint"},[e._v("div")]),e._v(" is an "),a("code",{staticClass:"prettyprint"},[e._v("img")]),e._v(" tag that has a "),a("code",{staticClass:"prettyprint"},[e._v("src")]),e._v(" of\n                        logo.png\n                    ")]),e._v(" "),a("p",[e._v("The second element is that "),a("code",{staticClass:"prettyprint"},[e._v("HelloWorld")]),e._v(' tag that has a message\n                        property of "Welcome to your Vue .js App".\n                    ')]),e._v(" "),a("p",[e._v("So even though this syntax still might look very strange - it might not look like any Vue code\n                        we've written or looked at so far - I hope that you can at least get the sense that yes\n                        everything inside this file is somehow converted into this other structure before it gets sent\n                        down to our browser.\n                    ")]),e._v(" "),a("p",[e._v("So inside of our browser, we're not directly running the code in App.vue. It all gets translated\n                        into this other form and then executed.\n                    ")]),e._v(" "),a("p",[e._v("So really the idea of making use of these Vue files that have the template tag, the script tag\n                        and the style tag is really just to make your life and my life as developers a little bit more\n                        easy and straightforward. That's the only purpose of it - it's just to help us organize our code\n                        inside of these Vue files.\n                    ")]),e._v(" "),a("p",[e._v("Ok, so now that we've got a better idea of what's happening inside of a Vue file, let's continue\n                        in the next section and do a little bit more of a walk through of some of the code that we have\n                        inside the project that Vue CLI setup for us.\n                    ")]),e._v(" "),a("h3",[e._v("Vue Components vs Vue Instances")]),e._v(" "),a("p",[e._v("In the last section we saw how these .vue file eventually got turned into normal Javascript code\n                        before they are displayed in the browser. Before we move onto actually coding our video-browser\n                        application there is one last important topic which I want to share with you. So in the last\n                        couple of videos I've been using the term Vue component a couple of different times and earlier\n                        on in the course, back when we were working inside of CodePen, I was using the term Vue\n                        instance.\n                    ")]),e._v(" "),a("p",[e._v("So I want to make the distinction between Vue components and Vue instances:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(129)}}),e._v(" "),a("figcaption",[e._v("Fig 02-20")])]),e._v(" "),a("p",[e._v("So you can think of a Vue component as a blueprint or a set of rules on how to create something\n                        that can be inserted into the DOM in our browser which the user can then interact with.\n                    ")]),e._v(" "),a("p",[e._v("So whenever you and I make a Vue file we are going to define exactly one component inside of it\n                        and that component is going to have this set of rules that tells you how to display some content\n                        on the screen and how a user can interact with it. So again - think of a component as being like\n                        a blueprint of sorts.\n                    ")]),e._v(" "),a("p",[e._v("On the other hand is a Vue instance which is what we were making back inside of CodePen. A Vue\n                        instance is really an instance of a Vue component and represents something that has been\n                        inserted into the DOM and is something that a user can interact with.\n                    ")]),e._v(" "),a("p",[e._v("So I know that the relation between these two things is very tenuous but if you've got an\n                        understanding or a background in object oriented programming then you can think of a Vue\n                        component as being a class and a Vue instance being like an instance of that class. That's the\n                        real relationship that's going on here.\n                    ")]),e._v(" "),a("p",[e._v("So like I said we are always going to create one Vue file for every Vue component. One of the\n                        critical steps that we're going to undergo in every Vue application that we put together is to\n                        plan out the different components that we might want to make. In general we like to look at\n                        mockups of the applications that we are going to make and do some quick brainstorming on how we\n                        might assemble a set of different components go make up that application.\n                    ")]),e._v(" "),a("p",[e._v("So with that in mind I took the liberty of taking our mockup for the video-browser application\n                        and thinking about how I might divide this up into a set of different components:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(130)}}),e._v(" "),a("figcaption",[e._v("Fig 02-021")])]),e._v(" "),a("p",[e._v("So you'll notice I've added some colored boxes on this mockup and then on every box I've attached\n                        a label. So the label that you see here is the name of a component that we're going to make to\n                        implement the video-browser application. So you and I are going to make one Vue file called\n                        SearchBar.vue. This is going to have a single Vue component that is going to contain a text\n                        input field and anytime a user types inside that we are going to somehow trigger some searching\n                        operation on the YouTube API.\n                    ")]),e._v(" "),a("p",[e._v("\n                        We will also make a single Vue file that houses a component called VideoList. This component\n                        will know how to take a list of videos and render them out onto the screen.\n                    ")]),e._v(" "),a("p",[e._v("In turn we will also have a VideoListItem which will be a single component that represents a\n                        single video.\n                    ")]),e._v(" "),a("p",[e._v("So the VideoListComponent will contain many VideoListItems inside of it because the VideoListItem\n                        represents one video and the VideoList represents the entire list. We'll also have a Vue file\n                        for the VideoDetail which is responsible for showing details about one single video and then all\n                        of these components will be assembled underneath one component that we will call the app\n                        component. This component is kind of like the central brains of our entire application and it\n                        represents the single point that kind of organizes these different components and controls how\n                        data flows between them.\n                    ")]),e._v(" "),a("p",[e._v("It's extremely common to always have a single component called "),a("code",{staticClass:"prettyprint"},[e._v("app")]),e._v(" in a Vue application and it's always going to serve that same\n                        purpose of being the brains of your app.\n                    ")]),e._v(" "),a("p",[e._v("The last think I want to show you with all these component names in mind is a quick diagram of\n                        how they are all related:\n                    ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(131)}}),e._v(" "),a("figcaption",[e._v("Fig 02-022")])]),e._v(" "),a("p",[e._v("So this is the overall structure that you and I are going to eventually head towards as we start\n                        to build our video browser application. At the very top we've got our "),a("span",{staticClass:"filename"},[e._v("main.js")]),e._v("\n                        file which is\n                        responsible for kind of like booting up your entire application and rendering it onto the\n                        screen. That "),a("span",{staticClass:"filename"},[e._v("main.js")]),e._v(" file is then going to show our app component\n                        and internally the app\n                        component will show the VideoDetail, the SearchBar, and the VideoList. In turn, the VideoList\n                        component will show a couple of copies of the VideoListItem component.\n                    ")]),e._v(" "),a("p",[e._v("So that's how all these different pieces are going to be wired together. Again we're going to\n                        make one separate Vue file for each of these different components and each of those Vue files is\n                        going to contain all the Html, CSS and Javascript related to that single component.\n                    ")]),e._v(" "),a("p",[e._v("So hopefully that should give you more of an idea of the high level architecture. If any of\n                        this component stuff still seems a bit strange this is another one of those topics where\n                        we're going to be doing the kind of breakdown of talking about components throughout the\n                        course. So this is another topic that we're just going to come back to again and again. So\n                        we'll get a lot of practice in understanding how components are really working. ")]),e._v(" "),a("p",[e._v("So with that in mind let's continue in the next section and we're going to start working on\n                        our app.")])])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",{staticClass:"nav nav-pills",staticStyle:{"margin-bottom":"10px"}},[n("router-link",{attrs:{to:"/",tag:"li","active-class":"active",exact:""}},[n("a",[e._v("Home")])]),e._v(" "),n("router-link",{attrs:{to:"/vuejs",tag:"li","active-class":"active"}},[n("a",[e._v("Vue.js")])]),e._v(" "),n("router-link",{attrs:{to:"/wpf",tag:"li","active-class":"active",exact:""}},[n("a",[e._v("WPF")])]),e._v(" "),n("router-link",{attrs:{to:"/xamarin",tag:"li","active-class":"active"}},[n("a",[e._v("Xamarin")])]),e._v(" "),n("router-link",{attrs:{to:"/sqlite",tag:"li","active-class":"active"}},[n("a",[e._v("SQLite")])]),e._v(" "),n("router-link",{attrs:{to:"/editors",tag:"li","active-class":"active"}},[n("a",[e._v("Editors")])])],1)},staticRenderFns:[]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[e._m(0),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Vue JS Essentials with Vuex and Vue Router")]),e._v(" "),n("a",{attrs:{href:"https://www.udemy.com/vue-js-course/learn/v4/t/lecture/10231064"}},[e._v("Vue JS Essentials with Vuex and Vue Router on Udemy")]),n("br"),e._v(" "),n("router-link",{attrs:{to:"/vuejsessentials-00-course-contents/","active-class":"active"}},[n("a",[e._v("Vue JS Essentials with Vuex and Vue Router")])]),e._v(" "),n("p",[e._v("Date Completed: n/a")]),e._v(" "),n("p",[e._v("Rating: n/a")]),e._v(" "),n("p",[e._v("Review not available at this time.")])],1)])])])},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Vue JS")])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("div",{staticClass:"panel-group"},[n("div",{staticClass:"panel panel-primary"},[n("div",{staticClass:"panel-heading"},[n("h2",[e._v("Beyond the Basics")])]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Introduction")]),e._v(" "),n("p")]),e._v(" "),n("div",{staticClass:"panel-body"},[n("h3",[e._v("Resource Dictionary")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Dynamic Resource")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Styles")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Exercise - Styles")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Messaging Center")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Exercise - ContactBook with MessagingCenter")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Managing Events")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Cheat Sheet")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Cheat Sheet")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Accessing Common Device Functionality")]),e._v(" "),n("p"),e._v(" "),n("h3",[e._v("Coupon to My Other Courses")]),e._v(" "),n("p")])])])])}]}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container"},[n("router-view",{attrs:{name:"header-top"}}),e._v(" "),n("router-view")],1)},staticRenderFns:[]}},function(e,t,n){e.exports={render:function(){var e=this,t=e.$createElement;e._self._c||t;return e._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"container"},[a("div",{staticClass:"panel-group"},[a("div",{staticClass:"panel panel-primary"},[a("div",{staticClass:"panel-heading"},[a("h2",[e._v("Layouts")])]),e._v(" "),a("div",{staticClass:"panel-body"},[a("h3",[e._v("Introduction")]),e._v(" "),a("p",[e._v("In Xamarin Forms we have this concept called Layout which we use for arranging visual elements on screen.\n                    In this lecture we will look at how to integrate Layouts into XamarinForms to build various user\n                    interfaces.\n                ")]),e._v(" "),a("h3",[e._v("Stack Layout in XAML")]),e._v(" "),a("p",[e._v("Add a new Xaml file (Forms ContentPage Xaml) to the project from the last lecture called StackPage. We\n                    get two new files - a Xaml file and a C# code-behind file.\n                ")]),e._v(" "),a("p",[e._v("In the App.cs class file change the MainPage to StackPage:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("MainPage = new StackPage();")])]),e._v(" "),a("figcaption",[e._v("Fig 03-001")])]),e._v(" "),a("p",[e._v("In our new StackPage we apply some padding:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Padding="0, 20, 0, 0"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-002")])]),e._v(" "),a("p",[e._v("This padding will apply to all platforms. I could use the OnPlatform element to apply this padding just\n                    to iOS.\n                ")]),e._v(" "),a("p",[e._v("Next remove the ContentPage.Content element and add three labels:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Text="Label 1" />\n<Label Text="Label 2" />\n<Label Text="Label 3" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-003")])]),e._v(" "),a("p",[e._v("If we run the application we will only see Label 3:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(644)}}),e._v(" "),a("figcaption",[e._v("Fig 03-004")])]),e._v(" "),a("p",[e._v("The reason for this is that inside ContentPage we can only have one element or child. In order to add\n                    more than one element to a page, as is the case in most real world apps, we need to use a Layout. In\n                    this lecture we are going to explore the StackLayout which is one of the simplest layouts.\n                ")]),e._v(" "),a("p",[e._v("Wrap the three Labels inside a StackLayout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout>\n    <Label Text="Label 1" />\n    <Label Text="Label 2" />\n    <Label Text="Label 3" />\n</StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-005")])]),e._v(" "),a("p",[e._v("With a StackLayout we can position multiple layouts in a line - vertically or horizontally. If we run the\n                    application now we will see all three labels:\n                ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(645)}}),e._v(" "),a("figcaption",[e._v("Fig 03-006")])]),e._v(" "),a("p",[e._v("Now let's apply a background colour to our StackLayout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout BackgroundColor="Yellow">\n    <Label Text="Label 1" />\n    <Label Text="Label 2" />\n    <Label Text="Label 3" />\n</StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-006")])]),e._v(" "),a("p",[e._v("If we run our application now we will see that the StackLayout is taking up the whole page even though\n                    there are only three items:\n                ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(646)}}),e._v(" "),a("figcaption",[e._v("Fig 03-007")])]),e._v(" "),a("p",[e._v("By default StackLayout fills it's parent/container. However if we go back to the Xaml and set the\n                    VerticalOptions property of the StackLayout to any value other than Fill (which is the default), for\n                    example Center:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout BackgroundColor="Yellow" VerticalOptions="Center">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-008")])]),e._v(" "),a("figure",[a("img",{attrs:{src:n(647)}}),e._v(" "),a("figcaption",[e._v("Fig 03-009")])]),e._v(" "),a("p",[e._v("vertically our StackLayout is in the middle of the screen and is no longer stretching to fill it's\n                    parent. It's height is now determined based on the height of it's children (in this case the three\n                    labels). Note that horizontally it is still stretching to fill it's container. We can go back to the\n                    Xaml and enter HorizontalOptions:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout BackgroundColor="Yellow" VerticalOptions="Center" HorizontalOptions="Center">\n        <Label Text="Label 1" />\n        <Label Text="Label 2" />\n        <Label Text="Label 3" />\n    </StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-009")])]),e._v(" "),a("p",[e._v("Now the StackLayout will be in the middle of the devices screen.")]),e._v(" "),a("p",[e._v("Next let's apply a background colour to each of the labels:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout BackgroundColor="Yellow" VerticalOptions="Center" HorizontalOptions="Center">\n        <Label Text="Label 1" BackgroundColor="Silver" />\n        <Label Text="Label 2" BackgroundColor="Silver" />\n        <Label Text="Label 3" BackgroundColor="Silver" />\n    </StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-010")])]),e._v(" "),a("p",[e._v("If we run the application now you will notice a small gap between each label:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(648)}}),e._v(" "),a("figcaption",[e._v("Fig 03-011")])]),e._v(" "),a("p",[e._v("We can change this using the StackLayout Spacing property:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout Spacing="20" BackgroundColor="Yellow" VerticalOptions="Center" HorizontalOptions="Center">\n        <Label Text="Label 1" BackgroundColor="Silver" />\n        <Label Text="Label 2" BackgroundColor="Silver" />\n        <Label Text="Label 3" BackgroundColor="Silver" />\n    </StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-012")])]),e._v(" "),a("p",[e._v("The default Spacing value is 6 units.")]),e._v(" "),a("p",[e._v("There is a similar property called padding:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v(' <StackLayout Padding="40"\n            Spacing="20"\n            BackgroundColor="Yellow"\n            VerticalOptions="Center"\n            HorizontalOptions="Center">\n        <Label Text="Label 1" BackgroundColor="Silver" />\n        <Label Text="Label 2" BackgroundColor="Silver" />\n        <Label Text="Label 3" BackgroundColor="Silver" />\n    </StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-013")])]),e._v(" "),a("p",[e._v("Padding is the amount of space between a Layout and it's children:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(649)}}),e._v(" "),a("figcaption",[e._v("Fig 03-014")])]),e._v(" "),a("p",[e._v("If you only wanted padding on one side (e.g. the Top) you set the Property as follows (Left, Top, Right,\n                    Bottom):\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Padding="0, 40, 0, 0"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-015")])]),e._v(" "),a("p",[e._v("Another property of StackLayout is Orientation. The default value is Vertical. If we set this property to\n                    horizontal:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout Padding="40"\n            Spacing="20"\n            VerticalOptions="Center"\n            HorizontalOptions="Center"\n            Orientation="Horizontal">\n        <Label Text="Label 1" />\n        <Label Text="Label 2" />\n        <Label Text="Label 3" />\n    </StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-016")])]),e._v(" "),a("p",[e._v("it results in a Layout like this:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(650)}}),e._v(" "),a("figcaption",[e._v("Fig 03-017")])]),e._v(" "),a("p",[e._v("We can also nest StackLayouts inside other StackLayouts. For example imagine you want to put an image or\n                    an Icon right above Label 1:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<StackLayout Padding="40"\n        Spacing="20"\n        BackgroundColor="Yellow"\n        VerticalOptions="Center"\n        HorizontalOptions="Center"\n        Orientation="Horizontal">\n    <StackLayout>\n        <Image Source="http://placehold.it/100x100" />\n        <Label Text="Label 1" />\n    </StackLayout>\n    <Label Text="Label 1" BackgroundColor="Silver" />\n    <Label Text="Label 2" BackgroundColor="Silver" />\n    <Label Text="Label 3" BackgroundColor="Silver" />\n</StackLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-018")])]),e._v(" "),a("p",[e._v("We have a main StackLayout which has a Horizontal orientation and inside that we have another StackLayout\n                    which is Vertical where the Icon and Label 1 are located.\n                ")]),e._v(" "),a("p",[e._v("So to recap, we use StackLayout to position multiple elements in a single line either horizontally or\n                    vertically. The key properties of StackLayout you need to know are:\n                ")]),e._v(" "),a("ul",[a("li",[e._v("Orientation")]),e._v(" "),a("li",[e._v("Padding")]),e._v(" "),a("li",[e._v("Spacing")]),e._v(" "),a("li",[e._v("VerticalOptions")]),e._v(" "),a("li",[e._v("HorizontalOptions")])]),e._v(" "),a("h3",[e._v("Stack Layout in Code")]),e._v(" "),a("p",[e._v("As discussed previously, we use Xaml to define user interfaces most of the time. Sometimes, if you are\n                    creating dynamic interfaces, you may have to do things in code. Let's see how to create a StackLayout in\n                    code-behind. Firsly comment out the StackLayout in Xaml. In the code-behind after the call to\n                    InitializeComponent() create a variable called layout and assign it to a new StackLayout setting it's\n                    Spacing, Padding and Orientation:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var layout = new StackLayout\n{\n    Spacing = 40,\n    Padding = new Thickness(0, 20, 0, 0),\n    Orientation = StackOrientation.Horizontal\n};")])]),e._v(" "),a("figcaption",[e._v("Fig 03-019")])]),e._v(" "),a("p",[e._v("StackLayout has a property called Children. You can add multiple elements inside children (e.g. Label or\n                    even another StackLayout):\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('layout.Children.Add(new Label { Text = "Label 1" });')])]),e._v(" "),a("figcaption",[e._v("Fig 03-020")])]),e._v(" "),a("p",[e._v("Finally, once we have initialized our layout we set the Content property to the layout object:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Content = layout;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-021")])]),e._v(" "),a("p",[e._v("If you compare the code-behind with the Xaml we created in the previous lecture we can see that creating\n                    Layouts or user interfaces in code is a little bit verbose. That's why I always prefer to do things in\n                    Xaml if possible.\n                ")]),e._v(" "),a("h3",[e._v("Stack Layout Exercise")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Grid in XAML")]),e._v(" "),a("p",[e._v("So as we discussed in the previous lecture we use StackLayout to position elements in a line - either\n                    horizontally or vertically. Another Layout we have is Grid which we use to position elements in rows and\n                    columns. Real world examples of where Grids are used include:\n                ")]),e._v(" "),a("ul",[a("li",[e._v("Keypads")]),e._v(" "),a("li",[e._v("Calculators")]),e._v(" "),a("li",[e._v("Calendars")]),e._v(" "),a("li",[e._v("Metro-stle Designs (Win8)")]),e._v(" "),a("li",[e._v("Photo albums")])]),e._v(" "),a("p",[e._v("To demonstrate create a new Content Page called GridPage and again in the App.cs file set the MainPage to\n                    GridPage. In the GridPage XAML let's add a Padding, remove the ContentPage.Content element and instead\n                    add a Grid element:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"\n             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n             x:Class="UdemyXamarinForms.GridPage"\n             Padding="0, 20, 0, 0">\n    <Grid>\n    </Grid>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-022")])]),e._v(" "),a("p",[e._v("Inside the Grid we layout four labels in two rows and two columns:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid>\n    <Label Text="Label 1" BackgroundColor="Silver" />\n    <Label Text="Label 2" BackgroundColor="Silver" />\n    <Label Text="Label 3" BackgroundColor="Silver" />\n    <Label Text="Label 4" BackgroundColor="Silver" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-023")])]),e._v(" "),a("p",[e._v("Now we need to put each label in a particular row and column in the Grid. For this we use a special\n                    syntax:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Label Grid.Row="0" Grid.Column="0" Text="Label 1" BackgroundColor="Silver" />')])]),e._v(" "),a("figcaption",[e._v("Fig 03-024")])]),e._v(" "),a("p",[e._v("It's important to note that the Column and Row properties do not belong to the Label class. To illustrate\n                    if you go to the code-behind and declare a Label:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Label l;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-025")])]),e._v(" "),a("p",[e._v("And then type l.Row or l.Column. You will see the Label doesn't have those properties. These properties\n                    are known as Attached Bindable Properties which means they are defined by the Grid class but can be set\n                    by other classes. With this technique we can put any elements inside the Grid and assign them a row and\n                    a column in the Grid.\n                ")]),e._v(" "),a("p",[e._v("Next assign the other Labels to different rows and columns and add a background color of the Grid:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid BackgroundColor="Yellow">\n    <Label Grid.Row="0" Grid.Column="0" Text="Label 1" BackgroundColor="Silver" />\n    <Label Grid.Row="0" Grid.Column="1" Text="Label 2" BackgroundColor="Silver" />\n    <Label Grid.Row="1" Grid.Column="0" Text="Label 3" BackgroundColor="Silver" />\n    <Label Grid.Row="1" Grid.Column="1" Text="Label 4" BackgroundColor="Silver" />\n</Grid>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-026")])]),e._v(" "),a("p",[e._v("You will notice that, similar to the StackLayout, the Grid expands to fill it's container - so it takes\n                    up all the space on the page. Also each of our Labels stretch to fill the containing row and column. Now\n                    you see a yellow line that separates rows and columns. This is because of the default spacing between\n                    rows and columns in the Grid. We can set the spacing using the RowSpacing and ColumnSpacing properties\n                    like this:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid BackgroundColor="Yellow"\n    RowSpacing="40"\n    ColumnSpacing="40">')])]),e._v(" "),a("figcaption",[e._v("Fig 03-027")])]),e._v(" "),a("p",[e._v("The result looks like this:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(651)}}),e._v(" "),a("figcaption",[e._v("Fig 03-028")])]),e._v(" "),a("p",[e._v("To illustrate another feature of the Grid let's add another Label to the third row. We want this Label to\n                    take up three columns. We achieve this using the ColumnSpan property:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('    <Grid BackgroundColor="Yellow"\n      RowSpacing="40"\n      ColumnSpacing="40">\n    <Label Grid.Row="0" Grid.Column="0" Text="Label 1" BackgroundColor="Silver" />\n    <Label Grid.Row="0" Grid.Column="1" Text="Label 2" BackgroundColor="Silver" />\n    <Label Grid.Row="1" Grid.Column="0" Text="Label 3" BackgroundColor="Silver" />\n    <Label Grid.Row="1" Grid.Column="1" Text="Label 4" BackgroundColor="Silver" />\n    <Label Grid.Row="3" Grid.ColumnSpan="3" Text="Columnspan" BackgroundColor="Silver" />\n</Grid>  ')])]),e._v(" "),a("figcaption",[e._v("Fig 03-029")])]),e._v(" "),a("p",[e._v("You might see this type of layout in a photo gallery app where you have a bunch of thumbnails one of\n                    which stands out because it is larger than the others.\n                ")]),e._v(" "),a("p",[e._v("Next let's add a label to the third columns that takes three rows:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid BackgroundColor="Yellow"\n      RowSpacing="40"\n      ColumnSpacing="40">\n    <Label Grid.Row="0" Grid.Column="0" Text="Label 1" BackgroundColor="Silver" />\n    <Label Grid.Row="0" Grid.Column="1" Text="Label 2" BackgroundColor="Silver" />\n    <Label Grid.Row="1" Grid.Column="0" Text="Label 3" BackgroundColor="Silver" />\n    <Label Grid.Row="1" Grid.Column="1" Text="Label 4" BackgroundColor="Silver" />\n    <Label Grid.Row="3" Grid.ColumnSpan="3" Text="Columnspan" BackgroundColor="Silver" />\n    <Label Grid.Column="2" Grid.RowSpan="3" Text="Rowspan" BackgroundColor="Silver" />\n</Grid>  ')])]),e._v(" "),a("figcaption",[e._v("Fig 03-030")])]),e._v(" "),a("p",[e._v("The result looks like this:")]),e._v(" "),a("figure",[a("img",{
attrs:{src:n(652)}}),e._v(" "),a("figcaption",[e._v("Fig 03-031")])]),e._v(" "),a("p",[e._v("Now let's talk about the size of columns and rows. Currently all columns have the same width and all rows\n                    have the same height. What if you want more control over the sizing of the columns and rows? Inside the\n                    Grid element you can set Grid.RowDefinitions (using Property Element Syntax).\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("<Grid.RowDefinitions>\n</Grid.RowDefinitions>")])]),e._v(" "),a("figcaption",[e._v("Fig 03-032")])]),e._v(" "),a("p",[e._v("RowDefinitions is a collection type, it's a complex type so we cannot set it using an attribute - that's\n                    why we set it using Property Element Syntax. Inside the collection we will add multiple RowDefinition\n                    elements. For each row we specify a Height. The Height value can be absolute or proportional:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid.RowDefinitions>\n    <RowDefinition Height="100" />\n    <RowDefinition Height="2*" />\n    <RowDefinition Height="*" />\n</Grid.RowDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-033")])]),e._v(" "),a("p",[e._v("The first row will be 100 units tall, and the remainder of the space will be divided between the second\n                    and third rows with the second row being twice the height of the third. You can use a similar technique\n                    to gain more control over the width of the columns.\n                ")]),e._v(" "),a("p",[e._v("Underneath the RowDefinitions you add a complex type called ColumnDefinitions which has multiple\n                    ColumnDefinition elements (depending on the number of columns) on which we set the Width property:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid.ColumnDefinitions>\n    <ColumnDefinition Width="100" />\n    <ColumnDefinition Width="2*" />\n    <ColumnDefinition Width="*" />\n</Grid.ColumnDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-034")])]),e._v(" "),a("p",[e._v("We set the first column to be 100 units wide and the second column to be twice the width of the the third\n                    one. The result looks like this:\n                ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(653)}}),e._v(" "),a("figcaption",[e._v("Fig 03-035")])]),e._v(" "),a("p",[e._v("Before we move on look closely at the first column - there is some padding on the right side of the\n                    Label:\n                ")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(654)}}),e._v(" "),a("figcaption",[e._v("Fig 03-036")])]),e._v(" "),a("p",[e._v("And that's because the absolute value of 100 units that we specified is slightly too big for a short\n                    label. Setting the Width of the first column to Auto:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<Grid.ColumnDefinitions>\n    <ColumnDefinition Width="Auto" />\n    <ColumnDefinition Width="2*" />\n    <ColumnDefinition Width="*" />\n</Grid.ColumnDefinitions>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-037")])]),e._v(" "),a("p",[e._v("This means the column will be wide enough to fit all it's children. Look at the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(655)}}),e._v(" "),a("figcaption",[e._v("Fig 03-038")])]),e._v(" "),a("p",[e._v("The padding on the right side of the label is gone but the column is still wide enough to fit all it's\n                    children.\n                ")]),e._v(" "),a("p",[e._v("So to recap, with Grid we can layout multiple elements in rows and columns. If you want all your rows and\n                    columns to be the same size you can simply add your elements to the Grid and assign them to a row and\n                    column in the Grid.\n                ")]),e._v(" "),a("p",[e._v("If you want to have more control over the sizing of rows and columns you can use Property Element Syntax\n                    to specify RowDefinitions and ColumnDefinitions.\n                ")]),e._v(" "),a("h3",[e._v("Grid in Code")]),e._v(" "),a("p",[e._v("To create a Grid in code we first create a Grid object specifying Row and Column Spacing:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var grid = new Grid\n{\n    RowSpacing = 20,\n    ColumnSpacing = 40\n};")])]),e._v(" "),a("figcaption",[e._v("Fig 03-039")])]),e._v(" "),a("p",[e._v("To add elements to this Grid we use the Children property:")]),e._v(" "),a("figure",[a("pre",[a("code",{staticClass:"csharp"},[e._v('grid.Children.Add(new Label { Text = "Label 1" }, 0, 0);')])]),e._v(" "),a("figcaption",[e._v("Fig 03-040")])]),e._v(" "),a("p",[e._v("The first argument in the Add method is View which is the base class for all visual elements like Labels,\n                    Images etc. In this example we add a Label. The second argument is left which represents how far from\n                    the left of the Grid this element should be - in other words what column? In this example we put it in\n                    the first column. The last argument is top - how far from the top of the Grid or which row should this\n                    element be in.\n                ")]),e._v(" "),a("p",[e._v("Now if you want to set the RowSpan or ColumnSpan for an element you have to use the static method of the\n                    Grid class. To demonstrate let's extract the Label into a separate variable, add it to the Children\n                    property and finally pass it to the SetRowSpan method:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Grid.SetRowSpan(label, 2);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-041")])]),e._v(" "),a("p",[e._v("We have another static method on the Grid class called SetColumnSpan:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Grid.SetRowSpan(label, 2);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-042")])]),e._v(" "),a("p",[e._v("Again we supply our element here and then specify the number of columns we want it to take.")]),e._v(" "),a("p",[e._v("Interestingly there a couple more methods on the Grid class - Grid.SetRow and Grid.SetColumn. Now most of\n                    the time we don't use these two methods because often we specify them whilst adding the element in the\n                    Children collection. Internally the Add method will call the static SetRow and SetColumn messages on the\n                    Grid class.\n                ")]),e._v(" "),a("p",[e._v("Also in the Xaml we use Grid.Row or Grid.Column properties to specify the row or column for an element.\n                    We refer to these properties as Attached Bindable Properties because they don't belong to elements on\n                    which they are defined. They are attached to the element.\n                ")]),e._v(" "),a("p",[e._v("When the Xaml parser parses our file it will actually call one or more of these static methods on the\n                    Grid class:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("Grid.SetRowSpan(label, 2);\nGrid.SetColumnSpan(label, 2);\nGrid.SetRow(label, 0);\nGrid.SetColumn(label, 0);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-043")])]),e._v(" "),a("p",[e._v("Finally, if you want to work with row or column definitions you would use the following syntax:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("grid.RowDefinitions.Add(new RowDefinition\n{\n    Height = new GridLength(100, GridUnitType.Absolute)\n});\n\ngrid.RowDefinitions.Add(new RowDefinition\n{\n    Height = new GridLength(2, GridUnitType.Star)\n});\n\ngrid.RowDefinitions.Add(new RowDefinition\n{\n    Height = new GridLength(1, GridUnitType.Star)\n});")])]),e._v(" "),a("figcaption",[e._v("Fig 03-044")])]),e._v(" "),a("p",[e._v("The GridUnitType enumeration contains another member - Auto which means the height of this row should be\n                    calculated based on it's children.\n                ")]),e._v(" "),a("p",[e._v("Again from this example we can see that defining user interfaces in Xaml is a lot simpler and cleaner\n                    than in code-behind. In code-behind we have to create objects, we have to write more code etc.\n                ")]),e._v(" "),a("p",[e._v("However there are still times when it makes sense to use code-behind to generate user interfaces. For\n                    example, imagine you want to render a Calendar. You cannot hard code the days and months of a Calendar\n                    using Xaml - that would be very tedious. It would be better to use code-behind with a couple of loops to\n                    dynamically generate elements and put them in a Grid.\n                ")]),e._v(" "),a("h3",[e._v("Grid Exercise")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Absolute Layout in XAML")]),e._v(" "),a("p",[e._v("There are times when you want to have more control over the positioning of certain objects on the screen.\n                    For example you might want to anchor them to the edge of the screen or you may want to overlay multiple\n                    objects on top of each other. For example look at this page:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(656)}}),e._v(" "),a("figcaption",[e._v("Fig 03-045")])]),e._v(" "),a("p",[e._v("We have an Aqua colour BoxView that is filling the whole page. Potentially this could be a background\n                    image but for simplicity I am using a BoxView. Now on top of this BoxView we have a white BoxView which\n                    could be an image, logo, title etc.")]),e._v(" "),a("p",[e._v("In terms of position on the X Axis this BoxView is in the middle of the screen. On the Y Axis it is about\n                    10% from the top of the screen. Also we have a grey button that is at the very bottom of the screen. Now\n                    the interesting thing here is first of all we are overlaying elements on top of each other. Both the\n                    grey\n                    button and the white BoxView are on top of the Aqua BoxView. You will always get this layout with this\n                    positioning irrespective of the size of the device running this app. Now if I change the orientation of\n                    my device we still get the same layout:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(657)}}),e._v(" "),a("figcaption",[e._v("Fig 03-046")])]),e._v(" "),a("p",[e._v("Let's see how we can implement this design using absolute layout. Add a new ContentPage called\n                    AbsolutePage. Again, in the App.cs file change the MainPage to AbsolutePage.xaml.")]),e._v(" "),a("p",[e._v("In our Xaml file add a Padding to the ContentPage as before:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('Padding="0, 20, 0, 0"')])]),e._v(" "),a("figcaption",[e._v("Fig 03-047")])]),e._v(" "),a("p",[e._v("Next, delete the ContentPage.Content element. Start with an AbsoluteLayout element adding a\n                    BackgroundColor of Yellow:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n    <ContentPage\n            Padding="0, 20, 0, 0"\n            xmlns="http://xamarin.com/schemas/2014/forms"\n            xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n            x:Class="UdemyXamarinForms.AbsolutePage">\n    <AbsoluteLayout BackgroundColor="Yellow">\n\n    </AbsoluteLayout>\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-048")])]),e._v(" "),a("p",[e._v("Now if we run the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(658)}}),e._v(" "),a("figcaption",[e._v("Fig 03-049")])]),e._v(" "),a("p",[e._v("We can see that similar to StackLayout and Grid our AbsoluteLayout stretches to fill it's container which\n                    in this case is the Page.")]),e._v(" "),a("p",[e._v("Now remove the BackgroundColor and add a BoxView with a Color of Aqua.")]),e._v(" "),a("p",[e._v("Now similar to Grids we two Attached Bindable Properties that we use to set the position and size of\n                    each element inside AbsoluteLayout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n    <BoxView Color="Aqua"\n             AbsoluteLayout.LayoutBounds="0, 0, 100, 100">\n    </BoxView>\n</AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-050")])]),e._v(" "),a("p",[e._v("LayoutBounds is a rectangle that determines the layout and size of this element. It accepts four numbers\n                    that represent X, Y, Width and Height and these numbers can be absolute or proportional values (by\n                    default\n                    they are all absolute)")]),e._v(" "),a("p",[e._v("If we run the application this is what we get:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(659)}}),e._v(" "),a("figcaption",[e._v("Fig 03-051")])]),e._v(" "),a("p",[e._v("What if we want the BoxView to fill the container but we don't know what the Width and Height of the\n                    device running this app is? It means we cannot use absolute positioning here - that is when we use\n                    proportional values. Proportional values are expressed as doubles between 0 and 1.")]),e._v(" "),a("p",[e._v("So we can modify the LayoutBounds attached properties as follows:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n    <BoxView Color="Aqua"\n             AbsoluteLayout.LayoutBounds="0, 0, 1, 1">\n    </BoxView>\n</AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-052")])]),e._v(" "),a("p",[e._v("Now we need to indicate to the Xamarin forms that these are proportional values because as I said by\n                    default all these numbers are absolute values. We do this by using the other Attached Bindable Property\n                    - LayoutFlags. LayoutFlags is an enumeration with these members:")]),e._v(" "),a("ul",[a("li",[e._v("None (default)")]),e._v(" "),a("li",[e._v("All")]),e._v(" "),a("li",[e._v("WidthProportional")]),e._v(" "),a("li",[e._v("HeightProportional")]),e._v(" "),a("li",[e._v("XProportional")]),e._v(" "),a("li",[e._v("YProportional")]),e._v(" "),a("li",[e._v("PositionProportional")]),e._v(" "),a("li",[e._v("SizeProportional")])]),e._v(" "),a("p",[e._v("So in the LayoutBounds property I want all the numbers to be proportional so I set LayoutFlags to\n                    all:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n        <BoxView Color="Aqua"\n                 AbsoluteLayout.LayoutBounds="0, 0, 1, 1" AbsoluteLayout.LayoutFlags="All">\n        </BoxView>\n    </AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-053")])]),e._v(" "),a("p",[e._v("Now if we run the application this is what we get:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(660)}}),e._v(" "),a("figcaption",[e._v("Fig 03-054")])]),e._v(" "),a("p",[e._v("Now let's put the white BoxView on top of this Aqua BoxView:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n        <BoxView Color="Aqua"\n                 AbsoluteLayout.LayoutBounds="0, 0, 1, 1" AbsoluteLayout.LayoutFlags="All">\n        </BoxView>\n        <BoxView Color="White"\n                 AbsoluteLayout.LayoutBounds="0.5, 0.1, 100, 100" AbsoluteLayout.LayoutFlags="PositionProportional"/>\n    </AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-055")])]),e._v(" "),a("p",[e._v("This BoxView is in the middle of the X Axis and on the Y Axis is about 10% from the top of the page. To\n                    achieve this we used proportional values for the position. However for the size we used absolute values.\n                    This is why in the LayoutFlags we specify that only the position is proportional.")]),e._v(" "),a("p",[e._v("Let's preview the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(661)}}),e._v(" "),a("figcaption",[e._v("Fig 03-056")])]),e._v(" "),a("p",[e._v("So our new BoxView is 100x100 units and the Y Axis its about 10% from the top of the page and on the X\n                    Axis it's right in the middle. Finally let's add a Button on the bottom of the screen:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<AbsoluteLayout>\n    <BoxView Color="Aqua"\n             AbsoluteLayout.LayoutBounds="0, 0, 1, 1" AbsoluteLayout.LayoutFlags="All">\n    </BoxView>\n    <BoxView Color="White"\n             AbsoluteLayout.LayoutBounds="0.5, 0.1, 100, 100" AbsoluteLayout.LayoutFlags="PositionProportional"/>\n    <Button Text="Get Started" BackgroundColor="Silver" TextColor="White"\n            AbsoluteLayout.LayoutBounds="0, 1, 1, 50"\n            AbsoluteLayout.LayoutFlags="PositionProportional, WidthProportional"/>\n</AbsoluteLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-057")])]),e._v(" "),a("p",[e._v("For the position of the Button again we use proportional values. So for X we use 0 and for Y we use 1.\n                    So this element will be positioned right at the bottom of the screen. For the width, again we will use a\n                    proportional value of 1 because we want the Button to stretch to fill the entire page on the X Axis. For\n                    the\n                    height however we will use an absolute value of 50. ")]),e._v(" "),a("p",[e._v("In the case of the Button the first three numbers specified in the LayoutBounds Bindable Attached\n                    Properties (X, Y and Width) are proportional values but the Height is an absolute value. To describe\n                    this in the LayoutFlags Bindable Attached Property we combine two flags: PositionProportional and\n                    WidthProportional.")]),e._v(" "),a("p",[e._v("Let's run the application:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(662)}}),e._v(" "),a("figcaption",[e._v("Fig 03-058")])]),e._v(" "),a("p",[e._v("So absolute layout is useful when you want to have more control over position and size of elements on\n                    screen - especially when you want to anchor them to the edges of the screen or when you want to overlay\n                    multiple elements on top of each other.")]),e._v(" "),a("h3",[e._v("Absolute Layout in Code")]),e._v(" "),a("p",[e._v("To use absolute layout in code firstly comment out the AbsoluteLayout in XAML. Add the following code to\n                    the code-behind file, in the constructor after the call to InitializeComponent():")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var layout = new AbsoluteLayout();\nContent = layout;\n\nvar aquaBox = new BoxView { Color = Color.Aqua };\nlayout.Children.Add(\n    aquaBox,\n    new Rectangle(0, 0, 1 ,1),\n    AbsoluteLayoutFlags.All);\n\n// Not like the video which results in blank page!\nAbsoluteLayout.SetLayoutBounds(aquaBox, new Rectangle(0, 0, .5, 1));\nAbsoluteLayout.SetLayoutFlags(aquaBox, AbsoluteLayoutFlags.All);")])]),e._v(" "),a("figcaption",[e._v("Fig 03-059")])]),e._v(" "),a("p",[e._v("Don't forget to set the Content of this page to the layout you created.")]),e._v(" "),a("p",[e._v("First of all we create a BoxView called aquaBox, then we add that BoxView to our Children collection.\n                    The Add method has a few different overloads, the one we are going to use is shown here:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(663)}}),e._v(" "),a("figcaption",[e._v("Fig 03-060")])]),e._v(" "),a("p",[e._v("It takes a View (which means an element), and a Rectangle(X, Y, Width, Height) for specifying the\n                    position and size, and\n                    finally a flag to determine which values are proportional. So we specify a Rectangle and use the same\n                    values as in the previous lecture: 0, 0, 1, 1. All these values are proportional so as the third\n                    argument\n                    we use AbsoluteLayoutFlags.All")]),e._v(" "),a("p",[e._v("Now similar to what we learned about using Grids in code this Add method internally calls one or more\n                    Static methods on the AbsoluteLayout class.")]),e._v(" "),a("p",[e._v("So we have AbsoluteLayout.SetLayoutBounds which takes an element like aquaBox and a Rectangle. This\n                    method is useful if you want to change the size of an element later on - after initialization.")]),e._v(" "),a("p",[e._v("We also have another static method - AbsoluteLayout.SetLayoutFlags(). So if you want to change any of the\n                    flags; again we pass our element and then the second argument is the flag we want to use (we will keep\n                    it set to All although you could change it here).")]),e._v(" "),a("p",[a("strong",[e._v("Note")]),e._v(" - the code in the video results in a blank page when run with the SetLayoutBounds\n                    and SetLayoutFlags properties set as shown in the video - that's why I changed the values in the code\n                    example above.")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Absolute Layout Exercise")]),e._v(" "),a("p"),e._v(" "),a("h3",[e._v("Relative Layout in XAML")]),e._v(" "),a("p",[e._v("The final Layout we have in XamarinForms is RelativeLayout. In a manner similar to AbsoluteLayout with\n                    RelativeLayout we can overlay elements over the top of each other. However RelativeLayout is more powerful\n                    than AbsoluteLayout because you can apply constraints to the position or size of an element relative to\n                    another element. This gives us more control over the position and size of elements. Here is an example:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(664)}}),e._v(" "),a("figcaption",[e._v("Fig 03-061")])]),e._v(" "),a("p",[e._v("Again we have an Aqua BoxView which is occupying about a third of the page. We have another BoxView\n                    which is always 20 units below the Aqua BoxView. We cannot do this with AbsoluteLayout because here we are\n                    constraining the position of the Silver BoxView based on the Aqua BoxView - so it is always 20 units\n                    below the Aqua BoxView.\n                ")]),e._v(" "),a("p",[e._v("A real world example of this is a users profile in a Social Networking app. Each profile has what we call\n                    a banner or background image on the top and then somewhere around here:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(665)}}),e._v(" "),a("figcaption",[e._v("Fig 03-062")])]),e._v(" "),a("p",[e._v("we have the users photo. We wont implement the user photo in this lecture for simplicity - it will be\n                    a task for you to complete in a later exercise.")]),e._v(" "),a("p",[e._v("So let's see how we can use RelativeLayout to build a user interface like this. Add a new Content Page\n                    called RelativePage, remove the ContentPage.Content element and add some padding to the ContentPage element.\n                    Also in the App.cs file set this new page as the MainPage in the application:\n                ")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<?xml version="1.0" encoding="utf-8" ?>\n<ContentPage\n        Padding="0, 20, 0, 0"\n        xmlns="http://xamarin.com/schemas/2014/forms"\n        xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n        x:Class="UdemyXamarinForms.RelativePage">\n\n</ContentPage>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-063")])]),e._v(" "),a("p",[e._v("Add a RelativeLayout element with the following Xaml:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v('<RelativeLayout>\n    <BoxView Color="Aqua" x:Name="banner"\n             RelativeLayout.WidthConstraint="{ConstraintExpression\n            Type=RelativeToParent,\n            Property=Width,\n            Factor=1}"\n\n             RelativeLayout.HeightConstraint="{ConstraintExpression\n            Type=RelativeToParent,\n            Property=Height,\n            Factor=0.3}"/>\n\n    <BoxView Color="Silver"\n             RelativeLayout.YConstraint="{ConstraintExpression\n            Type=RelativeToView,\n            ElementName=banner,\n            Property=Height,\n            Factor=1,\n            Constant=20}"/>\n</RelativeLayout>')])]),e._v(" "),a("figcaption",[e._v("Fig 03-064")])]),e._v(" "),a("p",[e._v("Inside the RelativeLayout we add a BoxView and set the Color to Aqua. We\n                    want the BoxView to occupy about a third of the page - for this we can use one or more Attached Bindable\n                    Properties:")]),e._v(" "),a("ul",[a("li",[e._v("XConstraint")]),e._v(" "),a("li",[e._v("YConstraint")]),e._v(" "),a("li",[e._v("WidthConstraint")]),e._v(" "),a("li",[e._v("HeightConstraint")]),e._v(" "),a("li",[e._v("BoundsConstraint")])]),e._v(" "),a("p",[e._v("We will start with the WidthConstraint. We want the width of this aqua BoxView to be exactly the same width as it's container which, in this\n                    case, is the RelativeLayout element. By the way, as with other Layouts, Relative layout automatically\n                    stretches to fill the entire page.")]),e._v(" "),a("p",[e._v("As the value of WidthConstraint we use a constraint expression which is a XAML markup extension (the other\n                    markup extension we used previously was Binding). XAML markup extensions are always between curly braces.\n                    Here we need to set a few properties. Firstly Type which can have two values:")]),e._v(" "),a("ul",[a("li",[e._v("RelativeToParent")]),e._v(" "),a("li",[e._v("RelativeToView")])]),e._v(" "),a("p",[e._v("For the Aqua BoxView we will use RelativeToParent. The property that we want the ConstraintExpression to\n                    use from the Parent is Width. Next we apply a Factor of 1 which basically means - the width of this\n                    Aqua BoxView will be the Width of its parent multiplied by 1.\n                ")]),e._v(" "),a("p",[e._v("Next we want the Aqua BoxView to be about a third of the height of it's parent. So we use the\n                    RelativeLayout again but this time with the HeightConstraint. In the Constraint expression we specify a\n                    Type of RelativeToParent again, the Property we are interested in this time is Height and for the Factor we\n                    specify 0.3. This means the height of this Aqua BoxView will be the height of it's parent multiplied by 0.3.\n                ")]),e._v(" "),a("p",[e._v("Let's look at the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(666)}}),e._v(" "),a("figcaption",[e._v("Fig 03-065")])]),e._v(" "),a("p",[e._v("There is nothing particularly special about this layout. We could build the exact same thing using\n                    absolute layout. So let me show you where RelativeLayout gets powerful. Let's say we want to put a Silver\n                    BoxView 20 units below this Aqua BoxView. After specifying the BoxView element and a Color of Silver add\n                    an attached bindable property RelativeLayout.YConstraint. This time for the ConstraintExpression we specify\n                    a Type of RelativeToView because this time I want to apply the YConstraint based on the Aqua BoxView. This\n                    is something we cannot achieve with absolute layout - we cannot set the position or size of an element based\n                    on another element. We need to identify which View we are referring to. We do this by giving the Aqua BoxView\n                    a name (banner). Back in the Silver BoxView we will use another property called ElementName which we set\n                    to banner. Next we specify the property of the banner we are interested in - in this case it's Height - we\n                    want to get the Height and add 20 units to it to set the Y coordinate of the Silver BoxView. Next we set the\n                    Factor to 1. Finally we set the Constant property to 20 units. This means the Y coordinate of the Silver\n                    BoxView will be the height of the Banner times 1 plus 20. The Constant property can also be set to a\n                    negative value")]),e._v(" "),a("p",[e._v("Now let's look at the result:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(667)}}),e._v(" "),a("figcaption",[e._v("Fig 03-066")])]),e._v(" "),a("p",[e._v("So you see our Silver BoxView is 20 units below the Aqua BoxView. So with RelativeLayout we can set the\n                    position or size of an element based on another element. This is something we cannot achieve using\n                    AbsoluteLayout")]),e._v(" "),a("h3",[e._v("Relative Layout in Code")]),e._v(" "),a("p",[e._v("Firstly, comment out the XAML for the RelativeLayout in the RelativePage.xaml file. Next, in the\n                    code-behind after the call to InitializeComponent() in the constructor add the following code:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var layout = new RelativeLayout();\nContent = layout;\n\nvar aquaBox = new BoxView { Color = Color.Aqua };\nlayout.Children.Add(aquaBox,\n    widthConstraint: Constraint.RelativeToParent(parent => parent.Width),\n    heightConstraint: Constraint.RelativeToParent(parent => parent.Height * 0.3));\n\nvar silverBox = new BoxView { Color = Color.Silver };\nlayout.Children.Add(silverBox,\n     yConstraint: Constraint.RelativeToView(aquaBox, (RelativeLayout, element) => element.Height + 20));")])]),e._v(" "),a("figcaption",[e._v("Fig 03-067")])]),e._v(" "),a("p",[e._v("First we create a layout of type RelativeLayout and set the Content of this page to the layout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var layout = new RelativeLayout();\nContent = layout;")])]),e._v(" "),a("figcaption",[e._v("Fig 03-068")])]),e._v(" "),a("p",[e._v("Next we add a new BoxView called aquaBox with a Color of Aqua:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var aquaBox = new BoxView { Color = Color.Aqua };")])]),e._v(" "),a("figcaption",[e._v("Fig 03-069")])]),e._v(" "),a("p",[e._v("Next add the aquaBox BoxView to our layout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("layout.Children.Add(aquaBox,\n    widthConstraint: Constraint.RelativeToParent(parent => parent.Width),\n    heightConstraint: Constraint.RelativeToParent(parent => parent.Height * 0.3));")])]),e._v(" "),a("figcaption",[e._v("Fig 03-070")])]),e._v(" "),a("p",[e._v("The Add method has several overloads. The one that we use most often has five parameters with the last\n                    four being optional because they are set to null by default. We have used the widthConstraint and\n                    heightConstraint optional parameters. To keep our code clean we can use named arguments in C#. We need\n                    to supply a Constraint object. We use the Constraint class which has a few factory methods for creating\n                    a Constraint object:")]),e._v(" "),a("ul",[a("li",[e._v("FromExpression")]),e._v(" "),a("li",[e._v("RelativeToParent")]),e._v(" "),a("li",[e._v("RelativeToView")])]),e._v(" "),a("p",[e._v("The one we use here is RelativeToParent. The metadata for this method indicates this method gets a\n                    Func or RelativeLayout and double (basically whenever you see Func you can use a lambda expression):")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(668)}}),e._v(" "),a("figcaption",[e._v("Fig 03-071")])]),e._v(" "),a("p",[e._v("The lambda expression takes an object which is a RelativeLayout and returns a double. I am going to\n                    call this parameter parent:")]),e._v(" "),a("figure",[a("pre",{
staticClass:"prettyprint"},[a("code",[e._v("parent =>")])]),e._v(" "),a("figcaption",[e._v("Fig 03-072")])]),e._v(" "),a("p",[e._v("I want the width of the aquaBox BoxView to be the same as it's parent:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("parent.Width")])]),e._v(" "),a("figcaption",[e._v("Fig 03-073")])]),e._v(" "),a("p",[e._v("Now let's apply the heightConstraint:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("heightConstraint: Constraint.RelativeToParent(parent => parent.Height * 0.3));")])]),e._v(" "),a("figcaption",[e._v("Fig 03-074")])]),e._v(" "),a("p",[e._v("This lambda expression takes a parent and returns the height of the parent multiplied by 0.3:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("parent => parent.Height * 0.3)")])]),e._v(" "),a("figcaption",[e._v("Fig 03-075")])]),e._v(" "),a("p",[e._v("Finally, let's add our Silver BoxView:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("var silverBox = new BoxView { Color = Color.Silver };")])]),e._v(" "),a("figcaption",[e._v("Fig 03-076")])]),e._v(" "),a("p",[e._v("Next add the silverBox BoxView to our layout:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("layout.Children.Add(silverBox,")])]),e._v(" "),a("figcaption",[e._v("Fig 03-077")])]),e._v(" "),a("p",[e._v("This time we apply a yConstraint:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("yConstraint: Constraint.RelativeToView(aquaBox, (RelativeLayout, element) => element.Height + 20));")])]),e._v(" "),a("figcaption",[e._v("Fig 03-078")])]),e._v(" "),a("p",[e._v("This time round we use RelativeToView and supply aquaBox as the View/Element to use. If we look at the\n                    intellisense:")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(669)}}),e._v(" "),a("figcaption",[e._v("Fig 03-079")])]),e._v(" "),a("p",[e._v("Again you can see Func which means we are expected to write an inline function which takes two arguments\n                    - a RelativeLayout and a View and then returns a double.")]),e._v(" "),a("p",[e._v("So again we supply a lambda expression with two arguments - the first is RelativeLayout and the second one\n                    is the target View (in this case the aquaBox BoxView) which will call element:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("(RelativeLayout, element)")])]),e._v(" "),a("figcaption",[e._v("Fig 03-080")])]),e._v(" "),a("p",[e._v("This goes to element.Height + 20:")]),e._v(" "),a("figure",[a("pre",{staticClass:"prettyprint"},[a("code",[e._v("(RelativeLayout, element) => element.Height + 20")])]),e._v(" "),a("figcaption",[e._v("Fig 03-081")])]),e._v(" "),a("p",[e._v("If you run the application you should see Layout identical to the one we achieved using Xaml.")]),e._v(" "),a("h3",[e._v("Relative Layout Exercise")])])])])])}]}},function(e,t,n){var a=n(52);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(53);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(54);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(55);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(56);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(57);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(58);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(59);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(60);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(61);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(62);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(63);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(64);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(65);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(66);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(67);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(68);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(69);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(70);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(71);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(72);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(73);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(74);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(75);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(76);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(77);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(78);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(79);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(80);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(81);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(82);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(83);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(84);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(85);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(86);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(87);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(88);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(89);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(90);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(91);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(92);"string"==typeof a&&(a=[[e.i,a,""]]);n(1)(a,{});a.locals&&(e.exports=a.locals)},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var a=n(9),o=n.n(a),i=n(8),s=n(7),r=n.n(s),l=n(6);o.a.use(i.a);var c=new i.a({routes:l.a,mode:"history",scrollBehavior:function(e,t,n){return n?n:e.hash?{selector:e.hash}:{x:0,y:0}}});c.beforeEach(function(e,t,n){console.log("global beforeEach"),n()}),new o.a({el:"#app",router:c,render:function(e){return e(r.a)}})}]);